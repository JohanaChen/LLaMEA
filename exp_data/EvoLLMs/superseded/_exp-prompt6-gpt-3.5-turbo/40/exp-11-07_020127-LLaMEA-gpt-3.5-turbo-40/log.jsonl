{"id": "71749896-8eee-43d9-88f7-b500b3ff095b", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            # PSO initialization\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n\n            # Simulated Annealing parameters\n            initial_temperature = 100.0\n            final_temperature = 0.1\n            alpha = 0.99\n\n            temperature = initial_temperature\n\n            iter_count = 0\n            while iter_count < self.max_iter and func.evaluations < self.budget:\n                for i in range(self.num_particles):\n                    fitness = func(particles[i])\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness = fitness\n                        global_best_position = particles[i]\n\n                    # PSO update\n                    r1, r2 = np.random.rand(), np.random.rand()\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n                iter_count += 1\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to explore the search space efficiently and escape local optima.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 53, in __call__\n  File \"<string>\", line 28, in pso_sa_optimization\nAttributeError: 'ioh.iohcpp.problem.Sphere' object has no attribute 'evaluations'\n.", "error": "AttributeError(\"'ioh.iohcpp.problem.Sphere' object has no attribute 'evaluations'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 53, in __call__\n  File \"<string>\", line 28, in pso_sa_optimization\nAttributeError: 'ioh.iohcpp.problem.Sphere' object has no attribute 'evaluations'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "a1456605-0558-45b4-ba8d-c14e290145a2", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            # PSO initialization\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n\n            # Simulated Annealing parameters\n            initial_temperature = 100.0\n            final_temperature = 0.1\n            alpha = 0.99\n\n            temperature = initial_temperature\n\n            iter_count = 0\n            while iter_count < self.max_iter and func.evaluations < self.budget:\n                for i in range(self.num_particles):\n                    fitness = func(particles[i])\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness = fitness\n                        global_best_position = particles[i]\n\n                    # PSO update\n                    r1, r2 = np.random.rand(), np.random.rand()\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n                iter_count += 1\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to explore the search space efficiently and escape local optima.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71749896-8eee-43d9-88f7-b500b3ff095b", "metadata": {}, "mutation_prompt": null}
{"id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    fitness = func(particles[i])\n\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness, global_best_position = fitness, particles[i]\n\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved", "description": "Improved efficiency by consolidating particle evaluations, optimizing random number generation, and simplifying the update process.", "configspace": "", "generation": 2, "fitness": 0.1738742871568807, "feedback": "The algorithm PSO_SA_Hybrid_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "71749896-8eee-43d9-88f7-b500b3ff095b", "metadata": {"aucs": [0.23456719318014607, 0.20714894022895192, 0.23127595787905397, 0.21264495167740105, 0.2099566950107865, 0.24652719513306287, 0.21619793360598138, 0.21054030036049964, 0.19896796525107763, 0.10720454671058177, 0.03391611661924421, 0.1716983720470786, 0.049908015779298154, 0.059505201204991476, 0.051514491562049125, 0.15440632465178128, 0.010324464373797526, 0.22692033972261494, 0.05492315979422602, 0.056835565383472786, 0.058988171096141406, 0.062263270178265384, 0.06270344918043735, 0.07845146366196076, 0.053231927481445784, 0.06071429360011393, 0.0812451604261838, 0.05882203029754496, 0.06431395253798056, 0.08520084187312527, 0.05768826609026678, 0.06122215677713161, 0.055554135196955734, 0.057599414420552386, 0.05371480902215531, 0.047639103963850515, 0.9712136514959141, 0.9858395434092678, 0.9444176707960797, 0.9759375529572851, 0.9463860211266514, 0.9539972635847536, 0.9800706732317546, 0.9881559426504033, 0.961574585325746, 0.14414555344983093, 0.19330171658987683, 0.18773411170242305, 0.17325695642642658, 0.18597799289327344, 0.2170003312116805, 0.19225815229456145, 0.21828951553539278, 0.1934778840935788, 0.17612197414606057, 0.18495252353011116, 0.2284599405959089, 0.16853812845260252, 0.1531898718573217, 0.18974620301581013, 0.2393635252332399, 0.1735745245928232, 0.16712216612824837, 0.12334580969265085, 0.1171937488074033, 0.13704730467638948, 0.12355410032563996, 0.1316228942659745, 0.13100950499992536, 0.13404594223962107, 0.11399658164642801, 0.1665030378664687, 0.2062131557788357, 0.014486568975865755, 0.1256211894291751, 0.141850688606318, 0.16152328494948343, 0.1303140816531635, 0.18630300591505722, 0.09947087084578665, 0.1549525361031281, 0.04765149209560893, 0.1913539056742518, 9.999999999998899e-05, 0.037484037612812604, 0.10113290847251177, 0.0777999240855739, 0.1343807843616629, 0.021985944602258334, 0.05198936964020251, 0.17936971687556214, 0.15840440923178445, 0.1673461454308912, 0.14008031578481206, 0.07820896626841534, 0.1994749001403786, 0.13552286754368126, 0.1406540852218594, 0.15013901951558195, 0.16218612010018496, 0.03194888200493584, 0.029284579267378263, 0.059904014543557205, 0.06529772172255266, 0.11976931422326487, 0.08207151297079796, 0.07447210974352425, 0.06107944500603879, 0.0842669739619547, 0.217459793359286, 0.15768929116153108, 0.06404591033099927, 0.0799194061138564, 0.15419493125198624, 0.1005390356446163, 0.07995644007725966, 0.09372864196919928, 0.2121656830724099, 0.26614365969416487, 0.22938871470724498, 0.22802052038831966, 0.22584494102153319, 0.21623270545413953, 0.2138675900582615, 0.22525597512113504, 0.22867518890157168, 0.07306679381136705, 0.06454171099720385, 0.06948894076556478, 0.07741939436040812, 0.06790158622378417, 0.06882528090955675, 0.0501386010810998, 0.06326096156444272, 0.06761109372445517, 0.1955576644184669, 0.14363050494620233, 0.1404115349805528, 0.18678284856516392, 0.13014148754991128, 0.1572163499786977, 0.12590571807687334, 0.12533563644004275, 0.13412045922694038, 0.1784494186509764, 0.18514606350145169, 0.18520158051976077, 0.18312746583051487, 0.17929241295888698, 0.17789216854108036, 0.1848903407396184, 0.19602621251850294, 0.185429550105911, 0.13185558594027513, 0.12815949876541455, 0.12628344020953042, 0.14911670096891882, 0.12405762809475618, 0.13217109092302048, 0.13052299386227073, 0.13063136649963403, 0.12584816523371067, 0.18425345724256015, 0.16421827829300872, 0.18864580368517847, 0.1903111848582597, 0.17653926099689032, 0.15343019190359386, 0.15996716723270743, 0.18393671013012147, 0.16177337361414612, 0.1834559978655057, 0.18929708915369203, 0.17673287712063068, 0.19042452200797444, 0.17164683002115166, 0.16681838307562558, 0.19098425183623113, 0.16593292326782028, 0.16723107502520218, 0.16514688955631407, 0.23173862766589004, 0.1350716977015154, 0.1583071713569827, 0.17447354058395126, 0.22762021462478377, 0.16509369983059585, 0.149484559475192, 0.16378441734821647, 0.13193625497004247, 0.18400597866701895, 0.2014076550236933, 0.22868372617793986, 0.27453304494208974, 0.15049251439526634, 0.16422757879375605, 0.15659236717675085, 0.18405348339082528, 0.17397511264294574, 0.17546215166389645, 0.16783867430736787, 0.17569111889131706, 0.2033033375213268, 0.17144377756213325, 0.16746043912476727, 0.1793532373282355, 0.18938156978573317, 0.06005713885553032, 0.07503005983128896, 0.05448707822632626, 0.06132054318245195, 0.061481608105286245, 0.05379117587213644, 0.07188488181858921, 0.05369166372075229, 0.05949905343595108]}, "mutation_prompt": null}
{"id": "33b9b64c-9fa9-4624-a591-c72848594dc2", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness_values = np.apply_along_axis(func, 1, particles)\n\n                update_indices = fitness_values < best_fitness\n                best_fitness[update_indices] = fitness_values[update_indices]\n                best_positions[update_indices] = particles[update_indices]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                r_values = np.random.rand(2, self.num_particles)\n                velocities = 0.5 * velocities + 2.0 * r_values[0] * (best_positions - particles) + 2.0 * r_values[1] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                new_positions = particles + np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_fitness_values = np.apply_along_axis(func, 1, new_positions)\n\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                acceptance_mask = new_fitness_values < fitness_values + np.random.rand(self.num_particles) * accept_probabilities\n\n                particles = np.where(acceptance_mask[:, None], new_positions, particles)\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Improved_PSO_SA_Hybrid", "description": "Improved efficiency by restructuring the particle update process, reducing redundant calculations, and optimizing the overall computation flow.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (30,) (30,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (30,) (30,5) ')", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "c9fa3652-2392-40e2-a56d-04179bdf654c", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    fitness = func(particles[i])\n\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness, global_best_position = fitness, particles[i]\n\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved", "description": "Improved efficiency by consolidating particle evaluations, optimizing random number generation, and simplifying the update process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {"aucs": [0.23456719318014607, 0.20714894022895192, 0.23127595787905397, 0.21264495167740105, 0.2099566950107865, 0.24652719513306287, 0.21619793360598138, 0.21054030036049964, 0.19896796525107763, 0.10720454671058177, 0.03391611661924421, 0.1716983720470786, 0.049908015779298154, 0.059505201204991476, 0.051514491562049125, 0.15440632465178128, 0.010324464373797526, 0.22692033972261494, 0.05492315979422602, 0.056835565383472786, 0.058988171096141406, 0.062263270178265384, 0.06270344918043735, 0.07845146366196076, 0.053231927481445784, 0.06071429360011393, 0.0812451604261838, 0.05882203029754496, 0.06431395253798056, 0.08520084187312527, 0.05768826609026678, 0.06122215677713161, 0.055554135196955734, 0.057599414420552386, 0.05371480902215531, 0.047639103963850515, 0.9712136514959141, 0.9858395434092678, 0.9444176707960797, 0.9759375529572851, 0.9463860211266514, 0.9539972635847536, 0.9800706732317546, 0.9881559426504033, 0.961574585325746, 0.14414555344983093, 0.19330171658987683, 0.18773411170242305, 0.17325695642642658, 0.18597799289327344, 0.2170003312116805, 0.19225815229456145, 0.21828951553539278, 0.1934778840935788, 0.17612197414606057, 0.18495252353011116, 0.2284599405959089, 0.16853812845260252, 0.1531898718573217, 0.18974620301581013, 0.2393635252332399, 0.1735745245928232, 0.16712216612824837, 0.12334580969265085, 0.1171937488074033, 0.13704730467638948, 0.12355410032563996, 0.1316228942659745, 0.13100950499992536, 0.13404594223962107, 0.11399658164642801, 0.1665030378664687, 0.2062131557788357, 0.014486568975865755, 0.1256211894291751, 0.141850688606318, 0.16152328494948343, 0.1303140816531635, 0.18630300591505722, 0.09947087084578665, 0.1549525361031281, 0.04765149209560893, 0.1913539056742518, 9.999999999998899e-05, 0.037484037612812604, 0.10113290847251177, 0.0777999240855739, 0.1343807843616629, 0.021985944602258334, 0.05198936964020251, 0.17936971687556214, 0.15840440923178445, 0.1673461454308912, 0.14008031578481206, 0.07820896626841534, 0.1994749001403786, 0.13552286754368126, 0.1406540852218594, 0.15013901951558195, 0.16218612010018496, 0.03194888200493584, 0.029284579267378263, 0.059904014543557205, 0.06529772172255266, 0.11976931422326487, 0.08207151297079796, 0.07447210974352425, 0.06107944500603879, 0.0842669739619547, 0.217459793359286, 0.15768929116153108, 0.06404591033099927, 0.0799194061138564, 0.15419493125198624, 0.1005390356446163, 0.07995644007725966, 0.09372864196919928, 0.2121656830724099, 0.26614365969416487, 0.22938871470724498, 0.22802052038831966, 0.22584494102153319, 0.21623270545413953, 0.2138675900582615, 0.22525597512113504, 0.22867518890157168, 0.07306679381136705, 0.06454171099720385, 0.06948894076556478, 0.07741939436040812, 0.06790158622378417, 0.06882528090955675, 0.0501386010810998, 0.06326096156444272, 0.06761109372445517, 0.1955576644184669, 0.14363050494620233, 0.1404115349805528, 0.18678284856516392, 0.13014148754991128, 0.1572163499786977, 0.12590571807687334, 0.12533563644004275, 0.13412045922694038, 0.1784494186509764, 0.18514606350145169, 0.18520158051976077, 0.18312746583051487, 0.17929241295888698, 0.17789216854108036, 0.1848903407396184, 0.19602621251850294, 0.185429550105911, 0.13185558594027513, 0.12815949876541455, 0.12628344020953042, 0.14911670096891882, 0.12405762809475618, 0.13217109092302048, 0.13052299386227073, 0.13063136649963403, 0.12584816523371067, 0.18425345724256015, 0.16421827829300872, 0.18864580368517847, 0.1903111848582597, 0.17653926099689032, 0.15343019190359386, 0.15996716723270743, 0.18393671013012147, 0.16177337361414612, 0.1834559978655057, 0.18929708915369203, 0.17673287712063068, 0.19042452200797444, 0.17164683002115166, 0.16681838307562558, 0.19098425183623113, 0.16593292326782028, 0.16723107502520218, 0.16514688955631407, 0.23173862766589004, 0.1350716977015154, 0.1583071713569827, 0.17447354058395126, 0.22762021462478377, 0.16509369983059585, 0.149484559475192, 0.16378441734821647, 0.13193625497004247, 0.18400597866701895, 0.2014076550236933, 0.22868372617793986, 0.27453304494208974, 0.15049251439526634, 0.16422757879375605, 0.15659236717675085, 0.18405348339082528, 0.17397511264294574, 0.17546215166389645, 0.16783867430736787, 0.17569111889131706, 0.2033033375213268, 0.17144377756213325, 0.16746043912476727, 0.1793532373282355, 0.18938156978573317, 0.06005713885553032, 0.07503005983128896, 0.05448707822632626, 0.06132054318245195, 0.061481608105286245, 0.05379117587213644, 0.07188488181858921, 0.05369166372075229, 0.05949905343595108]}, "mutation_prompt": null}
{"id": "4d729774-e83b-4248-bc13-9c6b63448fbf", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass Parallel_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            def update_particle(i):\n                nonlocal global_best_fitness, global_best_position\n                fitness = func(particles[i])\n\n                if fitness < best_fitness[i]:\n                    best_fitness[i] = fitness\n                    best_positions[i] = particles[i]\n\n                if fitness < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness, particles[i]\n\n                r1, r2 = np.random.rand(2)\n                velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                new_fitness = func(new_position)\n\n                if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                    particles[i] = new_position\n\n            with ThreadPoolExecutor() as executor:\n                for _ in range(self.max_iter):\n                    executor.map(update_particle, range(self.num_particles))\n                    temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Parallel_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by parallelizing particle updates and optimizing velocity calculations, reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'global_best_position' is not defined\").", "error": "NameError(\"name 'global_best_position' is not defined\")", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "64031baf-b8f1-4874-8e6c-4282d1414f89", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_fitness = np.full(self.num_particles, np.inf)\n        global_best_position = np.zeros(self.dim)\n        global_best_fitness = np.inf\n        temperature = 100.0\n        alpha, final_temperature = 0.99, 0.1\n\n        for _ in range(self.max_iter):\n            fitness = func(particles)\n            update_particles = fitness < best_fitness\n\n            best_positions[update_particles] = particles[update_particles]\n            best_fitness[update_particles] = fitness[update_particles]\n\n            update_global_best = fitness < global_best_fitness\n            global_best_position = np.where(update_global_best, particles, global_best_position)\n            global_best_fitness = np.where(update_global_best, fitness, global_best_fitness)\n\n            r1, r2 = np.random.rand(2, self.num_particles, 1)\n            velocities = 0.5 * velocities + 2.0 * r1 * (best_positions - particles) + 2.0 * r2 * (global_best_position - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n\n            new_positions = particles + np.random.normal(0, 1, (self.num_particles, self.dim))\n            new_fitness = func(new_positions)\n\n            update_particles = new_fitness < fitness\n            fitness = np.where(update_particles, new_fitness, fitness)\n            particles = np.where(update_particles[..., np.newaxis], new_positions, particles)\n\n            prob_accept = np.random.rand(self.num_particles) < np.exp((fitness - new_fitness) / temperature)\n            particles = np.where(prob_accept[..., np.newaxis], new_positions, particles)\n\n            temperature = np.maximum(alpha * temperature, final_temperature)\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid", "description": "Enhanced efficiency by utilizing vectorized operations, simplifying calculations, and reducing redundant checks.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "3fe9cbf7-7b2f-44e9-8b38-f9c02f0df225", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def enhanced_pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness_values = func(particles)\n                update_indices = fitness_values < best_fitness\n                \n                best_fitness[update_indices] = fitness_values[update_indices]\n                best_positions[update_indices] = particles[update_indices]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                r = np.random.rand(2, self.num_particles)\n                velocities = 0.5 * velocities + 2.0 * r[0] * (best_positions - particles) + 2.0 * r[1] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                new_positions = particles + np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_fitness_values = func(new_positions)\n\n                improvement_indices = new_fitness_values < fitness_values\n                particles[improvement_indices] = new_positions[improvement_indices]\n\n                acceptance_prob = np.exp((fitness_values - new_fitness_values) / temperature)\n                random_probs = np.random.rand(self.num_particles)\n                acceptance_indices = random_probs < acceptance_prob\n                particles[acceptance_indices] = new_positions[acceptance_indices]\n\n                temperature = np.maximum(alpha * temperature, final_temperature)\n\n        enhanced_pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid", "description": "Improved efficiency by simplifying velocity update calculation and reducing redundant operations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "66ff3f0c-1c0c-4b29-b3d2-7859e96b7988", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved_Efficient:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness_values = np.apply_along_axis(func, 1, particles)\n\n                update_indices = fitness_values < best_fitness\n                best_fitness[update_indices] = fitness_values[update_indices]\n                best_positions[update_indices] = particles[update_indices]\n\n                global_update_index = np.argmin(fitness_values)\n                if fitness_values[global_update_index] < global_best_fitness:\n                    global_best_fitness = fitness_values[global_update_index]\n                    global_best_position = particles[global_update_index]\n\n                r_values = np.random.rand(self.num_particles, 2)\n                velocities = 0.5 * velocities + 2.0 * r_values[:, 0][:, None] * (best_positions - particles) + 2.0 * r_values[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                new_positions = particles + np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_fitness_values = np.apply_along_axis(func, 1, new_positions)\n\n                update_condition = new_fitness_values <= fitness_values | np.random.rand(self.num_particles) < np.exp((fitness_values - new_fitness_values) / temperature)\n                particles[update_condition] = new_positions[update_condition]\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved_Efficient", "description": "Improved efficiency by simplifying particle updates, reducing redundant calculations, and optimizing random number generation further.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\").", "error": "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "343343ad-6b0d-4f36-b564-cdda568c6fab", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness_values = func(particles)\n                update_indices = np.where(fitness_values < best_fitness)\n                best_fitness[update_indices] = fitness_values[update_indices]\n                best_positions[update_indices] = particles[update_indices]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness = fitness_values[global_best_index]\n                    global_best_position = particles[global_best_index]\n\n                r_values = np.random.rand(self.num_particles, 2)\n                velocities = 0.5 * velocities + 2.0 * r_values[:, 0:1] * (best_positions - particles) + 2.0 * r_values[:, 1:2] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                new_positions = particles + np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_fitness_values = func(new_positions)\n\n                update_mask = new_fitness_values < fitness_values\n                update_mask |= np.random.rand(self.num_particles) < np.exp((fitness_values - new_fitness_values) / temperature)\n                particles[update_mask] = new_positions[update_mask]\n\n                temperature = np.maximum(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved_Performance", "description": "Improved PSO algorithm efficiency by optimizing loop structures and simplifying velocity updates for faster convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('list indices must be integers or slices, not tuple').", "error": "TypeError('list indices must be integers or slices, not tuple')", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "89939677-569d-4406-a0bd-bee59f45365f", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    fitness = func(particles[i])\n\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness, global_best_position = fitness, particles[i]\n\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved", "description": "Improved efficiency by consolidating particle evaluations, optimizing random number generation, and simplifying the update process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {"aucs": [0.23456719318014607, 0.20714894022895192, 0.23127595787905397, 0.21264495167740105, 0.2099566950107865, 0.24652719513306287, 0.21619793360598138, 0.21054030036049964, 0.19896796525107763, 0.10720454671058177, 0.03391611661924421, 0.1716983720470786, 0.049908015779298154, 0.059505201204991476, 0.051514491562049125, 0.15440632465178128, 0.010324464373797526, 0.22692033972261494, 0.05492315979422602, 0.056835565383472786, 0.058988171096141406, 0.062263270178265384, 0.06270344918043735, 0.07845146366196076, 0.053231927481445784, 0.06071429360011393, 0.0812451604261838, 0.05882203029754496, 0.06431395253798056, 0.08520084187312527, 0.05768826609026678, 0.06122215677713161, 0.055554135196955734, 0.057599414420552386, 0.05371480902215531, 0.047639103963850515, 0.9712136514959141, 0.9858395434092678, 0.9444176707960797, 0.9759375529572851, 0.9463860211266514, 0.9539972635847536, 0.9800706732317546, 0.9881559426504033, 0.961574585325746, 0.14414555344983093, 0.19330171658987683, 0.18773411170242305, 0.17325695642642658, 0.18597799289327344, 0.2170003312116805, 0.19225815229456145, 0.21828951553539278, 0.1934778840935788, 0.17612197414606057, 0.18495252353011116, 0.2284599405959089, 0.16853812845260252, 0.1531898718573217, 0.18974620301581013, 0.2393635252332399, 0.1735745245928232, 0.16712216612824837, 0.12334580969265085, 0.1171937488074033, 0.13704730467638948, 0.12355410032563996, 0.1316228942659745, 0.13100950499992536, 0.13404594223962107, 0.11399658164642801, 0.1665030378664687, 0.2062131557788357, 0.014486568975865755, 0.1256211894291751, 0.141850688606318, 0.16152328494948343, 0.1303140816531635, 0.18630300591505722, 0.09947087084578665, 0.1549525361031281, 0.04765149209560893, 0.1913539056742518, 9.999999999998899e-05, 0.037484037612812604, 0.10113290847251177, 0.0777999240855739, 0.1343807843616629, 0.021985944602258334, 0.05198936964020251, 0.17936971687556214, 0.15840440923178445, 0.1673461454308912, 0.14008031578481206, 0.07820896626841534, 0.1994749001403786, 0.13552286754368126, 0.1406540852218594, 0.15013901951558195, 0.16218612010018496, 0.03194888200493584, 0.029284579267378263, 0.059904014543557205, 0.06529772172255266, 0.11976931422326487, 0.08207151297079796, 0.07447210974352425, 0.06107944500603879, 0.0842669739619547, 0.217459793359286, 0.15768929116153108, 0.06404591033099927, 0.0799194061138564, 0.15419493125198624, 0.1005390356446163, 0.07995644007725966, 0.09372864196919928, 0.2121656830724099, 0.26614365969416487, 0.22938871470724498, 0.22802052038831966, 0.22584494102153319, 0.21623270545413953, 0.2138675900582615, 0.22525597512113504, 0.22867518890157168, 0.07306679381136705, 0.06454171099720385, 0.06948894076556478, 0.07741939436040812, 0.06790158622378417, 0.06882528090955675, 0.0501386010810998, 0.06326096156444272, 0.06761109372445517, 0.1955576644184669, 0.14363050494620233, 0.1404115349805528, 0.18678284856516392, 0.13014148754991128, 0.1572163499786977, 0.12590571807687334, 0.12533563644004275, 0.13412045922694038, 0.1784494186509764, 0.18514606350145169, 0.18520158051976077, 0.18312746583051487, 0.17929241295888698, 0.17789216854108036, 0.1848903407396184, 0.19602621251850294, 0.185429550105911, 0.13185558594027513, 0.12815949876541455, 0.12628344020953042, 0.14911670096891882, 0.12405762809475618, 0.13217109092302048, 0.13052299386227073, 0.13063136649963403, 0.12584816523371067, 0.18425345724256015, 0.16421827829300872, 0.18864580368517847, 0.1903111848582597, 0.17653926099689032, 0.15343019190359386, 0.15996716723270743, 0.18393671013012147, 0.16177337361414612, 0.1834559978655057, 0.18929708915369203, 0.17673287712063068, 0.19042452200797444, 0.17164683002115166, 0.16681838307562558, 0.19098425183623113, 0.16593292326782028, 0.16723107502520218, 0.16514688955631407, 0.23173862766589004, 0.1350716977015154, 0.1583071713569827, 0.17447354058395126, 0.22762021462478377, 0.16509369983059585, 0.149484559475192, 0.16378441734821647, 0.13193625497004247, 0.18400597866701895, 0.2014076550236933, 0.22868372617793986, 0.27453304494208974, 0.15049251439526634, 0.16422757879375605, 0.15659236717675085, 0.18405348339082528, 0.17397511264294574, 0.17546215166389645, 0.16783867430736787, 0.17569111889131706, 0.2033033375213268, 0.17144377756213325, 0.16746043912476727, 0.1793532373282355, 0.18938156978573317, 0.06005713885553032, 0.07503005983128896, 0.05448707822632626, 0.06132054318245195, 0.061481608105286245, 0.05379117587213644, 0.07188488181858921, 0.05369166372075229, 0.05949905343595108]}, "mutation_prompt": null}
{"id": "00e4f387-67d2-43f0-8fb2-d6640afd3e01", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness_values = func(particles)\n                update_mask = fitness_values < best_fitness\n\n                best_fitness[update_mask] = fitness_values[update_mask]\n                best_positions[update_mask] = particles[update_mask]\n\n                best_indices = np.argmin(fitness_values)\n                if fitness_values[best_indices] < global_best_fitness:\n                    global_best_fitness = fitness_values[best_indices]\n                    global_best_position = particles[best_indices]\n\n                r1_r2 = np.random.rand(2, self.num_particles, self.dim)\n                velocities = 0.5 * velocities + 2.0 * r1_r2[0] * (best_positions - particles) + 2.0 * r1_r2[1] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                new_positions = particles + np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_fitness_values = func(new_positions)\n\n                improvement_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                random_values = np.random.rand(self.num_particles)\n\n                update_positions_mask = improvement_mask | (random_values < accept_probabilities)\n                particles[update_positions_mask] = new_positions[update_positions_mask]\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved_Performance", "description": "Enhancing efficiency by simplifying velocity and position updates for faster convergence.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "d5f9f4e3-f95a-40c0-8514-d4e288e47fd2", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    fitness = func(particles[i])\n\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness, global_best_position = fitness, particles[i]\n\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved", "description": "Improved efficiency by consolidating particle evaluations, optimizing random number generation, and simplifying the update process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {"aucs": [0.23456719318014607, 0.20714894022895192, 0.23127595787905397, 0.21264495167740105, 0.2099566950107865, 0.24652719513306287, 0.21619793360598138, 0.21054030036049964, 0.19896796525107763, 0.10720454671058177, 0.03391611661924421, 0.1716983720470786, 0.049908015779298154, 0.059505201204991476, 0.051514491562049125, 0.15440632465178128, 0.010324464373797526, 0.22692033972261494, 0.05492315979422602, 0.056835565383472786, 0.058988171096141406, 0.062263270178265384, 0.06270344918043735, 0.07845146366196076, 0.053231927481445784, 0.06071429360011393, 0.0812451604261838, 0.05882203029754496, 0.06431395253798056, 0.08520084187312527, 0.05768826609026678, 0.06122215677713161, 0.055554135196955734, 0.057599414420552386, 0.05371480902215531, 0.047639103963850515, 0.9712136514959141, 0.9858395434092678, 0.9444176707960797, 0.9759375529572851, 0.9463860211266514, 0.9539972635847536, 0.9800706732317546, 0.9881559426504033, 0.961574585325746, 0.14414555344983093, 0.19330171658987683, 0.18773411170242305, 0.17325695642642658, 0.18597799289327344, 0.2170003312116805, 0.19225815229456145, 0.21828951553539278, 0.1934778840935788, 0.17612197414606057, 0.18495252353011116, 0.2284599405959089, 0.16853812845260252, 0.1531898718573217, 0.18974620301581013, 0.2393635252332399, 0.1735745245928232, 0.16712216612824837, 0.12334580969265085, 0.1171937488074033, 0.13704730467638948, 0.12355410032563996, 0.1316228942659745, 0.13100950499992536, 0.13404594223962107, 0.11399658164642801, 0.1665030378664687, 0.2062131557788357, 0.014486568975865755, 0.1256211894291751, 0.141850688606318, 0.16152328494948343, 0.1303140816531635, 0.18630300591505722, 0.09947087084578665, 0.1549525361031281, 0.04765149209560893, 0.1913539056742518, 9.999999999998899e-05, 0.037484037612812604, 0.10113290847251177, 0.0777999240855739, 0.1343807843616629, 0.021985944602258334, 0.05198936964020251, 0.17936971687556214, 0.15840440923178445, 0.1673461454308912, 0.14008031578481206, 0.07820896626841534, 0.1994749001403786, 0.13552286754368126, 0.1406540852218594, 0.15013901951558195, 0.16218612010018496, 0.03194888200493584, 0.029284579267378263, 0.059904014543557205, 0.06529772172255266, 0.11976931422326487, 0.08207151297079796, 0.07447210974352425, 0.06107944500603879, 0.0842669739619547, 0.217459793359286, 0.15768929116153108, 0.06404591033099927, 0.0799194061138564, 0.15419493125198624, 0.1005390356446163, 0.07995644007725966, 0.09372864196919928, 0.2121656830724099, 0.26614365969416487, 0.22938871470724498, 0.22802052038831966, 0.22584494102153319, 0.21623270545413953, 0.2138675900582615, 0.22525597512113504, 0.22867518890157168, 0.07306679381136705, 0.06454171099720385, 0.06948894076556478, 0.07741939436040812, 0.06790158622378417, 0.06882528090955675, 0.0501386010810998, 0.06326096156444272, 0.06761109372445517, 0.1955576644184669, 0.14363050494620233, 0.1404115349805528, 0.18678284856516392, 0.13014148754991128, 0.1572163499786977, 0.12590571807687334, 0.12533563644004275, 0.13412045922694038, 0.1784494186509764, 0.18514606350145169, 0.18520158051976077, 0.18312746583051487, 0.17929241295888698, 0.17789216854108036, 0.1848903407396184, 0.19602621251850294, 0.185429550105911, 0.13185558594027513, 0.12815949876541455, 0.12628344020953042, 0.14911670096891882, 0.12405762809475618, 0.13217109092302048, 0.13052299386227073, 0.13063136649963403, 0.12584816523371067, 0.18425345724256015, 0.16421827829300872, 0.18864580368517847, 0.1903111848582597, 0.17653926099689032, 0.15343019190359386, 0.15996716723270743, 0.18393671013012147, 0.16177337361414612, 0.1834559978655057, 0.18929708915369203, 0.17673287712063068, 0.19042452200797444, 0.17164683002115166, 0.16681838307562558, 0.19098425183623113, 0.16593292326782028, 0.16723107502520218, 0.16514688955631407, 0.23173862766589004, 0.1350716977015154, 0.1583071713569827, 0.17447354058395126, 0.22762021462478377, 0.16509369983059585, 0.149484559475192, 0.16378441734821647, 0.13193625497004247, 0.18400597866701895, 0.2014076550236933, 0.22868372617793986, 0.27453304494208974, 0.15049251439526634, 0.16422757879375605, 0.15659236717675085, 0.18405348339082528, 0.17397511264294574, 0.17546215166389645, 0.16783867430736787, 0.17569111889131706, 0.2033033375213268, 0.17144377756213325, 0.16746043912476727, 0.1793532373282355, 0.18938156978573317, 0.06005713885553032, 0.07503005983128896, 0.05448707822632626, 0.06132054318245195, 0.061481608105286245, 0.05379117587213644, 0.07188488181858921, 0.05369166372075229, 0.05949905343595108]}, "mutation_prompt": null}
{"id": "eee02c6f-03a9-4eba-a123-09c2aaa1e266", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass Enhanced_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness_values = Parallel(n_jobs=-1)(delayed(func)(particle) for particle in particles)\n\n                for i, fitness in enumerate(fitness_values):\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness, global_best_position = fitness, particles[i]\n\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid", "description": "Enhanced efficiency by parallelizing particle evaluations, optimizing velocity updates, and reducing redundant fitness evaluations.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "bfd0dda7-0d9b-4437-aa9f-edc7a2b37ba8", "solution": "import numpy as np\n\nclass Parallel_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness = np.array([func(p) for p in particles])\n                update_mask = fitness < best_fitness\n\n                best_fitness[update_mask] = fitness[update_mask]\n                best_positions[update_mask] = particles[update_mask]\n\n                global_best_index = np.argmin(fitness)\n                if fitness[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness[global_best_index], particles[global_best_index]\n\n                r_values = np.random.rand(2, self.num_particles)\n                velocities = 0.5 * velocities + 2.0 * r_values[0] * (best_positions - particles) + 2.0 * r_values[1] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                new_positions = particles + np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_fitness = np.array([func(p) for p in new_positions])\n\n                update_mask = new_fitness < fitness\n                update_probabilities = np.random.rand(self.num_particles)\n                accept_mask = update_mask | (update_probabilities < np.exp((fitness - new_fitness) / temperature))\n\n                particles[accept_mask] = new_positions[accept_mask]\n\n                temperature = np.maximum(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Parallel_PSO_SA_Hybrid", "description": "Enhanced performance by parallelizing particle updates, utilizing vectorized operations, and optimizing temperature update calculations.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (30,) (30,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (30,) (30,5) ')", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {}, "mutation_prompt": null}
{"id": "03c89a11-05cc-40e6-84a1-3db86ded423f", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    fitness = func(particles[i])\n\n                    if fitness < best_fitness[i]:\n                        best_fitness[i] = fitness\n                        best_positions[i] = particles[i]\n\n                    if fitness < global_best_fitness:\n                        global_best_fitness, global_best_position = fitness, particles[i]\n\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (best_positions[i] - particles[i]) + 2.0 * r2 * (global_best_position - particles[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_fitness = func(new_position)\n\n                    if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / temperature):\n                        particles[i] = new_position\n\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "PSO_SA_Hybrid_Improved", "description": "Improved efficiency by consolidating particle evaluations, optimizing random number generation, and simplifying the update process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {"aucs": [0.23456719318014607, 0.20714894022895192, 0.23127595787905397, 0.21264495167740105, 0.2099566950107865, 0.24652719513306287, 0.21619793360598138, 0.21054030036049964, 0.19896796525107763, 0.10720454671058177, 0.03391611661924421, 0.1716983720470786, 0.049908015779298154, 0.059505201204991476, 0.051514491562049125, 0.15440632465178128, 0.010324464373797526, 0.22692033972261494, 0.05492315979422602, 0.056835565383472786, 0.058988171096141406, 0.062263270178265384, 0.06270344918043735, 0.07845146366196076, 0.053231927481445784, 0.06071429360011393, 0.0812451604261838, 0.05882203029754496, 0.06431395253798056, 0.08520084187312527, 0.05768826609026678, 0.06122215677713161, 0.055554135196955734, 0.057599414420552386, 0.05371480902215531, 0.047639103963850515, 0.9712136514959141, 0.9858395434092678, 0.9444176707960797, 0.9759375529572851, 0.9463860211266514, 0.9539972635847536, 0.9800706732317546, 0.9881559426504033, 0.961574585325746, 0.14414555344983093, 0.19330171658987683, 0.18773411170242305, 0.17325695642642658, 0.18597799289327344, 0.2170003312116805, 0.19225815229456145, 0.21828951553539278, 0.1934778840935788, 0.17612197414606057, 0.18495252353011116, 0.2284599405959089, 0.16853812845260252, 0.1531898718573217, 0.18974620301581013, 0.2393635252332399, 0.1735745245928232, 0.16712216612824837, 0.12334580969265085, 0.1171937488074033, 0.13704730467638948, 0.12355410032563996, 0.1316228942659745, 0.13100950499992536, 0.13404594223962107, 0.11399658164642801, 0.1665030378664687, 0.2062131557788357, 0.014486568975865755, 0.1256211894291751, 0.141850688606318, 0.16152328494948343, 0.1303140816531635, 0.18630300591505722, 0.09947087084578665, 0.1549525361031281, 0.04765149209560893, 0.1913539056742518, 9.999999999998899e-05, 0.037484037612812604, 0.10113290847251177, 0.0777999240855739, 0.1343807843616629, 0.021985944602258334, 0.05198936964020251, 0.17936971687556214, 0.15840440923178445, 0.1673461454308912, 0.14008031578481206, 0.07820896626841534, 0.1994749001403786, 0.13552286754368126, 0.1406540852218594, 0.15013901951558195, 0.16218612010018496, 0.03194888200493584, 0.029284579267378263, 0.059904014543557205, 0.06529772172255266, 0.11976931422326487, 0.08207151297079796, 0.07447210974352425, 0.06107944500603879, 0.0842669739619547, 0.217459793359286, 0.15768929116153108, 0.06404591033099927, 0.0799194061138564, 0.15419493125198624, 0.1005390356446163, 0.07995644007725966, 0.09372864196919928, 0.2121656830724099, 0.26614365969416487, 0.22938871470724498, 0.22802052038831966, 0.22584494102153319, 0.21623270545413953, 0.2138675900582615, 0.22525597512113504, 0.22867518890157168, 0.07306679381136705, 0.06454171099720385, 0.06948894076556478, 0.07741939436040812, 0.06790158622378417, 0.06882528090955675, 0.0501386010810998, 0.06326096156444272, 0.06761109372445517, 0.1955576644184669, 0.14363050494620233, 0.1404115349805528, 0.18678284856516392, 0.13014148754991128, 0.1572163499786977, 0.12590571807687334, 0.12533563644004275, 0.13412045922694038, 0.1784494186509764, 0.18514606350145169, 0.18520158051976077, 0.18312746583051487, 0.17929241295888698, 0.17789216854108036, 0.1848903407396184, 0.19602621251850294, 0.185429550105911, 0.13185558594027513, 0.12815949876541455, 0.12628344020953042, 0.14911670096891882, 0.12405762809475618, 0.13217109092302048, 0.13052299386227073, 0.13063136649963403, 0.12584816523371067, 0.18425345724256015, 0.16421827829300872, 0.18864580368517847, 0.1903111848582597, 0.17653926099689032, 0.15343019190359386, 0.15996716723270743, 0.18393671013012147, 0.16177337361414612, 0.1834559978655057, 0.18929708915369203, 0.17673287712063068, 0.19042452200797444, 0.17164683002115166, 0.16681838307562558, 0.19098425183623113, 0.16593292326782028, 0.16723107502520218, 0.16514688955631407, 0.23173862766589004, 0.1350716977015154, 0.1583071713569827, 0.17447354058395126, 0.22762021462478377, 0.16509369983059585, 0.149484559475192, 0.16378441734821647, 0.13193625497004247, 0.18400597866701895, 0.2014076550236933, 0.22868372617793986, 0.27453304494208974, 0.15049251439526634, 0.16422757879375605, 0.15659236717675085, 0.18405348339082528, 0.17397511264294574, 0.17546215166389645, 0.16783867430736787, 0.17569111889131706, 0.2033033375213268, 0.17144377756213325, 0.16746043912476727, 0.1793532373282355, 0.18938156978573317, 0.06005713885553032, 0.07503005983128896, 0.05448707822632626, 0.06132054318245195, 0.061481608105286245, 0.05379117587213644, 0.07188488181858921, 0.05369166372075229, 0.05949905343595108]}, "mutation_prompt": null}
{"id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 16, "fitness": 0.1965225195328996, "feedback": "The algorithm Modified_PSO_SA_Hybrid_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "01980ddb-0b4d-4fde-a1b9-6234f66b7e9d", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "481ac4f8-c7a8-43a6-8ef7-a79a41d463fa", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "78607781-87f7-4929-8229-03d94b5c6579", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "3b80d456-28d3-4700-bc42-b705a52ef09b", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved_2:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_rand = cognitive_param * random_numbers[:, 0][:, None]\n                social_rand = social_param * random_numbers[:, 1][:, None]\n\n                velocities = inertia_weight * velocities + cognitive_rand * (best_positions - particles) + social_rand * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n        \n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved_2", "description": "Improved efficiency by optimizing the velocity update calculation and simplifying the acceptance probability calculation to reduce computational overhead.", "configspace": "", "generation": 19, "fitness": 0.1965225195328996, "feedback": "The algorithm Modified_PSO_SA_Hybrid_Improved_2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "36dc277e-fd84-47c0-8bf7-80fb1a07d7df", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "1b309636-1fef-4f2f-9e87-3e3562225a01", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                best_mask = fitness_values < best_fitness\n                best_fitness[best_mask], best_positions[best_mask] = fitness_values[best_mask], particles[best_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_vals = cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles)\n                social_vals = social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                velocities = inertia_weight * velocities + cognitive_vals + social_vals\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Optimization algorithm with simplified velocity update and enhanced efficiency by reducing redundant operations and streamlining calculations.", "configspace": "", "generation": 21, "fitness": 0.1965225195328996, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "8d3367e3-dd65-4b83-b4b7-e2380f7c45a8", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "465d781f-956c-4046-a0e9-dc825c644ba2", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_updates = cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles)\n                social_updates = social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                \n                velocities = inertia_weight * velocities + cognitive_updates + social_updates\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Improved_PSO_SA_Hybrid", "description": "Improved algorithm by optimizing the update rules for particle velocities and positions to reduce redundant operations and streamline the optimization process.", "configspace": "", "generation": 23, "fitness": 0.1965225195328996, "feedback": "The algorithm Improved_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "5a68ce83-ffa9-4fe6-a6df-3db83f81e63b", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "595374b8-a92d-4599-b26f-9d2c146da852", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "4c63582c-bb91-4bd5-8b9c-c170e8d5ac34", "solution": "import numpy as np\nimport multiprocessing\n\nclass Parallelized_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                with multiprocessing.Pool() as pool:\n                    random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                    new_positions = particles + random_displacements\n                    new_fitness_values = np.array(pool.map(func, new_positions))\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Parallelized_Modified_PSO_SA_Hybrid_Improved", "description": "Improved performance by implementing a parallelized version of the particle update process to exploit multi-core processors efficiently.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\").", "error": "TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\")", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {}, "mutation_prompt": null}
{"id": "b67d91e9-6240-4554-9e19-7050f78940fc", "solution": "import numpy as np\n\nclass Efficient_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization_efficient():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                np.putmask(best_fitness, update_mask, fitness_values)\n                np.putmask(best_positions, update_mask[:, None], particles)\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization_efficient()\n        return global_best_position", "name": "Efficient_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by vectorizing the particle update process and utilizing numpy operations to streamline calculations.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('putmask: mask and data must be the same size').", "error": "ValueError('putmask: mask and data must be the same size')", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {}, "mutation_prompt": null}
{"id": "1153051b-78f8-4df5-a9c7-969c4d22f91f", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def enhanced_pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight_min, inertia_weight_max = 0.4, 0.9\n            cognitive_param, social_param = 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                inertia_weight = inertia_weight_max - (_ / self.max_iter) * (inertia_weight_max - inertia_weight_min)\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_velocity = cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles)\n                social_velocity = social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                velocities = inertia_weight * velocities + cognitive_velocity + social_velocity\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n        enhanced_pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid", "description": "Enhanced efficiency by implementing a simplified and optimized velocity update mechanism while incorporating a dynamic inertia weight strategy for improved convergence performance.", "configspace": "", "generation": 28, "fitness": 0.19525658158880949, "feedback": "The algorithm Enhanced_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.49729249956058297, 0.5661095234022586, 0.49992230840470997, 0.4966474627269014, 0.18657049614727628, 0.19022655198346894, 0.5019290977709734, 0.5820828282662781, 0.1815401674731213, 9.999999999998899e-05, 0.013231455011760929, 9.999999999998899e-05, 0.09847501752772791, 0.064715021351617, 9.999999999998899e-05, 0.02887327118579819, 0.04019639117829299, 9.999999999998899e-05, 0.09465831298501526, 0.11642186917223807, 0.06676285161021789, 0.11909129881497738, 0.10178135610875283, 0.10470032058477097, 0.10124349089916507, 0.09208075582506281, 0.13511295147189617, 0.11294985973199911, 0.06739704693997395, 0.1031105369852312, 0.08354001385084231, 0.11295967461858913, 0.0966144844725515, 0.09720156694231441, 0.04700507863817893, 0.07724734750585616, 0.9922670723401912, 0.9949981293491063, 0.9943715067214527, 0.09981210064790902, 0.9917481994235078, 0.9863825059174472, 0.991877792535623, 0.9919368802221988, 0.9906671645773842, 0.2754194359168213, 0.2696200321857767, 0.055427856713707424, 0.23352588484829473, 0.34153357832824727, 0.14105293604519287, 0.0829160960729729, 0.08803977360934934, 9.999999999998899e-05, 0.16951355354259234, 0.2140832656339654, 0.2033374325845756, 0.192178953510461, 0.17713788085705418, 0.19226722876804847, 0.23015441309291695, 0.2480570022721439, 0.2121633052444748, 0.14320529283304984, 0.10952468134740356, 0.17739268116539386, 0.12372141625505095, 0.14784895807185694, 9.999999999998899e-05, 0.1468720069802152, 0.14267849057138648, 0.12060499416967874, 0.16006021099565337, 0.01964082409637935, 0.17077009266642873, 0.15818275749872324, 0.22805016450178284, 0.14444648266888838, 0.1379210915018142, 0.2305170613280353, 0.06768511534941879, 9.999999999998899e-05, 0.025422316956191238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951624430241974, 0.0002600624799197204, 0.023125228848367985, 0.07489922583351871, 0.062040063069261686, 0.07057959057353169, 0.0379353171962844, 0.017642082648395285, 0.017259909802204487, 0.028084158348861687, 0.04994258765435411, 0.06479577221812283, 0.01837617776917977, 9.999999999998899e-05, 0.029610446198542695, 0.02804293044297701, 0.03851349183264263, 0.02563840217642499, 0.04327394114963068, 0.04770713080111966, 0.025169194930890093, 0.0982326587051664, 0.10623197092245285, 0.07313540957983244, 0.07305424012719597, 0.047303147569807025, 0.10149163429623298, 9.999999999998899e-05, 0.16939169717722602, 0.07331666034780104, 0.44601545028167555, 0.4389734896449359, 0.4286822187743845, 0.42299271395313276, 0.37194982936961374, 0.2081410971866715, 0.41261578224628115, 0.42136729065385836, 0.3847811908474894, 0.13127599607093943, 0.05032382491827159, 0.06329423551840407, 0.09352420389511573, 0.08680427287942039, 0.10261920699816929, 0.12235167427877991, 0.09149180877010843, 0.11181759725362916, 0.18942843315218016, 0.19208481230274577, 0.22699793124188294, 0.15602686511536834, 0.20232774770701167, 0.14153525946387546, 0.19001828179539193, 0.18245821284288344, 0.17760110081385116, 0.24188465925884062, 0.26481645771338724, 0.27131485743956507, 0.24211453899997482, 0.1864505389254245, 0.28930014282358896, 0.19946412643375122, 0.26407788249924147, 0.253492087897787, 0.17287134274298477, 0.18084268173199314, 0.1849093719315279, 0.13732253562974295, 0.19622042162327114, 0.15416043556523729, 0.182962192463358, 0.2588674580872481, 0.19925609780166442, 0.19231976844623855, 0.1769705977647572, 0.18948230699498758, 0.1894698686762143, 0.18918046308519065, 0.2103867677357527, 0.2165347001399952, 0.19664162957766684, 0.19963284758606437, 0.26690721453576793, 0.1970367551737321, 0.17519219684865983, 0.1836513643755051, 0.18613877846528248, 0.1859948268794538, 0.2761677453299839, 0.18640875169950355, 0.19117135160937482, 0.15228766175417363, 0.16524175417281384, 0.150725812182401, 0.6609769366747356, 0.200875757728035, 0.19734108688676055, 0.09164495462245359, 0.16939142446758704, 0.5549351902652905, 0.5936098734821861, 0.40346917793321335, 0.4778182319871709, 0.5178835382022717, 0.12523680823361505, 0.21082062871679097, 0.19903884778830883, 0.20696954530188505, 0.17939374746329473, 0.1944621570303552, 0.19557501674828404, 0.19312052731709473, 0.18607507107980892, 0.1835081934412438, 0.17680133967215028, 0.19869102978317343, 0.18917868876434818, 0.18575289250703053, 0.08254515481612346, 0.07687968844176973, 0.07774234153399173, 0.08137852384885791, 0.0696547736041413, 0.06271251584192028, 0.07678220830345439, 0.07771395403428083, 0.08347537001351135]}, "mutation_prompt": null}
{"id": "9f88d5d6-0e5d-4c68-af48-13d4a99ded01", "solution": "import numpy as np\n\nclass Optimized_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                np.putmask(best_fitness, update_mask, fitness_values)\n                np.putmask(best_positions, np.repeat(update_mask[:, None], self.dim, axis=1), particles)\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(np.repeat(accept_mask[:, None], self.dim, axis=1), new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Optimized_PSO_SA_Hybrid", "description": "Improved efficiency by optimizing the velocity update calculation through vectorized operations and simplifying acceptance probability computation.", "configspace": "", "generation": 29, "fitness": 0.1965225195328996, "feedback": "The algorithm Optimized_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "a3142477-0f75-41e6-b953-ff4298749c89", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Hybrid_Optimized:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_moves = cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles)\n                social_moves = social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                velocities = inertia_weight * velocities + cognitive_moves + social_moves\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Improved_PSO_SA_Hybrid_Optimized", "description": "Improved efficiency by optimizing the particle updating mechanism and enhancing global best position tracking.", "configspace": "", "generation": 30, "fitness": 0.1965225195328996, "feedback": "The algorithm Improved_PSO_SA_Hybrid_Optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "1f815096-5adf-4563-bf17-a587e567a3a0", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "0958d504-f7e4-48f4-99a7-709aeab44e9c", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask] = fitness_values[update_mask]\n                best_positions[update_mask] = particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness = fitness_values[global_best_index]\n                    global_best_position = particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_contribution = cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles)\n                social_contribution = social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                velocities = inertia_weight * velocities + cognitive_contribution + social_contribution\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid", "description": "Improved efficiency by simplifying velocity computation, optimizing fitness evaluation update, and reducing unnecessary calculations.", "configspace": "", "generation": 32, "fitness": 0.1965225195328996, "feedback": "The algorithm Enhanced_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "dfe9f208-ec5a-4916-a983-c68f427b24e7", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "338901a6-19f4-4b5b-9575-90d525e8a5ed", "solution": "import numpy as np\nfrom multiprocessing import Pool\n\nclass Parallel_Adaptive_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def parallel_fitness_evaluation(particles):\n            with Pool() as p:\n                fitness_values = np.array(p.map(func, particles))\n            return fitness_values\n\n        def adaptive_pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = parallel_fitness_evaluation(particles)\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                adaptive_inertia_weight = max(0.4, inertia_weight - 0.001)\n                adaptive_temperature = max(alpha * temperature, final_temperature)\n\n                particles += np.random.normal(0, 1, (self.num_particles, self.dim))\n                particles = np.clip(particles, -5.0, 5.0)\n\n        adaptive_pso_sa_optimization()\n        return global_best_position", "name": "Parallel_Adaptive_PSO_SA_Hybrid", "description": "Improved efficiency by parallelizing fitness evaluations using multiprocessing, optimizing the particle update calculation for better performance, and introducing adaptive parameters for inertia weight and temperature schedule.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\").", "error": "TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\")", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {}, "mutation_prompt": null}
{"id": "13ef1867-7184-4637-82f4-3d07deb0e948", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass Enhanced_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n        \n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            with ThreadPoolExecutor() as executor:\n                for _ in range(self.max_iter):\n                    fitness_values = np.concatenate(list(executor.map(evaluate_fitness, [particles])))\n\n                    update_mask = fitness_values < best_fitness\n                    best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                    global_best_index = np.argmin(fitness_values)\n                    if fitness_values[global_best_index] < global_best_fitness:\n                        global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                    random_numbers = np.random.rand(self.num_particles, 2)\n                    velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                    particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                    random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                    new_positions = particles + random_displacements\n                    new_fitness_values = np.concatenate(list(executor.map(evaluate_fitness, [new_positions])))\n\n                    accept_mask = new_fitness_values < fitness_values\n                    accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                    accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                    particles = np.where(accept_mask[:, None], new_positions, particles)\n                    temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid", "description": "Introduced batch processing for evaluating fitness values in parallel to enhance efficiency and reduce computation time.", "configspace": "", "generation": 35, "fitness": 0.1965225195328996, "feedback": "The algorithm Enhanced_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "3cba8c9e-3c6c-43f0-8332-373d9d35d137", "solution": "import numpy as np\n\nclass Parallelized_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                np.putmask(best_fitness, update_mask, fitness_values)\n                np.putmask(best_positions, update_mask[:, None], particles)\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                np.copyto(particles, np.where(accept_mask[:, None], new_positions, particles))\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Parallelized_PSO_SA_Hybrid_Improved", "description": "Improved algorithm efficiency by parallelizing the fitness evaluation process using vectorized computations and optimizing the particle updates for better convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('putmask: mask and data must be the same size').", "error": "ValueError('putmask: mask and data must be the same size')", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {}, "mutation_prompt": null}
{"id": "b1b0a8cf-1d98-4a11-bfa8-b0cd1fc4f9f3", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "7cb31ec4-95af-4196-b481-41ab8bfdae3d", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "b5fe2ddf-066f-41cb-a762-a3b1171de06f", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                velocities = inertia_weight * velocities + cognitive_param * np.random.rand(self.num_particles)[:, None] * (best_positions - particles) + social_param * np.random.rand(self.num_particles)[:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Improved_PSO_SA_Hybrid", "description": "Improved efficiency by optimizing the acceptance probability calculation in the simulated annealing step and simplifying the velocity update mechanism in the particle swarm optimization.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocities' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocities' referenced before assignment\")", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {}, "mutation_prompt": null}
{"id": "a6cc3363-3f58-40e3-aef4-754d53464cbe", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                np.copyto(best_fitness, np.where(update_mask, fitness_values, best_fitness))\n                np.copyto(best_positions, np.where(update_mask[:, None], particles, best_positions))\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_updates = cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles)\n                social_updates = social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                velocities = inertia_weight * velocities + cognitive_updates + social_updates\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                np.copyto(particles, np.where(accept_mask[:, None], new_positions, particles))\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid", "description": "Improved efficiency by simplifying the particle update calculation to reduce computational overhead and enhance convergence speed.", "configspace": "", "generation": 40, "fitness": 0.1965225195328996, "feedback": "The algorithm Enhanced_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "cdf4c05e-0ce4-4434-bc24-5f325741d1ef", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "b3555f75-4a02-48eb-a25f-3951b4536cb2", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                best_mask = fitness_values < best_fitness\n                best_fitness[best_mask], best_positions[best_mask] = fitness_values[best_mask], particles[best_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_factor = cognitive_param * random_numbers[:, 0][:, None]\n                social_factor = social_param * random_numbers[:, 1][:, None]\n                velocities = inertia_weight * velocities + cognitive_factor * (best_positions - particles) + social_factor * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Improved efficiency by eliminating unnecessary calculations, simplifying velocity updates, and optimizing parameter settings.", "configspace": "", "generation": 42, "fitness": 0.1965225195328996, "feedback": "The algorithm Modified_PSO_SA_Hybrid_Improved_Performance got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "01dc1be8-b9d9-4b72-9a5b-61de00c89c89", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness = np.where(update_mask, fitness_values, best_fitness)\n                best_positions = np.where(update_mask[:, None], particles, best_positions)\n\n                global_best_index = np.argmin(fitness_values)\n                global_best_fitness, global_best_position = np.where(fitness_values[global_best_index] < global_best_fitness, \n                                                                     fitness_values[global_best_index], global_best_fitness), \\\n                                                            np.where(fitness_values[global_best_index] < global_best_fitness, \n                                                                     particles[global_best_index], global_best_position)\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Improved efficiency by simplifying velocity update calculation and enhancing particle position update using matrix operations.", "configspace": "", "generation": 43, "fitness": 0.1965225195328996, "feedback": "The algorithm Modified_PSO_SA_Hybrid_Improved_Performance got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "6faba018-59b9-4dfb-903c-faf90a2333e7", "solution": "import numpy as np\n\nclass Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles) + social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Modified_PSO_SA_Hybrid_Improved", "description": "Enhanced efficiency by simplifying the velocity update calculation to reduce redundant operations and streamline the algorithm.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "82e49d06-d5a3-4b0c-a449-48b382f8c519", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_distances = cognitive_param * random_numbers[:, 0][:, None] * (best_positions - particles)\n                social_distances = social_param * random_numbers[:, 1][:, None] * (global_best_position - particles)\n                velocities = inertia_weight * velocities + cognitive_distances + social_distances\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_PSO_SA_Hybrid_Improved", "description": "Improved performance by optimizing the acceptance probability calculation and simplifying the velocity update operation.", "configspace": "", "generation": 45, "fitness": 0.1965225195328996, "feedback": "The algorithm Enhanced_PSO_SA_Hybrid_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.21588577081676252, 0.21295394225078634, 0.20890044767516824, 0.2501641027431232, 0.2472998309179062, 0.24683125197645273, 0.24667158947281465, 0.2295516206841135, 0.28156848394574796, 9.999999999998899e-05, 0.058442361459908665, 0.040124356483351, 0.06393710679971032, 0.2565982399664364, 0.04081392511669235, 0.11826587483701301, 0.18400015098275813, 0.4924061867953847, 0.08241860615942131, 0.07305520170556068, 0.07368326980360218, 0.07029142832809432, 0.059243125360559645, 0.07653405775901445, 0.05980146873344716, 0.07658818756024088, 0.06808411891752653, 0.06184674340646301, 0.08084094681982312, 0.10060801715746581, 0.07099793527346032, 0.08620012100210916, 0.08942753198972464, 0.0830777493955287, 0.07870508538676368, 0.05567383445022844, 0.9859842857286757, 0.9825118821379248, 0.9901144278365207, 0.9683211730502181, 0.9799578802970429, 0.9742277726275211, 0.9842417350600404, 0.9845145184423775, 0.9808634287080461, 0.2625474621229684, 0.22838542316075439, 0.3416066938219048, 0.291568050533212, 0.27937866696086333, 0.29636283982172174, 0.3083309876180671, 0.28637105320255896, 0.23742931272114642, 0.20136727361116302, 0.21452547001948086, 0.22186645335538346, 0.20640301942481387, 0.2044341335134674, 0.19388355714625438, 0.20901549222899585, 0.2072086615664911, 0.19636151111073263, 0.12200235247324787, 0.10662220151843727, 0.12409408612304429, 0.23671334301788294, 0.1278486262305838, 0.1684881615807492, 0.21219867593610164, 0.1658095070881349, 0.3219838720278927, 0.15887704477986042, 0.11194873604601707, 0.2497458937872129, 0.13074221161497968, 0.15459125592084855, 0.16681592369809894, 0.1478644459278886, 0.12064629395418269, 0.32044416852896307, 0.05626920439659011, 0.05327840515999638, 0.06824985196148559, 0.04803143624961104, 0.028251333510753485, 0.013187608577990395, 0.1155092508411375, 0.14565628874586056, 0.0763751815660838, 0.07170680884154335, 0.2503232845795048, 0.17357723183369855, 0.37616044624344436, 0.07821383719435726, 0.17219425248193698, 0.44433675898858305, 0.11717702737672864, 0.13201172834779085, 0.17604000657791186, 0.059568590340162486, 0.2074905893266653, 0.1931749458800578, 0.1949735773011001, 0.06947753447503635, 0.12560592770956613, 0.06112060904770711, 0.07915811915215365, 0.07956110844968844, 0.20865702466908254, 0.21000815258562433, 0.13225986854320804, 0.1821692078340338, 0.14958451611680978, 0.20284856911484062, 0.08989179548975501, 0.07823710605984002, 0.2622407497703224, 0.24679951684089863, 0.2570941048619789, 0.24933356789032435, 0.24826036985725142, 0.24798119425818999, 0.23683473957601298, 0.24929058458935938, 0.24202174659561893, 0.07358645600062241, 0.07250839985267554, 0.07646675032656802, 0.08810399916198164, 0.07058989965842588, 0.0791251383939422, 0.061525065107400634, 0.07291341259175388, 0.07728582627948688, 0.1449956205522399, 0.13458769665671466, 0.16606648756331144, 0.13730678053937495, 0.137471597942601, 0.12950417353252164, 0.1369179684697126, 0.11941815048322402, 0.12011329972824314, 0.1975308977980913, 0.1940059843005727, 0.19709857386898444, 0.19363757767045897, 0.17412674207400236, 0.19844601627060277, 0.19638769591226246, 0.1899827184592685, 0.1931555271815928, 0.13647966757333707, 0.137182866719049, 0.1499312447667902, 0.14037585231749783, 0.1402451410684047, 0.1432745005614765, 0.14922644586452494, 0.14351511879476053, 0.15421818791554576, 0.16525033040684922, 0.175943055782814, 0.18356095920052418, 0.17218414177542496, 0.16730816514653812, 0.17501662802706774, 0.19249404160349048, 0.17969299268148808, 0.18131154533323768, 0.18353768780877633, 0.19196584457817056, 0.17673829671875774, 0.18583785413020704, 0.17918921764096163, 0.18368995921458475, 0.17028253151101402, 0.1837715580327305, 0.17257428077618042, 0.323888182387049, 0.1872645043215707, 0.14644517558826753, 0.32254444886422284, 0.17126708713713723, 0.17480066216391588, 0.18434326383726307, 0.16376741430042507, 0.2992342471135784, 0.2951908349380785, 0.18066841562121805, 0.2008217232137417, 0.26243754549258314, 0.1820813467740493, 0.1810186232069395, 0.19532875978008646, 0.1547593778372779, 0.18774086731064, 0.170420902020187, 0.18472315286419438, 0.19081633163286071, 0.18711656257176734, 0.16876193978233767, 0.186539263914277, 0.18436499585383448, 0.1757909413605483, 0.16450160478937892, 0.07331755663948081, 0.06196882945635518, 0.07101973043732213, 0.0613485348186521, 0.06485988951703714, 0.07646476042668438, 0.06342233721305113, 0.06846016164514146, 0.06670127392238123]}, "mutation_prompt": null}
{"id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 46, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "159653f0-5663-4bb2-9915-6c9c9e0e9238", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "037c1fe3-6894-462c-b0a5-88e619bd962d", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "1c48aac9-41a5-43db-8a0d-bfddd9d74fbe", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position\n", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Improved efficiency by simplifying velocity updates and optimizing particle movements while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 48, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "f8370122-f950-45c9-9960-88313efce91d", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Perf:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                global_best_fitness = fitness_values[global_best_index]\n                global_best_position = particles[global_best_index] if global_best_fitness < global_best_fitness else global_best_position\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Perf", "description": "Improved efficiency by optimizing calculation of particle updates and simplifying the fitness evaluation process.", "configspace": "", "generation": 49, "fitness": 0.11498704936578746, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_Perf got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.23474037516570911, 0.2514765836294568, 0.2390087188736949, 0.16245258473215696, 0.16723036591631446, 0.17323182596325315, 0.2137333733999094, 0.18948963355257442, 0.19500070127329772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0545659052493751, 0.05624534912916457, 0.05569070485793526, 0.06720253596727432, 0.06773420228595883, 0.09027561613062407, 0.06244078430122668, 0.060144758878311055, 0.053406151938351853, 0.06196158463552037, 0.05658078961554169, 0.0504554729261768, 0.0503813443874902, 0.04787715771814327, 0.045345742736995986, 0.03609155770097827, 0.05221051300432389, 0.04807474728984784, 0.10713987944244763, 0.10574890332565079, 0.0890797211587735, 0.0998646553041157, 0.11203394373302522, 0.1412115923212457, 0.1036310884575451, 0.10748402607310814, 0.10905407499885134, 0.0884401192894877, 0.1015707256373275, 0.09782202497977721, 0.10194618131677069, 0.08714672173159399, 0.11040740881872457, 0.11124060408290881, 0.07506454842726251, 0.10534530793103136, 0.1774726128975881, 0.16513963922838282, 0.17401807887527798, 0.14315747034808557, 0.19374498435105247, 0.13442768457230903, 0.14867540646751132, 0.14771286246413673, 0.1616215840332994, 0.05553726929690761, 0.04432442890684252, 0.06722592972239616, 0.05435829253930535, 0.005498158064280667, 0.02520761433677965, 0.02945001017357496, 0.05914766047303677, 0.05537188599846754, 0.15714571514808817, 0.1604682621643344, 0.14280312183409682, 0.15299401543908875, 0.14435851821400048, 0.14688055146161438, 0.16261047717185084, 0.15858612762992397, 0.18213613706980403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05510729882214149, 0.1253391692192286, 0.09200010221481203, 0.05400346117357513, 0.05041101068715359, 0.06168774880296368, 0.09342107278968326, 0.06586691896814079, 0.07181906423271789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004751625081608091, 0.002152056649835088, 0.005091041338140534, 0.012811062588090283, 0.005764288663433592, 0.03620830637714756, 0.00045044093326962464, 9.999999999998899e-05, 0.001133816275488475, 0.254471707352391, 0.2689680048445341, 0.2353391526014451, 0.2033720954975522, 0.2024322211705627, 0.20305644613660812, 0.23264459213074673, 0.2509732358565874, 0.27765396334756165, 0.06608186524984427, 0.03709875088122261, 0.032045391411933855, 0.04923540384220848, 0.05577315158848595, 0.05918100172565155, 0.052409696098468905, 0.04945491656292411, 0.061738593316558066, 0.18078437262110436, 0.15541614101189172, 0.17094770388931524, 0.1457058837948334, 0.1478475404712717, 0.14957931871498098, 0.14110561446663683, 0.13755923158232142, 0.13239698992381232, 0.1766579706392497, 0.1781364839673686, 0.17220441363825378, 0.2034421626569789, 0.1970696752504466, 0.1968516582829113, 0.16910213162231924, 0.17416079761719816, 0.16734096957928446, 0.11282137415522953, 0.1221514985542963, 0.15242534174019207, 0.13552355261671079, 0.1562217116910729, 0.15691624710258656, 0.12686097550037922, 0.1280079978891745, 0.11753452047347968, 0.19454091004401053, 0.18827377097905174, 0.2034448948590547, 0.2335568121098046, 0.2074840946181704, 0.19502405555560132, 0.19803799170601355, 0.20357015766408115, 0.19863047979594828, 0.1645953015201883, 0.15817925621708873, 0.16299943104359882, 0.16812352909796302, 0.16031872794827473, 0.16610325875965248, 0.16784568280508194, 0.16373580496153695, 0.17432574079270358, 0.1622954009072699, 0.17114703772648232, 0.16897758872629798, 0.23498953420005075, 0.3143819451600015, 0.20995907465633568, 0.1902091644289695, 0.15972241621559746, 0.2398013519347938, 0.2739611341418763, 0.21338321457901843, 0.20804144581018513, 0.22720527019178494, 0.15807849485542214, 0.1565681635044477, 0.20402822873371707, 0.20324062179758118, 0.25713875867151514, 0.2113203476514831, 0.19869330843338762, 0.17610314361930346, 0.18790175596617342, 0.18326819966480223, 0.17484477356534311, 0.1862261332272246, 0.17303547866426183, 0.169151800729615, 0.06499863817365237, 0.06352966409275629, 0.07370067314167283, 0.07797686558621986, 0.06932366272114154, 0.0798234930079198, 0.06976703085860736, 0.0684372401559935, 0.06230564597405519]}, "mutation_prompt": null}
{"id": "b087e659-bfa5-44d1-95cd-aa263d20e208", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_weights = inertia_weight * np.array([cognitive_param, social_param])\n                diff_best_global = np.array([best_positions, global_best_position]) - particles[:, None]\n                velocities = inertia_weight * velocities + random_numbers @ inertia_weights * diff_best_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask |= np.random.rand(self.num_particles) < accept_probabilities\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved", "description": "Optimizing efficiency by reducing redundant calculations, streamlining update processes, and simplifying parameter adjustments.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.').", "error": "ValueError('setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.')", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {}, "mutation_prompt": null}
{"id": "8ea0da80-624e-44d5-a9a9-32eb042366e5", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "76ee12a9-0992-458a-8f0a-9fda943e0d42", "solution": "import numpy as np\n\nclass Improved_Enhanced_Modified_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Improved_Enhanced_Modified_PSO_SA_Hybrid", "description": "Optimized efficiency by simplifying velocity and position updates, reducing redundant calculations, and enhancing convergence speed.", "configspace": "", "generation": 52, "fitness": 0.21259388820797562, "feedback": "The algorithm Improved_Enhanced_Modified_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "9d287937-f0cd-448f-87b7-ee8890286348", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array(Parallel(n_jobs=-1)(delayed(func)(p) for p in particles))\n\n                update_mask = fitness_values < best_fitness\n                np.minimum.at(best_fitness, np.nonzero(update_mask), fitness_values[update_mask])\n                np.place(best_positions, update_mask[:, None], particles[update_mask])\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array(Parallel(n_jobs=-1)(delayed(func)(p) for p in new_positions))\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Improved efficiency by parallelizing fitness evaluation and velocity update calculations, reducing redundant operations, and optimizing the acceptance probability calculations.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {}, "mutation_prompt": null}
{"id": "c1662fff-c1a2-41fe-b520-ed89bb7032d4", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                np.copyto(best_fitness, np.where(update_mask, fitness_values, best_fitness))\n                np.copyto(best_positions, np.where(update_mask[:, np.newaxis], particles, best_positions))\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive, inertia_social = inertia_weight * cognitive_param, inertia_weight * social_param\n                diff_best, diff_global = best_positions - particles, global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                np.clip(particles + velocities, -5.0, 5.0, out=particles)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                np.copyto(particles, np.where(accept_mask[:, np.newaxis], new_positions, particles))\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance_Improved", "description": "Improved efficiency by optimizing velocity and position updates, reducing redundant calculations, and simplifying the acceptance criteria update process.", "configspace": "", "generation": 54, "fitness": 0.19627712451907978, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.23916464026212847, 0.2399682182758559, 0.25363197525604786, 0.24606137224659064, 0.26941822986041364, 0.2472229448369756, 0.23224005380450563, 0.25960251616665875, 0.23864114621949917, 0.04325339943167983, 0.06010529513662988, 0.1350181054415478, 0.16580577564661303, 0.006887455776693918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0726620746387282, 0.06671831468100897, 0.08571239503032069, 0.07601808670536625, 0.08394829463143072, 0.07213897123288093, 0.06555712996773178, 0.08369764161332283, 0.0688929505003163, 0.08410090951841143, 0.07064858873755797, 0.09729701416460734, 0.07348973225968713, 0.08517974189854072, 0.07012859718363906, 0.08083282267895497, 0.0942148714570531, 0.10016671438441394, 0.9791556812330487, 0.9740631608232528, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9603871195441205, 0.944965694963288, 0.940063538611963, 0.3964062309996521, 0.3083761779195747, 0.37863746548561783, 0.3830035497678782, 0.42637802175884165, 0.4364316593734169, 0.38650774607162885, 0.42102166487027115, 0.4180454237433969, 0.26290691953133005, 0.23274412054825622, 0.22536109105258406, 0.2268617773043341, 0.21658704131858453, 0.22600233816085125, 0.19643318752741745, 0.2290069427089988, 0.2525006263432893, 0.14313465973378048, 0.1403740857591409, 0.18928107747544687, 0.16362777044751287, 0.18648149791336055, 0.18264556018899103, 0.15137696531344225, 0.12036141467709383, 0.19684795484999607, 0.27236198024171965, 0.17480627743492783, 0.13167150714604725, 0.141964847659939, 0.1785399082250937, 0.1574440050921463, 0.19799758646347654, 0.11663104799106838, 0.16978559148451966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07896870428690306, 0.031649899990966346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030472912661185902, 0.14063225027906068, 0.11623202554977363, 0.11370291717362702, 0.2951880171880985, 0.14033059109251866, 0.06669534103922237, 0.21024551242993783, 0.2623495073391219, 0.154189081605004, 0.09828998231058339, 0.035431497522933175, 0.05085905885913233, 0.16103218332766556, 0.11662184136886755, 0.14129598244028074, 0.1389071983072958, 0.09708672864696566, 0.07275809251311949, 0.12585512300487356, 0.11886303421984123, 0.13333616174658836, 0.34619878335688614, 0.0690536345160776, 0.07332439099053523, 0.0807779699800314, 0.054041625091048484, 0.09824190158645651, 0.2535009191516997, 0.272062647502329, 0.2574129244499027, 0.2426510009198638, 0.25849229749629665, 0.24507013721366078, 0.2465994002295604, 0.2589705861050382, 0.2564116593089377, 0.10887011692950488, 0.0922424676391791, 0.07613751683960512, 0.09061518717861583, 0.08181614118637703, 0.07619368041554664, 0.07320486102881296, 0.07160474946699147, 0.06870458577713257, 0.13829233738626268, 0.15727021779589212, 0.13839475708786197, 0.14426902026567745, 0.18581065804849473, 0.16360084254981755, 0.17303036820590478, 0.1305225850531171, 0.16501168229136742, 0.19752657224271375, 0.19989131668558924, 0.2012453431320027, 0.2017671005306021, 0.19666480900845873, 0.20983566143147436, 0.19455240883518377, 0.22132483402122527, 0.20124528500408478, 0.1341622942148848, 0.15411082372645635, 0.16431842551227016, 0.15003941277122557, 0.16537171304707632, 0.14378022109145983, 0.14416681420724986, 0.15265090684870686, 0.14725455976389368, 0.19085094598553887, 0.15821265491207326, 0.19467237395382153, 0.16935162968839435, 0.18385899796854432, 0.1785884462397247, 0.17854650519681547, 0.19816484807500523, 0.18513143752169436, 0.1722394739113885, 0.2772211828155625, 0.1980766648066854, 0.19976774709052914, 0.18307469858897996, 0.21046774804269863, 0.1891832584286266, 0.19413365658255588, 0.19414036875586727, 0.35074579557195096, 0.14919633915401664, 0.1472265831467039, 0.3716394567235596, 0.17998635099592808, 0.1797094314581278, 0.3427502824160086, 0.16066278242365262, 0.3346461236101619, 0.33115165657535406, 0.15314617601440095, 0.18059033030661886, 0.1954478847310902, 0.3639637616341783, 0.18632177734291855, 0.09999514019763323, 0.10021723095341784, 0.2879846609148945, 0.1671373813680822, 0.1686739259710468, 0.17294525790535076, 0.1635724968434793, 0.18890796002100818, 0.16850239132795775, 0.17783049543398244, 0.19723226964053953, 0.17738201113999608, 0.07693032558542012, 0.06991044372689725, 0.08240907922381879, 0.06487301824211278, 0.06793675368635599, 0.06244605854688967, 0.06507864686137488, 0.07333478387104475, 0.07942076717601254]}, "mutation_prompt": null}
{"id": "5feb4ea7-d6c5-4b7d-8f4a-e40f8abef823", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "640265d9-3932-4873-8971-9001cb37741e", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "c9bf770e-af58-4286-bd5d-f968ae165239", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "f4458459-ad96-4028-b6b2-fa98a4d649b4", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "d775b66f-ea7f-4e6f-a241-736da4de0a4a", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "94c23bbc-c357-4c09-999c-f334e2259b57", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "6c6648f5-09cc-492f-8626-9c0432de0c8e", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                cognitive_param, social_param = 2.0, 2.0\n                inertia_weight = 0.5 + 0.5 * (1 - _ / self.max_iter)  # Dynamic inertia weight\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + cognitive_param * random_numbers[:, 0][:, None] * diff_best + social_param * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved", "description": "Improved efficiency by simplifying the velocity update calculation further, optimizing the particle update process, and enhancing exploration-exploitation balance via a dynamically adjusted inertia weight in a streamlined manner.", "configspace": "", "generation": 61, "fitness": 0.12953656588678775, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.20652907651780428, 0.218679757021775, 0.16613439904803762, 0.19948077789772378, 0.19016251861629818, 0.21199658685611444, 0.19298517643833857, 0.19084244128769745, 0.19885376431817836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04110319679848784, 0.06896254991858408, 0.0578464013703881, 0.036751971873359435, 0.0458543236471074, 0.04270796711748959, 0.05022795689008852, 0.048408098892820606, 0.06569722275368162, 0.03692571980982762, 0.055540108302225, 0.03601368945486971, 0.03459146127162438, 0.03316583265979367, 0.03426766790392799, 0.03911980851172625, 0.0469546308896206, 0.03205412866529023, 0.9859722365632009, 0.984359447569314, 0.9901597465722426, 0.9608682996174163, 0.9799695087086853, 0.9742498844673863, 0.9843725165729629, 0.9856560541609819, 0.9805267655662608, 0.09142960892460994, 0.10212299456027918, 0.09927958389111557, 0.08868021402457071, 0.11299967638971453, 0.08527467969312952, 0.10135478446276047, 0.11745495253756288, 0.09111716040490614, 0.20681200877030104, 0.14037431120103916, 0.12350515914021365, 0.13547749304793322, 0.17804480454283278, 0.13060086791846748, 0.11968865440758802, 0.12628722480336796, 0.11977008519849297, 0.010948681253000192, 9.999999999998899e-05, 9.999999999998899e-05, 0.01987361100403995, 0.02085888109284262, 9.999999999998899e-05, 0.07087285848185165, 0.00707297543262464, 0.038278266120955085, 0.07782550653030662, 0.029037003994971222, 9.999999999998899e-05, 0.05742005197241651, 9.999999999998899e-05, 0.029802226478081506, 0.021922784073923007, 0.01075435511986056, 0.010550705697816354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0588363894799413, 0.028832345517125435, 0.09937472109419943, 0.024694233060613247, 9.999999999998899e-05, 0.013178715414837838, 0.06214919372214722, 0.04969802329013384, 0.012877286967023394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008664563954621562, 0.003475458671211573, 9.999999999998899e-05, 0.0021242278106786694, 9.999999999998899e-05, 0.005466004395460966, 0.014251366473135074, 0.028475157081326308, 0.0005489508753485639, 0.19936594024745957, 0.18351852620349351, 0.20602007584620874, 0.19526246084144472, 0.19265656032239697, 0.20555139490034247, 0.19340253474342195, 0.2040302140552649, 0.20947040263008943, 0.07364380841930196, 0.05834177416500008, 0.06501910306487335, 0.052632278874460314, 0.054680388415151215, 0.04560627877127987, 0.04103321592741227, 0.05743927302786722, 0.04850994367613659, 0.11604090941777356, 0.13973850283644318, 0.12166953774393974, 0.1366342459563018, 0.15802574032805183, 0.12505055735431947, 0.14821899622122403, 0.12489588700043863, 0.12723969460503393, 0.15039015083043472, 0.17833927128078608, 0.17431621524612473, 0.14900612241023192, 0.1647755084733773, 0.18458992177591926, 0.16305653870918102, 0.18325073735306185, 0.176014713035326, 0.11112939123175769, 0.11071494757120948, 0.12242657031601045, 0.10239811251679554, 0.11051653983168308, 0.10032361919110477, 0.11720568972345569, 0.12909094282904465, 0.12671410272712635, 0.1455072536858072, 0.1280970601436009, 0.15233257841112047, 0.1579275879075407, 0.14091492349094115, 0.15297718183479536, 0.15167687900838323, 0.16803722551902012, 0.14892634791031578, 0.1550021795419647, 0.12501912519159886, 0.15748852437361782, 0.15559295050521726, 0.15011885992190144, 0.15527170985235084, 0.1645351277384125, 0.14932969269210483, 0.15036416791963603, 0.20808338697835427, 0.1361511617972725, 0.12327976447971722, 0.24288920989226048, 0.13946424177410588, 0.13708731499158588, 0.14004128604561816, 0.1307555341697174, 0.17435018102363886, 0.13003437577853638, 0.1364367639664975, 0.14981123385381911, 0.11651022111863807, 0.1273707495468014, 0.15625304833608256, 0.18481775331280925, 0.18699936995261002, 0.17280622587989913, 0.17483158797629572, 0.16104772020454405, 0.16986456464568123, 0.18554210508181745, 0.17323019131149053, 0.18702527026030624, 0.17618687762150353, 0.1736698131659763, 0.16845755539150686, 0.05337225357996889, 0.054334443036981095, 0.049584209357626974, 0.051853565243613176, 0.04901833224665353, 0.04671977176121367, 0.05586502227847501, 0.054827604118089956, 0.05461830155964331]}, "mutation_prompt": null}
{"id": "5b200795-b197-49de-8370-6ba18214ad16", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "fac076f9-f570-4f0e-8144-c5ee44731740", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "f6f4a005-937f-48ef-9640-db7531d164af", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "0648fc13-d3e3-44e6-a2fb-2dbf7150c48f", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "3c5773d1-11ff-4c97-a21f-d7e89b147bf0", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "c882f2ca-6427-47c1-b725-87b26525f655", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "8b13cc87-848c-44ce-bef4-48208d3ecd85", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "7cd090b5-49b3-488e-b258-0dd23b54c9b2", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "e48a5f97-9e2a-4617-9660-f01fdbd56675", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "36dc8a37-dde2-46ac-92c2-1a5f0ee44875", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "72f46465-16b9-42ea-939b-6ea1a362a736", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])  # Reduced redundant fitness evaluations\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + (inertia_cognitive + inertia_social) * random_numbers[:, :, None] * (diff_best[:, :, None] * np.stack((np.ones((self.num_particles, 1)), np.zeros((self.num_particles, 1))), axis=2) + diff_global[:, :, None] * np.stack((np.zeros((self.num_particles, 1)), np.ones((self.num_particles, 1))), axis=2)\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Accelerated convergence by introducing a dynamic adjustment of inertia weights and reducing redundant fitness function evaluations. ", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 17, '                particles = np.clip(particles + velocities, -5.0, 5.0)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 17, '                particles = np.clip(particles + velocities, -5.0, 5.0)\\n'))", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {}, "mutation_prompt": null}
{"id": "b1a5ef89-66fb-4127-9ac0-703684880278", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "76cb43f4-93e9-447c-9e10-d4e724eb600f", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "9b81cd87-82fc-40b4-a07f-50f467dcbc62", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while incorporating a dynamic adaptation of cognitive and social parameters.", "configspace": "", "generation": 75, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "d76e178f-7be5-40be-aedc-5ddbf917e79f", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "78f470c3-b777-4e14-9832-0d06049a9a7f", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "f8d39414-9f8d-4c7e-aa92-3200a71fbea0", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask] = fitness_values[update_mask]\n                best_positions[update_mask] = particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness = fitness_values[global_best_index]\n                    global_best_position = particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.less(new_fitness_values, fitness_values) | (np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved", "description": "Improved efficiency by optimizing the velocity update process further and simplifying the acceptance probability calculation.", "configspace": "", "generation": 78, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "c3ba9d08-217c-45d1-9ee0-c892788fe7ea", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "5f6e7bfc-c77d-4e3d-b0f3-5dbca29d84bc", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "7385ddbd-1716-4786-b7c4-d0f59f3abb61", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "d6b9b445-3edc-42dd-acfa-04d79fd3eed1", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position\n", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved", "description": "Enhanced efficiency by optimizing particle updates through vectorized operations and reducing redundant calculations.", "configspace": "", "generation": 82, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "068d8d14-76f3-4013-8d7d-0c847aff41d9", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "34a42955-3d70-438e-ac90-85575becee81", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "47db4c15-5d45-4d07-b066-8fbc0f042347", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Hybrid:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_vals = inertia_weight * np.array([cognitive_param, social_param])\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_vals[0] * random_numbers[:, 0][:, None] * diff_best + inertia_vals[1] * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Improved_PSO_SA_Hybrid", "description": "Improved efficiency by introducing a simplified velocity update mechanism and optimizing the particle update process to reduce computational overhead.", "configspace": "", "generation": 85, "fitness": 0.21259388820797562, "feedback": "The algorithm Improved_PSO_SA_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "2c7859ad-beba-4058-839a-9411e03cedd2", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_fitness = np.full(self.num_particles, np.inf)\n        global_best_position = np.zeros(self.dim)\n        global_best_fitness = np.inf\n        temperature = 100.0\n        alpha, final_temperature = 0.99, 0.1\n        inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n        for _ in range(self.max_iter):\n            fitness_values = np.array([func(p) for p in particles])\n\n            update_mask = fitness_values < best_fitness\n            best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n            global_best_index = np.argmin(fitness_values)\n            if fitness_values[global_best_index] < global_best_fitness:\n                global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n            random_numbers = np.random.rand(self.num_particles, 2)\n            inertia_cognitive = inertia_weight * cognitive_param\n            inertia_social = inertia_weight * social_param\n            diff_best = best_positions - particles\n            diff_global = global_best_position - particles\n            velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n\n            random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n            new_positions = particles + random_displacements\n            new_fitness_values = np.array([func(p) for p in new_positions])\n\n            accept_mask = new_fitness_values < fitness_values\n            accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n            accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n            particles = np.where(accept_mask[:, None], new_positions, particles)\n            temperature = max(alpha * temperature, final_temperature)\n\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Improved efficiency by optimizing the velocity update calculation and simplifying the particle update process, reducing unnecessary calculations and streamlining the algorithm.", "configspace": "", "generation": 86, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "e4e7cace-35e9-4aa8-9c7e-2b7e0360701d", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                global_best_fitness, global_best_position = min(fitness_values), particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved", "description": "Improved algorithm efficiency by simplifying the position update process through vectorized operations and reducing redundant calculations.", "configspace": "", "generation": 87, "fitness": 0.2113890762390077, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.24139069892612708, 0.28237684088881565, 0.24147961810545704, 0.28794835606867053, 0.26651939965903704, 0.2680796678977808, 0.30731624648067823, 0.24661141328359149, 0.2542062986483966, 0.05288002967330718, 0.06843176057517775, 0.05743897308274104, 0.01170938796107912, 0.048473084666224575, 0.003177588818702448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08494926909786105, 0.07390665607992264, 0.09099237214966782, 0.08439256836066111, 0.0842873111629302, 0.07495818245214292, 0.07793519533531068, 0.08273497843959399, 0.07849583791556292, 0.08914781993801058, 0.1138800836284819, 0.11455250185933707, 0.09577592786822953, 0.09813377973434523, 0.0863286779586, 0.08192173907256617, 0.09616621202765707, 0.08568857470268554, 0.9791556812330487, 0.9804594766198071, 0.971730769940113, 0.9570660678602385, 0.9367200305928521, 0.9646489227147231, 0.9605013673362499, 0.944965694963288, 0.9463243163544461, 0.5521264264106472, 0.4481730223789002, 0.5002415354507628, 0.4315602040311626, 0.4165338731980127, 0.42565635120124257, 0.4344485758736347, 0.5330217867564304, 0.4199289453387556, 0.3068825253111941, 0.2782471274740933, 0.2043724876333871, 0.2552461356866168, 0.298638263698905, 0.2948501163141536, 0.27210383785148484, 0.2197853980661102, 0.3089278256339585, 0.1770016103127776, 0.1426540892141509, 0.1238219238515823, 0.12639067511124813, 0.17130220548499941, 0.1780884452147793, 0.16064941535369048, 0.12687492218267016, 0.20855841025096178, 0.33970970653072874, 0.19290225934721206, 0.312418526361926, 0.19989659393557635, 0.2017874153909348, 0.15311049591457104, 0.20529873601504, 0.157011305246596, 0.15762786651290606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06684184989699549, 0.005173904888243319, 9.999999999998899e-05, 0.0672084625723548, 9.999999999998899e-05, 0.13321064021927254, 0.0888362772572644, 0.14596051637429586, 0.17193547063576675, 0.168273715921622, 0.19612109558716506, 0.0654123148311937, 0.257035060141122, 0.259359640999254, 0.19309599578277503, 0.09455524351243039, 0.096426906037968, 0.05015404155375014, 0.12577284724412907, 0.13871166947541802, 0.3121335949658596, 0.13681126112077946, 0.10757084589537613, 0.07475047305272675, 0.18655544174888872, 0.16705207244496656, 0.19002420300828549, 0.3290123412293481, 0.06072700422236432, 0.1394892588532597, 0.21343279046229002, 0.0878540843908453, 0.08332584007506483, 0.27134191999485335, 0.26403291775669424, 0.2748143294458082, 0.2675168239006698, 0.26531707693016704, 0.26977417256894887, 0.2737247385815116, 0.26612490510027886, 0.25957767541687005, 0.09364693795541101, 0.07940213458592138, 0.08729213117563484, 0.08296981930486469, 0.07713933651697402, 0.086610760055148, 0.0764257371058693, 0.07266915328648882, 0.09728199870620269, 0.21136808065293267, 0.11888152455000034, 0.133190073403337, 0.14911650393290488, 0.20253536654291637, 0.13979945126468996, 0.14915952511654362, 0.17120550612705232, 0.1534881405863865, 0.21655110702571123, 0.19990823498265164, 0.21316320725807714, 0.19795139875461243, 0.20758480883131536, 0.22657943889328303, 0.2156094548541605, 0.20893218615968778, 0.23511816853584655, 0.1858524680777457, 0.15413490047529044, 0.16147249368993766, 0.15275595151840138, 0.18130795784983655, 0.1729758900167213, 0.16754244664635265, 0.15375562986247715, 0.16222209749216687, 0.18044786874393626, 0.18387685179624869, 0.19260144488852615, 0.22191761158617285, 0.18889543668388575, 0.20021238830345767, 0.2044209004029336, 0.20240758264170977, 0.2085052890744048, 0.18233288636590084, 0.19214642995401143, 0.1889586563906389, 0.2152682323458851, 0.18782335000117567, 0.4041990648139734, 0.19044353488118715, 0.2088922806690836, 0.19936126717971092, 0.39343345247287853, 0.1346976662589121, 0.1502025101032084, 0.39383807683812777, 0.18289017788903483, 0.18427057819630333, 0.41946729542372596, 0.16842829803301174, 0.4986022417450271, 0.3659348695035055, 0.16023509215013187, 0.11057368219889885, 0.20282159436658787, 0.16722073997439235, 0.2025337585686805, 0.10219058853443963, 0.10373333280945318, 0.41234635916130113, 0.18333305577906012, 0.17123137214539552, 0.19464335747526906, 0.16712003756230898, 0.19391081731632365, 0.16707809325088818, 0.17533930746855353, 0.17786267855411986, 0.21198110066405962, 0.08035471584387, 0.07189641545002601, 0.07953886564096735, 0.07816625768738472, 0.07429631420995286, 0.07261245973557617, 0.07584273450402912, 0.07092447363235133, 0.07661915318870816]}, "mutation_prompt": null}
{"id": "39c1dad6-87a1-4cdd-9d3a-5f6219ff0d39", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "c47a0686-e8ea-4960-9963-7863337e98c6", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "b87ae0b2-f5a7-4338-a5a3-031540fca583", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "799c1066-df84-48b1-b566-95f8686370e4", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "81eff369-5394-44f4-a710-69dafa26c69d", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "bbb8e821-84ca-40e0-8eeb-63fdb4bc2e1c", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "57606e0d-c876-4231-b0e3-99222d4e2a3e", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "c2f8dde8-dc61-49ac-a231-eddcaec04266", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                improvement_mask = fitness_values < best_fitness\n                best_fitness[improvement_mask], best_positions[improvement_mask] = fitness_values[improvement_mask], particles[improvement_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                cognitive_rand, social_rand = random_numbers[:, 0][:, None], random_numbers[:, 1][:, None]\n                inertia_cognitive, inertia_social = inertia_weight * cognitive_param, inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * cognitive_rand * diff_best + inertia_social * social_rand * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                random_accept = np.random.rand(self.num_particles) < accept_probabilities\n                accept_mask = np.logical_or(accept_mask, random_accept)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved", "description": "Enhanced efficiency by simplifying velocity and position updates, reducing redundant calculations, and optimizing the acceptance probability computation in the PSO-SA hybrid algorithm.", "configspace": "", "generation": 95, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_PerformanceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "5485f82d-9143-4921-bd4c-5dc2df7e2718", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n            \n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                improvement_mask = fitness_values < best_fitness\n                best_fitness[improvement_mask], best_positions[improvement_mask] = fitness_values[improvement_mask], particles[improvement_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n        \n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Improved algorithm efficiency by utilizing vectorized operations, reducing redundant calculations, and optimizing the update process.", "configspace": "", "generation": 96, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "de7b9b96-9854-4d0d-b884-515e17108b35", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "5ac18c23-ddd8-4137-95cd-d7608c86a0bf", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            best_positions = particles.copy()\n            best_fitness = np.full(self.num_particles, np.inf)\n            global_best_position = np.zeros(self.dim)\n            global_best_fitness = np.inf\n            temperature = 100.0\n            alpha, final_temperature = 0.99, 0.1\n            inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n            for _ in range(self.max_iter):\n                fitness_values = np.array([func(p) for p in particles])\n\n                update_mask = fitness_values < best_fitness\n                best_fitness[update_mask], best_positions[update_mask] = fitness_values[update_mask], particles[update_mask]\n\n                global_best_index = np.argmin(fitness_values)\n                if fitness_values[global_best_index] < global_best_fitness:\n                    global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n                random_numbers = np.random.rand(self.num_particles, 2)\n                inertia_cognitive = inertia_weight * cognitive_param\n                inertia_social = inertia_weight * social_param\n                diff_best = best_positions - particles\n                diff_global = global_best_position - particles\n                velocities = inertia_weight * velocities + inertia_cognitive * random_numbers[:, 0][:, None] * diff_best + inertia_social * random_numbers[:, 1][:, None] * diff_global\n                particles = np.clip(particles + velocities, -5.0, 5.0)\n\n                random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n                new_positions = particles + random_displacements\n                new_fitness_values = np.array([func(p) for p in new_positions])\n\n                accept_mask = new_fitness_values < fitness_values\n                accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n                accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n                particles = np.where(accept_mask[:, None], new_positions, particles)\n                temperature = max(alpha * temperature, final_temperature)\n\n        pso_sa_optimization()\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved", "description": "Improved efficiency by simplifying the velocity update calculation further and optimizing the particle update process while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
{"id": "8ed82a17-624d-4169-ae17-6aa53161101e", "solution": "import numpy as np\n\nclass Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000):\n        self.budget, self.dim, self.num_particles, self.max_iter = budget, dim, num_particles, max_iter\n\n    def __call__(self, func):\n        particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_fitness = np.full(self.num_particles, np.inf)\n        global_best_position = np.zeros(self.dim)\n        global_best_fitness = np.inf\n        temperature = 100.0\n        alpha, final_temperature = 0.99, 0.1\n        inertia_weight, cognitive_param, social_param = 0.5, 2.0, 2.0\n\n        for _ in range(self.max_iter):\n            fitness_values = np.array([func(p) for p in particles])\n\n            update_mask = fitness_values < best_fitness\n            np.putmask(best_fitness, update_mask, fitness_values)\n            np.putmask(best_positions, np.tile(update_mask, (self.dim, 1)).T, particles)\n\n            global_best_index = np.argmin(fitness_values)\n            if fitness_values[global_best_index] < global_best_fitness:\n                global_best_fitness, global_best_position = fitness_values[global_best_index], particles[global_best_index]\n\n            random_numbers = np.random.rand(self.num_particles, 2)\n            inertia_cognitive = inertia_weight * cognitive_param\n            inertia_social = inertia_weight * social_param\n            diff_best = best_positions - particles\n            diff_global = global_best_position - particles\n            velocities = np.multiply(inertia_weight, velocities) + np.multiply(inertia_cognitive * random_numbers[:, 0][:, None], diff_best) + np.multiply(inertia_social * random_numbers[:, 1][:, None], diff_global)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n\n            random_displacements = np.random.normal(0, 1, (self.num_particles, self.dim))\n            new_positions = particles + random_displacements\n            new_fitness_values = np.array([func(p) for p in new_positions])\n\n            accept_mask = new_fitness_values < fitness_values\n            accept_probabilities = np.exp((fitness_values - new_fitness_values) / temperature)\n            accept_mask = np.logical_or(accept_mask, np.random.rand(self.num_particles) < accept_probabilities)\n\n            particles = np.where(np.tile(accept_mask, (self.dim, 1)).T, new_positions, particles)\n            temperature = max(alpha * temperature, final_temperature)\n\n        return global_best_position", "name": "Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance", "description": "Enhancing the computation efficiency by optimizing the velocity update calculation and simplifying the particle update process through streamlined vectorized operations while maintaining the core PSO-SA hybrid mechanism.", "configspace": "", "generation": 99, "fitness": 0.21259388820797562, "feedback": "The algorithm Enhanced_Modified_PSO_SA_Hybrid_Improved_Performance got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0d881789-3c44-4b7f-80b3-3825d5cd3f4c", "metadata": {"aucs": [0.2635974857306992, 0.2837715522114235, 0.24764562222884745, 0.26056975236138136, 0.30579194995533265, 0.2779755512015758, 0.2699377204561053, 0.27434195840855435, 0.25168171080489843, 9.999999999998899e-05, 0.045493517568513164, 0.042048099568224084, 0.1227676603581429, 0.048513523358345134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07848396649797451, 0.06870795312536193, 0.09141232368222085, 0.09097177899730413, 0.10140791301615049, 0.07897995930609192, 0.09773624907965572, 0.10225874264722479, 0.07301534620129313, 0.1087931637830728, 0.1021070146200207, 0.1288522388845258, 0.08907719521285051, 0.0882571658157203, 0.11591122741292526, 0.08960613503786496, 0.09007285501016726, 0.08455209229811045, 0.9791556812330487, 0.9805215041857814, 0.971730769940113, 0.9570660678602385, 0.9409139688719454, 0.9646489227147231, 0.9596303328218633, 0.944965694963288, 0.9453668306191239, 0.30984144917508794, 0.44168576297739703, 0.48330783584870374, 0.3580169880241595, 0.49814955970741426, 0.36196323073793746, 0.33167121211988493, 0.440414895963256, 0.5275586949841782, 0.2871575026724952, 0.3781092656849967, 0.20488511794591735, 0.2803299391834606, 0.2550578333632143, 0.22327633347123665, 0.29150897905739426, 0.24991762894776626, 0.3827023122292983, 0.18219146787290474, 0.13892249721439986, 0.2654904493361655, 0.18814228229948782, 0.2410046142028467, 0.2565366492424457, 0.18047087736565004, 0.12220203024768195, 0.20941170995223624, 0.29017871279639207, 0.12100338239039743, 0.1330951668389898, 0.13105066607853, 0.17372900169539696, 0.16747576194295, 0.24242964257389898, 0.16483630461322174, 0.2784136467121361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325908883339594, 9.999999999998899e-05, 0.007677256795188492, 0.011485014985837205, 9.999999999998899e-05, 0.07012139013343299, 0.16364531192490195, 0.2104760685766649, 0.11973132147650867, 0.18846772601664796, 0.13889925165455874, 0.1285728815603543, 0.5030613453215584, 0.21216678901609798, 0.1771816851844754, 0.10171016152831558, 0.05682848364344606, 0.05045637391380298, 0.13493173857534368, 0.13502932440721704, 0.08294472412332599, 0.13876029935456413, 0.10513811704465093, 0.07438263363741093, 0.14302123704847347, 0.0825694534597533, 0.18778828897924926, 0.1760817140779225, 0.09218582414561227, 0.1364664157662503, 0.0899584490160289, 0.08261013511443782, 0.08257090644797116, 0.26057115281102183, 0.2821701096092417, 0.2580136892793288, 0.26923695264833836, 0.27032578741393887, 0.28122924682235084, 0.2680036583847848, 0.27339329637580445, 0.28705346178285174, 0.08008630240562598, 0.09237376372911099, 0.08988883720469254, 0.06743839553447872, 0.09373374297423653, 0.09102410802098915, 0.08504549732040889, 0.09114247113024943, 0.08612865768437972, 0.14036934023466652, 0.15826301010931965, 0.19652546124591597, 0.24725764602253786, 0.22676811047995338, 0.19082200324389664, 0.2925048915866597, 0.1675797898050918, 0.2327001136021395, 0.21849585444667596, 0.2180422355873065, 0.20934539324720647, 0.22187152198229354, 0.2107772521774437, 0.20800160451786465, 0.21358437634320693, 0.20872471097830014, 0.20910296037682152, 0.1657986544507949, 0.1642312234034623, 0.17077000229222883, 0.1958689952091408, 0.18347844007966874, 0.1785452860605805, 0.1687748813603961, 0.1798082536433281, 0.20353005558480197, 0.1905341194500998, 0.18940587090496708, 0.19108797165294422, 0.19659490105455435, 0.17256685474610822, 0.2088433618497716, 0.18948878794503787, 0.2099323328155458, 0.2064475508871686, 0.18985251473551756, 0.2199768699481257, 0.19511804177525538, 0.2993717660476929, 0.20206276911526133, 0.19065786788894412, 0.1910900772608689, 0.22618535096570247, 0.20069721282195407, 0.4744203607358711, 0.12462882098152117, 0.1513954537073252, 0.49274990716882305, 0.1905354240724344, 0.18856882673296227, 0.161682545753409, 0.16871887996461976, 0.4370987114035211, 0.4044589927822484, 0.15615177895872545, 0.11191388306467687, 0.20340103315274105, 0.47955544474955103, 0.2014015134573962, 0.10344153946395851, 0.10343060578741947, 0.37385368913957684, 0.19967791713041683, 0.19034803992406757, 0.17187412248138279, 0.1870754680495249, 0.18707459058651077, 0.17249412516113938, 0.1737800041441927, 0.19854173958074317, 0.18041032179312988, 0.07822365500656248, 0.06830800271288173, 0.06825677686558373, 0.07764465244077234, 0.06544340341143451, 0.08641801319795106, 0.0805344713321714, 0.08276132163184835, 0.07603238004295054]}, "mutation_prompt": null}
