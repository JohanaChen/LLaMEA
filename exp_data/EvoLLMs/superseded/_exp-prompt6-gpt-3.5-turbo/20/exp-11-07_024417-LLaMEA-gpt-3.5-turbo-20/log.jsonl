{"id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "f9371d37-44df-4a36-854f-8e4abfd7185c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "0541dbce-77e7-438e-a6ac-edc2ec916576", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "a6479975-736f-4c59-93b2-891f9205d7ac", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "8f8322b5-8440-4d2c-895f-e364cc273ae8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "a673d09f-0abf-4888-b896-0d2e153853da", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "524b2f36-000f-4892-ae26-5b7729d197d7", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "418ae595-ef86-48ae-a828-eaa626c175da", "solution": "import numpy as np\n\nclass HybridPSOGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.max_iter):\n            best_idx = np.argmin(fitness)\n            global_best = population[best_idx].copy()\n            \n            for i in range(self.population_size):\n                # PSO update\n                velocity = np.random.rand(self.dim) * velocity + self.c1 * np.random.rand(self.dim) * (\n                        population[best_idx] - population[i]) + self.c2 * np.random.rand(self.dim) * (\n                                   global_best - population[i])\n                population[i] += velocity\n                \n                # GA mutation\n                if np.random.rand() < self.mutation_rate:\n                    population[i] += np.random.uniform(-0.1, 0.1, self.dim)\n                \n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                fitness[i] = func(population[i])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridPSOGA", "description": "Utilize a hybridization of Particle Swarm Optimization (PSO) and Genetic Algorithm (GA) to enhance exploration and exploitation capabilities for black box optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "05c0801c-b7a0-44a7-86f7-9adcd3b061e7", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {}, "mutation_prompt": null}
{"id": "e3769532-16f7-44fb-836d-a45562aa6c82", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 9, "fitness": 0.14869223442184468, "feedback": "The algorithm ImprovedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "4c9eb57f-fd99-4e79-b821-63bbe5d6a231", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "ed2a20c3-f7b4-478b-addf-cf04dc790747", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "e7e58fe9-01dc-4273-811c-8ce41d98a5a1", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "083525e7-cd5e-4332-b267-92783b6ade72", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "2c183c36-becf-4b2f-8233-5547dc6cdf86", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "fbe5e9d0-1a29-41bb-9fc1-5af15a8e6e56", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "8bc69cf0-2e3e-4b33-8fe3-7e7268f233a0", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "459ebd55-0efc-40c0-87d2-d187041ecbe2", "solution": "import numpy as np\n\nclass ImprovedPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for t in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n\n            update_pbest = scores < pbest_scores\n            pbest_scores[update_pbest] = scores[update_pbest]\n            pbest_positions[update_pbest] = swarm[update_pbest]\n\n            update_gbest = pbest_scores < gbest_score\n            gbest_score = np.where(update_gbest, pbest_scores, gbest_score)\n            gbest_position = np.where(update_gbest[:, None], pbest_positions, gbest_position)\n\n            r1, r2 = np.random.uniform(0, 1, (2, self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm += velocities\n\n            np.clip(swarm, self.lower_bound, self.upper_bound, out=swarm)\n\n            inertia_weight = self.inertia_max - (t / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSOImproved", "description": "Efficiently update the velocities and positions of particles in the ImprovedPSO algorithm by vectorizing calculations and reducing redundant operations.", "configspace": "", "generation": 16, "fitness": 0.03967348546403345, "feedback": "The algorithm ImprovedPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.08774815958588056, 0.06432772651221763, 0.09169502728636048, 0.08952233024927114, 0.062138895920524906, 0.07709668639236078, 0.07795415841203734, 0.07431300570909605, 0.06863468668670525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.010643411704069683, 0.0012186513362246743, 0.006669962766643223, 0.018248263482334326, 9.999999999998899e-05, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.052233822106523387, 0.0667108215001172, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.14838054695461433, 0.09425923977458062, 0.09708865527373767, 0.09580441870675127, 0.16112956940342849, 0.09716408355800721, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.08609370886951495, 0.059328965068867756, 0.09855305120349966, 0.10852972522114013, 0.05643121168494414, 0.08808199726801991, 0.06064507323521173, 0.07726393575557644, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.13800672315110074, 0.1138073754026484, 0.1025140421398899, 0.12028165949079228, 0.17377774300845283, 0.11363346445524236, 0.03812976025022474, 0.034008147686441226, 0.05463654710198407, 0.056957211629895754, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09388200728521401, 0.13345086981233123, 0.10289055837941885, 0.07855245954393053, 0.09307045902971678, 0.12245976138762271, 0.07872931414554718, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568623559107733, 0.07466602457976645, 0.08167024703901915, 0.06718871428537254, 0.1207914665021157, 0.06661401029160186, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.020576850526452972, 0.0506857903344724, 0.03738259240699027, 0.045511073114331335, 0.04690376827171172, 0.04019044166964181, 0.04143420019681854, 0.13480174570059533, 0.128372137474824, 0.14763022729669195, 0.11599487746987158, 0.11402400224796383, 0.12465113207635137, 0.14969714796693134, 0.11383213438624773, 0.14689007985489466, 0.007141279024827196, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 9.999999999998899e-05, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "4c17e866-c4b6-4c0e-8f87-4ba058a1e4d8", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "c1839a25-0ecd-4b2c-83b0-788fb347f40d", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "2226750d-71a4-49bb-b32f-c0cd4d14a1d8", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "0dcb799a-756d-44ff-a2c1-e1213fd16755", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "e99210e6-5ef8-47b1-9b2b-05dbb25aa0be", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "ca3e5bcd-0f32-4de5-88b1-d8b952cebc8c", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            updates = scores < pbest_scores\n            pbest_scores[updates] = scores[updates]\n            pbest_positions[updates] = swarm[updates]\n            new_gbest = np.argmin(scores)\n            if scores[new_gbest] < gbest_score:\n                gbest_score = scores[new_gbest]\n                gbest_position = swarm[new_gbest]\n\n            r1, r2 = np.random.uniform(0, 1, (2, self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Enhanced ImprovedPSO algorithm with optimized velocity calculation and simplified loop structure for improved efficiency.", "configspace": "", "generation": 22, "fitness": 0.12146102141331548, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.21873317745880594, 0.12467227044608875, 0.186664593260653, 0.15794509861333028, 0.15978574031516124, 0.1623476681805529, 0.2831551074931523, 0.1396904590662401, 0.16747893620447085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049438581226526224, 0.04302578018511538, 0.054465899181377786, 0.03390801531352827, 0.04232931756310987, 0.044143233377022084, 0.04266585708672177, 0.03650824232095473, 0.08365277363008006, 0.028269303995511308, 0.03127047797555149, 0.016161234029509197, 0.04228379555651485, 0.007014583922875128, 0.03038467682773005, 0.035085229651135474, 0.027268392777546113, 0.01614679833331434, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.06772045847781305, 0.05399230702000346, 0.09300410661201841, 0.08930246717910706, 0.03126760613147783, 0.11137764411751172, 0.08696313354678009, 0.06923875077629438, 0.05101863533265061, 0.16158385868599567, 0.08567807911944891, 0.12068740110325704, 0.151216273123704, 0.10483040600586102, 0.15991479639015815, 0.0664664328463479, 0.11593315194590981, 0.03470041246344191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03853579229694393, 0.012153077177020521, 9.999999999998899e-05, 0.009029991925410874, 0.009828612047951157, 0.013123334429052003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010426088502167974, 0.01980269076704566, 0.026496522934442712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029628602131813397, 9.999999999998899e-05, 0.04812888934658621, 9.999999999998899e-05, 9.999999999998899e-05, 0.006214007316273418, 0.011381178672816739, 0.030195136333108552, 0.01195218642947915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029614725564803823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025116613498310292, 9.999999999998899e-05, 0.010077875336966802, 0.20244879243549962, 0.22307385558173787, 0.16770453615997993, 0.16592696090791215, 0.19113520268238604, 0.17448073911015394, 0.2577175684631061, 0.11897384379949871, 0.18462677693773344, 0.05036142542635458, 0.05373618295393168, 0.04554412607409686, 0.06263046134062789, 0.022852391456432586, 0.06362875862291262, 0.06437371964918204, 0.05281654867734664, 0.04793285317828244, 0.10324655262997462, 0.11191668152156575, 0.11483085986864894, 0.19335467899370562, 0.1484090187648529, 0.12170057289619896, 0.1433465739804245, 0.08375066436507572, 0.17380319341347217, 0.15891117649328768, 0.17209691093825674, 0.17506209379717297, 0.15428094136290815, 0.12933126304363196, 0.17832244357445326, 0.15299476120630118, 0.20695754011961198, 0.16679405964424276, 0.09124715545481887, 0.07748412443630892, 0.11563405559601148, 0.10924599385467482, 0.09050802984464357, 0.1097978026846147, 0.11325636731952049, 0.1503552386878526, 0.09022142691411938, 0.16437943474655936, 0.1251539281880396, 0.1520565719637933, 0.1397307055655812, 0.15624930320125607, 0.13036137662850555, 0.1573558640202697, 0.1591180446280669, 0.17651050300255078, 0.16638261227345408, 0.0945548635649297, 0.14560178766847842, 0.14996578130946614, 0.15132677521315474, 0.15160916515499734, 0.1481275722549169, 0.14247637208837238, 0.15087721077496186, 0.14527381595800382, 0.16538786945215256, 0.13029284392023743, 0.1704213111085977, 0.1679496531696434, 0.09072410016284715, 0.09018031388138281, 0.12291225907935932, 0.16682143540698013, 0.267110238095845, 0.10711780019013661, 0.1638299111378796, 0.0977457059834771, 0.16985292641711225, 0.1077464498961066, 0.11767021730304605, 0.1713734528546289, 0.1750913360307843, 0.1633263951198527, 0.1680106976108926, 0.17592293691950256, 0.17185241693955555, 0.18439776411111608, 0.17121238907351166, 0.18164415411139567, 0.1809642199046153, 0.1814363469374507, 0.04665654375776007, 0.041767399210525746, 0.05915927003488164, 0.05232034795548646, 0.05755541487104732, 0.032656094677511294, 0.03545546349040685, 0.022819908262075472, 0.05116933288792902]}, "mutation_prompt": null}
{"id": "263c22ad-28e2-4faa-9144-6ab6adb722e4", "solution": "import numpy as np\n\nclass ImprovedPSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n\n            best_particle = np.argmin(pbest_scores)\n            if pbest_scores[best_particle] < gbest_score:\n                gbest_score = pbest_scores[best_particle]\n                gbest_position = pbest_positions[best_particle].copy()\n\n            r1, r2 = np.random.uniform(0, 1, (2, self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm += velocities\n\n            np.clip(swarm, self.lower_bound, self.upper_bound, out=swarm)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSOPlus", "description": "ImprovedPSO+ is an enhanced variant of ImprovedPSO with streamlined calculations and reduced loop complexity to improve efficiency in optimizing black box functions.", "configspace": "", "generation": 23, "fitness": 0.14869223442184468, "feedback": "The algorithm ImprovedPSOPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "8b2778e3-13a7-4db4-abf1-898dc2fd4dc1", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "ed0b239a-7f58-40d0-bd7c-83c6eb5e2868", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "0457c550-c8c2-48ec-bd1e-c0ec4c061c5a", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "ebe39651-d0ff-4878-9811-03b5d6781f8e", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "3cc8aa48-1c85-4175-adb8-c2664cab8ff9", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "cb6a89cb-abd3-49cf-8c70-2f83351372d3", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "b40882a9-bd07-465f-aaee-f2ab914c3e52", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "f3865b98-525c-495a-8f3c-a3f131cc2a28", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "54ecea1e-b147-461b-8189-2fec72090485", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            update_pbest = scores < pbest_scores\n            pbest_scores[update_pbest] = scores[update_pbest]\n            pbest_positions[update_pbest] = swarm[update_pbest]\n            best_particle = np.argmin(pbest_scores)\n            if pbest_scores[best_particle] < gbest_score:\n                gbest_score = pbest_scores[best_particle]\n                gbest_position = pbest_positions[best_particle]\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by vectorizing the particle update process and utilizing numpy operations to reduce computational complexity.", "configspace": "", "generation": 32, "fitness": 0.14869223442184468, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "7e8bbc40-d48a-4cab-89c9-af9e330da0e4", "solution": "import numpy as np\n\nclass EfficientPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_score = np.inf\n        gbest_position = np.zeros(self.dim)\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            update_pbest = scores < pbest_scores\n            pbest_scores = np.where(update_pbest, scores, pbest_scores)\n            \n            update_gbest = pbest_scores < gbest_score\n            gbest_score = np.where(update_gbest, pbest_scores, gbest_score)\n            gbest_position = np.where(update_gbest[:, np.newaxis], swarm, gbest_position)\n            \n            r = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + self.c1 * r[:,:,0] * (pbest_positions - swarm) + self.c2 * r[:,:,1] * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EfficientPSO", "description": "Optimizing ImprovedPSO algorithm by reducing redundant array copying and improving velocity update efficiency.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'pbest_positions' is not defined\").", "error": "NameError(\"name 'pbest_positions' is not defined\")", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {}, "mutation_prompt": null}
{"id": "6bfc4d6f-2fdd-4c8a-9843-eab880895114", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "3d075a16-4e1f-4b37-a2c5-e713be847bb5", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "4f40a1ee-9a3b-4092-88ba-9c743ced5719", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "c7b719cc-674b-4c02-975a-aff577b96698", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "7059953a-9f38-4c10-8b32-72684a9cf8d2", "solution": "import numpy as np\n\nclass EfficientPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for t in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            better_pbest = scores < pbest_scores\n            pbest_scores[better_pbest] = scores[better_pbest]\n            pbest_positions[better_pbest] = swarm[better_pbest].copy()\n            \n            gbest_index = np.argmin(pbest_scores)\n            gbest_score = pbest_scores[gbest_index]\n            gbest_position = pbest_positions[gbest_index].copy()\n\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = np.clip(swarm + velocities, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - t / self.budget * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EfficientPSO", "description": "Improving efficiency by vectorizing the calculation of particle updates and simplifying the inertia weight update process.", "configspace": "", "generation": 38, "fitness": 0.1484874252807693, "feedback": "The algorithm EfficientPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.1596143482240754, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.14069139605638026, 0.14348896229192887, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "deedb605-ff3c-4df8-b349-73480c70177b", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "5115b053-de84-4c8a-873d-d9eabfde54e9", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "7c8ece8d-3cd2-4b08-b7e6-2058cda924ea", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "14be29b3-e82b-4114-9295-4f3d0d884087", "solution": "import numpy as np\n\nclass ImprovedPSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.apply_along_axis(func, 1, swarm)  # Evaluating all particles at once\n            update_pbest = scores < pbest_scores\n            pbest_scores[update_pbest] = scores[update_pbest]\n            pbest_positions[update_pbest] = swarm[update_pbest]\n\n            gbest_mask = np.argmin(scores)\n            if scores[gbest_mask] < gbest_score:\n                gbest_score = scores[gbest_mask]\n                gbest_position = swarm[gbest_mask]\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm += velocities\n\n            np.clip(swarm, self.lower_bound, self.upper_bound, out=swarm)  # In-place clip operation\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSOPlus", "description": "ImprovedPSO+ utilizes a vectorized approach to update particle positions and velocities simultaneously, reducing loop iterations and enhancing computational efficiency.", "configspace": "", "generation": 42, "fitness": 0.13755747134366236, "feedback": "The algorithm ImprovedPSOPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.27696139121609153, 0.21363291512196825, 0.189556120171134, 0.18431636708189492, 0.22644704844540497, 0.19875095279469213, 0.26687277145717536, 0.21342354259127894, 0.1802250771968975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046767652843753615, 0.05908333318887693, 0.04984006997070356, 0.0566129070036272, 0.05643398386502263, 0.05209791715859957, 0.042264654254512646, 0.051217187277644016, 0.06688172413994142, 0.05994706768413649, 0.06382590026088653, 0.0489719579711515, 0.06847772645573225, 0.047573348582219066, 0.051444804415956225, 0.022714955753856514, 0.0398632069642183, 0.07232285292580432, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.09306562776649918, 0.0564216776760742, 0.09284262008314181, 0.11751944984822771, 0.0909005936041738, 0.1332244749031697, 0.1382389092270465, 0.11842310810748258, 0.08461239753748251, 0.16050566007412603, 0.1454594224155148, 0.1256442987055738, 0.15726760381586768, 0.166570313155338, 0.13947548764909823, 0.14098363672824654, 0.12342143394732608, 0.15222029018477334, 0.01085679693296937, 0.014487230965342546, 9.999999999998899e-05, 0.07499806656672814, 0.015634685241554647, 9.999999999998899e-05, 0.011190131254536162, 0.018485593881980678, 0.07873746624479405, 0.03587615741938921, 0.02102674827864104, 0.03289399246642333, 0.03669282176725086, 0.030845996555759703, 0.026288231645766214, 0.0031274569952504105, 0.018764997313877374, 0.007542543017684644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040726523987373864, 0.022385767178155436, 0.043390819152415494, 0.03045391400022235, 9.999999999998899e-05, 0.0036418521994262543, 0.029034547024961666, 0.03255419672428439, 0.025102758795594315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017168801205720063, 9.999999999998899e-05, 0.019271671156938064, 0.013586134163505847, 9.999999999998899e-05, 9.999999999998899e-05, 0.02739246680721974, 9.999999999998899e-05, 0.010868880442407525, 0.21375396101647892, 0.24448098919033612, 0.22686585562671513, 0.2959406858148371, 0.25244304836361375, 0.194355161838216, 0.2616142278989628, 0.2151230041119181, 0.19806803726462918, 0.06851760679977137, 0.05709293367352164, 0.05055274174981472, 0.0593989862158425, 0.05427255880185344, 0.09378934611713374, 0.06465710309665196, 0.058996288749748604, 0.04330973505161906, 0.13979146237764695, 0.14368790340384674, 0.1549856937139884, 0.22326818493838496, 0.16062918249593294, 0.14172247067781485, 0.16634647645703604, 0.13091848646008653, 0.1669182863693659, 0.19337117112340907, 0.1830408693283162, 0.18481044868903995, 0.18433734974012417, 0.170839488038237, 0.1812151910636287, 0.16090449666080697, 0.2229599001870899, 0.15766625512911958, 0.1393736923252995, 0.09933431932273595, 0.11246337374467252, 0.11170698819962632, 0.12294003781199259, 0.13305160650293035, 0.14649383692192586, 0.1558104509522622, 0.1648118053937926, 0.1648482741238977, 0.1385038708818902, 0.15561263295262306, 0.17740179395949618, 0.17333876659198122, 0.17689459183328582, 0.17447605849837367, 0.1611051661385654, 0.14971385749385613, 0.17165121557965013, 0.1553442404937636, 0.16581718813615465, 0.14653719068125715, 0.14346058068354284, 0.1582610682173563, 0.15019902925432105, 0.15226939291641428, 0.15050481950522154, 0.16616047684894897, 0.1621721789633741, 0.13925637677382363, 0.14350906223190563, 0.1677532126940412, 0.16136084771250192, 0.1065007323376993, 0.14126261797567674, 0.16680997593203684, 0.22177980924574758, 0.1462878766459479, 0.15388677276397744, 0.19116966523626677, 0.20560640025151877, 0.1470412132597987, 0.1808816486351389, 0.18490548509001348, 0.19904190570653013, 0.19138080832765947, 0.17105222815647814, 0.19134177568969302, 0.2005454745406644, 0.1789033428705461, 0.1824967614609937, 0.18212667035778973, 0.19428360961511915, 0.18853846583028744, 0.05193922582806754, 0.050787363110878836, 0.055373482821640896, 0.04743377655820391, 0.05307508780314507, 0.04409777307454266, 0.056327520396657005, 0.054196619684490854, 0.04541183417735306]}, "mutation_prompt": null}
{"id": "5f2f4bc9-465d-4d6b-b49c-5f7951484cd8", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "2bd8232e-abce-4c0d-8e8a-a286b8c6dc55", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "931253dc-36d8-4c64-b8ab-6513f90addf1", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "226853bd-7fac-43cb-818d-eb139a62bbae", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "ed0f7161-8734-4a1a-916d-4410ab62e35f", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "6a50982a-7ae4-4223-b55e-59c31dac729a", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "7bf5c77f-0d50-446e-8302-d04681139206", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            better_indices = np.where(scores < pbest_scores)[0]\n            pbest_scores[better_indices] = scores[better_indices]\n            pbest_positions[better_indices] = swarm[better_indices].copy()\n\n            gbest_index = np.argmin(pbest_scores)\n            if pbest_scores[gbest_index] < gbest_score:\n                gbest_score = pbest_scores[gbest_index]\n                gbest_position = swarm[gbest_index].copy()\n\n            r = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r * (pbest_positions - swarm) + self.c2 * r * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Enhanced version of ImprovedPSO algorithm by optimizing calculation efficiency and simplifying loop structures.", "configspace": "", "generation": 49, "fitness": 0.1331677752340202, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.20455994951836354, 0.18259521303074766, 0.2056019017844436, 0.1886872587125743, 0.15634709876437813, 0.17977079441303012, 0.1700996271988322, 0.21526743922855485, 0.17230217989648322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04726064775074823, 0.05112741187750036, 0.05943788688570917, 0.04770627829946772, 0.05178891880847514, 0.05157833320120009, 0.05987388718943243, 0.0454736942795857, 0.0460262595950528, 0.049517938140219986, 0.046264311145318926, 0.045103137660469805, 0.047162816918921324, 0.05067256780905083, 0.03778394418300468, 0.03017996090703312, 0.02970613335455674, 0.052183426260191346, 0.993006330506489, 0.9935807350744101, 0.9941600471559385, 0.9907740401544033, 0.9930182907123047, 0.9913342654009902, 0.9923235693366372, 0.99163622114403, 0.9896251923572813, 0.05650283438420467, 0.057989257177704534, 0.11618346881558717, 0.12322999368938725, 0.10778178903610047, 0.10834708172021457, 0.09938924602651755, 0.08743534137373876, 0.08456583291239517, 0.15843942261514854, 0.0890517144549503, 0.12590237990786424, 0.1576353997349006, 0.1734730000578193, 0.13661196627809336, 0.09579551820760213, 0.12401458626759809, 0.15309647392287384, 9.999999999998899e-05, 0.003978758322835896, 9.999999999998899e-05, 0.02260523289893246, 0.005026540847748784, 9.999999999998899e-05, 0.04475636530617155, 0.027684846956811615, 0.007438781109583625, 9.999999999998899e-05, 0.039518228447586456, 0.02716224660622013, 0.009892939555567137, 9.999999999998899e-05, 9.999999999998899e-05, 0.010613016237734363, 9.999999999998899e-05, 0.02052040564187685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03971277626953962, 0.006398421857073844, 0.028556130307328176, 0.0003039284406713971, 0.0030297517127862994, 0.011419351057272098, 0.044090288546764556, 0.01946236767449594, 0.0040785239303934295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048698009884015625, 9.999999999998899e-05, 0.0035487602673094365, 0.006470511846789262, 9.999999999998899e-05, 9.999999999998899e-05, 0.011090571183773656, 0.014005857837955826, 0.017314165816888827, 0.20877942384627868, 0.3379655365397748, 0.2126238153775445, 0.2073229543092291, 0.2272288229426116, 0.20350468411859624, 0.23639437389007767, 0.13740883242484103, 0.22720361130946531, 0.04820154221347184, 0.05696834248938121, 0.056137195864294, 0.058321373206915994, 0.0559536494713988, 0.09098384099129075, 0.041800961788533875, 0.055072698042610724, 0.05442372419791641, 0.16340317561267836, 0.14133025757367246, 0.1854481595666685, 0.13261434394416816, 0.15664916167825416, 0.16273034550648646, 0.14667073875928838, 0.13876854203391398, 0.17699359282518257, 0.18779924983288332, 0.16700821628961438, 0.1882408636153201, 0.17343110542256313, 0.16472497146456777, 0.16657074996788157, 0.18489461869797175, 0.2048859761881603, 0.20727748960769465, 0.1315342398031265, 0.11987672847400643, 0.12044988959830194, 0.10615937463000014, 0.1246366485010445, 0.11461692007432644, 0.1338568560236063, 0.13699036242947527, 0.144488757772256, 0.1479899498476399, 0.14799200518155753, 0.1617731840685761, 0.1398903652585779, 0.1465391122017864, 0.16135626735457065, 0.14831755299917404, 0.15403316687106816, 0.1723066870910357, 0.14831957408183538, 0.14434156417328758, 0.15820089895327605, 0.1615449087294526, 0.14837897874904682, 0.14341236584156414, 0.1513054795573585, 0.14773567597056758, 0.1604202348851419, 0.266931592659419, 0.19798479665147106, 0.12329859898290885, 0.2381475016048611, 0.17052316007946322, 0.16374973345546606, 0.1450756278653953, 0.16477698464527912, 0.17081865546559805, 0.24064827096108588, 0.1583594574605366, 0.147577261993448, 0.14265791111654758, 0.15128848805642847, 0.10775453958228098, 0.19657258297454394, 0.19899837393683795, 0.17975223867826318, 0.18186364220971885, 0.1937043998052289, 0.1847386057919591, 0.19414421505656843, 0.19030046968025638, 0.1786246888887496, 0.18502621615012083, 0.19279686658783246, 0.18074287493324048, 0.060057929010588706, 0.05012776093916271, 0.05669288621048696, 0.05835177798407809, 0.05334363117409835, 0.05734696515443061, 0.04603326551266218, 0.05603615214853619, 0.047126842605291874]}, "mutation_prompt": null}
{"id": "0b9dd2d1-c28d-49a9-8286-d9b4c7b07655", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "1e39945a-62db-4b6a-a659-d94d0a86952a", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "9a59db8b-7f18-4d89-a67b-dbd7208e28bf", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "93c5389e-5c7f-4ab1-a83e-0e1463cecc1d", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "76920c9c-7b54-4aeb-940e-bdd4dee8d1cd", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "06069f7a-e38c-4bed-8435-c350ed960959", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "f2feae71-38e9-4e32-b61e-66c82bc4d07c", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "0c5ca858-5bbd-454c-afd9-934b0913f993", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "f6399e78-e1f9-4bab-8809-e183b1ec3c33", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "2ee3a081-6cf5-4f88-a30f-69751f12c782", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "0e22ec6e-937e-46b8-83e0-2744724b31cb", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "629c0d28-727f-4927-b078-7d8f473f5c27", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "9bfa3acb-e6cd-447a-b6db-e78a52d09cb7", "solution": "import numpy as np\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            for i, score in enumerate(scores):\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = swarm[i].copy()\n                    if score < gbest_score:\n                        gbest_score = score\n                        gbest_position = swarm[i].copy()\n\n            r1 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest_positions - swarm) + self.c2 * r2 * (gbest_position - swarm)\n            swarm = swarm + velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "ImprovedPSO", "description": "A novel metaheuristic algorithm based on Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive social learning to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2238770051371176, 0.2573964786293036, 0.25339757891502523, 0.18864974693657255, 0.29001473052704574, 0.2670041797732803, 0.2945647441602054, 0.28633776550422685, 0.1806398151717301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005101353526216323, 0.00480789270676063, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010504339395862594, 9.999999999998899e-05, 0.06734924753439842, 0.07580407828649238, 0.069077705952163, 0.08551857985488098, 0.05344629675476609, 0.07450586709380225, 0.0721756291790624, 0.06141743400171196, 0.09993687065607715, 0.043197853101774486, 0.049847409105936435, 0.03475107937006883, 0.07744925334668828, 0.041888702385748156, 0.0476483963468225, 0.06053131922114008, 0.05310083912100949, 0.05003854823171483, 0.9921746889913172, 0.9926088848311189, 0.991784436162409, 0.988557650247128, 0.98904638885933, 0.9897779767116873, 0.9913434600687678, 0.9891887874211749, 0.9909103293680384, 0.16120711937113485, 0.05776404673312585, 0.10679338392443405, 0.13798329337341253, 0.1276917453203632, 0.13515654365819085, 0.14112108072986063, 0.08821645521966426, 0.12003947085840605, 0.15941399841897252, 0.18656301930240893, 0.15581184322605168, 0.18449892773464716, 0.18120897127050573, 0.18565473788442188, 0.1444460904866195, 0.18417339213907358, 0.12221621363813961, 0.09055182234687431, 0.06512933899345985, 0.005424420743592395, 0.05383460165005016, 0.037035107094845476, 0.05421105434363416, 0.0514542297758076, 0.015845334117028154, 0.08541537787867204, 0.021380651241632576, 0.05015011209877973, 0.025386280728247, 0.0686710532468715, 0.009631682994941326, 0.02720913166736505, 0.028667275983709106, 0.025721254945093253, 0.037774314743500015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668615238806053, 0.003943664892348542, 0.13599148321809773, 0.05889288320382402, 9.999999999998899e-05, 0.014438925273082659, 0.0237848151901493, 0.024473648974419615, 0.062377431711272635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05667211155641361, 0.037989666078042106, 9.999999999998899e-05, 0.00019614880571461324, 0.04162616090157134, 0.016648779176229422, 0.029479260432299426, 0.2386637335152635, 0.26853943449627005, 0.2646102432369003, 0.20590489369967202, 0.2785882214513491, 0.20834282667092452, 0.3168221979051705, 0.22957959818169937, 0.2401256363349954, 0.0631044393671173, 0.07423833792380552, 0.05042048237982566, 0.07564322731348672, 0.061588374653323785, 0.07555782470993422, 0.07320169392663212, 0.06060283148931489, 0.05405375057099937, 0.19804004098284778, 0.16462254369190066, 0.16123445817536886, 0.19335467899370562, 0.1637491062966907, 0.14628344341334254, 0.16183940378204553, 0.1402418280603599, 0.18908744497433094, 0.2014834357506633, 0.1934723849447021, 0.18301318022194568, 0.20870798411195446, 0.17048388543676285, 0.1975697648814353, 0.18247613202671276, 0.21013293802063748, 0.2152607543974122, 0.13260808766459853, 0.1305866378462679, 0.14036902212847457, 0.13172222939145062, 0.11680265923429811, 0.14426229713424454, 0.1522299513583314, 0.15948991375866006, 0.1679485083140766, 0.1887258754657123, 0.1359431783202253, 0.16550239464345085, 0.1598684053067123, 0.14589260287986272, 0.1796287505205244, 0.1631935774034029, 0.1666794663259692, 0.17340211794550398, 0.1573509527304795, 0.16843924248291164, 0.16186359510083037, 0.16703115569785387, 0.16099699769211762, 0.1565499674760713, 0.16813186850837558, 0.16540709317127344, 0.1648996339093206, 0.3162786177618597, 0.16591785334578513, 0.14777978017537774, 0.29202535304841926, 0.1733457097076765, 0.12709502217787194, 0.1717691601453013, 0.1696247883354266, 0.18544578248843213, 0.23327363456499073, 0.14468880835620768, 0.15911678804571694, 0.16754229177473368, 0.2112289853849435, 0.1668587950857593, 0.1829189182309644, 0.18560086769001694, 0.19079897664899403, 0.17130791727691252, 0.19241736933370523, 0.1882003557498737, 0.1741152402685857, 0.18740120770982027, 0.19412401358109022, 0.18867661687539827, 0.19342801951248734, 0.18355403668435544, 0.06339259717262324, 0.05729884136533414, 0.0572287751314321, 0.05063553401766352, 0.05984374168226181, 0.05717611307392656, 0.0510099524004729, 0.05558289716039366, 0.05927798793576933]}, "mutation_prompt": null}
{"id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 63, "fitness": 0.14926744454480442, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "e3769532-16f7-44fb-836d-a45562aa6c82", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "0f1ac84e-19dc-4caa-b3a5-33b895f2ac21", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "e5584593-0a62-402f-92df-9b3cd49886cb", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "f9343603-3bcc-47e4-a9f4-5797ea592fc6", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "001ddc57-bf4e-4cea-9d3a-bbfcc38ead96", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "76e8204c-ca6f-47d9-a43d-bcb9ed12a96d", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "4fda42ed-8606-4681-be31-0a7dea6f7313", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "164251cd-21ee-4351-8688-dbbe65de7df7", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "e2b4b5a0-c109-46b9-a70a-3245f2ecd756", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "401fa740-3997-4303-a873-0457cc4c424d", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "a1ab1326-ecc0-41b1-81d9-0eb0cf738129", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "82d10b33-243f-4aa6-8b38-438844d76ed5", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return gbest_position", "name": "EnhancedPSO", "description": "Improving the efficiency of the ImprovedPSO algorithm by optimizing loop structures, reducing redundant calculations, and streamlining vector operations to enhance performance.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.2768448495841266, 0.22694931638305949, 0.2720521001889715, 0.24848382792773394, 0.19081361828316, 0.17973377024713222, 0.2842728540339303, 0.31949236184028473, 0.24349719204188047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05040929034310593, 0.108274905388283, 0.06475635895460796, 0.05554436942167085, 0.06602387486916927, 0.06831005418299207, 0.07945318723411987, 0.04064341957202722, 0.06201559568074522, 0.06825216293117042, 0.0634165762629405, 0.04864150804807288, 0.062024166607177356, 0.10630715910352151, 0.05651618164017691, 0.0533616835307168, 0.0649142905681096, 0.05302163914591762, 0.9908362572135876, 0.9934542696126275, 0.9941804514111486, 0.9892098533688909, 0.9911628037423805, 0.9888260558526567, 0.9922459629729312, 0.9940476557927616, 0.9918223838377193, 0.15151093370004587, 0.1509972246889263, 0.15348353962579642, 0.12824408824884026, 0.12800544840871275, 0.12016990364290125, 0.10926702736866278, 0.08783727946911624, 9.999999999998899e-05, 0.15912942783246253, 0.12525731755157, 0.13130131816491886, 0.1643029942969042, 0.18680273387911572, 0.17565133288937507, 0.16057882386085343, 0.19738754005259895, 0.11613112992626828, 0.014763461390195132, 0.0708245871930252, 0.09253170194456029, 0.017604293439379082, 0.0603319176729763, 0.024813893456410496, 0.040735649051594325, 0.06415695667381605, 0.04102017669475955, 0.09187042940266166, 0.010143947812899623, 0.0725546548608581, 0.07658528046689228, 0.011173285652880116, 0.09805473480161386, 0.04413909235116298, 0.00998871753879882, 0.05345430399939344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711821380805504, 0.02886944080874365, 0.04263780782496962, 0.05821452027798657, 0.004984484707087122, 0.002767501908159664, 0.050922532090810324, 0.02286820012449786, 0.011409070311627523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034515118704721126, 0.013698755930752982, 0.0049542848453691946, 0.042651175869676816, 0.0003204585230656143, 0.01646940113575457, 9.999999999998899e-05, 0.04273652791838012, 0.04189026553856312, 0.23631886809692515, 0.25181576812428197, 0.26227978171990773, 0.20632864926070105, 0.27908301987638984, 0.20742740489957678, 0.30443872839369135, 0.22875253138369755, 0.25508616635238834, 0.06662057239051467, 0.07386359892494643, 0.060599308338646685, 0.0759852915070145, 0.0564050059839587, 0.07793601379342363, 0.04315046882642126, 0.07340343815837547, 0.050060211954905065, 0.17746574179510588, 0.18449968721613863, 0.13975104690632945, 0.20989435335636863, 0.17496657135975857, 0.15088539627240738, 0.19564653033251844, 0.190076821608412, 0.1638890631074622, 0.18652579573611516, 0.18639796500060934, 0.2001624972788344, 0.20136233343554, 0.18198419778889952, 0.18430173168324704, 0.22544248463419259, 0.2040154041806196, 0.21472368078598003, 0.153317334422008, 0.16809698702579046, 0.14417594678665502, 0.12545317468295547, 0.14846359663332476, 0.10874111807713871, 0.1596561811407481, 0.16798411921078882, 0.1657499747373462, 0.15960610444214252, 0.12496696272437802, 0.16985402306097863, 0.17161148721893482, 0.15770227396556769, 0.16982876190481644, 0.1760532564250954, 0.16874112650154782, 0.15968527332291027, 0.1558713207503737, 0.15510987976153412, 0.16704693581372398, 0.17727090424524883, 0.15114430142378443, 0.16607597722636924, 0.16479419480306223, 0.1594973729925876, 0.15502355970682347, 0.2503895340633898, 0.15250970164323985, 0.1490347367465733, 0.24275861780834285, 0.1788982309237246, 0.17759353123802124, 0.10187154691754785, 0.1665684729298681, 0.16931631724803775, 0.2869937988026312, 0.16907166197936963, 0.1696524267297309, 0.16958945563177386, 0.162673392706431, 0.20185939238499273, 0.19543531323783936, 0.1973065558365199, 0.2696667688949126, 0.18177055974741352, 0.18109542859566397, 0.18534545033288163, 0.18732196878179963, 0.17695912751899034, 0.20678096371308508, 0.18828277990939946, 0.17826871206549955, 0.18227801328527793, 0.06628010564509534, 0.057033065751160184, 0.06130047747235401, 0.058125196707216165, 0.0652177393494201, 0.05612344808216663, 0.06452715241498841, 0.06293389847571329, 0.06325735820457634]}, "mutation_prompt": null}
{"id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 75, "fitness": 0.15111992401808994, "feedback": "The algorithm EnhancedDynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "fd45921c-e96b-401d-96a3-3b7e7df90f67", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "4accf304-7ab0-4616-9c54-86d8255370e9", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "a45396a8-03c0-46ad-9c12-8034d695de99", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "57d90793-4772-490b-a8db-f524f4ca944b", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "459764bc-dd38-45e6-b2d3-81b644561b8e", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "4d8dbf2c-734e-4ae8-8417-40560eb5ecda", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "600056b6-2fbe-4aa3-a904-f448c0af27a2", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "642ec8de-199e-4a4b-b946-60a5e020338b", "solution": "import numpy as np\n\nclass EnhancedDynamicPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n        \n        for it in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n                \n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            cognitive_component = self.c1 * (pbest_positions - swarm)\n            social_component = self.c2 * (gbest_position - swarm)\n            velocities = inertia_weight * velocities + r1_r2[:, :, 0] * cognitive_component + r1_r2[:, :, 1] * social_component\n            swarm += velocities\n            \n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)\n            \n            self.c1 = max(0.5, self.c1 - 0.01)\n            self.c2 = min(2.5, self.c2 + 0.01)\n        \n        return gbest_position", "name": "EnhancedDynamicPSOImproved", "description": "Improve efficiency by optimizing the calculation of new positions and velocities within the PSO algorithm.", "configspace": "", "generation": 82, "fitness": 0.15111992401309154, "feedback": "The algorithm EnhancedDynamicPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.2860923879773296, 0.20309151445673657, 0.2526997072247007, 0.2702219101440594, 0.18881696501678014, 0.186901220981476, 0.2815073155449631, 0.27468876692423894, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704924492, 0.07699217552169646, 0.05687148510230655, 0.05667472114917149, 0.06994203454471049, 0.0710988306638417, 0.07546027201377037, 0.06584359417613772, 0.05333318793944486, 0.050814456615503656, 0.06937041456614357, 0.0718287164997129, 0.041096468164133704, 0.06510632724372134, 0.06001723482921695, 0.050740445702037174, 0.06572880110315504, 0.06656157725558531, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648954335, 0.13030269931839156, 0.14510961118633348, 0.17372326904812363, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.03700834316328239, 9.999999999998899e-05, 0.06668312053936754, 0.09184585405274137, 0.08093656668700655, 0.078944400327004, 0.0724543647585626, 0.062377376332486745, 0.030595686563844704, 0.05091590582712857, 0.01636051028330543, 0.04588218489196627, 0.06549430587583216, 0.02339847623024016, 0.019471433447345587, 0.01989315266395042, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00915903079314917, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961224689, 0.030329289119044756, 0.05264604543607876, 0.013605269231180328, 0.007185494110690693, 0.06072514722016409, 0.07450320519574727, 0.03041193410589982, 0.022450600186760705, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.017566974287796966, 0.0009578960515808088, 0.03790993990820857, 0.0020191204331168056, 0.039642481011336494, 0.038265862614393464, 0.04347950472541795, 0.019039047191764635, 0.2615547281953483, 0.26687977176420685, 0.26676229408805774, 0.29120129361844693, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.05003514285872823, 0.09240163170212068, 0.06322372743273896, 0.06947031129493586, 0.06630923952328194, 0.053313363061071706, 0.07182150806499088, 0.06360502825569092, 0.1934521833774997, 0.15474425195459296, 0.19448091415951452, 0.1807328684137619, 0.17950386215426484, 0.22179233567533085, 0.20617668405195788, 0.17051965395129487, 0.13999115025597964, 0.21015357988366368, 0.18573043482138585, 0.20688417273660442, 0.1866169762547799, 0.1951857535272601, 0.1986364961962549, 0.23925962959972025, 0.2221751223749282, 0.22185320026506994, 0.1231249139586269, 0.14925079487569093, 0.12656189035283627, 0.12180879606447148, 0.159930988398018, 0.1562269907706656, 0.14177624031271518, 0.1695374428776164, 0.17093457167513226, 0.17436582138033807, 0.12952743563405222, 0.19208159210845965, 0.18257400712491134, 0.17239287412949034, 0.1671039969789665, 0.21274568513623382, 0.18487865119117486, 0.1677740208134887, 0.16914430161221494, 0.17538466353316085, 0.1773198015742422, 0.16575427871629234, 0.1603783937925638, 0.16067756764285424, 0.16339108900061328, 0.16563246039297896, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631235684, 0.341542501798904, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692509138, 0.2677685585342444, 0.21857409180588316, 0.1648855210382819, 0.3153043463055101, 0.19376499906909117, 0.18473083741798924, 0.18548823333773545, 0.18518613821845997, 0.2411206214921714, 0.19423380026267723, 0.19028499680686295, 0.186541687491662, 0.20174138428188004, 0.18071854429754297, 0.17723864809445533, 0.1805358840760466, 0.20623242801616137, 0.19020939480672583, 0.062193306687421734, 0.06659749473505505, 0.06048249397449035, 0.061241604094366964, 0.05647878066023526, 0.06664495498520051, 0.057015911017376686, 0.06671270236422078, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "3a536ed4-4540-4be4-a7f4-c386c68cc1e6", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "533d36b6-2a28-4b9c-9228-85431e828e33", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "8efeda79-4eef-47a6-9383-ae61a53a59f0", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "ac47a6a4-8607-44dd-b662-23d33b721b9a", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "520c55bc-cd9d-4a6d-8b23-4fb4c956d56f", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "94598822-4a22-41fe-ac3e-6a931849082b", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "7b20cf88-eb57-4feb-ba9b-4c0d5e6deed6", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "45b2bd52-ff7d-4fb4-88a2-b12536e940c2", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "6dfe8ed1-e5b2-467f-9c58-0dc3e47fb7c3", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "db99d9b7-31d4-4e06-b568-61ffa0838b9e", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "74785c80-dfac-4246-b662-f072aba4a42e", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "3e08b110-fe41-4a59-ab67-5caeb6339fa1", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "accb5a5a-2387-44d8-83d1-3d535ca67bbf", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "868cd4e0-e4ff-4c52-8b84-32d0deeed2e8", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "06b5edfe-108b-495a-a31d-52101af1a2b0", "solution": "import numpy as np\n\nclass EnhancedDynamicPSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):\n            scores = np.array([func(p) for p in swarm])\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n            \n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest]\n            \n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)\n\n            self.c1 = max(0.5, self.c1 - 0.01)\n            self.c2 = min(2.5, self.c2 + 0.01)\n        \n        return gbest_position", "name": "EnhancedDynamicPSOPlus", "description": "EnhancedDynamicPSOPlus reduces loop complexity by directly updating positions and velocities without intermediate array creation and incorporates a novel adaptive inertia weight strategy.", "configspace": "", "generation": 97, "fitness": 0.15111992401808994, "feedback": "The algorithm EnhancedDynamicPSOPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "be4b14dd-613a-4aef-8642-c1efdc995c8e", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
{"id": "b7894359-e838-4558-83d7-fc0d928161de", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest_positions = swarm.copy()\n        pbest_scores = np.full(self.swarm_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        inertia_weight = self.inertia_max\n\n        for it in range(self.budget):  # Efficient loop structure\n            scores = np.array([func(p) for p in swarm])\n            improve_pbest = scores < pbest_scores\n            pbest_scores[improve_pbest] = scores[improve_pbest]\n            pbest_positions[improve_pbest] = swarm[improve_pbest].copy()\n            \n            best_index = np.argmin(scores)\n            if scores[best_index] < gbest_score:\n                gbest_score = scores[best_index]\n                gbest_position = swarm[best_index].copy()\n\n            r1_r2 = np.random.uniform(0, 1, (self.swarm_size, self.dim, 2))\n            velocities = inertia_weight * velocities + r1_r2[:,:,0] * self.c1 * (pbest_positions - swarm) + r1_r2[:,:,1] * self.c2 * (gbest_position - swarm)\n            swarm += velocities\n\n            swarm = np.clip(swarm, self.lower_bound, self.upper_bound)\n            \n            inertia_weight = self.inertia_max - (it / self.budget) * (self.inertia_max - self.inertia_min)  # Dynamic inertia adjustment based on iteration\n\n            self.c1 = max(0.5, self.c1 - 0.01)  # Dynamic adjustment of cognitive parameter\n            self.c2 = min(2.5, self.c2 + 0.01)  # Dynamic adjustment of social parameter\n        \n        return gbest_position", "name": "EnhancedDynamicPSO", "description": "Introduce a dynamic adjustment of the cognitive and social parameters to improve exploration and exploitation balance while optimizing loop efficiency.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebeed4f-b7c0-47f7-b85f-d08a8430b82d", "metadata": {"aucs": [0.28609238797777803, 0.20309151445753038, 0.2526997072247007, 0.2702219101441269, 0.18881696501678014, 0.186901220981476, 0.28150731554732766, 0.2746887669242919, 0.1810369105535471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011302866723948979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06195685704955378, 0.07699217552132487, 0.05687148510238693, 0.05667472114917149, 0.06994203454471049, 0.07109883066340883, 0.0754602720055153, 0.06584359417459185, 0.05333318793944486, 0.050814456615503656, 0.06937041456442072, 0.07182871650528377, 0.041096468163585476, 0.06510632724312859, 0.06001723482921695, 0.050740445702037174, 0.06572880110281132, 0.06656157725590306, 0.990837367038803, 0.9934543769819385, 0.9941805785472754, 0.9892175016256973, 0.9911637098374697, 0.9888280979231345, 0.9922480129407293, 0.9940479493691664, 0.9918260418649488, 0.10037681377758312, 0.05937643026915973, 0.13340973648989363, 0.1303026991852626, 0.1451096111855037, 0.1737232690465118, 0.08279946804705518, 0.08842570616217449, 9.999999999998899e-05, 0.17018709838904156, 0.14637654509895326, 0.15668789676118777, 0.17913887765539038, 0.18844280424889426, 0.15679816176134265, 0.17812834707503644, 0.12314502873160404, 0.11402113952027926, 0.0370083431631516, 9.999999999998899e-05, 0.06668312053718439, 0.09184585405274137, 0.08093656668683469, 0.07894440032658545, 0.0724543647585626, 0.062377376332486745, 0.030595686531647015, 0.05091590582707717, 0.01636051028330543, 0.04588218489196627, 0.0654943058823616, 0.02339847622576907, 0.019471433449080533, 0.019893152663383207, 0.031020117083769172, 0.026381152562370835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009159030845725336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093596961751756, 0.03032928911956201, 0.052646045435302935, 0.013605269231361072, 0.007185494110690693, 0.06072514722142319, 0.0745032052421779, 0.030411934106182703, 0.022450600186482594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03410185504358654, 0.01756697428757159, 0.0009578960515808088, 0.03790993990797664, 0.0020191204331168056, 0.03964248092942124, 0.03826586261444809, 0.0434795047253389, 0.019039047191733327, 0.2615547281968028, 0.2668797717638738, 0.26676229408805774, 0.2912012936187933, 0.2883435926110467, 0.20537917810477635, 0.25108477669734885, 0.13925281351530028, 0.2931812460607863, 0.06919809636031748, 0.0500351428583663, 0.09240163170167648, 0.06322372743283178, 0.06947031129068015, 0.06630923952328194, 0.053313363061071706, 0.07182150806486753, 0.06360502825578529, 0.19345218337754388, 0.15474425195459351, 0.19448091574231796, 0.18073286841359026, 0.17950386215616565, 0.22179233567621848, 0.2061766832242422, 0.17051965389393609, 0.13999115026270303, 0.21015357988366368, 0.18573043482108675, 0.20688417273660442, 0.18661697625460083, 0.1951857535263133, 0.19863649619614376, 0.23925962961864788, 0.22217512237448778, 0.22185320026153632, 0.12312491395863401, 0.14925079494951587, 0.1265618903528304, 0.12180879605513673, 0.1599309883979878, 0.1562269907706656, 0.14177624030976843, 0.16953744289076333, 0.17093457162511827, 0.17436582174231374, 0.12952743563263525, 0.19208159215434273, 0.18257400712478244, 0.17239287413041549, 0.1671039969999485, 0.21274568513554026, 0.18487865122720182, 0.16777402085321813, 0.16914430161221494, 0.17538466351991866, 0.1773198015742422, 0.16575427871629234, 0.16037839379266539, 0.16067756764429708, 0.16339108900061328, 0.16563246039339752, 0.16696953682179605, 0.25602697391872153, 0.1670445114417367, 0.14960502631315298, 0.3415425017960063, 0.19243367992287996, 0.17764480225159873, 0.09970217970218587, 0.1674341550062478, 0.17002889692498213, 0.267768558534241, 0.21857409180577492, 0.1648855210382819, 0.3153043463001596, 0.1937649990696113, 0.1847308374179979, 0.18548823333773545, 0.18518613821845997, 0.24112062148330438, 0.19423380026219939, 0.19028499680699573, 0.1865416874924124, 0.2017413842838186, 0.18071854429754297, 0.1772386480932402, 0.18053588407609789, 0.2062324280163288, 0.19020939480071486, 0.06219330668819001, 0.06659749472282439, 0.060482493973476825, 0.06124160409543078, 0.056478780660938144, 0.06664495500801781, 0.057015911017376686, 0.06671270236671556, 0.06518220307024625]}, "mutation_prompt": null}
