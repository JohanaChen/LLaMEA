{"id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "0e46804f-f5c4-43ef-a6ca-12dc1fe17b21", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "b5648df7-8c0e-4405-82c3-63316dc026cd", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "456e0c68-f855-41e8-a696-173fd2903d0c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "105ffc44-798d-46d1-9d2d-850bcd73d0e4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "730856c2-083e-4c1b-86cb-d2b627aedae7", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "71b4b63d-d90d-4a42-a3ec-74fcde7aa298", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "3bfcc5e7-c9d9-40a2-b5f4-b3dde820d741", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "595efc4e-5662-48a2-9b0a-930ba7b142b3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "2464f9e7-f2e9-4a0e-8f0c-73b543926857", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "f99a2500-412a-4a8c-ad71-c40acfbe5b12", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {}, "mutation_prompt": null}
{"id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 11, "fitness": 0.07803053017882108, "feedback": "The algorithm DynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.19.", "error": "", "parent_id": "014d7a12-ff83-4e3d-8bcf-59e98ce84366", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "97e47d40-7a8b-4802-a304-43eb1047eb55", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "0c0d37d0-243b-4f93-a7a0-a77d857722ed", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "8cd91999-c162-4d1d-b629-d813a640a807", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "6a51ee8e-e03a-49fc-ad1d-f4362c4e8842", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "8ed03936-e653-43b8-936d-14a3237bcfe2", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "6a337f05-1dfe-431a-b7dc-7e5313a3daa0", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "732a721a-9a37-4e78-832a-c50fe2391a8b", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "5e6fa9ff-9936-4df7-9562-2cd64054795a", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "2bbca7a2-cc31-4488-b1a9-7220afdf6ff3", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "5e17810f-22f8-43a2-bd64-3c7fb9da72ed", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "894f6686-f3f1-43d6-a34f-f9c63b2ed490", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "3f88e2d9-8c59-4189-94c0-3daa4259641d", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "f203a63d-3ac4-417e-8d9a-2a216bf81cd5", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "cd009bff-87f6-40f7-b982-7b014020c7eb", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "5bf35f07-9b2e-43ee-9bdb-75659cba8a07", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "0476e8a3-ec2b-4264-9569-e573df5c182e", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "1f6e90b0-98d3-41aa-925e-bcb8c005e3d5", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "8dfbcc51-a74a-4ccf-b660-335cfe5f55a5", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "30116258-7cb0-4050-800f-64d622814c8e", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "b1e57499-b01a-41f8-a0d8-17637b438890", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "ad388ce6-a7f5-4bfb-8cb5-23f2b5b0950c", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "e2d61913-2c24-4a74-8959-87cbdf8e20ab", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "3c061f32-d81a-4523-af44-e6c5e2b9e341", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "738a3f13-ca90-4214-a5de-f5bba41224fa", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "069e1f17-b4d8-459c-bc51-ffde18ace04a", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "648ea68a-5147-4bb9-8bdb-ab6da8e283ec", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "1dc772d0-92d7-4e82-94dd-4bf5e33a49e5", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "e1c589b2-8a4d-473c-ad31-c93dd153bfd9", "solution": "import numpy as np\n\nclass ImprovedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = inertia_weight * population + 0.5 * r1 * (pbest - population) + 0.5 * r2 * (gbest - population)\n            population = np.clip(population + velocity, -5.0, 5.0)\n            fitness = np.apply_along_axis(func, 1, population)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            gbest_idx = np.argmin(fitness)\n            gbest = population[gbest_idx]\n            curr_iter += 1\n            if curr_iter >= self.budget:\n                break\n\n        return gbest", "name": "ImprovedDynamicInertiaWeightPSO", "description": "Improved efficiency by vectorizing the calculation of velocities and positions, reducing loop complexity.", "configspace": "", "generation": 39, "fitness": 0.071779522682885, "feedback": "The algorithm ImprovedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.18.", "error": "", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07181397830146763, 0.06432772651221763, 0.08237988959495246, 0.05904307234564243, 0.10776072141376569, 0.038692699622900895, 0.08329631178043806, 0.09525637653078234, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 0.0008084227773164088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9955712146477963, 0.9904785318024875, 0.9947346851610782, 0.9935465005712308, 0.9922388028579632, 0.9939841976329821, 0.1016863086892783, 0.9936021142922489, 0.09979736955155527, 9.999999999998899e-05, 0.02312929762678373, 9.999999999998899e-05, 0.00010433622120620267, 0.00031549654350837564, 0.016424013422731698, 0.015071550801931899, 0.013363313662937304, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.11357990559185327, 9.999999999998899e-05, 0.00980393665045709, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009821006862864468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014913138620293864, 0.007453862189673921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09741558931821159, 0.1070271971752389, 0.14838054695461433, 0.09478632778805585, 0.08755727705287497, 0.10493271348718303, 0.1240568991094797, 0.09980940131357363, 0.1210557193025883, 0.01634911388536109, 0.005917445352363382, 0.004119596931038583, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.1196574563422882, 0.1334222796088539, 0.11056542574587036, 0.11366150644081086, 0.08950036378962523, 0.11467406119185797, 0.12396965863879794, 0.09698944621309658, 0.11439895832422897, 0.10397455323010896, 0.09762262357612272, 0.1143378649880804, 0.1296792088205857, 0.11261431454014459, 0.09661549331405328, 0.11420206329748472, 0.11986728196772001, 0.08048698509190721, 0.044200220934656365, 0.03119343870146729, 0.047779057845134254, 0.04815297767931992, 0.04558387084644577, 0.037140780888393565, 0.05648699256316181, 0.04445763179065054, 0.026383976142556276, 0.09174999647912829, 0.07434951281482405, 0.11089882950468877, 0.10289055837941885, 0.06747178888023742, 0.10920438916357489, 0.12245976138762271, 0.07484717266173047, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054173663161964036, 0.11575077199818984, 0.05626128006000852, 0.09748155570210837, 0.1207914665021157, 0.061750941843425444, 0.1023817801872563, 0.056615725614002965, 0.09591294630155789, 0.04267832392340565, 0.08601403051027556, 0.05838777314528565, 0.044299295806576766, 0.0384031724249464, 0.045511073114331335, 0.078091510310068, 0.11263545388442486, 0.04683213373565309, 0.17047298908375286, 0.15585351984737794, 0.16006059586826882, 0.16814058013796673, 0.1682703955662952, 0.1653262556864996, 0.15972772631266108, 0.16227560310784628, 0.18195919823003315, 0.01888803125781524, 0.012204213037243616, 0.031393493129599714, 9.999999999998899e-05, 0.005999078137785774, 0.00826091239954263, 0.005324581703914033, 0.013415644418337647, 0.01303515893324625]}, "mutation_prompt": null}
{"id": "dd7b9ef2-25e6-4d53-ba7c-c4c7eb998685", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "b365c19f-9ef3-4852-a022-0cebc80733ac", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "e709249e-b56b-485a-b14e-54544561c8f1", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "f2eba1ef-f662-447e-b0ee-e2ea6c151324", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "69a1bf18-5eab-4a18-a83e-94205e6b5411", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "6c195efd-d799-4aea-b0b5-43953ce00ceb", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "5935cdc4-e3db-4cfb-9bca-035febbd8fb5", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "20d0bf37-2753-4e41-8ae1-ad8ef934dd80", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "a8220864-44c2-4d5a-8e9b-12243e443d4d", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "56bef843-ff48-4470-b730-3272cead5053", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "1f0ad4af-ef43-4484-967d-c508d592bae8", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "a33cb31e-f351-4de0-8086-171b2158513c", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "26873008-83a6-4998-9175-2e9ddb6644d5", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "1cab4348-7337-4cd9-99ea-f24f6f711828", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "49bfc285-c9b8-42dc-8f5f-8b4aa5ca8760", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "de91f1b4-9ba5-40ae-aae5-9220f9e7fbc7", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "951a0f96-8688-4056-8f7f-115e57da1992", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "ae438233-5440-4faf-be89-752dcf37c277", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "7beddf30-fe54-49a0-9f52-cff864a82890", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "bf65fcad-e367-4425-8df0-f724a8329459", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "10ba1de6-baa6-4cc5-8a43-e74cee3265f9", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "15eefe05-91ea-463e-a728-09149d99103d", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "17b4dc1f-dc55-4932-a1b4-344e42d4e4ac", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "d3e6628f-9cfd-4cde-ae31-22be03203f0e", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "6aa3b5bb-fe54-4bbb-882d-a0567f6a3f9e", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "3a371716-b6dc-4512-8b09-e0c084b733b8", "solution": "import numpy as np\n\nclass ImprovedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vectors(dim, num_vectors):\n            vecs = np.random.rand(num_vectors, dim)\n            norms = np.linalg.norm(vecs, axis=1)\n            return vecs / norms[:, None]\n\n        population = np.random.uniform(-5.0, 5.0, (10, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            r1, r2 = rand_unit_vectors(self.dim, len(population)), rand_unit_vectors(self.dim, len(population))\n            velocities = inertia_weight * population + 0.5 * r1 * (pbest - population)[:, None] + 0.5 * r2 * (gbest - population)[:, None]\n            population = np.clip(population + velocities, -5.0, 5.0)\n            fitness = np.apply_along_axis(func, 1, population)\n            updates = fitness < pbest_fitness\n            pbest[updates] = population[updates]\n            pbest_fitness[updates] = fitness[updates]\n            gbest_idx = np.argmin(fitness)\n            gbest = population[gbest_idx]\n            curr_iter += len(population)\n\n        return gbest", "name": "ImprovedDynamicInertiaWeightPSO", "description": "Improved efficiency by vectorizing the particle updates and fitness evaluations, reducing loop complexity, and optimizing calculations.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,5) (10,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,5) (10,) ')", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {}, "mutation_prompt": null}
{"id": "45747fd0-0e33-4ceb-89a6-d52eb5146f67", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "17dd829b-aef7-448b-bc93-42b9ae26f9c1", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "dc64bf0b-c161-4d78-b1a1-1d01539974a6", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "8e3d6619-4105-4fe7-96a2-8caaba82c15c", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "624a323f-8b80-4b12-8672-10309838c427", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "68d2f855-1182-4e6b-9bd9-10496a740cd9", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "c915f3ba-23f7-4725-9321-cbb71fcfaf31", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "a04b3b82-9d59-4ebd-ba5c-462656b7d571", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "02a333de-76a6-468c-89a1-b662e5afa669", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "a9e83bc9-6b97-4796-9e26-6a5179475830", "solution": "import numpy as np\n\nclass OptimizedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        population = np.random.uniform(-5.0, 5.0, (10, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "OptimizedDynamicInertiaWeightPSO", "description": "Optimized version of DynamicInertiaWeightPSO algorithm by refactoring loop structures and streamlining calculations to improve efficiency.", "configspace": "", "generation": 75, "fitness": 0.07803053017882108, "feedback": "The algorithm OptimizedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.19.", "error": "", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "517528d8-a82a-4d84-aa5f-7b528dfec5a2", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "c3f50dc0-f685-4e00-a893-e3ce50cbd60d", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "0af33739-039a-48cf-b652-c895643bcc27", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "ef97df67-b417-46f9-8076-86568d29117f", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "b88a1cda-241f-480d-827b-f1b4adc365dc", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "8a982dfd-8c0d-40c6-bc14-5edb5c9cd0b6", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "8187415e-c655-4bae-89c2-ee3e7ce3835b", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "678d6a87-2fa2-46fc-af9c-2b638c78346d", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "011c0e53-318f-4223-a139-aa29974830b1", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "ed9d7ccf-b29f-4dd1-beb3-2f9e36b18f2a", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "e7ca2202-3b0c-478a-9d49-5b7f6f12da3d", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "1c5f4b8d-ec0c-4ef9-8d98-6b8d44a77c37", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "625d6772-6c99-4800-9933-18049f4d0e90", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "4b1794ea-c766-462c-aa7b-2cf96b0a44c4", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "026e6d2d-bb86-4e8b-a72c-762332010544", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "53f8f1f7-5397-4f23-9681-f299f0701e3b", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "2186b377-4402-48d0-bd27-cffa5bd2561c", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "4af2b7d7-b27b-436e-89d7-d62dc7aed30b", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "13f96da3-7f63-4854-8a24-40341cafb346", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "24fa2693-d861-4ed2-91b4-b9a775d44b44", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "89bf25a7-8002-4c6c-a873-1a2cf542b455", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "b3c26fe2-ae94-489e-8be1-f7bc2ed5b987", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "698f862e-8f47-4529-98af-d6ca02f3c2e1", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
{"id": "47950224-6ca7-487a-a21e-0590af360022", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def inertia_weight_iter(curr_iter, max_iter):\n            return 0.5 * (1 - curr_iter / max_iter)\n\n        def rand_unit_vector(dim):\n            vec = np.random.rand(dim)\n            return vec / np.linalg.norm(vec)\n\n        def generate_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        population = generate_population(10)\n        fitness = np.apply_along_axis(func, 1, population)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n\n        curr_iter = 0\n        while curr_iter < self.budget:\n            inertia_weight = inertia_weight_iter(curr_iter, self.budget)\n            for i in range(len(population)):\n                r1, r2 = rand_unit_vector(self.dim), rand_unit_vector(self.dim)\n                velocity = inertia_weight * population[i] + 0.5 * r1 * (pbest[i] - population[i]) + 0.5 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocity, -5.0, 5.0)\n                fitness[i] = func(population[i])\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = fitness[i]\n                    if fitness[i] < fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = population[i]\n                curr_iter += 1\n                if curr_iter >= self.budget:\n                    break\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Utilizing a novel variant of particle swarm optimization (PSO) with dynamically adjusted inertia weight to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "139e19c9-f7f1-470b-81f4-5afc5734f816", "metadata": {"aucs": [0.07254476786306463, 0.0646411205244456, 0.0823918579374473, 0.10335802199881505, 0.05684560966162555, 0.02531256422946515, 0.057254142777408146, 0.07366735178758754, 0.06737261526687399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.00012253598322675696, 0.018248263482334326, 9.999999999998899e-05, 0.017877512462508238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9954021961698827, 0.9748585102920244, 0.9905799517199191, 0.9926155571299894, 0.9866449676832161, 0.9907978047098418, 0.9698351666950408, 0.9952987411929997, 0.10456807803293755, 0.029768541716106878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.017020432060782298, 0.00199879398080105, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006709271377926984, 0.09276449394237685, 9.999999999998899e-05, 0.009521467211443868, 0.041530312220137255, 9.999999999998899e-05, 0.06671791947832972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823146917881945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002464897156619905, 9.999999999998899e-05, 0.0002000760772427057, 9.999999999998899e-05, 9.999999999998899e-05, 0.005946108819562701, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013846765335578937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1147588141102015, 0.1071532238505013, 0.14838054695461433, 0.09425996079083032, 0.09002553058386731, 0.09580441870675127, 0.12479770123675948, 0.11446278207804039, 0.1210557193025883, 0.0033381702157893045, 0.019388180683189038, 0.003688576640397123, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.000665626380701223, 0.0267656688986897, 0.10711150971030858, 0.13385310862445166, 0.10151478277080983, 0.11336381519477634, 0.1495990924085332, 0.11503134435376028, 0.11925545045665964, 0.1153253189153649, 0.10663213608154587, 0.11010163194024114, 0.1012747677128194, 0.1112276993482757, 0.12746774807160766, 0.11360344118516041, 0.09662003646671713, 0.11479795680195803, 0.11214500650045489, 0.10545584217664183, 0.043671550683064164, 0.033891883702695136, 0.03688463200068748, 0.053392526543047825, 0.0451415254001315, 0.040081755400474095, 0.06615571743385773, 0.05225373707769654, 0.057070100517306876, 0.09978852897280976, 0.08034009452786361, 0.11179798394296869, 0.11796794485753637, 0.11270003801677031, 0.09487477196893412, 0.12476970273158383, 0.07619147705747586, 0.12742162933193735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08355324208868664, 0.07572382518274023, 0.07278609591361307, 0.10301998510868993, 0.12847312729305171, 0.062311364331858576, 0.08641080999488826, 0.08253683382966537, 0.07318517073973674, 0.19017261017740006, 0.08534051699009781, 0.03355288897779851, 0.03937419189477731, 0.04408678047922754, 0.04685158293743241, 0.040864562347336375, 0.13265573117887797, 0.1684691539469404, 0.17775295393660184, 0.17441826405608518, 0.16781585854175196, 0.16528852149250473, 0.18116039166913334, 0.16485304602140682, 0.16504160650917477, 0.1661438245271214, 0.17948011720475965, 0.005184965452305956, 0.0127166864816467, 0.031393493129599714, 0.05000452577220016, 0.005895966765123939, 0.010265018495001055, 0.00599203433298956, 0.0027573161744183228, 0.0071765793436845415]}, "mutation_prompt": null}
