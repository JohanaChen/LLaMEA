{"id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 0, "fitness": 0.3036664800075225, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "e1053e90-e7e8-43c3-af6b-1e251cf21f5b", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "f5524737-219a-486c-86f5-a74f804bd8b4", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "dc31fe25-bb8e-4f48-b929-695203cca0b5", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "3f42e89d-27bf-4836-a377-6ba80c233e67", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "d9f14b77-b6c9-4d46-b1ea-407353ad7701", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "c5e36589-e0ee-4e7c-9370-bc2dd05244dd", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "600a12b1-1431-4522-88f3-749ef2aca8c6", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "29bc44ae-a30a-472e-b1da-6296ef9f1fb8", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "1a267ab4-0df5-498e-84ab-7391f397064a", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "8fa3567f-c6e4-4ea6-ba1f-e40ee56ea1e5", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "ebf0915f-10f0-4fd5-8529-80add274db80", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "ca76105d-64e9-4131-a732-0ca1d4f6d288", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "b3331fb3-f003-4223-9e24-bce3cca8074e", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "19cf215f-6894-4df7-bdbb-5872a4a2fafc", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "06807188-1ac3-4627-8c01-1530d3bfa0fe", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "642dd9cb-300f-4890-980a-813c3591e521", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w = 0.5  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            # Particle Swarm Optimization velocity and position update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            # Update personal and global best\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter control for robust performance across various problem landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.9125141952030879, 0.9125141952030879, 0.9125141952030879, 0.8928089569446849, 0.8928089569446849, 0.8928089569446849, 0.8988367141510714, 0.8988367141510714, 0.8988367141510714, 0.4351312425611158, 0.4351312425611158, 0.4351312425611158, 0.6229814713895185, 0.6229814713895185, 0.6229814713895185, 0.8098833236720845, 0.8098833236720845, 0.8098833236720845, 0.14317700185683768, 0.14317700185683768, 0.14317700185683768, 0.08233032905066717, 0.08233032905066717, 0.08233032905066717, 0.11055263793669967, 0.11055263793669967, 0.11055263793669967, 0.09684454040239665, 0.09684454040239665, 0.09684454040239665, 0.0964439929441121, 0.0964439929441121, 0.0964439929441121, 0.08275958788851001, 0.08275958788851001, 0.08275958788851001, 0.9380352675284732, 0.9380352675284732, 0.9380352675284732, 0.924966680863264, 0.924966680863264, 0.924966680863264, 0.933021540798137, 0.933021540798137, 0.933021540798137, 0.2366149087288444, 0.2366149087288444, 0.2366149087288444, 0.7186299718601605, 0.7186299718601605, 0.7186299718601605, 0.6242017316402177, 0.6242017316402177, 0.6242017316402177, 0.3863472553622479, 0.3863472553622479, 0.3863472553622479, 0.14748671694206605, 0.14748671694206605, 0.14748671694206605, 0.17636752462558203, 0.17636752462558203, 0.17636752462558203, 0.13428969378163347, 0.13428969378163347, 0.13428969378163347, 0.2570404910914059, 0.2570404910914059, 0.2570404910914059, 0.22118163427463622, 0.22118163427463622, 0.22118163427463622, 0.2157433018774737, 0.2157433018774737, 0.2157433018774737, 0.24256339113401504, 0.24256339113401504, 0.24256339113401504, 0.1316350214661377, 0.1316350214661377, 0.1316350214661377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610034357971295, 0.06610034357971295, 0.06610034357971295, 0.04178528056455655, 0.04178528056455655, 0.04178528056455655, 0.16820519640798048, 0.16820519640798048, 0.16820519640798048, 0.08551003576455296, 0.08551003576455296, 0.08551003576455296, 0.13619707124670022, 0.13619707124670022, 0.13619707124670022, 0.2642053649378814, 0.2642053649378814, 0.2642053649378814, 0.09506506878586274, 0.09506506878586274, 0.09506506878586274, 0.12540753037249908, 0.12540753037249908, 0.12540753037249908, 0.2107081503069531, 0.2107081503069531, 0.2107081503069531, 0.09910525587380692, 0.09910525587380692, 0.09910525587380692, 0.13869514515481696, 0.13869514515481696, 0.13869514515481696, 0.5402535543508791, 0.5402535543508791, 0.5402535543508791, 0.5721021076581426, 0.5721021076581426, 0.5721021076581426, 0.5728538177866523, 0.5728538177866523, 0.5728538177866523, 0.14487971919959486, 0.14487971919959486, 0.14487971919959486, 0.0978136934879199, 0.0978136934879199, 0.0978136934879199, 0.18903525937628574, 0.18903525937628574, 0.18903525937628574, 0.46903450220039655, 0.46903450220039655, 0.46903450220039655, 0.286672881475187, 0.286672881475187, 0.286672881475187, 0.19228000453759408, 0.19228000453759408, 0.19228000453759408, 0.2057931739029505, 0.2057931739029505, 0.2057931739029505, 0.18681708713915202, 0.18681708713915202, 0.18681708713915202, 0.2551228811288072, 0.2551228811288072, 0.2551228811288072, 0.2282498664617585, 0.2282498664617585, 0.2282498664617585, 0.23157022046546816, 0.23157022046546816, 0.23157022046546816, 0.22090920417610138, 0.22090920417610138, 0.22090920417610138, 0.21773037524272687, 0.21773037524272687, 0.21773037524272687, 0.2299859465860381, 0.2299859465860381, 0.2299859465860381, 0.23931389281335536, 0.23931389281335536, 0.23931389281335536, 0.1764577769998672, 0.1764577769998672, 0.1764577769998672, 0.2011021255299542, 0.2011021255299542, 0.2011021255299542, 0.19170201526729247, 0.19170201526729247, 0.19170201526729247, 0.16751392844115087, 0.16751392844115087, 0.16751392844115087, 0.8930863075982444, 0.8930863075982444, 0.8930863075982444, 0.8882318936967374, 0.8882318936967374, 0.8882318936967374, 0.16754243503963284, 0.16754243503963284, 0.16754243503963284, 0.20620225766906541, 0.20620225766906541, 0.20620225766906541, 0.10425678004649397, 0.10425678004649397, 0.10425678004649397, 0.19333286079628875, 0.19333286079628875, 0.19333286079628875, 0.20393661351287684, 0.20393661351287684, 0.20393661351287684, 0.19212418580807533, 0.19212418580807533, 0.19212418580807533, 0.10923069061215374, 0.10923069061215374, 0.10923069061215374, 0.0927108442699005, 0.0927108442699005, 0.0927108442699005, 0.09266408829447104, 0.09266408829447104, 0.09266408829447104]}, "mutation_prompt": null}
{"id": "6c14f7a0-6d3b-49e0-9f63-fdcd4d765c26", "solution": "# Description: Enhanced HybridDEPSO with adaptive inertia weight and velocity for improved convergence efficiency.\n\n# Code:\nimport numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with adaptive inertia weight and velocity for improved convergence efficiency.", "configspace": "", "generation": 17, "fitness": 0.32731312604618457, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "dafa2f75-1848-4a27-862f-823a5d0669f7", "metadata": {"aucs": [0.8885411001829627, 0.8885411001829627, 0.8885411001829627, 0.8870968857733837, 0.8870968857733837, 0.8870968857733837, 0.8845054540447189, 0.8845054540447189, 0.8845054540447189, 0.519558823539471, 0.519558823539471, 0.519558823539471, 0.7582772127030346, 0.7582772127030346, 0.7582772127030346, 0.5489375950139233, 0.5489375950139233, 0.5489375950139233, 0.13118435554666485, 0.13118435554666485, 0.13118435554666485, 0.13280427842960185, 0.13280427842960185, 0.13280427842960185, 0.15262016952123636, 0.15262016952123636, 0.15262016952123636, 0.1431038002045132, 0.1431038002045132, 0.1431038002045132, 0.09280219792058653, 0.09280219792058653, 0.09280219792058653, 0.13090411093661258, 0.13090411093661258, 0.13090411093661258, 0.9595447699039199, 0.9595447699039199, 0.9595447699039199, 0.8643394191799453, 0.8643394191799453, 0.8643394191799453, 0.9079176387781144, 0.9079176387781144, 0.9079176387781144, 0.5890932836503946, 0.5890932836503946, 0.5890932836503946, 0.7456435727142442, 0.7456435727142442, 0.7456435727142442, 0.7536130465845967, 0.7536130465845967, 0.7536130465845967, 0.9123911041664847, 0.9123911041664847, 0.9123911041664847, 0.16133157625258177, 0.16133157625258177, 0.16133157625258177, 0.23229163265861252, 0.23229163265861252, 0.23229163265861252, 0.13490075083746755, 0.13490075083746755, 0.13490075083746755, 0.24061940074960186, 0.24061940074960186, 0.24061940074960186, 0.2282046914397564, 0.2282046914397564, 0.2282046914397564, 0.23591935747990422, 0.23591935747990422, 0.23591935747990422, 0.2877190538102221, 0.2877190538102221, 0.2877190538102221, 0.13087197806069129, 0.13087197806069129, 0.13087197806069129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239804542363313, 0.05239804542363313, 0.05239804542363313, 0.0005071858769378768, 0.0005071858769378768, 0.0005071858769378768, 0.11049221135757503, 0.11049221135757503, 0.11049221135757503, 0.07486741512770878, 0.07486741512770878, 0.07486741512770878, 0.11937924094225094, 0.11937924094225094, 0.11937924094225094, 0.18838358080410567, 0.18838358080410567, 0.18838358080410567, 0.10448698014724855, 0.10448698014724855, 0.10448698014724855, 0.09961144896104779, 0.09961144896104779, 0.09961144896104779, 0.17181382797512756, 0.17181382797512756, 0.17181382797512756, 0.3242617167029068, 0.3242617167029068, 0.3242617167029068, 0.12802546104659374, 0.12802546104659374, 0.12802546104659374, 0.5345017248797943, 0.5345017248797943, 0.5345017248797943, 0.5979583160999763, 0.5979583160999763, 0.5979583160999763, 0.6046155149914764, 0.6046155149914764, 0.6046155149914764, 0.11408891839390978, 0.11408891839390978, 0.11408891839390978, 0.12504384228983434, 0.12504384228983434, 0.12504384228983434, 0.1595303246412615, 0.1595303246412615, 0.1595303246412615, 0.2280954940682386, 0.2280954940682386, 0.2280954940682386, 0.3846245649906781, 0.3846245649906781, 0.3846245649906781, 0.21704445028522656, 0.21704445028522656, 0.21704445028522656, 0.21421503001553588, 0.21421503001553588, 0.21421503001553588, 0.32711566611514176, 0.32711566611514176, 0.32711566611514176, 0.6755174400281676, 0.6755174400281676, 0.6755174400281676, 0.2523301000758763, 0.2523301000758763, 0.2523301000758763, 0.2784714184405054, 0.2784714184405054, 0.2784714184405054, 0.27809959894764535, 0.27809959894764535, 0.27809959894764535, 0.24652123000272164, 0.24652123000272164, 0.24652123000272164, 0.22165743486815437, 0.22165743486815437, 0.22165743486815437, 0.2049897981713541, 0.2049897981713541, 0.2049897981713541, 0.16860083024150896, 0.16860083024150896, 0.16860083024150896, 0.18531178098887535, 0.18531178098887535, 0.18531178098887535, 0.17931549519537182, 0.17931549519537182, 0.17931549519537182, 0.19584820509709844, 0.19584820509709844, 0.19584820509709844, 0.8698505176330463, 0.8698505176330463, 0.8698505176330463, 0.8869425825117829, 0.8869425825117829, 0.8869425825117829, 0.20178612359260606, 0.20178612359260606, 0.20178612359260606, 0.20945779284678367, 0.20945779284678367, 0.20945779284678367, 0.10427983664913154, 0.10427983664913154, 0.10427983664913154, 0.17907507271801404, 0.17907507271801404, 0.17907507271801404, 0.20443840502157007, 0.20443840502157007, 0.20443840502157007, 0.18624170863994216, 0.18624170863994216, 0.18624170863994216, 0.10967218806725254, 0.10967218806725254, 0.10967218806725254, 0.11118066204332022, 0.11118066204332022, 0.11118066204332022, 0.0810586323251038, 0.0810586323251038, 0.0810586323251038]}, "mutation_prompt": null}
{"id": "9528221d-0df2-451d-a811-d7ab0c411f09", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # DE scaling factor adjusted\n        self.CR = 0.85  # DE crossover probability adjusted\n        self.w_max, self.w_min = 0.75, 0.35  # Adaptive PSO inertia weight adjusted\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients adjusted\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Optimized HybridDEPSO with refined parameter adjustments to enhance search balance and convergence.", "configspace": "", "generation": 18, "fitness": 0.3247372331001379, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "6c14f7a0-6d3b-49e0-9f63-fdcd4d765c26", "metadata": {"aucs": [0.880226812236198, 0.880226812236198, 0.880226812236198, 0.8712682164548964, 0.8712682164548964, 0.8712682164548964, 0.8749318937872023, 0.8749318937872023, 0.8749318937872023, 0.7128865705673819, 0.7128865705673819, 0.7128865705673819, 0.7202837242893969, 0.7202837242893969, 0.7202837242893969, 0.7394395078085837, 0.7394395078085837, 0.7394395078085837, 0.14071719418005035, 0.14071719418005035, 0.14071719418005035, 0.18396363868759158, 0.18396363868759158, 0.18396363868759158, 0.14342586018886228, 0.14342586018886228, 0.14342586018886228, 0.11538034187864654, 0.11538034187864654, 0.11538034187864654, 0.10936474372144989, 0.10936474372144989, 0.10936474372144989, 0.07849759313261107, 0.07849759313261107, 0.07849759313261107, 0.9434886760546586, 0.9434886760546586, 0.9434886760546586, 0.9542164190551302, 0.9542164190551302, 0.9542164190551302, 0.9324533323989177, 0.9324533323989177, 0.9324533323989177, 0.7513428991526862, 0.7513428991526862, 0.7513428991526862, 0.7431515149968779, 0.7431515149968779, 0.7431515149968779, 0.725073045335566, 0.725073045335566, 0.725073045335566, 0.857069311823649, 0.857069311823649, 0.857069311823649, 0.37730504062421033, 0.37730504062421033, 0.37730504062421033, 0.2332537495016106, 0.2332537495016106, 0.2332537495016106, 0.13134311034000057, 0.13134311034000057, 0.13134311034000057, 0.1302395307427574, 0.1302395307427574, 0.1302395307427574, 0.2916128514605363, 0.2916128514605363, 0.2916128514605363, 0.13158328931881746, 0.13158328931881746, 0.13158328931881746, 0.13129550383035926, 0.13129550383035926, 0.13129550383035926, 0.2524982702024273, 0.2524982702024273, 0.2524982702024273, 0.025835398100147677, 0.025835398100147677, 0.025835398100147677, 0.0006412726376351374, 0.0006412726376351374, 0.0006412726376351374, 0.012844372135828563, 0.012844372135828563, 0.012844372135828563, 0.11973681033665329, 0.11973681033665329, 0.11973681033665329, 0.06595803730833427, 0.06595803730833427, 0.06595803730833427, 0.11163361200738942, 0.11163361200738942, 0.11163361200738942, 0.05599030911752523, 0.05599030911752523, 0.05599030911752523, 0.11142574762175117, 0.11142574762175117, 0.11142574762175117, 0.1485137316898688, 0.1485137316898688, 0.1485137316898688, 0.19210399567841152, 0.19210399567841152, 0.19210399567841152, 0.2920306919464989, 0.2920306919464989, 0.2920306919464989, 0.28442994307696223, 0.28442994307696223, 0.28442994307696223, 0.5452779016726443, 0.5452779016726443, 0.5452779016726443, 0.620796470259927, 0.620796470259927, 0.620796470259927, 0.6101493670480254, 0.6101493670480254, 0.6101493670480254, 0.1144147299352386, 0.1144147299352386, 0.1144147299352386, 0.14201998743139888, 0.14201998743139888, 0.14201998743139888, 0.11077403939543451, 0.11077403939543451, 0.11077403939543451, 0.3192877097606258, 0.3192877097606258, 0.3192877097606258, 0.19789869191761622, 0.19789869191761622, 0.19789869191761622, 0.25384761433767156, 0.25384761433767156, 0.25384761433767156, 0.25112562197053656, 0.25112562197053656, 0.25112562197053656, 0.45771203896402457, 0.45771203896402457, 0.45771203896402457, 0.587670001077107, 0.587670001077107, 0.587670001077107, 0.24928435862977927, 0.24928435862977927, 0.24928435862977927, 0.1993379748942663, 0.1993379748942663, 0.1993379748942663, 0.2115731846341723, 0.2115731846341723, 0.2115731846341723, 0.23480002096151809, 0.23480002096151809, 0.23480002096151809, 0.285016231204679, 0.285016231204679, 0.285016231204679, 0.2322213995758442, 0.2322213995758442, 0.2322213995758442, 0.20820282523287115, 0.20820282523287115, 0.20820282523287115, 0.20188861102042055, 0.20188861102042055, 0.20188861102042055, 0.20583173765261342, 0.20583173765261342, 0.20583173765261342, 0.17049855679602444, 0.17049855679602444, 0.17049855679602444, 0.1890556094805187, 0.1890556094805187, 0.1890556094805187, 0.15084210505244833, 0.15084210505244833, 0.15084210505244833, 0.7358096163300631, 0.7358096163300631, 0.7358096163300631, 0.20871498523222842, 0.20871498523222842, 0.20871498523222842, 0.20507358849527257, 0.20507358849527257, 0.20507358849527257, 0.20234669120307835, 0.20234669120307835, 0.20234669120307835, 0.1956306847682049, 0.1956306847682049, 0.1956306847682049, 0.20060304785068228, 0.20060304785068228, 0.20060304785068228, 0.10181690060665205, 0.10181690060665205, 0.10181690060665205, 0.09952215614220206, 0.09952215614220206, 0.09952215614220206, 0.10457976024805482, 0.10457976024805482, 0.10457976024805482]}, "mutation_prompt": null}
{"id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 19, "fitness": 0.3485604666954006, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "6c14f7a0-6d3b-49e0-9f63-fdcd4d765c26", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "32bb1165-cd88-4b25-b7e0-42acfc4bff67", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "096a6d5f-48ba-4070-ad70-7354cafcfda0", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "73b265f3-8412-4d03-b3fa-70406ee0e492", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "5c57edd6-49ff-4799-ac08-94bc12873991", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Slightly wider velocity bounds\n        self.F = 0.65  # Adjusted DE scaling factor for better exploration\n        self.CR = 0.85  # Adjusted DE crossover probability for increased diversity\n        self.w_max, self.w_min = 0.6, 0.35  # Narrower adaptive PSO inertia weight range\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # Adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with refined parameter tuning and streamlined logic to improve efficiency.", "configspace": "", "generation": 23, "fitness": 0.32847151118618867, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8848949397145695, 0.8848949397145695, 0.8848949397145695, 0.8936678808950463, 0.8936678808950463, 0.8936678808950463, 0.8988389876632913, 0.8988389876632913, 0.8988389876632913, 0.7886139015866996, 0.7886139015866996, 0.7886139015866996, 0.50279626919219, 0.50279626919219, 0.50279626919219, 0.7779836562645829, 0.7779836562645829, 0.7779836562645829, 0.14406979484014082, 0.14406979484014082, 0.14406979484014082, 0.13983993860560806, 0.13983993860560806, 0.13983993860560806, 0.1852235579650382, 0.1852235579650382, 0.1852235579650382, 0.09544880919245391, 0.09544880919245391, 0.09544880919245391, 0.10860048032658942, 0.10860048032658942, 0.10860048032658942, 0.09476148578523114, 0.09476148578523114, 0.09476148578523114, 0.962571125208654, 0.962571125208654, 0.962571125208654, 0.9461028034310299, 0.9461028034310299, 0.9461028034310299, 0.9437232354838627, 0.9437232354838627, 0.9437232354838627, 0.5951101874028513, 0.5951101874028513, 0.5951101874028513, 0.7612145110304622, 0.7612145110304622, 0.7612145110304622, 0.7563146186646803, 0.7563146186646803, 0.7563146186646803, 0.8876717117842535, 0.8876717117842535, 0.8876717117842535, 0.27380188819110995, 0.27380188819110995, 0.27380188819110995, 0.884621750867789, 0.884621750867789, 0.884621750867789, 0.13153843485054983, 0.13153843485054983, 0.13153843485054983, 0.21667604122726503, 0.21667604122726503, 0.21667604122726503, 0.23722917873771043, 0.23722917873771043, 0.23722917873771043, 0.1329614726923143, 0.1329614726923143, 0.1329614726923143, 0.19187903165862064, 0.19187903165862064, 0.19187903165862064, 0.2502139097157251, 0.2502139097157251, 0.2502139097157251, 0.1809976595607491, 0.1809976595607491, 0.1809976595607491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002583228535869009, 0.002583228535869009, 0.002583228535869009, 0.14370691041144057, 0.14370691041144057, 0.14370691041144057, 0.1613726314024787, 0.1613726314024787, 0.1613726314024787, 0.15710663012424797, 0.15710663012424797, 0.15710663012424797, 0.11360790439116919, 0.11360790439116919, 0.11360790439116919, 0.07897626896219823, 0.07897626896219823, 0.07897626896219823, 0.2790712920402326, 0.2790712920402326, 0.2790712920402326, 0.0955528383646479, 0.0955528383646479, 0.0955528383646479, 0.11630561179979226, 0.11630561179979226, 0.11630561179979226, 0.2601241646060667, 0.2601241646060667, 0.2601241646060667, 0.5614365363891245, 0.5614365363891245, 0.5614365363891245, 0.5444242503986809, 0.5444242503986809, 0.5444242503986809, 0.601168115761729, 0.601168115761729, 0.601168115761729, 0.13910003835274387, 0.13910003835274387, 0.13910003835274387, 0.13310633451759968, 0.13310633451759968, 0.13310633451759968, 0.15885669673959513, 0.15885669673959513, 0.15885669673959513, 0.15267425513502442, 0.15267425513502442, 0.15267425513502442, 0.1660645319709907, 0.1660645319709907, 0.1660645319709907, 0.2381625989848566, 0.2381625989848566, 0.2381625989848566, 0.5706810290833533, 0.5706810290833533, 0.5706810290833533, 0.3250232822933756, 0.3250232822933756, 0.3250232822933756, 0.418284876173895, 0.418284876173895, 0.418284876173895, 0.2000739483498679, 0.2000739483498679, 0.2000739483498679, 0.2376767735738331, 0.2376767735738331, 0.2376767735738331, 0.24815904819113255, 0.24815904819113255, 0.24815904819113255, 0.24213485946991053, 0.24213485946991053, 0.24213485946991053, 0.2009091878062249, 0.2009091878062249, 0.2009091878062249, 0.23266718895308536, 0.23266718895308536, 0.23266718895308536, 0.1878270011487856, 0.1878270011487856, 0.1878270011487856, 0.20022437661853554, 0.20022437661853554, 0.20022437661853554, 0.19796678353673347, 0.19796678353673347, 0.19796678353673347, 0.149387897818394, 0.149387897818394, 0.149387897818394, 0.18775152688600105, 0.18775152688600105, 0.18775152688600105, 0.1493851569114124, 0.1493851569114124, 0.1493851569114124, 0.6585200168901706, 0.6585200168901706, 0.6585200168901706, 0.20278838568383994, 0.20278838568383994, 0.20278838568383994, 0.2104958360123691, 0.2104958360123691, 0.2104958360123691, 0.1888470682105926, 0.1888470682105926, 0.1888470682105926, 0.18956951578534986, 0.18956951578534986, 0.18956951578534986, 0.1829480539009235, 0.1829480539009235, 0.1829480539009235, 0.09443425251249704, 0.09443425251249704, 0.09443425251249704, 0.09246053739542581, 0.09246053739542581, 0.09246053739542581, 0.11086410077232323, 0.11086410077232323, 0.11086410077232323]}, "mutation_prompt": null}
{"id": "cec0d8bf-d128-4d19-a7ec-7509b1141d2d", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "8d8e5892-db7b-4955-be8f-8330c1936503", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "ac7f0ede-0426-42a5-af78-2bf88e04a8fd", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.55  # Slightly adjusted DE scaling factor for better exploration\n        self.CR = 0.85  # Slightly increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.6, 0.2  # Narrowed PSO inertia weight range\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with fine-tuned parameters and dynamic adaptation for improved performance.", "configspace": "", "generation": 26, "fitness": 0.3170519118864092, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.9005724926141561, 0.9005724926141561, 0.9005724926141561, 0.9122401334160442, 0.9122401334160442, 0.9122401334160442, 0.9145731877649328, 0.9145731877649328, 0.9145731877649328, 0.8028000436403269, 0.8028000436403269, 0.8028000436403269, 0.8186234008996836, 0.8186234008996836, 0.8186234008996836, 0.7991223450805715, 0.7991223450805715, 0.7991223450805715, 0.13110456932885173, 0.13110456932885173, 0.13110456932885173, 0.14530897230577755, 0.14530897230577755, 0.14530897230577755, 0.15415897401467882, 0.15415897401467882, 0.15415897401467882, 0.14389885012391845, 0.14389885012391845, 0.14389885012391845, 0.10835077612007904, 0.10835077612007904, 0.10835077612007904, 0.12188011633252771, 0.12188011633252771, 0.12188011633252771, 0.9335674782039791, 0.9335674782039791, 0.9335674782039791, 0.9225289920750623, 0.9225289920750623, 0.9225289920750623, 0.9484974093024762, 0.9484974093024762, 0.9484974093024762, 0.7503396930731984, 0.7503396930731984, 0.7503396930731984, 0.8229618204177003, 0.8229618204177003, 0.8229618204177003, 0.4357992383455749, 0.4357992383455749, 0.4357992383455749, 0.2134468884361308, 0.2134468884361308, 0.2134468884361308, 0.27821034035295467, 0.27821034035295467, 0.27821034035295467, 0.22171817429690832, 0.22171817429690832, 0.22171817429690832, 0.18749169590962178, 0.18749169590962178, 0.18749169590962178, 0.12868082250307578, 0.12868082250307578, 0.12868082250307578, 0.15398081938124064, 0.15398081938124064, 0.15398081938124064, 0.21219088031695466, 0.21219088031695466, 0.21219088031695466, 0.1712892861311509, 0.1712892861311509, 0.1712892861311509, 0.195760391342367, 0.195760391342367, 0.195760391342367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20446846609934588, 0.20446846609934588, 0.20446846609934588, 0.030524257217330875, 0.030524257217330875, 0.030524257217330875, 0.09530809301447407, 0.09530809301447407, 0.09530809301447407, 0.06710885259732335, 0.06710885259732335, 0.06710885259732335, 0.07935255334195568, 0.07935255334195568, 0.07935255334195568, 0.05723529826760754, 0.05723529826760754, 0.05723529826760754, 0.08456287247686689, 0.08456287247686689, 0.08456287247686689, 0.17529576373129907, 0.17529576373129907, 0.17529576373129907, 0.09528184479251867, 0.09528184479251867, 0.09528184479251867, 0.047607921225917615, 0.047607921225917615, 0.047607921225917615, 0.18416991763870683, 0.18416991763870683, 0.18416991763870683, 0.5245372418561053, 0.5245372418561053, 0.5245372418561053, 0.5739831686836417, 0.5739831686836417, 0.5739831686836417, 0.5791855828007184, 0.5791855828007184, 0.5791855828007184, 0.13172775527006764, 0.13172775527006764, 0.13172775527006764, 0.15819568432481323, 0.15819568432481323, 0.15819568432481323, 0.15873032223518635, 0.15873032223518635, 0.15873032223518635, 0.2002965123979804, 0.2002965123979804, 0.2002965123979804, 0.30896905650628015, 0.30896905650628015, 0.30896905650628015, 0.1888473152468393, 0.1888473152468393, 0.1888473152468393, 0.3255728848344629, 0.3255728848344629, 0.3255728848344629, 0.21003037819727655, 0.21003037819727655, 0.21003037819727655, 0.7438019391134654, 0.7438019391134654, 0.7438019391134654, 0.24356211682217543, 0.24356211682217543, 0.24356211682217543, 0.22083265892530135, 0.22083265892530135, 0.22083265892530135, 0.357552411974548, 0.357552411974548, 0.357552411974548, 0.21760270955412364, 0.21760270955412364, 0.21760270955412364, 0.23945655775088082, 0.23945655775088082, 0.23945655775088082, 0.2238170442372961, 0.2238170442372961, 0.2238170442372961, 0.1780869929226374, 0.1780869929226374, 0.1780869929226374, 0.18860814479096366, 0.18860814479096366, 0.18860814479096366, 0.1718543565981192, 0.1718543565981192, 0.1718543565981192, 0.87515666122204, 0.87515666122204, 0.87515666122204, 0.18845188338578867, 0.18845188338578867, 0.18845188338578867, 0.1555523518037829, 0.1555523518037829, 0.1555523518037829, 0.5606092887683014, 0.5606092887683014, 0.5606092887683014, 0.21055573475894673, 0.21055573475894673, 0.21055573475894673, 0.1635433298031943, 0.1635433298031943, 0.1635433298031943, 0.20326738383781195, 0.20326738383781195, 0.20326738383781195, 0.17791055975454706, 0.17791055975454706, 0.17791055975454706, 0.19737171273481702, 0.19737171273481702, 0.19737171273481702, 0.10064438505913054, 0.10064438505913054, 0.10064438505913054, 0.09327304399758163, 0.09327304399758163, 0.09327304399758163, 0.10603685351934766, 0.10603685351934766, 0.10603685351934766]}, "mutation_prompt": null}
{"id": "5de6cbce-e911-4aeb-9602-479d5960f1b3", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "7873d14d-1d20-4e79-a65c-c87eb630eb69", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "0e8f33b4-9a45-43f8-bba3-21f0501eee43", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "017c6dea-0b73-4eb8-884c-27e024231335", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "4ef822bb-aeb4-444e-ad47-d4f014d31d8a", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.6  # Adjusted DE scaling factor\n        self.CR = 0.8  # Adjusted DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # Adaptive PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO with optimized parameter tuning for enhanced performance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8872287140858852, 0.8872287140858852, 0.8872287140858852, 0.8886637217873082, 0.8886637217873082, 0.8886637217873082, 0.8873120881815276, 0.8873120881815276, 0.8873120881815276, 0.7714571827621599, 0.7714571827621599, 0.7714571827621599, 0.7687945284141269, 0.7687945284141269, 0.7687945284141269, 0.7714049392300564, 0.7714049392300564, 0.7714049392300564, 0.14334765777950065, 0.14334765777950065, 0.14334765777950065, 0.15665860049227942, 0.15665860049227942, 0.15665860049227942, 0.16060751074090318, 0.16060751074090318, 0.16060751074090318, 0.08705288777594289, 0.08705288777594289, 0.08705288777594289, 0.10340622116427967, 0.10340622116427967, 0.10340622116427967, 0.10255993771517202, 0.10255993771517202, 0.10255993771517202, 0.9721154272251321, 0.9721154272251321, 0.9721154272251321, 0.9419250486828965, 0.9419250486828965, 0.9419250486828965, 0.9517571181882284, 0.9517571181882284, 0.9517571181882284, 0.6921957961584986, 0.6921957961584986, 0.6921957961584986, 0.7112743789426114, 0.7112743789426114, 0.7112743789426114, 0.7556116297363564, 0.7556116297363564, 0.7556116297363564, 0.9004700543433752, 0.9004700543433752, 0.9004700543433752, 0.20950772308765686, 0.20950772308765686, 0.20950772308765686, 0.1805746350378873, 0.1805746350378873, 0.1805746350378873, 0.13108710810540491, 0.13108710810540491, 0.13108710810540491, 0.2392320223561344, 0.2392320223561344, 0.2392320223561344, 0.24666975400660884, 0.24666975400660884, 0.24666975400660884, 0.24397101525752518, 0.24397101525752518, 0.24397101525752518, 0.13207091524400472, 0.13207091524400472, 0.13207091524400472, 0.24176800086251615, 0.24176800086251615, 0.24176800086251615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057470639559305, 0.008057470639559305, 0.008057470639559305, 0.12357462625435889, 0.12357462625435889, 0.12357462625435889, 0.16852655709731368, 0.16852655709731368, 0.16852655709731368, 0.08574108146177872, 0.08574108146177872, 0.08574108146177872, 0.1126254740346756, 0.1126254740346756, 0.1126254740346756, 0.2525828594139652, 0.2525828594139652, 0.2525828594139652, 0.07808154430068404, 0.07808154430068404, 0.07808154430068404, 0.15186202761506917, 0.15186202761506917, 0.15186202761506917, 0.2226284240469455, 0.2226284240469455, 0.2226284240469455, 0.05283976998027118, 0.05283976998027118, 0.05283976998027118, 0.09760836712933274, 0.09760836712933274, 0.09760836712933274, 0.5476804043477189, 0.5476804043477189, 0.5476804043477189, 0.5268261989910431, 0.5268261989910431, 0.5268261989910431, 0.5918448287576068, 0.5918448287576068, 0.5918448287576068, 0.15803178223847592, 0.15803178223847592, 0.15803178223847592, 0.10924578381965477, 0.10924578381965477, 0.10924578381965477, 0.1227466600245376, 0.1227466600245376, 0.1227466600245376, 0.2092915151159398, 0.2092915151159398, 0.2092915151159398, 0.23365838940865957, 0.23365838940865957, 0.23365838940865957, 0.22086302998897855, 0.22086302998897855, 0.22086302998897855, 0.47057903578695026, 0.47057903578695026, 0.47057903578695026, 0.5377937695637067, 0.5377937695637067, 0.5377937695637067, 0.2882315862581317, 0.2882315862581317, 0.2882315862581317, 0.12694777880836805, 0.12694777880836805, 0.12694777880836805, 0.19729550799468754, 0.19729550799468754, 0.19729550799468754, 0.26125845407508763, 0.26125845407508763, 0.26125845407508763, 0.2508782107070756, 0.2508782107070756, 0.2508782107070756, 0.2536195094647319, 0.2536195094647319, 0.2536195094647319, 0.21646526409344125, 0.21646526409344125, 0.21646526409344125, 0.18177962405990333, 0.18177962405990333, 0.18177962405990333, 0.19676359513790787, 0.19676359513790787, 0.19676359513790787, 0.20905221813169506, 0.20905221813169506, 0.20905221813169506, 0.907257818233959, 0.907257818233959, 0.907257818233959, 0.8624955741620761, 0.8624955741620761, 0.8624955741620761, 0.8510517212716633, 0.8510517212716633, 0.8510517212716633, 0.20709365617065367, 0.20709365617065367, 0.20709365617065367, 0.667818501380151, 0.667818501380151, 0.667818501380151, 0.16440663213038265, 0.16440663213038265, 0.16440663213038265, 0.18578589668731027, 0.18578589668731027, 0.18578589668731027, 0.19656008674535919, 0.19656008674535919, 0.19656008674535919, 0.2162209887738341, 0.2162209887738341, 0.2162209887738341, 0.10661213767427236, 0.10661213767427236, 0.10661213767427236, 0.0978494049983123, 0.0978494049983123, 0.0978494049983123, 0.08939521772863424, 0.08939521772863424, 0.08939521772863424]}, "mutation_prompt": null}
{"id": "3ff78724-6474-40d6-8ef6-e85f2adc0517", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.15, 0.15]  # Slightly extended velocity bounds\n        self.F = 0.7  # Further adjusted DE scaling factor\n        self.CR = 0.85  # Enhanced DE crossover probability\n        self.w_max, self.w_min = 0.8, 0.4  # Adjusted PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.7  # Modified PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO with enhanced parameter adaptation for improved convergence.", "configspace": "", "generation": 32, "fitness": 0.3218163661985885, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8361450422720991, 0.8361450422720991, 0.8361450422720991, 0.8423211903880178, 0.8423211903880178, 0.8423211903880178, 0.8485072076676448, 0.8485072076676448, 0.8485072076676448, 0.5863804343110265, 0.5863804343110265, 0.5863804343110265, 0.6421397359038754, 0.6421397359038754, 0.6421397359038754, 0.6649976502161812, 0.6649976502161812, 0.6649976502161812, 0.15513164888377706, 0.15513164888377706, 0.15513164888377706, 0.18157157113868094, 0.18157157113868094, 0.18157157113868094, 0.18506191460560317, 0.18506191460560317, 0.18506191460560317, 0.1407376048651413, 0.1407376048651413, 0.1407376048651413, 0.12197961264765766, 0.12197961264765766, 0.12197961264765766, 0.06353390990810204, 0.06353390990810204, 0.06353390990810204, 0.9528159241732922, 0.9528159241732922, 0.9528159241732922, 0.9478860415434776, 0.9478860415434776, 0.9478860415434776, 0.9434846943749364, 0.9434846943749364, 0.9434846943749364, 0.684491499415869, 0.684491499415869, 0.684491499415869, 0.6809256673377032, 0.6809256673377032, 0.6809256673377032, 0.6578679557718554, 0.6578679557718554, 0.6578679557718554, 0.22269876402741418, 0.22269876402741418, 0.22269876402741418, 0.18189688268409032, 0.18189688268409032, 0.18189688268409032, 0.8224485537633299, 0.8224485537633299, 0.8224485537633299, 0.226221612832046, 0.226221612832046, 0.226221612832046, 0.18532577578884635, 0.18532577578884635, 0.18532577578884635, 0.2671542555748442, 0.2671542555748442, 0.2671542555748442, 0.23132948119789576, 0.23132948119789576, 0.23132948119789576, 0.4056326116663517, 0.4056326116663517, 0.4056326116663517, 0.25725514523391846, 0.25725514523391846, 0.25725514523391846, 0.0007134009661573515, 0.0007134009661573515, 0.0007134009661573515, 0.01448522169955302, 0.01448522169955302, 0.01448522169955302, 0.0004727341014643116, 0.0004727341014643116, 0.0004727341014643116, 0.1282956799183015, 0.1282956799183015, 0.1282956799183015, 0.113596594294741, 0.113596594294741, 0.113596594294741, 0.17864457340504647, 0.17864457340504647, 0.17864457340504647, 0.2663860537520454, 0.2663860537520454, 0.2663860537520454, 0.16922922974014798, 0.16922922974014798, 0.16922922974014798, 0.13112712452119646, 0.13112712452119646, 0.13112712452119646, 0.04063158022560198, 0.04063158022560198, 0.04063158022560198, 0.09737143751394528, 0.09737143751394528, 0.09737143751394528, 0.2035667003904459, 0.2035667003904459, 0.2035667003904459, 0.5374990320931841, 0.5374990320931841, 0.5374990320931841, 0.5694900541691524, 0.5694900541691524, 0.5694900541691524, 0.5724240258723201, 0.5724240258723201, 0.5724240258723201, 0.09831601475806528, 0.09831601475806528, 0.09831601475806528, 0.1318237738003507, 0.1318237738003507, 0.1318237738003507, 0.10729444940173272, 0.10729444940173272, 0.10729444940173272, 0.2075352532715291, 0.2075352532715291, 0.2075352532715291, 0.2685748454960468, 0.2685748454960468, 0.2685748454960468, 0.4295757000613525, 0.4295757000613525, 0.4295757000613525, 0.4105353855043148, 0.4105353855043148, 0.4105353855043148, 0.28397783625542206, 0.28397783625542206, 0.28397783625542206, 0.48147337823403846, 0.48147337823403846, 0.48147337823403846, 0.28042582555446494, 0.28042582555446494, 0.28042582555446494, 0.22420775030904583, 0.22420775030904583, 0.22420775030904583, 0.20595729204645508, 0.20595729204645508, 0.20595729204645508, 0.2419450033024283, 0.2419450033024283, 0.2419450033024283, 0.2251646615531634, 0.2251646615531634, 0.2251646615531634, 0.23081182272468548, 0.23081182272468548, 0.23081182272468548, 0.22712576047094113, 0.22712576047094113, 0.22712576047094113, 0.20640381929971208, 0.20640381929971208, 0.20640381929971208, 0.21808712277986608, 0.21808712277986608, 0.21808712277986608, 0.8944760294907289, 0.8944760294907289, 0.8944760294907289, 0.18868631762789356, 0.18868631762789356, 0.18868631762789356, 0.167688209227154, 0.167688209227154, 0.167688209227154, 0.210268622080784, 0.210268622080784, 0.210268622080784, 0.16405582031880073, 0.16405582031880073, 0.16405582031880073, 0.21162569373528117, 0.21162569373528117, 0.21162569373528117, 0.1988627303283228, 0.1988627303283228, 0.1988627303283228, 0.18542643879742038, 0.18542643879742038, 0.18542643879742038, 0.1984307245628325, 0.1984307245628325, 0.1984307245628325, 0.0980153726015891, 0.0980153726015891, 0.0980153726015891, 0.12441792033503984, 0.12441792033503984, 0.12441792033503984, 0.08971296151193142, 0.08971296151193142, 0.08971296151193142]}, "mutation_prompt": null}
{"id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 33, "fitness": 0.36463958582663947, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e84c53e1-2d3f-41b5-9c6a-5ea048c835c7", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "9e2513cf-9eb2-4325-adc6-32ba0cf7cc54", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.75  # Increased DE scaling factor for better exploration\n        self.CR = 0.85  # Slightly increased DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with adaptive learning rates for improved convergence and stability.", "configspace": "", "generation": 34, "fitness": 0.3488172675615858, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8608128226402474, 0.8608128226402474, 0.8608128226402474, 0.8723069055437784, 0.8723069055437784, 0.8723069055437784, 0.872880048119668, 0.872880048119668, 0.872880048119668, 0.7436942345322288, 0.7436942345322288, 0.7436942345322288, 0.7482859963431227, 0.7482859963431227, 0.7482859963431227, 0.7527819217525014, 0.7527819217525014, 0.7527819217525014, 0.18348006101607106, 0.18348006101607106, 0.18348006101607106, 0.11344584336716712, 0.11344584336716712, 0.11344584336716712, 0.1566841293505844, 0.1566841293505844, 0.1566841293505844, 0.08408074421820333, 0.08408074421820333, 0.08408074421820333, 0.0907162053736773, 0.0907162053736773, 0.0907162053736773, 0.10518485540174116, 0.10518485540174116, 0.10518485540174116, 0.9471548325089899, 0.9471548325089899, 0.9471548325089899, 0.9425908460341356, 0.9425908460341356, 0.9425908460341356, 0.9389285532905004, 0.9389285532905004, 0.9389285532905004, 0.7303320337203325, 0.7303320337203325, 0.7303320337203325, 0.7403119814318688, 0.7403119814318688, 0.7403119814318688, 0.727842168867499, 0.727842168867499, 0.727842168867499, 0.3856250674335894, 0.3856250674335894, 0.3856250674335894, 0.2773252637118492, 0.2773252637118492, 0.2773252637118492, 0.9106845485096825, 0.9106845485096825, 0.9106845485096825, 0.2282725075395401, 0.2282725075395401, 0.2282725075395401, 0.2590327815361897, 0.2590327815361897, 0.2590327815361897, 0.2523388884298051, 0.2523388884298051, 0.2523388884298051, 0.12899501104298483, 0.12899501104298483, 0.12899501104298483, 0.13310920920954106, 0.13310920920954106, 0.13310920920954106, 0.21992813670126188, 0.21992813670126188, 0.21992813670126188, 0.08433215044049336, 0.08433215044049336, 0.08433215044049336, 0.025183365372139943, 0.025183365372139943, 0.025183365372139943, 0.012847394090932163, 0.012847394090932163, 0.012847394090932163, 0.2213065634614685, 0.2213065634614685, 0.2213065634614685, 0.14315912900039784, 0.14315912900039784, 0.14315912900039784, 0.17468227585740037, 0.17468227585740037, 0.17468227585740037, 0.05255381607675247, 0.05255381607675247, 0.05255381607675247, 0.14805337627702664, 0.14805337627702664, 0.14805337627702664, 0.16410369461797003, 0.16410369461797003, 0.16410369461797003, 0.13645119952398344, 0.13645119952398344, 0.13645119952398344, 0.04069099052668057, 0.04069099052668057, 0.04069099052668057, 0.18234466815513872, 0.18234466815513872, 0.18234466815513872, 0.5431152711739778, 0.5431152711739778, 0.5431152711739778, 0.6108868950169195, 0.6108868950169195, 0.6108868950169195, 0.5844712012338211, 0.5844712012338211, 0.5844712012338211, 0.18441188774858053, 0.18441188774858053, 0.18441188774858053, 0.6677308723990865, 0.6677308723990865, 0.6677308723990865, 0.1140859086496464, 0.1140859086496464, 0.1140859086496464, 0.20535576559916924, 0.20535576559916924, 0.20535576559916924, 0.1866770457364313, 0.1866770457364313, 0.1866770457364313, 0.19353101263926942, 0.19353101263926942, 0.19353101263926942, 0.23604820042965569, 0.23604820042965569, 0.23604820042965569, 0.3115723989020205, 0.3115723989020205, 0.3115723989020205, 0.252197888816743, 0.252197888816743, 0.252197888816743, 0.2598644486533779, 0.2598644486533779, 0.2598644486533779, 0.23634620030858733, 0.23634620030858733, 0.23634620030858733, 0.4307775972128848, 0.4307775972128848, 0.4307775972128848, 0.27176957819071, 0.27176957819071, 0.27176957819071, 0.23256881035284238, 0.23256881035284238, 0.23256881035284238, 0.28964242919128835, 0.28964242919128835, 0.28964242919128835, 0.2010530541564305, 0.2010530541564305, 0.2010530541564305, 0.18563296426761922, 0.18563296426761922, 0.18563296426761922, 0.18942747780015323, 0.18942747780015323, 0.18942747780015323, 0.16173702407647594, 0.16173702407647594, 0.16173702407647594, 0.795102918524582, 0.795102918524582, 0.795102918524582, 0.8507968849967059, 0.8507968849967059, 0.8507968849967059, 0.20727506365664616, 0.20727506365664616, 0.20727506365664616, 0.8466685734926337, 0.8466685734926337, 0.8466685734926337, 0.20931279488147603, 0.20931279488147603, 0.20931279488147603, 0.1836731331420045, 0.1836731331420045, 0.1836731331420045, 0.1821894745491699, 0.1821894745491699, 0.1821894745491699, 0.18768539092101066, 0.18768539092101066, 0.18768539092101066, 0.10823336109541215, 0.10823336109541215, 0.10823336109541215, 0.08990448102824944, 0.08990448102824944, 0.08990448102824944, 0.11256303456345162, 0.11256303456345162, 0.11256303456345162]}, "mutation_prompt": null}
{"id": "b77291de-2ada-4f9d-b69c-31b1549ae10d", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7\n        self.CR = 0.85  # Slightly increased DE crossover probability for better diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.4, 1.6\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Slightly reduced mutation scale\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning crossover rate and mutation strategy for better convergence.", "configspace": "", "generation": 35, "fitness": 0.3342464759527941, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.874212590885264, 0.874212590885264, 0.874212590885264, 0.8828035775595516, 0.8828035775595516, 0.8828035775595516, 0.8823107558723499, 0.8823107558723499, 0.8823107558723499, 0.5784111479487242, 0.5784111479487242, 0.5784111479487242, 0.7530525305282209, 0.7530525305282209, 0.7530525305282209, 0.7658042664825438, 0.7658042664825438, 0.7658042664825438, 0.17852505505540006, 0.17852505505540006, 0.17852505505540006, 0.1402971273093805, 0.1402971273093805, 0.1402971273093805, 0.15660531847811776, 0.15660531847811776, 0.15660531847811776, 0.11523496994198701, 0.11523496994198701, 0.11523496994198701, 0.09898361926011934, 0.09898361926011934, 0.09898361926011934, 0.12327372147342708, 0.12327372147342708, 0.12327372147342708, 0.9339948359227115, 0.9339948359227115, 0.9339948359227115, 0.9379772822490972, 0.9379772822490972, 0.9379772822490972, 0.9295100227764201, 0.9295100227764201, 0.9295100227764201, 0.7610582165904733, 0.7610582165904733, 0.7610582165904733, 0.7507900464720549, 0.7507900464720549, 0.7507900464720549, 0.7088909189258965, 0.7088909189258965, 0.7088909189258965, 0.24455450402536094, 0.24455450402536094, 0.24455450402536094, 0.9013590960091977, 0.9013590960091977, 0.9013590960091977, 0.7481682746905856, 0.7481682746905856, 0.7481682746905856, 0.12856068080561656, 0.12856068080561656, 0.12856068080561656, 0.24281369878441994, 0.24281369878441994, 0.24281369878441994, 0.13051681448072905, 0.13051681448072905, 0.13051681448072905, 0.05323213641628466, 0.05323213641628466, 0.05323213641628466, 0.13316670925729102, 0.13316670925729102, 0.13316670925729102, 0.2568821387620537, 0.2568821387620537, 0.2568821387620537, 0.008630042292320117, 0.008630042292320117, 0.008630042292320117, 0.02468492613138873, 0.02468492613138873, 0.02468492613138873, 0.07895529031571291, 0.07895529031571291, 0.07895529031571291, 0.10955502058589939, 0.10955502058589939, 0.10955502058589939, 0.1931133384555339, 0.1931133384555339, 0.1931133384555339, 0.13088785484716703, 0.13088785484716703, 0.13088785484716703, 0.22581984107992736, 0.22581984107992736, 0.22581984107992736, 0.11618298546549, 0.11618298546549, 0.11618298546549, 0.3347357369315085, 0.3347357369315085, 0.3347357369315085, 0.08093559646783721, 0.08093559646783721, 0.08093559646783721, 0.08111658633102348, 0.08111658633102348, 0.08111658633102348, 0.20918184098086223, 0.20918184098086223, 0.20918184098086223, 0.5649294473402968, 0.5649294473402968, 0.5649294473402968, 0.5785629503785404, 0.5785629503785404, 0.5785629503785404, 0.60622530415843, 0.60622530415843, 0.60622530415843, 0.10237962340516893, 0.10237962340516893, 0.10237962340516893, 0.1795067114672615, 0.1795067114672615, 0.1795067114672615, 0.10829320730762515, 0.10829320730762515, 0.10829320730762515, 0.21195648165301273, 0.21195648165301273, 0.21195648165301273, 0.3140250798313118, 0.3140250798313118, 0.3140250798313118, 0.31442409324539733, 0.31442409324539733, 0.31442409324539733, 0.5027696227329432, 0.5027696227329432, 0.5027696227329432, 0.522910747356194, 0.522910747356194, 0.522910747356194, 0.2648439234750781, 0.2648439234750781, 0.2648439234750781, 0.22239489247821442, 0.22239489247821442, 0.22239489247821442, 0.348837547733321, 0.348837547733321, 0.348837547733321, 0.21707377066742461, 0.21707377066742461, 0.21707377066742461, 0.242015321327124, 0.242015321327124, 0.242015321327124, 0.2651015944166252, 0.2651015944166252, 0.2651015944166252, 0.21514086809621924, 0.21514086809621924, 0.21514086809621924, 0.18240311510093143, 0.18240311510093143, 0.18240311510093143, 0.2106699866196201, 0.2106699866196201, 0.2106699866196201, 0.1847001502960154, 0.1847001502960154, 0.1847001502960154, 0.1681679565819113, 0.1681679565819113, 0.1681679565819113, 0.19404127971760643, 0.19404127971760643, 0.19404127971760643, 0.20986837306187145, 0.20986837306187145, 0.20986837306187145, 0.8058640872928201, 0.8058640872928201, 0.8058640872928201, 0.20652735604454542, 0.20652735604454542, 0.20652735604454542, 0.21145319948443908, 0.21145319948443908, 0.21145319948443908, 0.1966849129767636, 0.1966849129767636, 0.1966849129767636, 0.20888033269867534, 0.20888033269867534, 0.20888033269867534, 0.17970108972153687, 0.17970108972153687, 0.17970108972153687, 0.09982920585525012, 0.09982920585525012, 0.09982920585525012, 0.1103010085573054, 0.1103010085573054, 0.1103010085573054, 0.1104739106737479, 0.1104739106737479, 0.1104739106737479]}, "mutation_prompt": null}
{"id": "e76ca390-e874-4de6-970c-9541f4b1670c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "07a03819-8e45-433f-8df1-5a0ceaf011c0", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "4956492d-a16f-4298-9a2c-a027ef78a34c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "e5638713-005d-4c38-ac52-6ec325f8a11a", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.75  # Adjusted DE scaling factor for exploration\n        self.CR = 0.85  # Slightly increased DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.35  # Fine-tuned PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients remain unchanged\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Retained dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by fine-tuning inertia dynamics and refining mutation strategy for better convergence.", "configspace": "", "generation": 39, "fitness": 0.3383685271720508, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8717383392317208, 0.8717383392317208, 0.8717383392317208, 0.8672883092269867, 0.8672883092269867, 0.8672883092269867, 0.8713337210528539, 0.8713337210528539, 0.8713337210528539, 0.7478785797482812, 0.7478785797482812, 0.7478785797482812, 0.7395623340317348, 0.7395623340317348, 0.7395623340317348, 0.735606665946011, 0.735606665946011, 0.735606665946011, 0.13906482486875793, 0.13906482486875793, 0.13906482486875793, 0.160143062587921, 0.160143062587921, 0.160143062587921, 0.14155654885197533, 0.14155654885197533, 0.14155654885197533, 0.07542643490871948, 0.07542643490871948, 0.07542643490871948, 0.11373403969482665, 0.11373403969482665, 0.11373403969482665, 0.11229534182290424, 0.11229534182290424, 0.11229534182290424, 0.9388008650212054, 0.9388008650212054, 0.9388008650212054, 0.9424105621764377, 0.9424105621764377, 0.9424105621764377, 0.9358148899001657, 0.9358148899001657, 0.9358148899001657, 0.7417243508419988, 0.7417243508419988, 0.7417243508419988, 0.7069922665557625, 0.7069922665557625, 0.7069922665557625, 0.7086494389890359, 0.7086494389890359, 0.7086494389890359, 0.2281111370710721, 0.2281111370710721, 0.2281111370710721, 0.2186232441121252, 0.2186232441121252, 0.2186232441121252, 0.8807396930294473, 0.8807396930294473, 0.8807396930294473, 0.2494685277081199, 0.2494685277081199, 0.2494685277081199, 0.2705138004238449, 0.2705138004238449, 0.2705138004238449, 0.22102385485020637, 0.22102385485020637, 0.22102385485020637, 0.1286079946293448, 0.1286079946293448, 0.1286079946293448, 0.25545536730290797, 0.25545536730290797, 0.25545536730290797, 0.23470561099794462, 0.23470561099794462, 0.23470561099794462, 0.01720524990718819, 0.01720524990718819, 0.01720524990718819, 0.01050342876541488, 0.01050342876541488, 0.01050342876541488, 0.0557352472756224, 0.0557352472756224, 0.0557352472756224, 0.20895114251090485, 0.20895114251090485, 0.20895114251090485, 0.0806418654367651, 0.0806418654367651, 0.0806418654367651, 0.22879458537603536, 0.22879458537603536, 0.22879458537603536, 0.03275402778603542, 0.03275402778603542, 0.03275402778603542, 0.23257784480537858, 0.23257784480537858, 0.23257784480537858, 0.17398810200912118, 0.17398810200912118, 0.17398810200912118, 0.20950203808375145, 0.20950203808375145, 0.20950203808375145, 0.06342910235803845, 0.06342910235803845, 0.06342910235803845, 0.16260726767156397, 0.16260726767156397, 0.16260726767156397, 0.5471031070233001, 0.5471031070233001, 0.5471031070233001, 0.5984869427908366, 0.5984869427908366, 0.5984869427908366, 0.5678839028028407, 0.5678839028028407, 0.5678839028028407, 0.1164761900198995, 0.1164761900198995, 0.1164761900198995, 0.1421217634450337, 0.1421217634450337, 0.1421217634450337, 0.10931106972463989, 0.10931106972463989, 0.10931106972463989, 0.18033293293325292, 0.18033293293325292, 0.18033293293325292, 0.1955505751381329, 0.1955505751381329, 0.1955505751381329, 0.23298343070237892, 0.23298343070237892, 0.23298343070237892, 0.5182587301941917, 0.5182587301941917, 0.5182587301941917, 0.5234606520043392, 0.5234606520043392, 0.5234606520043392, 0.27015450946855957, 0.27015450946855957, 0.27015450946855957, 0.28030969791175464, 0.28030969791175464, 0.28030969791175464, 0.4144272606339747, 0.4144272606339747, 0.4144272606339747, 0.23820996999452593, 0.23820996999452593, 0.23820996999452593, 0.2710565858345785, 0.2710565858345785, 0.2710565858345785, 0.24342415444804144, 0.24342415444804144, 0.24342415444804144, 0.2645657465224668, 0.2645657465224668, 0.2645657465224668, 0.18318550973731274, 0.18318550973731274, 0.18318550973731274, 0.1861309633297854, 0.1861309633297854, 0.1861309633297854, 0.17594261348564255, 0.17594261348564255, 0.17594261348564255, 0.1617405344910401, 0.1617405344910401, 0.1617405344910401, 0.7899444700074524, 0.7899444700074524, 0.7899444700074524, 0.8626111851739282, 0.8626111851739282, 0.8626111851739282, 0.20685034792523926, 0.20685034792523926, 0.20685034792523926, 0.20034766995908415, 0.20034766995908415, 0.20034766995908415, 0.20925214829629357, 0.20925214829629357, 0.20925214829629357, 0.18907272219172988, 0.18907272219172988, 0.18907272219172988, 0.17903448212943962, 0.17903448212943962, 0.17903448212943962, 0.23525732334245808, 0.23525732334245808, 0.23525732334245808, 0.16121899801304518, 0.16121899801304518, 0.16121899801304518, 0.09861534853983134, 0.09861534853983134, 0.09861534853983134, 0.09525271060449192, 0.09525271060449192, 0.09525271060449192]}, "mutation_prompt": null}
{"id": "d2e566e4-afa2-4056-a6f7-d09df80c6195", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.2, 0.2]  # Adjusted velocity bounds for dynamic range\n        self.F = 0.7\n        self.CR = 0.85  # Slightly increased crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.4, 1.6\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by optimizing velocity bounds and crossover strategy for improved convergence efficiency.", "configspace": "", "generation": 40, "fitness": 0.3379641033688228, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.867154419272815, 0.867154419272815, 0.867154419272815, 0.869839662692981, 0.869839662692981, 0.869839662692981, 0.8720900906436139, 0.8720900906436139, 0.8720900906436139, 0.6240711648044096, 0.6240711648044096, 0.6240711648044096, 0.5588177918015999, 0.5588177918015999, 0.5588177918015999, 0.6255797510474773, 0.6255797510474773, 0.6255797510474773, 0.12038839567498039, 0.12038839567498039, 0.12038839567498039, 0.1872578691554091, 0.1872578691554091, 0.1872578691554091, 0.12418943113113634, 0.12418943113113634, 0.12418943113113634, 0.0965082753053299, 0.0965082753053299, 0.0965082753053299, 0.08633714022541283, 0.08633714022541283, 0.08633714022541283, 0.15573118059647895, 0.15573118059647895, 0.15573118059647895, 0.9380413676003279, 0.9380413676003279, 0.9380413676003279, 0.9360278486422049, 0.9360278486422049, 0.9360278486422049, 0.9531683136364433, 0.9531683136364433, 0.9531683136364433, 0.7451202906591172, 0.7451202906591172, 0.7451202906591172, 0.772880850610703, 0.772880850610703, 0.772880850610703, 0.7535833661995557, 0.7535833661995557, 0.7535833661995557, 0.22797577137353897, 0.22797577137353897, 0.22797577137353897, 0.9104360440984612, 0.9104360440984612, 0.9104360440984612, 0.23551537867451167, 0.23551537867451167, 0.23551537867451167, 0.22734910322037893, 0.22734910322037893, 0.22734910322037893, 0.2071043219630495, 0.2071043219630495, 0.2071043219630495, 0.13335090238427671, 0.13335090238427671, 0.13335090238427671, 0.21640673774428087, 0.21640673774428087, 0.21640673774428087, 0.15658325714364763, 0.15658325714364763, 0.15658325714364763, 0.28338737566136574, 0.28338737566136574, 0.28338737566136574, 0.05222385007140762, 0.05222385007140762, 0.05222385007140762, 0.008170430939923978, 0.008170430939923978, 0.008170430939923978, 0.010845517889058964, 0.010845517889058964, 0.010845517889058964, 0.1276067010974954, 0.1276067010974954, 0.1276067010974954, 0.12022124689632097, 0.12022124689632097, 0.12022124689632097, 0.10466882604316885, 0.10466882604316885, 0.10466882604316885, 0.12039706611488166, 0.12039706611488166, 0.12039706611488166, 0.12896377648876733, 0.12896377648876733, 0.12896377648876733, 0.10727014410023239, 0.10727014410023239, 0.10727014410023239, 0.24285986456205033, 0.24285986456205033, 0.24285986456205033, 0.03890519904620837, 0.03890519904620837, 0.03890519904620837, 0.156988705082295, 0.156988705082295, 0.156988705082295, 0.5521171554187978, 0.5521171554187978, 0.5521171554187978, 0.5707341603605508, 0.5707341603605508, 0.5707341603605508, 0.5943122725641233, 0.5943122725641233, 0.5943122725641233, 0.1601368700582736, 0.1601368700582736, 0.1601368700582736, 0.16130095176793458, 0.16130095176793458, 0.16130095176793458, 0.1445884952292401, 0.1445884952292401, 0.1445884952292401, 0.2421295536443433, 0.2421295536443433, 0.2421295536443433, 0.3067862289457588, 0.3067862289457588, 0.3067862289457588, 0.23251453157720037, 0.23251453157720037, 0.23251453157720037, 0.3739662259861377, 0.3739662259861377, 0.3739662259861377, 0.4297487805006054, 0.4297487805006054, 0.4297487805006054, 0.5568992682948681, 0.5568992682948681, 0.5568992682948681, 0.17688347317668163, 0.17688347317668163, 0.17688347317668163, 0.19939933497596762, 0.19939933497596762, 0.19939933497596762, 0.20953237502710798, 0.20953237502710798, 0.20953237502710798, 0.2313070413699565, 0.2313070413699565, 0.2313070413699565, 0.22120583929474014, 0.22120583929474014, 0.22120583929474014, 0.20283025801479493, 0.20283025801479493, 0.20283025801479493, 0.17873097899592705, 0.17873097899592705, 0.17873097899592705, 0.21588959323466106, 0.21588959323466106, 0.21588959323466106, 0.22737472674111792, 0.22737472674111792, 0.22737472674111792, 0.924929115394782, 0.924929115394782, 0.924929115394782, 0.8761541815135128, 0.8761541815135128, 0.8761541815135128, 0.21221258811770705, 0.21221258811770705, 0.21221258811770705, 0.16805563638072163, 0.16805563638072163, 0.16805563638072163, 0.7607044923457696, 0.7607044923457696, 0.7607044923457696, 0.21074487220238702, 0.21074487220238702, 0.21074487220238702, 0.1985193757990773, 0.1985193757990773, 0.1985193757990773, 0.18833480892914123, 0.18833480892914123, 0.18833480892914123, 0.1890876725977605, 0.1890876725977605, 0.1890876725977605, 0.10907173070555931, 0.10907173070555931, 0.10907173070555931, 0.09792483481453729, 0.09792483481453729, 0.09792483481453729, 0.10527058828017866, 0.10527058828017866, 0.10527058828017866]}, "mutation_prompt": null}
{"id": "ef3f08a5-0f59-4d6e-a7af-0495811ed024", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.75  # Increased DE scaling factor slightly for exploration\n        self.CR = 0.85  # Increased DE crossover probability to enhance diversity\n        self.w_max, self.w_min = 0.8, 0.2  # Adjusted PSO inertia weight range\n        self.c1, self.c2 = 1.5, 1.7  # Increased PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by incorporating adaptive parameter tuning and ensuring balance between exploration and exploitation.", "configspace": "", "generation": 41, "fitness": 0.3608693944665707, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8483788950857966, 0.8483788950857966, 0.8483788950857966, 0.8411260709418258, 0.8411260709418258, 0.8411260709418258, 0.8469066578584514, 0.8469066578584514, 0.8469066578584514, 0.692950672477841, 0.692950672477841, 0.692950672477841, 0.6670354242816843, 0.6670354242816843, 0.6670354242816843, 0.6774267759428299, 0.6774267759428299, 0.6774267759428299, 0.18286287390457, 0.18286287390457, 0.18286287390457, 0.15489849025421243, 0.15489849025421243, 0.15489849025421243, 0.18630963597061578, 0.18630963597061578, 0.18630963597061578, 0.10671587818564132, 0.10671587818564132, 0.10671587818564132, 0.12937658827047016, 0.12937658827047016, 0.12937658827047016, 0.13836584412001052, 0.13836584412001052, 0.13836584412001052, 0.9493743294252173, 0.9493743294252173, 0.9493743294252173, 0.9455060372610505, 0.9455060372610505, 0.9455060372610505, 0.9334392932658838, 0.9334392932658838, 0.9334392932658838, 0.6943180298436856, 0.6943180298436856, 0.6943180298436856, 0.6955814392224342, 0.6955814392224342, 0.6955814392224342, 0.7155306501342044, 0.7155306501342044, 0.7155306501342044, 0.901924530909358, 0.901924530909358, 0.901924530909358, 0.2776464398879095, 0.2776464398879095, 0.2776464398879095, 0.8490139438065991, 0.8490139438065991, 0.8490139438065991, 0.2352675244476099, 0.2352675244476099, 0.2352675244476099, 0.2941741456997834, 0.2941741456997834, 0.2941741456997834, 0.24340201696553676, 0.24340201696553676, 0.24340201696553676, 0.13160097688757066, 0.13160097688757066, 0.13160097688757066, 0.23913955822171729, 0.23913955822171729, 0.23913955822171729, 0.2677557548224445, 0.2677557548224445, 0.2677557548224445, 0.001817212978944771, 0.001817212978944771, 0.001817212978944771, 0.000118688070641082, 0.000118688070641082, 0.000118688070641082, 0.06515967179850213, 0.06515967179850213, 0.06515967179850213, 0.2090173611102104, 0.2090173611102104, 0.2090173611102104, 0.12956478855957065, 0.12956478855957065, 0.12956478855957065, 0.27045504697711, 0.27045504697711, 0.27045504697711, 0.036123926983108845, 0.036123926983108845, 0.036123926983108845, 0.07693071297233944, 0.07693071297233944, 0.07693071297233944, 0.18387004121567396, 0.18387004121567396, 0.18387004121567396, 0.10155207907887509, 0.10155207907887509, 0.10155207907887509, 0.16558188267651985, 0.16558188267651985, 0.16558188267651985, 0.32774950040622275, 0.32774950040622275, 0.32774950040622275, 0.5684768893205148, 0.5684768893205148, 0.5684768893205148, 0.5696884392713608, 0.5696884392713608, 0.5696884392713608, 0.5702162440220366, 0.5702162440220366, 0.5702162440220366, 0.14139590141111968, 0.14139590141111968, 0.14139590141111968, 0.13920767800174638, 0.13920767800174638, 0.13920767800174638, 0.13049287623484962, 0.13049287623484962, 0.13049287623484962, 0.18704151622225285, 0.18704151622225285, 0.18704151622225285, 0.17463909904087682, 0.17463909904087682, 0.17463909904087682, 0.19922488564209062, 0.19922488564209062, 0.19922488564209062, 0.4011298542181133, 0.4011298542181133, 0.4011298542181133, 0.47546546203130524, 0.47546546203130524, 0.47546546203130524, 0.2605027286324374, 0.2605027286324374, 0.2605027286324374, 0.28420549635578063, 0.28420549635578063, 0.28420549635578063, 0.3341333320611709, 0.3341333320611709, 0.3341333320611709, 0.2949630510119535, 0.2949630510119535, 0.2949630510119535, 0.22039611848909413, 0.22039611848909413, 0.22039611848909413, 0.22569120974343992, 0.22569120974343992, 0.22569120974343992, 0.25635280387098924, 0.25635280387098924, 0.25635280387098924, 0.22871915425434064, 0.22871915425434064, 0.22871915425434064, 0.18030634277846913, 0.18030634277846913, 0.18030634277846913, 0.17297670729977221, 0.17297670729977221, 0.17297670729977221, 0.8599759706785681, 0.8599759706785681, 0.8599759706785681, 0.8638425393393587, 0.8638425393393587, 0.8638425393393587, 0.8151241624230573, 0.8151241624230573, 0.8151241624230573, 0.7453155683876871, 0.7453155683876871, 0.7453155683876871, 0.20441257069165886, 0.20441257069165886, 0.20441257069165886, 0.2094904103683296, 0.2094904103683296, 0.2094904103683296, 0.1855800443052601, 0.1855800443052601, 0.1855800443052601, 0.18454316809066673, 0.18454316809066673, 0.18454316809066673, 0.20648502797677115, 0.20648502797677115, 0.20648502797677115, 0.09087661404201175, 0.09087661404201175, 0.09087661404201175, 0.09799573456672062, 0.09799573456672062, 0.09799573456672062, 0.08975940988661135, 0.08975940988661135, 0.08975940988661135]}, "mutation_prompt": null}
{"id": "2d9dd520-b1a2-4d9f-bb23-461d70c5b93f", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "f5a4e1e9-cdbf-41f9-8226-b5458cb82f0e", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "977f87fe-882a-4053-b5df-1c0818740de5", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "f9baa4d1-ccd0-4296-8de2-0a5aa719ee30", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "890536bf-a9ca-41bc-89b1-e88fb806ecd6", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "89aafe61-b363-4818-8e37-6903873eb4fb", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "4ca89e56-0847-43a7-90df-a86156da1986", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "18e09339-f4d8-4dd7-99b6-c7cf047c9316", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "c7b91cda-c92d-4377-8a1f-4e455d736120", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "610fb2e8-2eb5-4fef-a7fc-549d7cc92fe9", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "edb71ae5-e6c7-4c17-8d62-99f8c0fcee7e", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.15, 0.15]  # Adjusted velocity bounds for broader exploration\n        self.F = 0.75  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.85  # Increased DE crossover probability for more aggressive crossover\n        self.w_max, self.w_min = 0.7, 0.4  # Adjusted PSO inertia weight for better balance\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.15)  # Progressive mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by optimizing parameter tuning and introducing a progressive mutation strategy to improve convergence efficiency.", "configspace": "", "generation": 52, "fitness": 0.34990835364228434, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8753977920613533, 0.8753977920613533, 0.8753977920613533, 0.8717667080279303, 0.8717667080279303, 0.8717667080279303, 0.8784816725064395, 0.8784816725064395, 0.8784816725064395, 0.7406740569432777, 0.7406740569432777, 0.7406740569432777, 0.6692816456672783, 0.6692816456672783, 0.6692816456672783, 0.6333251695335881, 0.6333251695335881, 0.6333251695335881, 0.18432340972782246, 0.18432340972782246, 0.18432340972782246, 0.12241288035583697, 0.12241288035583697, 0.12241288035583697, 0.11591067055764948, 0.11591067055764948, 0.11591067055764948, 0.11856725904009513, 0.11856725904009513, 0.11856725904009513, 0.09577543820296575, 0.09577543820296575, 0.09577543820296575, 0.10081202160796454, 0.10081202160796454, 0.10081202160796454, 0.9584099486703131, 0.9584099486703131, 0.9584099486703131, 0.9566486602186396, 0.9566486602186396, 0.9566486602186396, 0.9368011840892178, 0.9368011840892178, 0.9368011840892178, 0.7548142749699946, 0.7548142749699946, 0.7548142749699946, 0.7757849807919353, 0.7757849807919353, 0.7757849807919353, 0.125917641863734, 0.125917641863734, 0.125917641863734, 0.8963846058896302, 0.8963846058896302, 0.8963846058896302, 0.27806557909791163, 0.27806557909791163, 0.27806557909791163, 0.9031764309221184, 0.9031764309221184, 0.9031764309221184, 0.25376746850927956, 0.25376746850927956, 0.25376746850927956, 0.2934916454091878, 0.2934916454091878, 0.2934916454091878, 0.270751408139173, 0.270751408139173, 0.270751408139173, 0.11892657436591703, 0.11892657436591703, 0.11892657436591703, 0.2470347760826216, 0.2470347760826216, 0.2470347760826216, 0.26550552719459597, 0.26550552719459597, 0.26550552719459597, 0.015336288297686962, 0.015336288297686962, 0.015336288297686962, 0.06231404004413199, 0.06231404004413199, 0.06231404004413199, 0.015360886296469256, 0.015360886296469256, 0.015360886296469256, 0.08411643638096378, 0.08411643638096378, 0.08411643638096378, 0.1273522649318407, 0.1273522649318407, 0.1273522649318407, 0.1644498633493776, 0.1644498633493776, 0.1644498633493776, 0.11825173098743014, 0.11825173098743014, 0.11825173098743014, 0.10429539151907097, 0.10429539151907097, 0.10429539151907097, 0.1210575518225584, 0.1210575518225584, 0.1210575518225584, 0.10862787600891244, 0.10862787600891244, 0.10862787600891244, 0.13399319135561438, 0.13399319135561438, 0.13399319135561438, 0.2106536752495135, 0.2106536752495135, 0.2106536752495135, 0.6254297621536946, 0.6254297621536946, 0.6254297621536946, 0.6216493694082645, 0.6216493694082645, 0.6216493694082645, 0.6059188833809594, 0.6059188833809594, 0.6059188833809594, 0.10287400090859189, 0.10287400090859189, 0.10287400090859189, 0.12225408379095859, 0.12225408379095859, 0.12225408379095859, 0.11303927542633152, 0.11303927542633152, 0.11303927542633152, 0.19370194712045996, 0.19370194712045996, 0.19370194712045996, 0.16850125325997256, 0.16850125325997256, 0.16850125325997256, 0.4215083856038687, 0.4215083856038687, 0.4215083856038687, 0.3385374505774602, 0.3385374505774602, 0.3385374505774602, 0.5630157637437982, 0.5630157637437982, 0.5630157637437982, 0.5450463253824039, 0.5450463253824039, 0.5450463253824039, 0.14683203795323296, 0.14683203795323296, 0.14683203795323296, 0.29553970099451277, 0.29553970099451277, 0.29553970099451277, 0.29277049422203205, 0.29277049422203205, 0.29277049422203205, 0.22976384185280097, 0.22976384185280097, 0.22976384185280097, 0.24726068540276913, 0.24726068540276913, 0.24726068540276913, 0.23329403219990275, 0.23329403219990275, 0.23329403219990275, 0.22300881026444208, 0.22300881026444208, 0.22300881026444208, 0.1973304832302103, 0.1973304832302103, 0.1973304832302103, 0.2259914336140909, 0.2259914336140909, 0.2259914336140909, 0.8890592684976242, 0.8890592684976242, 0.8890592684976242, 0.16432844641685007, 0.16432844641685007, 0.16432844641685007, 0.8891936949266847, 0.8891936949266847, 0.8891936949266847, 0.7025915348579009, 0.7025915348579009, 0.7025915348579009, 0.20338626492903866, 0.20338626492903866, 0.20338626492903866, 0.20896072000281496, 0.20896072000281496, 0.20896072000281496, 0.23273680696345544, 0.23273680696345544, 0.23273680696345544, 0.19958491472772655, 0.19958491472772655, 0.19958491472772655, 0.17540620515229743, 0.17540620515229743, 0.17540620515229743, 0.09280845873070831, 0.09280845873070831, 0.09280845873070831, 0.10585693782456018, 0.10585693782456018, 0.10585693782456018, 0.10820156203401243, 0.10820156203401243, 0.10820156203401243]}, "mutation_prompt": null}
{"id": "142ceb96-af2c-44a6-918e-99c48878dbdb", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]\n        self.F = 0.7  # Slightly increased DE scaling factor for exploration\n        self.CR = 0.8  # DE crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.1)  # Dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by enhancing inertia weight adaptation and introducing a dynamic mutation strategy for improved convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8772241797344041, 0.8772241797344041, 0.8772241797344041, 0.8799938280340706, 0.8799938280340706, 0.8799938280340706, 0.8851309325719535, 0.8851309325719535, 0.8851309325719535, 0.7415748669622391, 0.7415748669622391, 0.7415748669622391, 0.7451036207688138, 0.7451036207688138, 0.7451036207688138, 0.7531243641274855, 0.7531243641274855, 0.7531243641274855, 0.14027778234477173, 0.14027778234477173, 0.14027778234477173, 0.14202509797143392, 0.14202509797143392, 0.14202509797143392, 0.12309808931856847, 0.12309808931856847, 0.12309808931856847, 0.11645820740264312, 0.11645820740264312, 0.11645820740264312, 0.1057512299354254, 0.1057512299354254, 0.1057512299354254, 0.14008808582311683, 0.14008808582311683, 0.14008808582311683, 0.9481381295855308, 0.9481381295855308, 0.9481381295855308, 0.9386933329031141, 0.9386933329031141, 0.9386933329031141, 0.9370805389864696, 0.9370805389864696, 0.9370805389864696, 0.7667883243719418, 0.7667883243719418, 0.7667883243719418, 0.7129438593769704, 0.7129438593769704, 0.7129438593769704, 0.6979686501530427, 0.6979686501530427, 0.6979686501530427, 0.8742976877309926, 0.8742976877309926, 0.8742976877309926, 0.377921918581111, 0.377921918581111, 0.377921918581111, 0.3886479905989412, 0.3886479905989412, 0.3886479905989412, 0.25127747726077554, 0.25127747726077554, 0.25127747726077554, 0.24439458933491343, 0.24439458933491343, 0.24439458933491343, 0.25821469286243515, 0.25821469286243515, 0.25821469286243515, 0.23870171401725104, 0.23870171401725104, 0.23870171401725104, 0.24847631586415786, 0.24847631586415786, 0.24847631586415786, 0.25671718747460137, 0.25671718747460137, 0.25671718747460137, 0.06583531636499651, 0.06583531636499651, 0.06583531636499651, 0.0020935292889147084, 0.0020935292889147084, 0.0020935292889147084, 0.06262261312511563, 0.06262261312511563, 0.06262261312511563, 0.1696967870385777, 0.1696967870385777, 0.1696967870385777, 0.17595602788509146, 0.17595602788509146, 0.17595602788509146, 0.1791687057007857, 0.1791687057007857, 0.1791687057007857, 0.08979091391178062, 0.08979091391178062, 0.08979091391178062, 0.14648640660016443, 0.14648640660016443, 0.14648640660016443, 0.12131942033125764, 0.12131942033125764, 0.12131942033125764, 0.10539291724991451, 0.10539291724991451, 0.10539291724991451, 0.21548245389361087, 0.21548245389361087, 0.21548245389361087, 0.34503391525346117, 0.34503391525346117, 0.34503391525346117, 0.5396634107718024, 0.5396634107718024, 0.5396634107718024, 0.6060700051555283, 0.6060700051555283, 0.6060700051555283, 0.5689841955358641, 0.5689841955358641, 0.5689841955358641, 0.17373045930715691, 0.17373045930715691, 0.17373045930715691, 0.1449981475958111, 0.1449981475958111, 0.1449981475958111, 0.1835681933306994, 0.1835681933306994, 0.1835681933306994, 0.24077817624057196, 0.24077817624057196, 0.24077817624057196, 0.4368216419546621, 0.4368216419546621, 0.4368216419546621, 0.2074493695554427, 0.2074493695554427, 0.2074493695554427, 0.3160052922303769, 0.3160052922303769, 0.3160052922303769, 0.546639452045566, 0.546639452045566, 0.546639452045566, 0.599084885416119, 0.599084885416119, 0.599084885416119, 0.26486465846332563, 0.26486465846332563, 0.26486465846332563, 0.22801591917817154, 0.22801591917817154, 0.22801591917817154, 0.3430153656947923, 0.3430153656947923, 0.3430153656947923, 0.24045905002522938, 0.24045905002522938, 0.24045905002522938, 0.24595934020070986, 0.24595934020070986, 0.24595934020070986, 0.21064880431097155, 0.21064880431097155, 0.21064880431097155, 0.19432507464402493, 0.19432507464402493, 0.19432507464402493, 0.19629003550970758, 0.19629003550970758, 0.19629003550970758, 0.20452378276372085, 0.20452378276372085, 0.20452378276372085, 0.8901528677581717, 0.8901528677581717, 0.8901528677581717, 0.8811778976776689, 0.8811778976776689, 0.8811778976776689, 0.8586393893717444, 0.8586393893717444, 0.8586393893717444, 0.15459195289078775, 0.15459195289078775, 0.15459195289078775, 0.20554436687806432, 0.20554436687806432, 0.20554436687806432, 0.21108794147904264, 0.21108794147904264, 0.21108794147904264, 0.190178303334415, 0.190178303334415, 0.190178303334415, 0.22027382132415307, 0.22027382132415307, 0.22027382132415307, 0.18273893128809526, 0.18273893128809526, 0.18273893128809526, 0.10382067121100935, 0.10382067121100935, 0.10382067121100935, 0.0921077912947269, 0.0921077912947269, 0.0921077912947269, 0.10284928433906171, 0.10284928433906171, 0.10284928433906171]}, "mutation_prompt": null}
{"id": "3022a27f-72d2-4955-9665-96b684ce33d7", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 54, "fitness": 0.3692134502370908, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "cbfeadc6-599a-4c4e-8c82-d28a592ac92a", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "4bc074e7-ac03-4225-b7a1-4b77224a0163", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.67  # Modified DE scaling factor for better balance\n        self.CR = 0.88  # Increased DE crossover probability slightly for diversity\n        self.w_max, self.w_min = 0.75, 0.25  # Slightly adjusted inertia weight range\n        self.c1, self.c2 = 1.6, 1.6  # Fine-tuned PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.075)  # Slightly adjusted dynamic mutation\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by fine-tuning selection mechanism and utilizing adaptive mutation strategies for precise exploration.", "configspace": "", "generation": 55, "fitness": 0.36156820513279797, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8575016012099592, 0.8575016012099592, 0.8575016012099592, 0.8496358878681697, 0.8496358878681697, 0.8496358878681697, 0.8668334200930122, 0.8668334200930122, 0.8668334200930122, 0.7195967066232762, 0.7195967066232762, 0.7195967066232762, 0.7115686798085399, 0.7115686798085399, 0.7115686798085399, 0.5269359735231081, 0.5269359735231081, 0.5269359735231081, 0.15434447196694323, 0.15434447196694323, 0.15434447196694323, 0.1401166808824872, 0.1401166808824872, 0.1401166808824872, 0.15879915530544986, 0.15879915530544986, 0.15879915530544986, 0.10847810506593247, 0.10847810506593247, 0.10847810506593247, 0.11478597620351849, 0.11478597620351849, 0.11478597620351849, 0.10827883852201614, 0.10827883852201614, 0.10827883852201614, 0.9473956296176679, 0.9473956296176679, 0.9473956296176679, 0.9261786654324708, 0.9261786654324708, 0.9261786654324708, 0.9454197745050615, 0.9454197745050615, 0.9454197745050615, 0.6731069946575258, 0.6731069946575258, 0.6731069946575258, 0.7494367533312887, 0.7494367533312887, 0.7494367533312887, 0.7390669007377559, 0.7390669007377559, 0.7390669007377559, 0.39154123246119166, 0.39154123246119166, 0.39154123246119166, 0.897536452210313, 0.897536452210313, 0.897536452210313, 0.9209035223399686, 0.9209035223399686, 0.9209035223399686, 0.21203900441717272, 0.21203900441717272, 0.21203900441717272, 0.22860745321423892, 0.22860745321423892, 0.22860745321423892, 0.25851014472345646, 0.25851014472345646, 0.25851014472345646, 0.2916189439058757, 0.2916189439058757, 0.2916189439058757, 0.24591009263154506, 0.24591009263154506, 0.24591009263154506, 0.25991979861156556, 0.25991979861156556, 0.25991979861156556, 0.04298463726243407, 0.04298463726243407, 0.04298463726243407, 0.01259868970758904, 0.01259868970758904, 0.01259868970758904, 0.00413943704008346, 0.00413943704008346, 0.00413943704008346, 0.14988971983810717, 0.14988971983810717, 0.14988971983810717, 0.11134864224167518, 0.11134864224167518, 0.11134864224167518, 0.131596221782031, 0.131596221782031, 0.131596221782031, 0.04313305013314894, 0.04313305013314894, 0.04313305013314894, 0.08604363397490322, 0.08604363397490322, 0.08604363397490322, 0.1637287508924854, 0.1637287508924854, 0.1637287508924854, 0.14374578085129397, 0.14374578085129397, 0.14374578085129397, 0.16314206531773412, 0.16314206531773412, 0.16314206531773412, 0.16518233532118287, 0.16518233532118287, 0.16518233532118287, 0.5891460991956317, 0.5891460991956317, 0.5891460991956317, 0.5795510543137886, 0.5795510543137886, 0.5795510543137886, 0.5980965948670521, 0.5980965948670521, 0.5980965948670521, 0.09564009996507028, 0.09564009996507028, 0.09564009996507028, 0.15544229195054937, 0.15544229195054937, 0.15544229195054937, 0.10906001061677306, 0.10906001061677306, 0.10906001061677306, 0.1691476813061379, 0.1691476813061379, 0.1691476813061379, 0.2505257108977986, 0.2505257108977986, 0.2505257108977986, 0.2822344576250946, 0.2822344576250946, 0.2822344576250946, 0.39690978284087397, 0.39690978284087397, 0.39690978284087397, 0.40032415783471464, 0.40032415783471464, 0.40032415783471464, 0.27130064942113064, 0.27130064942113064, 0.27130064942113064, 0.2539975009524945, 0.2539975009524945, 0.2539975009524945, 0.20447641870218425, 0.20447641870218425, 0.20447641870218425, 0.22682964058243116, 0.22682964058243116, 0.22682964058243116, 0.20873704672336524, 0.20873704672336524, 0.20873704672336524, 0.20423692180758235, 0.20423692180758235, 0.20423692180758235, 0.2553336205521223, 0.2553336205521223, 0.2553336205521223, 0.20051006247561176, 0.20051006247561176, 0.20051006247561176, 0.18304828227141168, 0.18304828227141168, 0.18304828227141168, 0.1950586589999932, 0.1950586589999932, 0.1950586589999932, 0.9353658266553588, 0.9353658266553588, 0.9353658266553588, 0.8614422001469157, 0.8614422001469157, 0.8614422001469157, 0.21199915703579542, 0.21199915703579542, 0.21199915703579542, 0.6855392003423169, 0.6855392003423169, 0.6855392003423169, 0.7688715479579016, 0.7688715479579016, 0.7688715479579016, 0.643417695807953, 0.643417695807953, 0.643417695807953, 0.2014789193319575, 0.2014789193319575, 0.2014789193319575, 0.18868659527116127, 0.18868659527116127, 0.18868659527116127, 0.20062582964416031, 0.20062582964416031, 0.20062582964416031, 0.08088133080146798, 0.08088133080146798, 0.08088133080146798, 0.09381405861346792, 0.09381405861346792, 0.09381405861346792, 0.10958183981900749, 0.10958183981900749, 0.10958183981900749]}, "mutation_prompt": null}
{"id": "f07b305b-6988-4b23-8436-eb9c3e77ae2f", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.6  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.9  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.8, 0.2  # Adjusted PSO inertia weights\n        self.c1, self.c2 = 1.6, 1.4  # Fine-tuned PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by fine-tuning DE parameters and adding adaptive PSO adjustments for improved convergence.", "configspace": "", "generation": 56, "fitness": 0.3594256760790266, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8643720561331955, 0.8643720561331955, 0.8643720561331955, 0.8580326969164371, 0.8580326969164371, 0.8580326969164371, 0.8751210258311222, 0.8751210258311222, 0.8751210258311222, 0.7064264706648391, 0.7064264706648391, 0.7064264706648391, 0.7151608266619941, 0.7151608266619941, 0.7151608266619941, 0.6046674850968543, 0.6046674850968543, 0.6046674850968543, 0.18564944824818752, 0.18564944824818752, 0.18564944824818752, 0.18334563670842774, 0.18334563670842774, 0.18334563670842774, 0.15971471757625533, 0.15971471757625533, 0.15971471757625533, 0.09572128592626228, 0.09572128592626228, 0.09572128592626228, 0.10850785670202745, 0.10850785670202745, 0.10850785670202745, 0.09231808820866483, 0.09231808820866483, 0.09231808820866483, 0.9670372568164388, 0.9670372568164388, 0.9670372568164388, 0.9399583632498985, 0.9399583632498985, 0.9399583632498985, 0.936477767686642, 0.936477767686642, 0.936477767686642, 0.5961063841185013, 0.5961063841185013, 0.5961063841185013, 0.667150070564109, 0.667150070564109, 0.667150070564109, 0.7712412992582592, 0.7712412992582592, 0.7712412992582592, 0.8743654759627234, 0.8743654759627234, 0.8743654759627234, 0.9087642978063826, 0.9087642978063826, 0.9087642978063826, 0.22415407133529086, 0.22415407133529086, 0.22415407133529086, 0.23031428765619744, 0.23031428765619744, 0.23031428765619744, 0.2679674139202032, 0.2679674139202032, 0.2679674139202032, 0.23468631707627008, 0.23468631707627008, 0.23468631707627008, 0.23561070563826259, 0.23561070563826259, 0.23561070563826259, 0.24888594650508744, 0.24888594650508744, 0.24888594650508744, 0.27500282605076687, 0.27500282605076687, 0.27500282605076687, 0.12305257656877389, 0.12305257656877389, 0.12305257656877389, 0.0606382693005133, 0.0606382693005133, 0.0606382693005133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1582578678728772, 0.1582578678728772, 0.1582578678728772, 0.18331918036756534, 0.18331918036756534, 0.18331918036756534, 0.07667267335997863, 0.07667267335997863, 0.07667267335997863, 0.0427767389117909, 0.0427767389117909, 0.0427767389117909, 0.10371833600482805, 0.10371833600482805, 0.10371833600482805, 0.09961669990238786, 0.09961669990238786, 0.09961669990238786, 0.18134150575711638, 0.18134150575711638, 0.18134150575711638, 0.11736645860777595, 0.11736645860777595, 0.11736645860777595, 0.3143258144866422, 0.3143258144866422, 0.3143258144866422, 0.5927193560207602, 0.5927193560207602, 0.5927193560207602, 0.613818411215773, 0.613818411215773, 0.613818411215773, 0.6035897143194013, 0.6035897143194013, 0.6035897143194013, 0.12223919287600293, 0.12223919287600293, 0.12223919287600293, 0.1167878270858893, 0.1167878270858893, 0.1167878270858893, 0.08484465011218456, 0.08484465011218456, 0.08484465011218456, 0.2498499250024111, 0.2498499250024111, 0.2498499250024111, 0.2545206129941906, 0.2545206129941906, 0.2545206129941906, 0.19011058518769064, 0.19011058518769064, 0.19011058518769064, 0.328931289400756, 0.328931289400756, 0.328931289400756, 0.4925685194428593, 0.4925685194428593, 0.4925685194428593, 0.6907131769783921, 0.6907131769783921, 0.6907131769783921, 0.300702567660451, 0.300702567660451, 0.300702567660451, 0.26526079543230685, 0.26526079543230685, 0.26526079543230685, 0.22219028065154678, 0.22219028065154678, 0.22219028065154678, 0.26846642098705786, 0.26846642098705786, 0.26846642098705786, 0.24940162553870837, 0.24940162553870837, 0.24940162553870837, 0.26088882042534856, 0.26088882042534856, 0.26088882042534856, 0.1908511277814411, 0.1908511277814411, 0.1908511277814411, 0.25473889494322743, 0.25473889494322743, 0.25473889494322743, 0.20550285883422426, 0.20550285883422426, 0.20550285883422426, 0.8521104554668341, 0.8521104554668341, 0.8521104554668341, 0.19626442692926194, 0.19626442692926194, 0.19626442692926194, 0.8447864768996476, 0.8447864768996476, 0.8447864768996476, 0.8082988254531959, 0.8082988254531959, 0.8082988254531959, 0.21059983992712683, 0.21059983992712683, 0.21059983992712683, 0.2116386512095928, 0.2116386512095928, 0.2116386512095928, 0.20386755914182508, 0.20386755914182508, 0.20386755914182508, 0.18557823046384636, 0.18557823046384636, 0.18557823046384636, 0.2085508274376109, 0.2085508274376109, 0.2085508274376109, 0.1036677941892622, 0.1036677941892622, 0.1036677941892622, 0.10334561626643013, 0.10334561626643013, 0.10334561626643013, 0.10329712195510565, 0.10329712195510565, 0.10329712195510565]}, "mutation_prompt": null}
{"id": "1f0f671b-2010-4b57-8d79-24a035afdc1c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "889543e6-2637-450e-98eb-268cc962cd2b", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  \n        self.F = 0.60  # Adjusted DE scaling factor for better control\n        self.CR = 0.90  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  \n        self.c1, self.c2 = 1.6, 1.4  # Slightly adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  \n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  \n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Adjusted DE mutation and crossover strategies alongside refined PSO coefficients for optimal balance between exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.34782241954372006, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8837183308549086, 0.8837183308549086, 0.8837183308549086, 0.8835613886846001, 0.8835613886846001, 0.8835613886846001, 0.8785558343893909, 0.8785558343893909, 0.8785558343893909, 0.5980016586763883, 0.5980016586763883, 0.5980016586763883, 0.7440414261162263, 0.7440414261162263, 0.7440414261162263, 0.5031460552464182, 0.5031460552464182, 0.5031460552464182, 0.12920890590731182, 0.12920890590731182, 0.12920890590731182, 0.11780103231175532, 0.11780103231175532, 0.11780103231175532, 0.14554569627584535, 0.14554569627584535, 0.14554569627584535, 0.10833923486379937, 0.10833923486379937, 0.10833923486379937, 0.11047500797777354, 0.11047500797777354, 0.11047500797777354, 0.07471244338201977, 0.07471244338201977, 0.07471244338201977, 0.9638402310625306, 0.9638402310625306, 0.9638402310625306, 0.9307267115238643, 0.9307267115238643, 0.9307267115238643, 0.9414211344906463, 0.9414211344906463, 0.9414211344906463, 0.6796842723582365, 0.6796842723582365, 0.6796842723582365, 0.7170976933438927, 0.7170976933438927, 0.7170976933438927, 0.7549425745993537, 0.7549425745993537, 0.7549425745993537, 0.2425089278198671, 0.2425089278198671, 0.2425089278198671, 0.27822400376312717, 0.27822400376312717, 0.27822400376312717, 0.1758373573018216, 0.1758373573018216, 0.1758373573018216, 0.2835787994578187, 0.2835787994578187, 0.2835787994578187, 0.30437540782558103, 0.30437540782558103, 0.30437540782558103, 0.26208143660202876, 0.26208143660202876, 0.26208143660202876, 0.13161773244537744, 0.13161773244537744, 0.13161773244537744, 0.24763920527823946, 0.24763920527823946, 0.24763920527823946, 0.2834089015315211, 0.2834089015315211, 0.2834089015315211, 0.1341349097089768, 0.1341349097089768, 0.1341349097089768, 0.01592370962472378, 0.01592370962472378, 0.01592370962472378, 0.006622449478995596, 0.006622449478995596, 0.006622449478995596, 0.11768689180222358, 0.11768689180222358, 0.11768689180222358, 0.22821725790343395, 0.22821725790343395, 0.22821725790343395, 0.0895649386324121, 0.0895649386324121, 0.0895649386324121, 0.035987031458249996, 0.035987031458249996, 0.035987031458249996, 0.09289810924786923, 0.09289810924786923, 0.09289810924786923, 0.26609611439427716, 0.26609611439427716, 0.26609611439427716, 0.14316263481972513, 0.14316263481972513, 0.14316263481972513, 0.17813557619075404, 0.17813557619075404, 0.17813557619075404, 0.23232194229773862, 0.23232194229773862, 0.23232194229773862, 0.5323738782414735, 0.5323738782414735, 0.5323738782414735, 0.6141800295340053, 0.6141800295340053, 0.6141800295340053, 0.6267419097791237, 0.6267419097791237, 0.6267419097791237, 0.14469155202444417, 0.14469155202444417, 0.14469155202444417, 0.1444392621410392, 0.1444392621410392, 0.1444392621410392, 0.10910126924073671, 0.10910126924073671, 0.10910126924073671, 0.5815010078809897, 0.5815010078809897, 0.5815010078809897, 0.2101912226659689, 0.2101912226659689, 0.2101912226659689, 0.17953791220870752, 0.17953791220870752, 0.17953791220870752, 0.5819456085961601, 0.5819456085961601, 0.5819456085961601, 0.25924562508006643, 0.25924562508006643, 0.25924562508006643, 0.21430895772226433, 0.21430895772226433, 0.21430895772226433, 0.28060830774239565, 0.28060830774239565, 0.28060830774239565, 0.297289113267288, 0.297289113267288, 0.297289113267288, 0.21736061009255314, 0.21736061009255314, 0.21736061009255314, 0.2580470137274532, 0.2580470137274532, 0.2580470137274532, 0.20099582941798166, 0.20099582941798166, 0.20099582941798166, 0.2563762611670538, 0.2563762611670538, 0.2563762611670538, 0.1944317423665176, 0.1944317423665176, 0.1944317423665176, 0.1997169329146814, 0.1997169329146814, 0.1997169329146814, 0.19982938255383897, 0.19982938255383897, 0.19982938255383897, 0.9362280950090123, 0.9362280950090123, 0.9362280950090123, 0.9354270164586123, 0.9354270164586123, 0.9354270164586123, 0.898574558478515, 0.898574558478515, 0.898574558478515, 0.7914011635436068, 0.7914011635436068, 0.7914011635436068, 0.20917480877107242, 0.20917480877107242, 0.20917480877107242, 0.20986759448398684, 0.20986759448398684, 0.20986759448398684, 0.18560808628340875, 0.18560808628340875, 0.18560808628340875, 0.1884942716613227, 0.1884942716613227, 0.1884942716613227, 0.17997539774524562, 0.17997539774524562, 0.17997539774524562, 0.08838656885684382, 0.08838656885684382, 0.08838656885684382, 0.09838926244246848, 0.09838926244246848, 0.09838926244246848, 0.10393098539928325, 0.10393098539928325, 0.10393098539928325]}, "mutation_prompt": null}
{"id": "a0d39429-d7c9-4bb5-bb21-5436027a3d39", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.65\n        self.CR_base = 0.85  # Base DE crossover probability, now dynamically adjusted\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)\n                adaptive_mutation = 1 - (evaluations / self.budget)\n                mutant += sigma * adaptive_mutation * (g_best - mutant)\n                \n                dynamic_CR = self.CR_base * (1 - (evaluations / self.budget))\n                cross_points = np.random.rand(self.dim) < dynamic_CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Fine-tuned HybridDEPSO with enhanced convergence through dynamic crossover probability and adaptive mutation scaling.", "configspace": "", "generation": 59, "fitness": 0.3577717154520275, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8882889360988029, 0.8882889360988029, 0.8882889360988029, 0.8907764995446543, 0.8907764995446543, 0.8907764995446543, 0.8778585354217279, 0.8778585354217279, 0.8778585354217279, 0.7606441139975647, 0.7606441139975647, 0.7606441139975647, 0.7416362139820261, 0.7416362139820261, 0.7416362139820261, 0.7650808327466483, 0.7650808327466483, 0.7650808327466483, 0.1440029988654553, 0.1440029988654553, 0.1440029988654553, 0.1146323035621093, 0.1146323035621093, 0.1146323035621093, 0.18888922398951213, 0.18888922398951213, 0.18888922398951213, 0.09399722377849651, 0.09399722377849651, 0.09399722377849651, 0.14133584345766503, 0.14133584345766503, 0.14133584345766503, 0.10434202082999999, 0.10434202082999999, 0.10434202082999999, 0.946196855048518, 0.946196855048518, 0.946196855048518, 0.9283546483461361, 0.9283546483461361, 0.9283546483461361, 0.9468761960331258, 0.9468761960331258, 0.9468761960331258, 0.7692750451935227, 0.7692750451935227, 0.7692750451935227, 0.7317084100999899, 0.7317084100999899, 0.7317084100999899, 0.745665370578574, 0.745665370578574, 0.745665370578574, 0.9020228331134115, 0.9020228331134115, 0.9020228331134115, 0.27706055461041346, 0.27706055461041346, 0.27706055461041346, 0.35632448447465315, 0.35632448447465315, 0.35632448447465315, 0.13156930696649904, 0.13156930696649904, 0.13156930696649904, 0.19774680238916575, 0.19774680238916575, 0.19774680238916575, 0.3306282890483936, 0.3306282890483936, 0.3306282890483936, 0.2649778530376866, 0.2649778530376866, 0.2649778530376866, 0.31779807235394664, 0.31779807235394664, 0.31779807235394664, 0.24189808569455573, 0.24189808569455573, 0.24189808569455573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016011955175739834, 0.016011955175739834, 0.016011955175739834, 0.006442085580843027, 0.006442085580843027, 0.006442085580843027, 0.14111999138395426, 0.14111999138395426, 0.14111999138395426, 0.14749351858269166, 0.14749351858269166, 0.14749351858269166, 0.11567615699248324, 0.11567615699248324, 0.11567615699248324, 0.35620447856418636, 0.35620447856418636, 0.35620447856418636, 0.17748290400348288, 0.17748290400348288, 0.17748290400348288, 0.11288986947122137, 0.11288986947122137, 0.11288986947122137, 0.15839384617083874, 0.15839384617083874, 0.15839384617083874, 0.05890083464732543, 0.05890083464732543, 0.05890083464732543, 0.21517476578517358, 0.21517476578517358, 0.21517476578517358, 0.5883787593568282, 0.5883787593568282, 0.5883787593568282, 0.6621684009102702, 0.6621684009102702, 0.6621684009102702, 0.6025424160147448, 0.6025424160147448, 0.6025424160147448, 0.15647585529518315, 0.15647585529518315, 0.15647585529518315, 0.13204499037867956, 0.13204499037867956, 0.13204499037867956, 0.15896939103443097, 0.15896939103443097, 0.15896939103443097, 0.1817968925863822, 0.1817968925863822, 0.1817968925863822, 0.17026498741996876, 0.17026498741996876, 0.17026498741996876, 0.30413431638283694, 0.30413431638283694, 0.30413431638283694, 0.21389376139841865, 0.21389376139841865, 0.21389376139841865, 0.44546889994808936, 0.44546889994808936, 0.44546889994808936, 0.5781435643098599, 0.5781435643098599, 0.5781435643098599, 0.3058475035117655, 0.3058475035117655, 0.3058475035117655, 0.2652382546245564, 0.2652382546245564, 0.2652382546245564, 0.38245421584995043, 0.38245421584995043, 0.38245421584995043, 0.2195330385840467, 0.2195330385840467, 0.2195330385840467, 0.2783503112736021, 0.2783503112736021, 0.2783503112736021, 0.250222832715289, 0.250222832715289, 0.250222832715289, 0.19088762651398405, 0.19088762651398405, 0.19088762651398405, 0.18869221321194896, 0.18869221321194896, 0.18869221321194896, 0.17198688994618405, 0.17198688994618405, 0.17198688994618405, 0.8865968649446379, 0.8865968649446379, 0.8865968649446379, 0.8534173713972814, 0.8534173713972814, 0.8534173713972814, 0.21175525671912354, 0.21175525671912354, 0.21175525671912354, 0.827940827700566, 0.827940827700566, 0.827940827700566, 0.16744501284738833, 0.16744501284738833, 0.16744501284738833, 0.21320151534252685, 0.21320151534252685, 0.21320151534252685, 0.1763887054246821, 0.1763887054246821, 0.1763887054246821, 0.18856598590955442, 0.18856598590955442, 0.18856598590955442, 0.189564484192992, 0.189564484192992, 0.189564484192992, 0.10697217307303142, 0.10697217307303142, 0.10697217307303142, 0.10419558252605932, 0.10419558252605932, 0.10419558252605932, 0.0805466515799238, 0.0805466515799238, 0.0805466515799238]}, "mutation_prompt": null}
{"id": "121eb438-9ebd-4c21-b023-4f9aeb83bbcb", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]  # Slightly tightened velocity bounds\n        self.F = 0.68  # Adjusted DE scaling factor\n        self.CR = 0.82  # Slightly reduced DE crossover probability\n        self.w_max, self.w_min = 0.8, 0.2  # Modified PSO inertia weight\n        self.c1, self.c2 = 1.4, 1.6  # Slightly unbalanced PSO coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with adaptive parameter tuning and optimized velocity control mechanisms for 2% improved efficiency.", "configspace": "", "generation": 60, "fitness": 0.33080433658830594, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8652354800672171, 0.8652354800672171, 0.8652354800672171, 0.8645687795689815, 0.8645687795689815, 0.8645687795689815, 0.8636649556088785, 0.8636649556088785, 0.8636649556088785, 0.7139127536570884, 0.7139127536570884, 0.7139127536570884, 0.7111172338771421, 0.7111172338771421, 0.7111172338771421, 0.538950193209375, 0.538950193209375, 0.538950193209375, 0.11418866755007528, 0.11418866755007528, 0.11418866755007528, 0.12199370840929602, 0.12199370840929602, 0.12199370840929602, 0.1806935522519445, 0.1806935522519445, 0.1806935522519445, 0.10051618094772985, 0.10051618094772985, 0.10051618094772985, 0.0812745789095266, 0.0812745789095266, 0.0812745789095266, 0.12263747745926268, 0.12263747745926268, 0.12263747745926268, 0.9588962108170523, 0.9588962108170523, 0.9588962108170523, 0.9353579556769478, 0.9353579556769478, 0.9353579556769478, 0.9566130203298924, 0.9566130203298924, 0.9566130203298924, 0.7226549056335735, 0.7226549056335735, 0.7226549056335735, 0.7271996382182675, 0.7271996382182675, 0.7271996382182675, 0.7129372787282926, 0.7129372787282926, 0.7129372787282926, 0.2271565603626503, 0.2271565603626503, 0.2271565603626503, 0.21288347668732133, 0.21288347668732133, 0.21288347668732133, 0.23176239280532984, 0.23176239280532984, 0.23176239280532984, 0.23279178523178867, 0.23279178523178867, 0.23279178523178867, 0.13163010988053303, 0.13163010988053303, 0.13163010988053303, 0.23251316467370076, 0.23251316467370076, 0.23251316467370076, 0.20799771188991956, 0.20799771188991956, 0.20799771188991956, 0.25711264265778977, 0.25711264265778977, 0.25711264265778977, 0.2563306306257631, 0.2563306306257631, 0.2563306306257631, 0.1435404417995484, 0.1435404417995484, 0.1435404417995484, 0.01127163149336774, 0.01127163149336774, 0.01127163149336774, 0.027214272267455097, 0.027214272267455097, 0.027214272267455097, 0.16556846816490156, 0.16556846816490156, 0.16556846816490156, 0.16376005404835536, 0.16376005404835536, 0.16376005404835536, 0.11504895578916507, 0.11504895578916507, 0.11504895578916507, 0.14218085645855405, 0.14218085645855405, 0.14218085645855405, 0.11164657995296379, 0.11164657995296379, 0.11164657995296379, 0.15288836249537052, 0.15288836249537052, 0.15288836249537052, 0.19429194208081024, 0.19429194208081024, 0.19429194208081024, 0.19673211954698933, 0.19673211954698933, 0.19673211954698933, 0.08620644710871583, 0.08620644710871583, 0.08620644710871583, 0.5512277964850735, 0.5512277964850735, 0.5512277964850735, 0.5937138707119274, 0.5937138707119274, 0.5937138707119274, 0.5925919393704399, 0.5925919393704399, 0.5925919393704399, 0.12093143193949962, 0.12093143193949962, 0.12093143193949962, 0.15492806789493274, 0.15492806789493274, 0.15492806789493274, 0.18235843322637058, 0.18235843322637058, 0.18235843322637058, 0.5911019223880828, 0.5911019223880828, 0.5911019223880828, 0.22154356245764428, 0.22154356245764428, 0.22154356245764428, 0.17180897585150467, 0.17180897585150467, 0.17180897585150467, 0.21715275067218842, 0.21715275067218842, 0.21715275067218842, 0.4586460095186903, 0.4586460095186903, 0.4586460095186903, 0.43690772403258327, 0.43690772403258327, 0.43690772403258327, 0.3187923986978217, 0.3187923986978217, 0.3187923986978217, 0.2999105935721884, 0.2999105935721884, 0.2999105935721884, 0.41603376427019567, 0.41603376427019567, 0.41603376427019567, 0.22090852521321647, 0.22090852521321647, 0.22090852521321647, 0.2791752816291786, 0.2791752816291786, 0.2791752816291786, 0.302046671825546, 0.302046671825546, 0.302046671825546, 0.18367909820045025, 0.18367909820045025, 0.18367909820045025, 0.19753175557455993, 0.19753175557455993, 0.19753175557455993, 0.18737480129491013, 0.18737480129491013, 0.18737480129491013, 0.9011229276506951, 0.9011229276506951, 0.9011229276506951, 0.1690373413127465, 0.1690373413127465, 0.1690373413127465, 0.1649917815435158, 0.1649917815435158, 0.1649917815435158, 0.5350818345092442, 0.5350818345092442, 0.5350818345092442, 0.5225799570594905, 0.5225799570594905, 0.5225799570594905, 0.21239957289344624, 0.21239957289344624, 0.21239957289344624, 0.19398343202493384, 0.19398343202493384, 0.19398343202493384, 0.19116998920730122, 0.19116998920730122, 0.19116998920730122, 0.18811948084215535, 0.18811948084215535, 0.18811948084215535, 0.08130065759604355, 0.08130065759604355, 0.08130065759604355, 0.07514399800237537, 0.07514399800237537, 0.07514399800237537, 0.0916747099475389, 0.0916747099475389, 0.0916747099475389]}, "mutation_prompt": null}
{"id": "53247c3d-cb47-465a-9eea-1d2872f78826", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.68  # Slightly increased DE scaling factor for better exploration\n        self.CR = 0.82  # Slightly decreased DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.6, 1.4  # Adjusted PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F_dynamic = self.F * (1 - evaluations / self.budget)  # Dynamic scaling factor\n                mutant = np.clip(a + F_dynamic * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.085)  # Slightly increased dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhance HybridDEPSO by introducing adaptive mutation and velocity scaling for improved performance.", "configspace": "", "generation": 61, "fitness": 0.3461128667284249, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8924506319454328, 0.8924506319454328, 0.8924506319454328, 0.8875479880490262, 0.8875479880490262, 0.8875479880490262, 0.8855546181317834, 0.8855546181317834, 0.8855546181317834, 0.7596395393122078, 0.7596395393122078, 0.7596395393122078, 0.7711200188605296, 0.7711200188605296, 0.7711200188605296, 0.7702498572068049, 0.7702498572068049, 0.7702498572068049, 0.1422542959928189, 0.1422542959928189, 0.1422542959928189, 0.1153812508228591, 0.1153812508228591, 0.1153812508228591, 0.12258283990311625, 0.12258283990311625, 0.12258283990311625, 0.11460113228237445, 0.11460113228237445, 0.11460113228237445, 0.09615653320900219, 0.09615653320900219, 0.09615653320900219, 0.10905916619915224, 0.10905916619915224, 0.10905916619915224, 0.9640541353758336, 0.9640541353758336, 0.9640541353758336, 0.9323759830301248, 0.9323759830301248, 0.9323759830301248, 0.9606113554749152, 0.9606113554749152, 0.9606113554749152, 0.7777041038959394, 0.7777041038959394, 0.7777041038959394, 0.7737388517982866, 0.7737388517982866, 0.7737388517982866, 0.7582985236814079, 0.7582985236814079, 0.7582985236814079, 0.2413174747134622, 0.2413174747134622, 0.2413174747134622, 0.2768026029065017, 0.2768026029065017, 0.2768026029065017, 0.9074393494452189, 0.9074393494452189, 0.9074393494452189, 0.22943614805774748, 0.22943614805774748, 0.22943614805774748, 0.13174551428176418, 0.13174551428176418, 0.13174551428176418, 0.22261652917164954, 0.22261652917164954, 0.22261652917164954, 0.21551805392155188, 0.21551805392155188, 0.21551805392155188, 0.13158078120151329, 0.13158078120151329, 0.13158078120151329, 0.2616242731275098, 0.2616242731275098, 0.2616242731275098, 0.02507788972835079, 0.02507788972835079, 0.02507788972835079, 0.13463756668134352, 0.13463756668134352, 0.13463756668134352, 0.06740088826236046, 0.06740088826236046, 0.06740088826236046, 0.08503613859054715, 0.08503613859054715, 0.08503613859054715, 0.30765936564950047, 0.30765936564950047, 0.30765936564950047, 0.17759109950935204, 0.17759109950935204, 0.17759109950935204, 0.150855042400311, 0.150855042400311, 0.150855042400311, 0.2458372726660687, 0.2458372726660687, 0.2458372726660687, 0.09662973704935318, 0.09662973704935318, 0.09662973704935318, 0.10806864225343815, 0.10806864225343815, 0.10806864225343815, 0.05799597011958979, 0.05799597011958979, 0.05799597011958979, 0.0902596549842346, 0.0902596549842346, 0.0902596549842346, 0.5598013757088998, 0.5598013757088998, 0.5598013757088998, 0.5666747166565296, 0.5666747166565296, 0.5666747166565296, 0.5561508706799979, 0.5561508706799979, 0.5561508706799979, 0.14287335312165272, 0.14287335312165272, 0.14287335312165272, 0.14265612648010761, 0.14265612648010761, 0.14265612648010761, 0.12302278382611354, 0.12302278382611354, 0.12302278382611354, 0.15248608217563342, 0.15248608217563342, 0.15248608217563342, 0.24961432283102436, 0.24961432283102436, 0.24961432283102436, 0.19410738040886233, 0.19410738040886233, 0.19410738040886233, 0.404072387841788, 0.404072387841788, 0.404072387841788, 0.42262098467012343, 0.42262098467012343, 0.42262098467012343, 0.4818470821966342, 0.4818470821966342, 0.4818470821966342, 0.2685828836933568, 0.2685828836933568, 0.2685828836933568, 0.2385771953071799, 0.2385771953071799, 0.2385771953071799, 0.23809255817265285, 0.23809255817265285, 0.23809255817265285, 0.20983074099026444, 0.20983074099026444, 0.20983074099026444, 0.2247270392783578, 0.2247270392783578, 0.2247270392783578, 0.234286639807053, 0.234286639807053, 0.234286639807053, 0.1832013486193439, 0.1832013486193439, 0.1832013486193439, 0.2007118277286486, 0.2007118277286486, 0.2007118277286486, 0.16801905524942018, 0.16801905524942018, 0.16801905524942018, 0.8627816887652339, 0.8627816887652339, 0.8627816887652339, 0.8621769119834355, 0.8621769119834355, 0.8621769119834355, 0.20491123157171642, 0.20491123157171642, 0.20491123157171642, 0.7913236502249602, 0.7913236502249602, 0.7913236502249602, 0.16703697869635648, 0.16703697869635648, 0.16703697869635648, 0.211762527241674, 0.211762527241674, 0.211762527241674, 0.18694925101292803, 0.18694925101292803, 0.18694925101292803, 0.188740195976011, 0.188740195976011, 0.188740195976011, 0.18480894603613873, 0.18480894603613873, 0.18480894603613873, 0.10547772169996894, 0.10547772169996894, 0.10547772169996894, 0.10028299761636794, 0.10028299761636794, 0.10028299761636794, 0.09340672828517149, 0.09340672828517149, 0.09340672828517149]}, "mutation_prompt": null}
{"id": "363417c6-279f-4cce-ae58-2d6e064ee4f5", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.68  # Slightly increased DE scaling factor for better exploration\n        self.CR = 0.9  # Further increased DE crossover probability for more diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.4, 1.6  # Slightly unbalanced PSO cognitive and social coefficients for dynamic adaptation\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Optimized HybridDEPSO by fine-tuning DE crossover strategy and PSO velocity control for enhanced convergence.", "configspace": "", "generation": 62, "fitness": 0.3577975850519287, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8815455503729892, 0.8815455503729892, 0.8815455503729892, 0.8770512397712918, 0.8770512397712918, 0.8770512397712918, 0.8892061780941906, 0.8892061780941906, 0.8892061780941906, 0.5631784158026292, 0.5631784158026292, 0.5631784158026292, 0.7588104894786765, 0.7588104894786765, 0.7588104894786765, 0.7035887464798727, 0.7035887464798727, 0.7035887464798727, 0.1842771340341871, 0.1842771340341871, 0.1842771340341871, 0.7144553345729854, 0.7144553345729854, 0.7144553345729854, 0.18318795657614972, 0.18318795657614972, 0.18318795657614972, 0.11310208322287085, 0.11310208322287085, 0.11310208322287085, 0.1306558589830562, 0.1306558589830562, 0.1306558589830562, 0.07014565604727163, 0.07014565604727163, 0.07014565604727163, 0.9562007882480724, 0.9562007882480724, 0.9562007882480724, 0.9295625883318729, 0.9295625883318729, 0.9295625883318729, 0.9497385291480096, 0.9497385291480096, 0.9497385291480096, 0.6768273428173343, 0.6768273428173343, 0.6768273428173343, 0.6753200156540262, 0.6753200156540262, 0.6753200156540262, 0.7693755523622728, 0.7693755523622728, 0.7693755523622728, 0.8288278809108406, 0.8288278809108406, 0.8288278809108406, 0.2761224998630485, 0.2761224998630485, 0.2761224998630485, 0.9047570646706548, 0.9047570646706548, 0.9047570646706548, 0.2576352276175662, 0.2576352276175662, 0.2576352276175662, 0.25790977566502205, 0.25790977566502205, 0.25790977566502205, 0.22784426312719197, 0.22784426312719197, 0.22784426312719197, 0.12181986150257584, 0.12181986150257584, 0.12181986150257584, 0.35937442598277425, 0.35937442598277425, 0.35937442598277425, 0.20550690733956067, 0.20550690733956067, 0.20550690733956067, 0.02397903330204465, 0.02397903330204465, 0.02397903330204465, 0.01154433608998029, 0.01154433608998029, 0.01154433608998029, 0.10752431543115204, 0.10752431543115204, 0.10752431543115204, 0.14158341812125164, 0.14158341812125164, 0.14158341812125164, 0.16196456090374556, 0.16196456090374556, 0.16196456090374556, 0.14485392901769867, 0.14485392901769867, 0.14485392901769867, 0.17281703345641986, 0.17281703345641986, 0.17281703345641986, 0.14875577954156416, 0.14875577954156416, 0.14875577954156416, 0.09859545287787463, 0.09859545287787463, 0.09859545287787463, 0.13664114221043766, 0.13664114221043766, 0.13664114221043766, 0.29333818320957283, 0.29333818320957283, 0.29333818320957283, 0.1317297217501513, 0.1317297217501513, 0.1317297217501513, 0.6086642456503608, 0.6086642456503608, 0.6086642456503608, 0.581336267730154, 0.581336267730154, 0.581336267730154, 0.6264477933151049, 0.6264477933151049, 0.6264477933151049, 0.09979265649865343, 0.09979265649865343, 0.09979265649865343, 0.18467042089771135, 0.18467042089771135, 0.18467042089771135, 0.11555944975320143, 0.11555944975320143, 0.11555944975320143, 0.5840756018466262, 0.5840756018466262, 0.5840756018466262, 0.20335026723159544, 0.20335026723159544, 0.20335026723159544, 0.25516191765259544, 0.25516191765259544, 0.25516191765259544, 0.18830070516640052, 0.18830070516640052, 0.18830070516640052, 0.3817479419250557, 0.3817479419250557, 0.3817479419250557, 0.5378485982744179, 0.5378485982744179, 0.5378485982744179, 0.327438492443333, 0.327438492443333, 0.327438492443333, 0.2455039899305861, 0.2455039899305861, 0.2455039899305861, 0.25257538439837934, 0.25257538439837934, 0.25257538439837934, 0.2727471721040613, 0.2727471721040613, 0.2727471721040613, 0.24522517607065908, 0.24522517607065908, 0.24522517607065908, 0.21183151343920537, 0.21183151343920537, 0.21183151343920537, 0.19996460639940572, 0.19996460639940572, 0.19996460639940572, 0.19714157148691835, 0.19714157148691835, 0.19714157148691835, 0.19840404250434918, 0.19840404250434918, 0.19840404250434918, 0.8926283172955978, 0.8926283172955978, 0.8926283172955978, 0.17640255673635563, 0.17640255673635563, 0.17640255673635563, 0.16214541246472747, 0.16214541246472747, 0.16214541246472747, 0.6640325747078963, 0.6640325747078963, 0.6640325747078963, 0.21033289718250192, 0.21033289718250192, 0.21033289718250192, 0.2124476136781206, 0.2124476136781206, 0.2124476136781206, 0.1826745254367801, 0.1826745254367801, 0.1826745254367801, 0.20441733030148035, 0.20441733030148035, 0.20441733030148035, 0.20895045816299318, 0.20895045816299318, 0.20895045816299318, 0.11408707879650282, 0.11408707879650282, 0.11408707879650282, 0.09714933271117132, 0.09714933271117132, 0.09714933271117132, 0.07901593895707826, 0.07901593895707826, 0.07901593895707826]}, "mutation_prompt": null}
{"id": "a0fdfb98-8701-4bf4-9682-d36e2a192c70", "solution": "import numpy as np\n\nclass EnhancedHybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]  # Tighter velocity bounds for improved stability\n        self.F_base = 0.65\n        self.CR_base = 0.85\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.4, 1.6  # Slightly adjusted cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            F = self.F_base * (1 - evaluations / self.budget)  # Adaptive scaling factor\n            CR = self.CR_base + 0.1 * np.sin(evaluations / self.budget * np.pi)  # Periodic crossover adjustment\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "EnhancedHybridDEPSO", "description": "Enhanced HybridDEPSO by optimizing parameter selection and introducing adaptive strategy for mutation and crossover.", "configspace": "", "generation": 63, "fitness": 0.356888307215858, "feedback": "The algorithm EnhancedHybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.879846504796624, 0.879846504796624, 0.879846504796624, 0.8892066010509296, 0.8892066010509296, 0.8892066010509296, 0.8799867532905182, 0.8799867532905182, 0.8799867532905182, 0.7699628839322091, 0.7699628839322091, 0.7699628839322091, 0.7584780000379668, 0.7584780000379668, 0.7584780000379668, 0.7856932618343834, 0.7856932618343834, 0.7856932618343834, 0.09655882229899582, 0.09655882229899582, 0.09655882229899582, 0.18133371099818807, 0.18133371099818807, 0.18133371099818807, 0.14381662547699947, 0.14381662547699947, 0.14381662547699947, 0.11379150865473364, 0.11379150865473364, 0.11379150865473364, 0.11603335637847156, 0.11603335637847156, 0.11603335637847156, 0.11383360261033082, 0.11383360261033082, 0.11383360261033082, 0.936998110430158, 0.936998110430158, 0.936998110430158, 0.9503182155107419, 0.9503182155107419, 0.9503182155107419, 0.9261869102620687, 0.9261869102620687, 0.9261869102620687, 0.6031464291961656, 0.6031464291961656, 0.6031464291961656, 0.6673066948881503, 0.6673066948881503, 0.6673066948881503, 0.7772881626195767, 0.7772881626195767, 0.7772881626195767, 0.9014379944084607, 0.9014379944084607, 0.9014379944084607, 0.27790260087671614, 0.27790260087671614, 0.27790260087671614, 0.23204636122168398, 0.23204636122168398, 0.23204636122168398, 0.21698598030539606, 0.21698598030539606, 0.21698598030539606, 0.23127986033313697, 0.23127986033313697, 0.23127986033313697, 0.30192713314833264, 0.30192713314833264, 0.30192713314833264, 0.25378563879762783, 0.25378563879762783, 0.25378563879762783, 0.2605131125228354, 0.2605131125228354, 0.2605131125228354, 0.23539000421950318, 0.23539000421950318, 0.23539000421950318, 0.009848154436446155, 0.009848154436446155, 0.009848154436446155, 0.13322910449374248, 0.13322910449374248, 0.13322910449374248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15310097671561562, 0.15310097671561562, 0.15310097671561562, 0.13628791548343155, 0.13628791548343155, 0.13628791548343155, 0.1572358066071018, 0.1572358066071018, 0.1572358066071018, 0.13261306389674865, 0.13261306389674865, 0.13261306389674865, 0.09574119648026336, 0.09574119648026336, 0.09574119648026336, 0.17095970421855833, 0.17095970421855833, 0.17095970421855833, 0.11060733874710404, 0.11060733874710404, 0.11060733874710404, 0.24011463919762155, 0.24011463919762155, 0.24011463919762155, 0.09855903961631196, 0.09855903961631196, 0.09855903961631196, 0.5366301896242065, 0.5366301896242065, 0.5366301896242065, 0.6277392723933204, 0.6277392723933204, 0.6277392723933204, 0.5752805633727032, 0.5752805633727032, 0.5752805633727032, 0.1011052792621796, 0.1011052792621796, 0.1011052792621796, 0.13303773786147555, 0.13303773786147555, 0.13303773786147555, 0.16025139551772905, 0.16025139551772905, 0.16025139551772905, 0.2774065027850896, 0.2774065027850896, 0.2774065027850896, 0.27186160293271444, 0.27186160293271444, 0.27186160293271444, 0.2499210197769529, 0.2499210197769529, 0.2499210197769529, 0.3612619956972106, 0.3612619956972106, 0.3612619956972106, 0.43126763367029286, 0.43126763367029286, 0.43126763367029286, 0.4914254124480767, 0.4914254124480767, 0.4914254124480767, 0.2498162321511047, 0.2498162321511047, 0.2498162321511047, 0.19268052034420935, 0.19268052034420935, 0.19268052034420935, 0.16469913269338865, 0.16469913269338865, 0.16469913269338865, 0.21713775334757113, 0.21713775334757113, 0.21713775334757113, 0.26516630927012597, 0.26516630927012597, 0.26516630927012597, 0.22943936240664053, 0.22943936240664053, 0.22943936240664053, 0.18166042230855395, 0.18166042230855395, 0.18166042230855395, 0.22377517037482553, 0.22377517037482553, 0.22377517037482553, 0.178698846185394, 0.178698846185394, 0.178698846185394, 0.8907452095063739, 0.8907452095063739, 0.8907452095063739, 0.19818490807493383, 0.19818490807493383, 0.19818490807493383, 0.8814046812948999, 0.8814046812948999, 0.8814046812948999, 0.8918066895619525, 0.8918066895619525, 0.8918066895619525, 0.6439027428658426, 0.6439027428658426, 0.6439027428658426, 0.2080997359337664, 0.2080997359337664, 0.2080997359337664, 0.1780183132128097, 0.1780183132128097, 0.1780183132128097, 0.2045629750501049, 0.2045629750501049, 0.2045629750501049, 0.23649973886537234, 0.23649973886537234, 0.23649973886537234, 0.11162658570828987, 0.11162658570828987, 0.11162658570828987, 0.09939600700182327, 0.09939600700182327, 0.09939600700182327, 0.09199639804799042, 0.09199639804799042, 0.09199639804799042]}, "mutation_prompt": null}
{"id": "a8c872e1-80eb-4e79-ae2f-2b6acb97ea1c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "75bd1824-bad6-4d97-94fe-4f75b511c7e4", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.7  # Adjusted DE scaling for improved convergence\n        self.CR = 0.9  # Enhanced crossover probability for greater diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.09)  # Adjusted mutation scale for exploration\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by refining parameter tuning and integrating adaptive mutation scaling for improved convergence.", "configspace": "", "generation": 65, "fitness": 0.3463594797886568, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8835235050700239, 0.8835235050700239, 0.8835235050700239, 0.8829978607509861, 0.8829978607509861, 0.8829978607509861, 0.8719923716272153, 0.8719923716272153, 0.8719923716272153, 0.635638664172395, 0.635638664172395, 0.635638664172395, 0.7457950806131485, 0.7457950806131485, 0.7457950806131485, 0.7499133763009691, 0.7499133763009691, 0.7499133763009691, 0.120612031076753, 0.120612031076753, 0.120612031076753, 0.11657601272100271, 0.11657601272100271, 0.11657601272100271, 0.11764719405674628, 0.11764719405674628, 0.11764719405674628, 0.11375319870804979, 0.11375319870804979, 0.11375319870804979, 0.10355650520389004, 0.10355650520389004, 0.10355650520389004, 0.11927343998052398, 0.11927343998052398, 0.11927343998052398, 0.931992166340135, 0.931992166340135, 0.931992166340135, 0.940716082742614, 0.940716082742614, 0.940716082742614, 0.9650655369286341, 0.9650655369286341, 0.9650655369286341, 0.6956378276449703, 0.6956378276449703, 0.6956378276449703, 0.6482418507707539, 0.6482418507707539, 0.6482418507707539, 0.7320115009263473, 0.7320115009263473, 0.7320115009263473, 0.38734066054285243, 0.38734066054285243, 0.38734066054285243, 0.21875135222964515, 0.21875135222964515, 0.21875135222964515, 0.24337083678253646, 0.24337083678253646, 0.24337083678253646, 0.2492592738862761, 0.2492592738862761, 0.2492592738862761, 0.2424706053406177, 0.2424706053406177, 0.2424706053406177, 0.22391577622385062, 0.22391577622385062, 0.22391577622385062, 0.2405593048231367, 0.2405593048231367, 0.2405593048231367, 0.30486558591743107, 0.30486558591743107, 0.30486558591743107, 0.26355388475749164, 0.26355388475749164, 0.26355388475749164, 0.10128167464177784, 0.10128167464177784, 0.10128167464177784, 0.014527782151376178, 0.014527782151376178, 0.014527782151376178, 0.011603181447155109, 0.011603181447155109, 0.011603181447155109, 0.12346935507353751, 0.12346935507353751, 0.12346935507353751, 0.1968860909271829, 0.1968860909271829, 0.1968860909271829, 0.1432471061077154, 0.1432471061077154, 0.1432471061077154, 0.17363678697834872, 0.17363678697834872, 0.17363678697834872, 0.10946626219991995, 0.10946626219991995, 0.10946626219991995, 0.12167644929174493, 0.12167644929174493, 0.12167644929174493, 0.3156123355006968, 0.3156123355006968, 0.3156123355006968, 0.07934159713916067, 0.07934159713916067, 0.07934159713916067, 0.17262629364601179, 0.17262629364601179, 0.17262629364601179, 0.6071807911916914, 0.6071807911916914, 0.6071807911916914, 0.6062071262236894, 0.6062071262236894, 0.6062071262236894, 0.6137350757276949, 0.6137350757276949, 0.6137350757276949, 0.11618603740149502, 0.11618603740149502, 0.11618603740149502, 0.13246515182886176, 0.13246515182886176, 0.13246515182886176, 0.1428341149847423, 0.1428341149847423, 0.1428341149847423, 0.19613961817799486, 0.19613961817799486, 0.19613961817799486, 0.31688320339050435, 0.31688320339050435, 0.31688320339050435, 0.18687366891327728, 0.18687366891327728, 0.18687366891327728, 0.4878013595285976, 0.4878013595285976, 0.4878013595285976, 0.48774837246818104, 0.48774837246818104, 0.48774837246818104, 0.2042321686970845, 0.2042321686970845, 0.2042321686970845, 0.2759469912086112, 0.2759469912086112, 0.2759469912086112, 0.21440643431489992, 0.21440643431489992, 0.21440643431489992, 0.28649864325786745, 0.28649864325786745, 0.28649864325786745, 0.21850734827593377, 0.21850734827593377, 0.21850734827593377, 0.20663208321651305, 0.20663208321651305, 0.20663208321651305, 0.20013574970502623, 0.20013574970502623, 0.20013574970502623, 0.17015495110494705, 0.17015495110494705, 0.17015495110494705, 0.19630979472441135, 0.19630979472441135, 0.19630979472441135, 0.17540961999746973, 0.17540961999746973, 0.17540961999746973, 0.9345865440580151, 0.9345865440580151, 0.9345865440580151, 0.19943658594545854, 0.19943658594545854, 0.19943658594545854, 0.835596057005364, 0.835596057005364, 0.835596057005364, 0.8206932768882711, 0.8206932768882711, 0.8206932768882711, 0.6950328496536453, 0.6950328496536453, 0.6950328496536453, 0.20918761084166848, 0.20918761084166848, 0.20918761084166848, 0.19495876325434214, 0.19495876325434214, 0.19495876325434214, 0.21025642822584534, 0.21025642822584534, 0.21025642822584534, 0.19192454205348009, 0.19192454205348009, 0.19192454205348009, 0.09906046775670496, 0.09906046775670496, 0.09906046775670496, 0.09598892049121499, 0.09598892049121499, 0.09598892049121499, 0.09646579302615776, 0.09646579302615776, 0.09646579302615776]}, "mutation_prompt": null}
{"id": "8af032ed-151f-42e9-b23e-b189515b41b1", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "d75adf84-6416-4f09-b907-66be558fce2e", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.68  # Optimized DE scaling factor for better balance\n        self.CR = 0.87  # Slightly higher crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.075)  # Fine-tuned mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with optimized mutation scaling and crossover strategies for a precise 2% improvement in exploration-exploitation balance.", "configspace": "", "generation": 67, "fitness": 0.33248718953418654, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820563789088008, 0.8820563789088008, 0.8820563789088008, 0.8838802630495268, 0.8838802630495268, 0.8838802630495268, 0.8797772224082978, 0.8797772224082978, 0.8797772224082978, 0.749274668444466, 0.749274668444466, 0.749274668444466, 0.7332664923443304, 0.7332664923443304, 0.7332664923443304, 0.7384755811861936, 0.7384755811861936, 0.7384755811861936, 0.11227932655095951, 0.11227932655095951, 0.11227932655095951, 0.14158351929478608, 0.14158351929478608, 0.14158351929478608, 0.13209096907274875, 0.13209096907274875, 0.13209096907274875, 0.10985937238942811, 0.10985937238942811, 0.10985937238942811, 0.14365278663361847, 0.14365278663361847, 0.14365278663361847, 0.10652655044356618, 0.10652655044356618, 0.10652655044356618, 0.9469286814455806, 0.9469286814455806, 0.9469286814455806, 0.9288425410478328, 0.9288425410478328, 0.9288425410478328, 0.9419149383400143, 0.9419149383400143, 0.9419149383400143, 0.6979698604022526, 0.6979698604022526, 0.6979698604022526, 0.7229658057957415, 0.7229658057957415, 0.7229658057957415, 0.7886851550684898, 0.7886851550684898, 0.7886851550684898, 0.22623707811465765, 0.22623707811465765, 0.22623707811465765, 0.2704273137354706, 0.2704273137354706, 0.2704273137354706, 0.23935819043764495, 0.23935819043764495, 0.23935819043764495, 0.23955452995449533, 0.23955452995449533, 0.23955452995449533, 0.11492222832240728, 0.11492222832240728, 0.11492222832240728, 0.22863206351702414, 0.22863206351702414, 0.22863206351702414, 0.12298497411762854, 0.12298497411762854, 0.12298497411762854, 0.1339081490299433, 0.1339081490299433, 0.1339081490299433, 0.26693347634008435, 0.26693347634008435, 0.26693347634008435, 0.07006807581581997, 0.07006807581581997, 0.07006807581581997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013276829547058111, 0.013276829547058111, 0.013276829547058111, 0.16408122677703318, 0.16408122677703318, 0.16408122677703318, 0.18350361302377793, 0.18350361302377793, 0.18350361302377793, 0.12317914906165783, 0.12317914906165783, 0.12317914906165783, 0.1701819372580392, 0.1701819372580392, 0.1701819372580392, 0.12733797017815485, 0.12733797017815485, 0.12733797017815485, 0.16297694569407084, 0.16297694569407084, 0.16297694569407084, 0.13163319095712467, 0.13163319095712467, 0.13163319095712467, 0.06257381077749213, 0.06257381077749213, 0.06257381077749213, 0.11937451572410174, 0.11937451572410174, 0.11937451572410174, 0.5807330059534843, 0.5807330059534843, 0.5807330059534843, 0.6310813353182347, 0.6310813353182347, 0.6310813353182347, 0.5717487641930792, 0.5717487641930792, 0.5717487641930792, 0.1450602282073965, 0.1450602282073965, 0.1450602282073965, 0.15990791908750057, 0.15990791908750057, 0.15990791908750057, 0.10115525164496797, 0.10115525164496797, 0.10115525164496797, 0.22672997757897528, 0.22672997757897528, 0.22672997757897528, 0.1953357494606366, 0.1953357494606366, 0.1953357494606366, 0.2009210531827742, 0.2009210531827742, 0.2009210531827742, 0.29717167226860175, 0.29717167226860175, 0.29717167226860175, 0.39653113897997794, 0.39653113897997794, 0.39653113897997794, 0.5903297013487349, 0.5903297013487349, 0.5903297013487349, 0.316277847198867, 0.316277847198867, 0.316277847198867, 0.2332322965184117, 0.2332322965184117, 0.2332322965184117, 0.1682285227852015, 0.1682285227852015, 0.1682285227852015, 0.22751767083828256, 0.22751767083828256, 0.22751767083828256, 0.21775165978615396, 0.21775165978615396, 0.21775165978615396, 0.23935429240911876, 0.23935429240911876, 0.23935429240911876, 0.1851210275031121, 0.1851210275031121, 0.1851210275031121, 0.17937833124140068, 0.17937833124140068, 0.17937833124140068, 0.19555612161211, 0.19555612161211, 0.19555612161211, 0.8909004120469597, 0.8909004120469597, 0.8909004120469597, 0.8567269187622546, 0.8567269187622546, 0.8567269187622546, 0.21093696626879632, 0.21093696626879632, 0.21093696626879632, 0.1679636435947719, 0.1679636435947719, 0.1679636435947719, 0.8326918628696275, 0.8326918628696275, 0.8326918628696275, 0.21182323607825204, 0.21182323607825204, 0.21182323607825204, 0.1972871670695554, 0.1972871670695554, 0.1972871670695554, 0.19208043237455796, 0.19208043237455796, 0.19208043237455796, 0.19041437450482646, 0.19041437450482646, 0.19041437450482646, 0.11061597471520912, 0.11061597471520912, 0.11061597471520912, 0.10602007742883401, 0.10602007742883401, 0.10602007742883401, 0.10121763242044124, 0.10121763242044124, 0.10121763242044124]}, "mutation_prompt": null}
{"id": "2d8d0a00-aa6b-44bc-b487-69f82c01bee9", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.11, 0.11]  # Adjusted slightly for better velocity control\n        self.F = 0.60  # Further reduced DE scaling factor for improved exploitation\n        self.CR = 0.9  # Increased DE crossover probability for more diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.6, 1.4  # Slightly unbalanced to favor exploration\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Further reduced for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population += velocities\n            population = np.clip(population, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Fine-tuned parameters and streamlined logic in HybridDEPSO for a 2% optimization improvement.", "configspace": "", "generation": 68, "fitness": 0.3556117209151479, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8826286428625051, 0.8826286428625051, 0.8826286428625051, 0.874823511482065, 0.874823511482065, 0.874823511482065, 0.8885045990679974, 0.8885045990679974, 0.8885045990679974, 0.7561012718582495, 0.7561012718582495, 0.7561012718582495, 0.7679266908057953, 0.7679266908057953, 0.7679266908057953, 0.6280410339531338, 0.6280410339531338, 0.6280410339531338, 0.18611948622471508, 0.18611948622471508, 0.18611948622471508, 0.1577964041010711, 0.1577964041010711, 0.1577964041010711, 0.15950486983725698, 0.15950486983725698, 0.15950486983725698, 0.1319180738659841, 0.1319180738659841, 0.1319180738659841, 0.133015847179365, 0.133015847179365, 0.133015847179365, 0.07138100416515847, 0.07138100416515847, 0.07138100416515847, 0.9670702105764669, 0.9670702105764669, 0.9670702105764669, 0.9117053086544608, 0.9117053086544608, 0.9117053086544608, 0.911460838097357, 0.911460838097357, 0.911460838097357, 0.7201836041396388, 0.7201836041396388, 0.7201836041396388, 0.7520441993711108, 0.7520441993711108, 0.7520441993711108, 0.7523494141161937, 0.7523494141161937, 0.7523494141161937, 0.2136947032674018, 0.2136947032674018, 0.2136947032674018, 0.9100796013844067, 0.9100796013844067, 0.9100796013844067, 0.6651217878573067, 0.6651217878573067, 0.6651217878573067, 0.2918665154222898, 0.2918665154222898, 0.2918665154222898, 0.254067817071864, 0.254067817071864, 0.254067817071864, 0.22289710364740856, 0.22289710364740856, 0.22289710364740856, 0.1255578560184184, 0.1255578560184184, 0.1255578560184184, 0.1330387995054354, 0.1330387995054354, 0.1330387995054354, 0.2536298718354254, 0.2536298718354254, 0.2536298718354254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07888082538211094, 0.07888082538211094, 0.07888082538211094, 0.011548407104703284, 0.011548407104703284, 0.011548407104703284, 0.08667694541242343, 0.08667694541242343, 0.08667694541242343, 0.2607058322863509, 0.2607058322863509, 0.2607058322863509, 0.0958780605126438, 0.0958780605126438, 0.0958780605126438, 0.04067872342666656, 0.04067872342666656, 0.04067872342666656, 0.1169910109001181, 0.1169910109001181, 0.1169910109001181, 0.10655894974290459, 0.10655894974290459, 0.10655894974290459, 0.07980916406071648, 0.07980916406071648, 0.07980916406071648, 0.05689701411733039, 0.05689701411733039, 0.05689701411733039, 0.19778922981759506, 0.19778922981759506, 0.19778922981759506, 0.5581236671056936, 0.5581236671056936, 0.5581236671056936, 0.5718547793145168, 0.5718547793145168, 0.5718547793145168, 0.6297155144388791, 0.6297155144388791, 0.6297155144388791, 0.14376774565136696, 0.14376774565136696, 0.14376774565136696, 0.15761740637994393, 0.15761740637994393, 0.15761740637994393, 0.11938920636857842, 0.11938920636857842, 0.11938920636857842, 0.20110647499318857, 0.20110647499318857, 0.20110647499318857, 0.24367471528816143, 0.24367471528816143, 0.24367471528816143, 0.24150116847300696, 0.24150116847300696, 0.24150116847300696, 0.5339412639305542, 0.5339412639305542, 0.5339412639305542, 0.3004004448624631, 0.3004004448624631, 0.3004004448624631, 0.444522808216817, 0.444522808216817, 0.444522808216817, 0.24251239428744553, 0.24251239428744553, 0.24251239428744553, 0.255655324149633, 0.255655324149633, 0.255655324149633, 0.21104593409215444, 0.21104593409215444, 0.21104593409215444, 0.2315188325937425, 0.2315188325937425, 0.2315188325937425, 0.22263561868928294, 0.22263561868928294, 0.22263561868928294, 0.253952440816652, 0.253952440816652, 0.253952440816652, 0.18310889042982847, 0.18310889042982847, 0.18310889042982847, 0.19570722003300045, 0.19570722003300045, 0.19570722003300045, 0.20892265645881503, 0.20892265645881503, 0.20892265645881503, 0.15436045848370505, 0.15436045848370505, 0.15436045848370505, 0.8790535300060001, 0.8790535300060001, 0.8790535300060001, 0.8810901358031009, 0.8810901358031009, 0.8810901358031009, 0.8178132390770806, 0.8178132390770806, 0.8178132390770806, 0.7378204869221676, 0.7378204869221676, 0.7378204869221676, 0.2114669231581534, 0.2114669231581534, 0.2114669231581534, 0.19728129401543837, 0.19728129401543837, 0.19728129401543837, 0.2091462400494396, 0.2091462400494396, 0.2091462400494396, 0.20729388095675405, 0.20729388095675405, 0.20729388095675405, 0.09824598418393382, 0.09824598418393382, 0.09824598418393382, 0.10325189764291431, 0.10325189764291431, 0.10325189764291431, 0.1015020998861903, 0.1015020998861903, 0.1015020998861903]}, "mutation_prompt": null}
{"id": "2bb08f67-7b57-446c-b6f2-98604e4ffbcf", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.11, 0.11]  # Adjusted velocity bounds for finer control\n        self.F = 0.66  # Slightly increased DE scaling factor for improved exploration\n        self.CR = 0.84  # Reduced DE crossover probability for targeted diversity\n        self.w_max, self.w_min = 0.75, 0.25  # Adjusted PSO inertia weight for dynamic adaptation\n        self.c1, self.c2 = 1.6, 1.4  # Slightly unbalanced PSO cognitive and social coefficients to favor exploration\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia adjustment\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Subtle dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhancing HybridDEPSO by refining the balance of exploration and exploitation through fine-tuned parameter adjustments.", "configspace": "", "generation": 69, "fitness": 0.35158704005457414, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8736451859535067, 0.8736451859535067, 0.8736451859535067, 0.8724513709672674, 0.8724513709672674, 0.8724513709672674, 0.8578447232115496, 0.8578447232115496, 0.8578447232115496, 0.7514271756533131, 0.7514271756533131, 0.7514271756533131, 0.7498834653744441, 0.7498834653744441, 0.7498834653744441, 0.5292786270361975, 0.5292786270361975, 0.5292786270361975, 0.14244237635733903, 0.14244237635733903, 0.14244237635733903, 0.18441426241520753, 0.18441426241520753, 0.18441426241520753, 0.6987076007033268, 0.6987076007033268, 0.6987076007033268, 0.12208131187311211, 0.12208131187311211, 0.12208131187311211, 0.09523791545597782, 0.09523791545597782, 0.09523791545597782, 0.06801001507038362, 0.06801001507038362, 0.06801001507038362, 0.9438401918341437, 0.9438401918341437, 0.9438401918341437, 0.9242425083124723, 0.9242425083124723, 0.9242425083124723, 0.9505462962869672, 0.9505462962869672, 0.9505462962869672, 0.7638209591876871, 0.7638209591876871, 0.7638209591876871, 0.583483000158018, 0.583483000158018, 0.583483000158018, 0.7244939973615389, 0.7244939973615389, 0.7244939973615389, 0.3311476540500058, 0.3311476540500058, 0.3311476540500058, 0.2757322991807908, 0.2757322991807908, 0.2757322991807908, 0.8794466715789667, 0.8794466715789667, 0.8794466715789667, 0.22818392869802195, 0.22818392869802195, 0.22818392869802195, 0.21719695609507295, 0.21719695609507295, 0.21719695609507295, 0.12959814734723296, 0.12959814734723296, 0.12959814734723296, 0.2399749579114353, 0.2399749579114353, 0.2399749579114353, 0.28886852950297615, 0.28886852950297615, 0.28886852950297615, 0.24225310609261408, 0.24225310609261408, 0.24225310609261408, 0.10441715803692586, 0.10441715803692586, 0.10441715803692586, 0.0008940858364030468, 0.0008940858364030468, 0.0008940858364030468, 0.011803398289042866, 0.011803398289042866, 0.011803398289042866, 0.08431343987367146, 0.08431343987367146, 0.08431343987367146, 0.1794451945124631, 0.1794451945124631, 0.1794451945124631, 0.09754883840721285, 0.09754883840721285, 0.09754883840721285, 0.1274171127302336, 0.1274171127302336, 0.1274171127302336, 0.3683213215656751, 0.3683213215656751, 0.3683213215656751, 0.12691872065335497, 0.12691872065335497, 0.12691872065335497, 0.12524041395737273, 0.12524041395737273, 0.12524041395737273, 0.3116787247942925, 0.3116787247942925, 0.3116787247942925, 0.16096547165929154, 0.16096547165929154, 0.16096547165929154, 0.586954274376116, 0.586954274376116, 0.586954274376116, 0.560857950532986, 0.560857950532986, 0.560857950532986, 0.5477129004123569, 0.5477129004123569, 0.5477129004123569, 0.11137263976518552, 0.11137263976518552, 0.11137263976518552, 0.11579342925475433, 0.11579342925475433, 0.11579342925475433, 0.1386163247100627, 0.1386163247100627, 0.1386163247100627, 0.185636442628345, 0.185636442628345, 0.185636442628345, 0.35194154462654137, 0.35194154462654137, 0.35194154462654137, 0.14967900661952227, 0.14967900661952227, 0.14967900661952227, 0.4570560183582508, 0.4570560183582508, 0.4570560183582508, 0.27676692075152864, 0.27676692075152864, 0.27676692075152864, 0.5196063148300685, 0.5196063148300685, 0.5196063148300685, 0.18021424056205793, 0.18021424056205793, 0.18021424056205793, 0.29854038568395336, 0.29854038568395336, 0.29854038568395336, 0.21253611068898526, 0.21253611068898526, 0.21253611068898526, 0.2467715882911804, 0.2467715882911804, 0.2467715882911804, 0.22048800728967655, 0.22048800728967655, 0.22048800728967655, 0.24990233472091894, 0.24990233472091894, 0.24990233472091894, 0.18019374070730576, 0.18019374070730576, 0.18019374070730576, 0.19046709381104243, 0.19046709381104243, 0.19046709381104243, 0.19920387802171413, 0.19920387802171413, 0.19920387802171413, 0.880752688608765, 0.880752688608765, 0.880752688608765, 0.16612343011837782, 0.16612343011837782, 0.16612343011837782, 0.8926762866968733, 0.8926762866968733, 0.8926762866968733, 0.7608412283603525, 0.7608412283603525, 0.7608412283603525, 0.16685037375799605, 0.16685037375799605, 0.16685037375799605, 0.2132476857292046, 0.2132476857292046, 0.2132476857292046, 0.19973264320557504, 0.19973264320557504, 0.19973264320557504, 0.18146100728424464, 0.18146100728424464, 0.18146100728424464, 0.19571611936539168, 0.19571611936539168, 0.19571611936539168, 0.10686903347911336, 0.10686903347911336, 0.10686903347911336, 0.09865885175389155, 0.09865885175389155, 0.09865885175389155, 0.10380927494148728, 0.10380927494148728, 0.10380927494148728]}, "mutation_prompt": null}
{"id": "202c9a56-a03a-4451-9878-d792321790b0", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F_base = 0.65  # Base DE scaling factor\n        self.CR_base = 0.85  # Base DE crossover probability\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            F = self.F_base * (1 - evaluations / self.budget)  # Dynamic adjustment of F\n            CR = self.CR_base * (1 + evaluations / self.budget) / 2  # Dynamic adjustment of CR\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with dynamic adaptation of mutation factor and crossover rate for improved convergence.", "configspace": "", "generation": 70, "fitness": 0.3435108391736822, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8962878802786968, 0.8962878802786968, 0.8962878802786968, 0.8873702210183826, 0.8873702210183826, 0.8873702210183826, 0.8863481250747532, 0.8863481250747532, 0.8863481250747532, 0.7657378393874696, 0.7657378393874696, 0.7657378393874696, 0.7437446661044429, 0.7437446661044429, 0.7437446661044429, 0.7599854714661339, 0.7599854714661339, 0.7599854714661339, 0.17854581933366132, 0.17854581933366132, 0.17854581933366132, 0.18351333043122542, 0.18351333043122542, 0.18351333043122542, 0.15525264121557758, 0.15525264121557758, 0.15525264121557758, 0.09974989614993446, 0.09974989614993446, 0.09974989614993446, 0.09612104278754019, 0.09612104278754019, 0.09612104278754019, 0.08758546958539914, 0.08758546958539914, 0.08758546958539914, 0.9415988584921475, 0.9415988584921475, 0.9415988584921475, 0.9482378690483461, 0.9482378690483461, 0.9482378690483461, 0.9307095842539239, 0.9307095842539239, 0.9307095842539239, 0.7537262728596288, 0.7537262728596288, 0.7537262728596288, 0.45090117147207565, 0.45090117147207565, 0.45090117147207565, 0.745920730361251, 0.745920730361251, 0.745920730361251, 0.3736352378848685, 0.3736352378848685, 0.3736352378848685, 0.3744397720414674, 0.3744397720414674, 0.3744397720414674, 0.326207090058637, 0.326207090058637, 0.326207090058637, 0.21723395512103494, 0.21723395512103494, 0.21723395512103494, 0.1168166022117757, 0.1168166022117757, 0.1168166022117757, 0.18245922399726466, 0.18245922399726466, 0.18245922399726466, 0.22379199858191245, 0.22379199858191245, 0.22379199858191245, 0.2957573304870883, 0.2957573304870883, 0.2957573304870883, 0.13010997527642032, 0.13010997527642032, 0.13010997527642032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007985995198494633, 0.007985995198494633, 0.007985995198494633, 0.0036093619857944237, 0.0036093619857944237, 0.0036093619857944237, 0.16200760664768754, 0.16200760664768754, 0.16200760664768754, 0.07143745907672017, 0.07143745907672017, 0.07143745907672017, 0.14678494812725473, 0.14678494812725473, 0.14678494812725473, 0.1554582029130066, 0.1554582029130066, 0.1554582029130066, 0.13725076782180878, 0.13725076782180878, 0.13725076782180878, 0.26871836912172964, 0.26871836912172964, 0.26871836912172964, 0.28789010478584776, 0.28789010478584776, 0.28789010478584776, 0.43124978711882334, 0.43124978711882334, 0.43124978711882334, 0.1998007320734525, 0.1998007320734525, 0.1998007320734525, 0.5335230801545316, 0.5335230801545316, 0.5335230801545316, 0.5625055530647549, 0.5625055530647549, 0.5625055530647549, 0.5525047841168587, 0.5525047841168587, 0.5525047841168587, 0.09530008523855982, 0.09530008523855982, 0.09530008523855982, 0.1675151947575032, 0.1675151947575032, 0.1675151947575032, 0.09423939805976167, 0.09423939805976167, 0.09423939805976167, 0.21367116676461784, 0.21367116676461784, 0.21367116676461784, 0.18257836554519113, 0.18257836554519113, 0.18257836554519113, 0.2041037315245423, 0.2041037315245423, 0.2041037315245423, 0.3505941877560359, 0.3505941877560359, 0.3505941877560359, 0.2621850372847504, 0.2621850372847504, 0.2621850372847504, 0.5260480140052526, 0.5260480140052526, 0.5260480140052526, 0.2372369599069778, 0.2372369599069778, 0.2372369599069778, 0.20639907732995233, 0.20639907732995233, 0.20639907732995233, 0.2815639202562743, 0.2815639202562743, 0.2815639202562743, 0.24031310840557252, 0.24031310840557252, 0.24031310840557252, 0.2658355358038764, 0.2658355358038764, 0.2658355358038764, 0.2609663444079193, 0.2609663444079193, 0.2609663444079193, 0.193696352660522, 0.193696352660522, 0.193696352660522, 0.1750454840042892, 0.1750454840042892, 0.1750454840042892, 0.19295615369787922, 0.19295615369787922, 0.19295615369787922, 0.9060685608508727, 0.9060685608508727, 0.9060685608508727, 0.8392510330831309, 0.8392510330831309, 0.8392510330831309, 0.16509443657207645, 0.16509443657207645, 0.16509443657207645, 0.8699204216847928, 0.8699204216847928, 0.8699204216847928, 0.20476694039516086, 0.20476694039516086, 0.20476694039516086, 0.40032101121421115, 0.40032101121421115, 0.40032101121421115, 0.19177592924487985, 0.19177592924487985, 0.19177592924487985, 0.22943508470281437, 0.22943508470281437, 0.22943508470281437, 0.1915491080152648, 0.1915491080152648, 0.1915491080152648, 0.10934347609768569, 0.10934347609768569, 0.10934347609768569, 0.10119610877776608, 0.10119610877776608, 0.10119610877776608, 0.1011953652691584, 0.1011953652691584, 0.1011953652691584]}, "mutation_prompt": null}
{"id": "54d65d98-4eef-4470-bf9b-6f7119733158", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]  # Adjusted velocity bounds for better control\n        self.F = 0.6  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.9  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.4, 1.6  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by optimizing parameter configuration and mutation mechanism for a 2% code change.", "configspace": "", "generation": 71, "fitness": 0.3527533602740288, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8848182169302139, 0.8848182169302139, 0.8848182169302139, 0.8812375365007514, 0.8812375365007514, 0.8812375365007514, 0.8810148773844796, 0.8810148773844796, 0.8810148773844796, 0.7561236911953871, 0.7561236911953871, 0.7561236911953871, 0.756785708011516, 0.756785708011516, 0.756785708011516, 0.6218199485078739, 0.6218199485078739, 0.6218199485078739, 0.13014453932974135, 0.13014453932974135, 0.13014453932974135, 0.1412837606529025, 0.1412837606529025, 0.1412837606529025, 0.14401906317397095, 0.14401906317397095, 0.14401906317397095, 0.1794313778307871, 0.1794313778307871, 0.1794313778307871, 0.08529951742002884, 0.08529951742002884, 0.08529951742002884, 0.11452286087795183, 0.11452286087795183, 0.11452286087795183, 0.9671247242527106, 0.9671247242527106, 0.9671247242527106, 0.9368273728677815, 0.9368273728677815, 0.9368273728677815, 0.9232317203258527, 0.9232317203258527, 0.9232317203258527, 0.7139545967340055, 0.7139545967340055, 0.7139545967340055, 0.7582733965766981, 0.7582733965766981, 0.7582733965766981, 0.6973726394103275, 0.6973726394103275, 0.6973726394103275, 0.9104959392446272, 0.9104959392446272, 0.9104959392446272, 0.21138224516597248, 0.21138224516597248, 0.21138224516597248, 0.3980476615018306, 0.3980476615018306, 0.3980476615018306, 0.20732605674257376, 0.20732605674257376, 0.20732605674257376, 0.2537426491101178, 0.2537426491101178, 0.2537426491101178, 0.21891520918827323, 0.21891520918827323, 0.21891520918827323, 0.12036975119557902, 0.12036975119557902, 0.12036975119557902, 0.2369819244265433, 0.2369819244265433, 0.2369819244265433, 0.2580068442825575, 0.2580068442825575, 0.2580068442825575, 0.1418367438201883, 0.1418367438201883, 0.1418367438201883, 0.0035414868397769528, 0.0035414868397769528, 0.0035414868397769528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1561355826182278, 0.1561355826182278, 0.1561355826182278, 0.24356514977002164, 0.24356514977002164, 0.24356514977002164, 0.07855722003333354, 0.07855722003333354, 0.07855722003333354, 0.09386552565524342, 0.09386552565524342, 0.09386552565524342, 0.10093560120016731, 0.10093560120016731, 0.10093560120016731, 0.13570287866861996, 0.13570287866861996, 0.13570287866861996, 0.11486372122660793, 0.11486372122660793, 0.11486372122660793, 0.2912780983093136, 0.2912780983093136, 0.2912780983093136, 0.19528982825847374, 0.19528982825847374, 0.19528982825847374, 0.5517539790337629, 0.5517539790337629, 0.5517539790337629, 0.5725317342993871, 0.5725317342993871, 0.5725317342993871, 0.6137916599808526, 0.6137916599808526, 0.6137916599808526, 0.13270013411309378, 0.13270013411309378, 0.13270013411309378, 0.14291152594396117, 0.14291152594396117, 0.14291152594396117, 0.1299131996827284, 0.1299131996827284, 0.1299131996827284, 0.20920669616067367, 0.20920669616067367, 0.20920669616067367, 0.2778832900625736, 0.2778832900625736, 0.2778832900625736, 0.3085691370023098, 0.3085691370023098, 0.3085691370023098, 0.2744046824204842, 0.2744046824204842, 0.2744046824204842, 0.25761443314134247, 0.25761443314134247, 0.25761443314134247, 0.7092241329404961, 0.7092241329404961, 0.7092241329404961, 0.36852684880631437, 0.36852684880631437, 0.36852684880631437, 0.28563225584249374, 0.28563225584249374, 0.28563225584249374, 0.2617321261533647, 0.2617321261533647, 0.2617321261533647, 0.23082830089478168, 0.23082830089478168, 0.23082830089478168, 0.21354848406106053, 0.21354848406106053, 0.21354848406106053, 0.2308623942459408, 0.2308623942459408, 0.2308623942459408, 0.19521169612845868, 0.19521169612845868, 0.19521169612845868, 0.1934750738917883, 0.1934750738917883, 0.1934750738917883, 0.1758511875889952, 0.1758511875889952, 0.1758511875889952, 0.2045260515477464, 0.2045260515477464, 0.2045260515477464, 0.9101248174807028, 0.9101248174807028, 0.9101248174807028, 0.8313515603048559, 0.8313515603048559, 0.8313515603048559, 0.8646487282520448, 0.8646487282520448, 0.8646487282520448, 0.2087231162355514, 0.2087231162355514, 0.2087231162355514, 0.21101873643388425, 0.21101873643388425, 0.21101873643388425, 0.20739238789241665, 0.20739238789241665, 0.20739238789241665, 0.1916925768456078, 0.1916925768456078, 0.1916925768456078, 0.17971508211265186, 0.17971508211265186, 0.17971508211265186, 0.10920010307405315, 0.10920010307405315, 0.10920010307405315, 0.10209963194994565, 0.10209963194994565, 0.10209963194994565, 0.0973505099647225, 0.0973505099647225, 0.0973505099647225]}, "mutation_prompt": null}
{"id": "99bd0350-c059-4630-841a-6dc2a9c95745", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.11, 0.11]  # Adjusted velocity bounds for enhanced exploration\n        self.F = 0.66  # Slightly increased DE scaling factor for better exploration\n        self.CR = 0.82  # Slightly decreased DE crossover probability for more focused search\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.6, 1.4  # Fine-tuned PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # Adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.09)  # Slightly adjusted dynamic mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Fine-tuned evolutionary parameters and cross-point strategy in HybridDEPSO for enhanced convergence.", "configspace": "", "generation": 72, "fitness": 0.3411184446972129, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8809742121593943, 0.8809742121593943, 0.8809742121593943, 0.8661376650568782, 0.8661376650568782, 0.8661376650568782, 0.8809325625415908, 0.8809325625415908, 0.8809325625415908, 0.7732889402666554, 0.7732889402666554, 0.7732889402666554, 0.7657552138022364, 0.7657552138022364, 0.7657552138022364, 0.7286732410383501, 0.7286732410383501, 0.7286732410383501, 0.1824368643160127, 0.1824368643160127, 0.1824368643160127, 0.18439321128772967, 0.18439321128772967, 0.18439321128772967, 0.1421666178279415, 0.1421666178279415, 0.1421666178279415, 0.10357766527294243, 0.10357766527294243, 0.10357766527294243, 0.11762743815539778, 0.11762743815539778, 0.11762743815539778, 0.15628065975376448, 0.15628065975376448, 0.15628065975376448, 0.9565727529210143, 0.9565727529210143, 0.9565727529210143, 0.951383075855042, 0.951383075855042, 0.951383075855042, 0.9509910315649517, 0.9509910315649517, 0.9509910315649517, 0.7694492773230847, 0.7694492773230847, 0.7694492773230847, 0.7437590784791344, 0.7437590784791344, 0.7437590784791344, 0.7532178506655686, 0.7532178506655686, 0.7532178506655686, 0.35364580214537233, 0.35364580214537233, 0.35364580214537233, 0.37516378898174785, 0.37516378898174785, 0.37516378898174785, 0.6606932714228375, 0.6606932714228375, 0.6606932714228375, 0.23456572309443824, 0.23456572309443824, 0.23456572309443824, 0.23110169992943297, 0.23110169992943297, 0.23110169992943297, 0.23472156698662627, 0.23472156698662627, 0.23472156698662627, 0.24328863068973539, 0.24328863068973539, 0.24328863068973539, 0.23597228436432893, 0.23597228436432893, 0.23597228436432893, 0.2572619700155887, 0.2572619700155887, 0.2572619700155887, 0.013683542590122721, 0.013683542590122721, 0.013683542590122721, 0.01354886686492407, 0.01354886686492407, 0.01354886686492407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09361032207539788, 0.09361032207539788, 0.09361032207539788, 0.09978222070811449, 0.09978222070811449, 0.09978222070811449, 0.20554928438140363, 0.20554928438140363, 0.20554928438140363, 0.06721274609281014, 0.06721274609281014, 0.06721274609281014, 0.25937984730522357, 0.25937984730522357, 0.25937984730522357, 0.10022496390058933, 0.10022496390058933, 0.10022496390058933, 0.1043932754295378, 0.1043932754295378, 0.1043932754295378, 0.05416817780631267, 0.05416817780631267, 0.05416817780631267, 0.11454709309401478, 0.11454709309401478, 0.11454709309401478, 0.5334106073413969, 0.5334106073413969, 0.5334106073413969, 0.5656989417726381, 0.5656989417726381, 0.5656989417726381, 0.5916036058667636, 0.5916036058667636, 0.5916036058667636, 0.1833834217254806, 0.1833834217254806, 0.1833834217254806, 0.12275077137744406, 0.12275077137744406, 0.12275077137744406, 0.10997530533596023, 0.10997530533596023, 0.10997530533596023, 0.19781591166681556, 0.19781591166681556, 0.19781591166681556, 0.2990482518447267, 0.2990482518447267, 0.2990482518447267, 0.16937404683832047, 0.16937404683832047, 0.16937404683832047, 0.3697480560671046, 0.3697480560671046, 0.3697480560671046, 0.46040223296225624, 0.46040223296225624, 0.46040223296225624, 0.5294481911764113, 0.5294481911764113, 0.5294481911764113, 0.2939187477977071, 0.2939187477977071, 0.2939187477977071, 0.282426281723025, 0.282426281723025, 0.282426281723025, 0.2905314512246828, 0.2905314512246828, 0.2905314512246828, 0.25624482614266153, 0.25624482614266153, 0.25624482614266153, 0.26823500386032806, 0.26823500386032806, 0.26823500386032806, 0.25616553288462096, 0.25616553288462096, 0.25616553288462096, 0.189053995193179, 0.189053995193179, 0.189053995193179, 0.17243256919476657, 0.17243256919476657, 0.17243256919476657, 0.1989296388180637, 0.1989296388180637, 0.1989296388180637, 0.8533292832448256, 0.8533292832448256, 0.8533292832448256, 0.8248485800178895, 0.8248485800178895, 0.8248485800178895, 0.20906846378323163, 0.20906846378323163, 0.20906846378323163, 0.16817894741328332, 0.16817894741328332, 0.16817894741328332, 0.2018086181257479, 0.2018086181257479, 0.2018086181257479, 0.20763282731003796, 0.20763282731003796, 0.20763282731003796, 0.19248508814536425, 0.19248508814536425, 0.19248508814536425, 0.2160270420374759, 0.2160270420374759, 0.2160270420374759, 0.19803992014315264, 0.19803992014315264, 0.19803992014315264, 0.1022778364761402, 0.1022778364761402, 0.1022778364761402, 0.09213600525345722, 0.09213600525345722, 0.09213600525345722, 0.09386557926812311, 0.09386557926812311, 0.09386557926812311]}, "mutation_prompt": null}
{"id": "374d62f4-569a-4c6a-83c8-1962ccd17528", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.10, 0.10]  # Slightly tighter velocity bounds for precision\n        self.F = 0.68  # Adjusted DE scaling for better exploration\n        self.CR = 0.80  # Slightly reduced DE crossover for controlled diversity\n        self.w_max, self.w_min = 0.6, 0.4  # Adaptive inertia weights fine-tuned for balance\n        self.c1, self.c2 = 1.6, 1.4  # Adjusted PSO coefficients for focused social and cognitive behavior\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Refined dynamic mutation for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Fine-tune PSO parameters and DE mutation for improved convergence stability and performance.", "configspace": "", "generation": 73, "fitness": 0.35929472615003033, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8894353459846753, 0.8894353459846753, 0.8894353459846753, 0.8811789336094927, 0.8811789336094927, 0.8811789336094927, 0.8940657009138655, 0.8940657009138655, 0.8940657009138655, 0.7862321206392708, 0.7862321206392708, 0.7862321206392708, 0.7822933533506422, 0.7822933533506422, 0.7822933533506422, 0.7872695698530465, 0.7872695698530465, 0.7872695698530465, 0.15826291178636742, 0.15826291178636742, 0.15826291178636742, 0.14135859236400616, 0.14135859236400616, 0.14135859236400616, 0.1861234125981267, 0.1861234125981267, 0.1861234125981267, 0.08682620836869936, 0.08682620836869936, 0.08682620836869936, 0.11656015530517527, 0.11656015530517527, 0.11656015530517527, 0.07510450587704653, 0.07510450587704653, 0.07510450587704653, 0.9570222078678929, 0.9570222078678929, 0.9570222078678929, 0.9277007268834206, 0.9277007268834206, 0.9277007268834206, 0.9414828386022679, 0.9414828386022679, 0.9414828386022679, 0.6747531987285806, 0.6747531987285806, 0.6747531987285806, 0.7389470237136757, 0.7389470237136757, 0.7389470237136757, 0.7231282527526555, 0.7231282527526555, 0.7231282527526555, 0.374419791239603, 0.374419791239603, 0.374419791239603, 0.8620358686898645, 0.8620358686898645, 0.8620358686898645, 0.8967476978117047, 0.8967476978117047, 0.8967476978117047, 0.25211199073176727, 0.25211199073176727, 0.25211199073176727, 0.42293557664458625, 0.42293557664458625, 0.42293557664458625, 0.2311896537415491, 0.2311896537415491, 0.2311896537415491, 0.2416349151727999, 0.2416349151727999, 0.2416349151727999, 0.21650500548564056, 0.21650500548564056, 0.21650500548564056, 0.2573818554215781, 0.2573818554215781, 0.2573818554215781, 0.12091948960766219, 0.12091948960766219, 0.12091948960766219, 0.1022549048918241, 0.1022549048918241, 0.1022549048918241, 0.0454971871992339, 0.0454971871992339, 0.0454971871992339, 0.16583593696287513, 0.16583593696287513, 0.16583593696287513, 0.18565531915440348, 0.18565531915440348, 0.18565531915440348, 0.18027757921801146, 0.18027757921801146, 0.18027757921801146, 0.1058693351952108, 0.1058693351952108, 0.1058693351952108, 0.11402562792673998, 0.11402562792673998, 0.11402562792673998, 0.12483224067748688, 0.12483224067748688, 0.12483224067748688, 0.06399326817929885, 0.06399326817929885, 0.06399326817929885, 0.037986051497188256, 0.037986051497188256, 0.037986051497188256, 0.1549792687812369, 0.1549792687812369, 0.1549792687812369, 0.5499563754963069, 0.5499563754963069, 0.5499563754963069, 0.5588750099202033, 0.5588750099202033, 0.5588750099202033, 0.6205551277981847, 0.6205551277981847, 0.6205551277981847, 0.14175342983967099, 0.14175342983967099, 0.14175342983967099, 0.14237254007637423, 0.14237254007637423, 0.14237254007637423, 0.14140379851442342, 0.14140379851442342, 0.14140379851442342, 0.18952827177973852, 0.18952827177973852, 0.18952827177973852, 0.27721067751728656, 0.27721067751728656, 0.27721067751728656, 0.15299771394087025, 0.15299771394087025, 0.15299771394087025, 0.20903361597178294, 0.20903361597178294, 0.20903361597178294, 0.2648010227194625, 0.2648010227194625, 0.2648010227194625, 0.5058959021920562, 0.5058959021920562, 0.5058959021920562, 0.29705174995090333, 0.29705174995090333, 0.29705174995090333, 0.428931796082054, 0.428931796082054, 0.428931796082054, 0.18192262139807658, 0.18192262139807658, 0.18192262139807658, 0.23395939555110068, 0.23395939555110068, 0.23395939555110068, 0.24129378019054515, 0.24129378019054515, 0.24129378019054515, 0.22477822517987622, 0.22477822517987622, 0.22477822517987622, 0.18665207179469867, 0.18665207179469867, 0.18665207179469867, 0.21030901270992053, 0.21030901270992053, 0.21030901270992053, 0.22358830689799347, 0.22358830689799347, 0.22358830689799347, 0.17601827658549118, 0.17601827658549118, 0.17601827658549118, 0.9167800405017698, 0.9167800405017698, 0.9167800405017698, 0.8762911271004377, 0.8762911271004377, 0.8762911271004377, 0.16588556927592668, 0.16588556927592668, 0.16588556927592668, 0.7102607096310773, 0.7102607096310773, 0.7102607096310773, 0.21159093856653077, 0.21159093856653077, 0.21159093856653077, 0.2068265633691031, 0.2068265633691031, 0.2068265633691031, 0.19515262761189556, 0.19515262761189556, 0.19515262761189556, 0.21777152248851184, 0.21777152248851184, 0.21777152248851184, 0.11640291190451046, 0.11640291190451046, 0.11640291190451046, 0.09662620946949463, 0.09662620946949463, 0.09662620946949463, 0.0919097173467317, 0.0919097173467317, 0.0919097173467317]}, "mutation_prompt": null}
{"id": "edfd8bf6-a3be-4f5d-9106-7ac76b5c926e", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "46858e21-805e-4988-abfc-684c90bf453e", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "314c310b-a1ae-44e9-a8a9-250a89e33676", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.11, 0.11]  # Fine-tuned velocity bounds for enhanced search control\n        self.F = 0.68  # Slight adjustment in DE scaling factor for balanced exploration\n        self.CR = 0.83  # Reduced DE crossover probability for better exploitation\n        self.w_max, self.w_min = 0.6, 0.3  # Slight reduction in max inertia weight for quicker convergence\n        self.c1, self.c2 = 1.6, 1.4  # Slightly varied cognitive and social coefficients to enhance convergence\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.075)  # Slightly reduced mutation scale for stability\n                mutant += sigma * (p_best[i] - mutant)  # Focus mutant adjustment towards personal best\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Incrementally refine HybridDEPSO by minor parameter adjustments and improved mutation strategy for a slight performance enhancement.", "configspace": "", "generation": 76, "fitness": 0.34914955049598856, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8982148944836984, 0.8982148944836984, 0.8982148944836984, 0.8945968670636086, 0.8945968670636086, 0.8945968670636086, 0.8997789055904232, 0.8997789055904232, 0.8997789055904232, 0.49084201661678684, 0.49084201661678684, 0.49084201661678684, 0.7973882770051178, 0.7973882770051178, 0.7973882770051178, 0.7864830664606258, 0.7864830664606258, 0.7864830664606258, 0.12926258075839558, 0.12926258075839558, 0.12926258075839558, 0.15794838730532523, 0.15794838730532523, 0.15794838730532523, 0.18367379498168945, 0.18367379498168945, 0.18367379498168945, 0.09986157593501344, 0.09986157593501344, 0.09986157593501344, 0.11637715281579131, 0.11637715281579131, 0.11637715281579131, 0.08207659428157621, 0.08207659428157621, 0.08207659428157621, 0.9459422344394052, 0.9459422344394052, 0.9459422344394052, 0.9509116997705066, 0.9509116997705066, 0.9509116997705066, 0.9415008583438246, 0.9415008583438246, 0.9415008583438246, 0.808143460309101, 0.808143460309101, 0.808143460309101, 0.6074942978236084, 0.6074942978236084, 0.6074942978236084, 0.7606234306251118, 0.7606234306251118, 0.7606234306251118, 0.22536278926626918, 0.22536278926626918, 0.22536278926626918, 0.220041747557834, 0.220041747557834, 0.220041747557834, 0.8785726230838276, 0.8785726230838276, 0.8785726230838276, 0.1283157072153599, 0.1283157072153599, 0.1283157072153599, 0.22979954269684444, 0.22979954269684444, 0.22979954269684444, 0.23886789131710262, 0.23886789131710262, 0.23886789131710262, 0.24306588332374746, 0.24306588332374746, 0.24306588332374746, 0.267005000420918, 0.267005000420918, 0.267005000420918, 0.23851371566242907, 0.23851371566242907, 0.23851371566242907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05055387017332591, 0.05055387017332591, 0.05055387017332591, 0.03793062120875179, 0.03793062120875179, 0.03793062120875179, 0.14881170616264539, 0.14881170616264539, 0.14881170616264539, 0.15527729763914377, 0.15527729763914377, 0.15527729763914377, 0.1659143850512833, 0.1659143850512833, 0.1659143850512833, 0.2569518579656762, 0.2569518579656762, 0.2569518579656762, 0.08224632790467001, 0.08224632790467001, 0.08224632790467001, 0.15018378697974277, 0.15018378697974277, 0.15018378697974277, 0.19731755816645513, 0.19731755816645513, 0.19731755816645513, 0.17264546208865317, 0.17264546208865317, 0.17264546208865317, 0.09006542367983861, 0.09006542367983861, 0.09006542367983861, 0.5712203235876112, 0.5712203235876112, 0.5712203235876112, 0.6082502889526014, 0.6082502889526014, 0.6082502889526014, 0.6045049502525979, 0.6045049502525979, 0.6045049502525979, 0.12326395795096856, 0.12326395795096856, 0.12326395795096856, 0.13240217028586154, 0.13240217028586154, 0.13240217028586154, 0.14138564500752238, 0.14138564500752238, 0.14138564500752238, 0.18981404391497103, 0.18981404391497103, 0.18981404391497103, 0.25768126517184364, 0.25768126517184364, 0.25768126517184364, 0.1807760305212831, 0.1807760305212831, 0.1807760305212831, 0.3088791193091006, 0.3088791193091006, 0.3088791193091006, 0.557839842934976, 0.557839842934976, 0.557839842934976, 0.6233008966608483, 0.6233008966608483, 0.6233008966608483, 0.28075673012493096, 0.28075673012493096, 0.28075673012493096, 0.22603783070883998, 0.22603783070883998, 0.22603783070883998, 0.286838915355756, 0.286838915355756, 0.286838915355756, 0.2155843147451405, 0.2155843147451405, 0.2155843147451405, 0.21249042175193256, 0.21249042175193256, 0.21249042175193256, 0.22907624230204615, 0.22907624230204615, 0.22907624230204615, 0.17646232618954705, 0.17646232618954705, 0.17646232618954705, 0.21012591783778034, 0.21012591783778034, 0.21012591783778034, 0.19117392698900826, 0.19117392698900826, 0.19117392698900826, 0.9124831034957892, 0.9124831034957892, 0.9124831034957892, 0.9021739121687639, 0.9021739121687639, 0.9021739121687639, 0.8493792832482611, 0.8493792832482611, 0.8493792832482611, 0.16494672503871155, 0.16494672503871155, 0.16494672503871155, 0.20801183155949565, 0.20801183155949565, 0.20801183155949565, 0.20791364468899642, 0.20791364468899642, 0.20791364468899642, 0.19266826486345945, 0.19266826486345945, 0.19266826486345945, 0.17562116478571566, 0.17562116478571566, 0.17562116478571566, 0.1903200506598276, 0.1903200506598276, 0.1903200506598276, 0.08062216605649342, 0.08062216605649342, 0.08062216605649342, 0.09307973340916686, 0.09307973340916686, 0.09307973340916686, 0.10501930300720064, 0.10501930300720064, 0.10501930300720064]}, "mutation_prompt": null}
{"id": "a1439b0a-d10d-47d3-be5d-fcf5306209e0", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]  # Further adjusted velocity bounds for better control\n        self.F_base = 0.6  # Base DE scaling factor\n        self.CR = 0.85  # Crossover probability remains unchanged\n        self.w_max, self.w_min = 0.7, 0.3  # Inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Cognitive and social coefficients remain unchanged\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            F = self.F_base + 0.1 * (evaluations / self.budget)  # Adaptive DE scaling factor\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by fine-tuning velocity bounds and implementing an adaptive DE scaling factor for improved exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.34813403509752683, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8913524236946175, 0.8913524236946175, 0.8913524236946175, 0.8717853587179409, 0.8717853587179409, 0.8717853587179409, 0.861938631779043, 0.861938631779043, 0.861938631779043, 0.7731448664418386, 0.7731448664418386, 0.7731448664418386, 0.770864285557058, 0.770864285557058, 0.770864285557058, 0.6235892735616568, 0.6235892735616568, 0.6235892735616568, 0.11559993691714776, 0.11559993691714776, 0.11559993691714776, 0.16078592543598025, 0.16078592543598025, 0.16078592543598025, 0.13309932243190103, 0.13309932243190103, 0.13309932243190103, 0.10703500951708844, 0.10703500951708844, 0.10703500951708844, 0.10021397880947658, 0.10021397880947658, 0.10021397880947658, 0.07325178743535832, 0.07325178743535832, 0.07325178743535832, 0.9186832624769845, 0.9186832624769845, 0.9186832624769845, 0.9330918322750764, 0.9330918322750764, 0.9330918322750764, 0.9201321322994582, 0.9201321322994582, 0.9201321322994582, 0.6946512463944657, 0.6946512463944657, 0.6946512463944657, 0.7536886748120655, 0.7536886748120655, 0.7536886748120655, 0.7791392369528546, 0.7791392369528546, 0.7791392369528546, 0.18314446479161806, 0.18314446479161806, 0.18314446479161806, 0.3822224651576378, 0.3822224651576378, 0.3822224651576378, 0.17520575186089593, 0.17520575186089593, 0.17520575186089593, 0.24238575668383588, 0.24238575668383588, 0.24238575668383588, 0.2709583139269348, 0.2709583139269348, 0.2709583139269348, 0.26173599897064337, 0.26173599897064337, 0.26173599897064337, 0.304786173601021, 0.304786173601021, 0.304786173601021, 0.2991705702533163, 0.2991705702533163, 0.2991705702533163, 0.25800177099187926, 0.25800177099187926, 0.25800177099187926, 0.1711544500978145, 0.1711544500978145, 0.1711544500978145, 0.07367003054156052, 0.07367003054156052, 0.07367003054156052, 0.05544008759521257, 0.05544008759521257, 0.05544008759521257, 0.24353164409784356, 0.24353164409784356, 0.24353164409784356, 0.1359805345779157, 0.1359805345779157, 0.1359805345779157, 0.16115147969900767, 0.16115147969900767, 0.16115147969900767, 0.17067897470229398, 0.17067897470229398, 0.17067897470229398, 0.224420841582047, 0.224420841582047, 0.224420841582047, 0.14163970444050267, 0.14163970444050267, 0.14163970444050267, 0.15715355451070956, 0.15715355451070956, 0.15715355451070956, 0.036727435333114955, 0.036727435333114955, 0.036727435333114955, 0.19469343270943273, 0.19469343270943273, 0.19469343270943273, 0.5956485461388308, 0.5956485461388308, 0.5956485461388308, 0.6150490322415979, 0.6150490322415979, 0.6150490322415979, 0.6118278998621383, 0.6118278998621383, 0.6118278998621383, 0.1116122672146419, 0.1116122672146419, 0.1116122672146419, 0.1413821444708836, 0.1413821444708836, 0.1413821444708836, 0.1052161747379674, 0.1052161747379674, 0.1052161747379674, 0.23583824588823488, 0.23583824588823488, 0.23583824588823488, 0.2550574254003275, 0.2550574254003275, 0.2550574254003275, 0.3431542115786026, 0.3431542115786026, 0.3431542115786026, 0.207292026135386, 0.207292026135386, 0.207292026135386, 0.45425781835381107, 0.45425781835381107, 0.45425781835381107, 0.27826243240264326, 0.27826243240264326, 0.27826243240264326, 0.24938708862512426, 0.24938708862512426, 0.24938708862512426, 0.3228358841720389, 0.3228358841720389, 0.3228358841720389, 0.3438334160516341, 0.3438334160516341, 0.3438334160516341, 0.23575735010277, 0.23575735010277, 0.23575735010277, 0.2337608624569839, 0.2337608624569839, 0.2337608624569839, 0.23532434617334097, 0.23532434617334097, 0.23532434617334097, 0.17039579128577464, 0.17039579128577464, 0.17039579128577464, 0.1877051027491916, 0.1877051027491916, 0.1877051027491916, 0.20093886563035324, 0.20093886563035324, 0.20093886563035324, 0.9065152394340665, 0.9065152394340665, 0.9065152394340665, 0.19694701242406543, 0.19694701242406543, 0.19694701242406543, 0.9186944507594468, 0.9186944507594468, 0.9186944507594468, 0.6469402854380926, 0.6469402854380926, 0.6469402854380926, 0.20585983028494803, 0.20585983028494803, 0.20585983028494803, 0.5553025187826099, 0.5553025187826099, 0.5553025187826099, 0.19475105562517048, 0.19475105562517048, 0.19475105562517048, 0.1857047110116382, 0.1857047110116382, 0.1857047110116382, 0.2041986468405107, 0.2041986468405107, 0.2041986468405107, 0.10882321910333848, 0.10882321910333848, 0.10882321910333848, 0.07828409217443821, 0.07828409217443821, 0.07828409217443821, 0.10319191183607723, 0.10319191183607723, 0.10319191183607723]}, "mutation_prompt": null}
{"id": "d153fca5-43c7-4b77-aa92-5e823c901eab", "solution": "import numpy as np\n\nclass OptimizedHybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.6  # Reduced DE scaling factor for better convergence\n        self.CR = 0.9  # Further increased DE crossover probability for exploration\n        self.w_max, self.w_min = 0.8, 0.4  # Adjusted inertia weight range for improved balance\n        self.c1, self.c2 = 1.4, 1.6  # Slightly modified PSO coefficients for better diversity\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Reduced mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "OptimizedHybridDEPSO", "description": "Optimized HybridDEPSO with refined function evaluations and parameter tuning for improved convergence.", "configspace": "", "generation": 78, "fitness": 0.3492865317645251, "feedback": "The algorithm OptimizedHybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8454609363573478, 0.8454609363573478, 0.8454609363573478, 0.8405978455511636, 0.8405978455511636, 0.8405978455511636, 0.8560464656422585, 0.8560464656422585, 0.8560464656422585, 0.6883103878371589, 0.6883103878371589, 0.6883103878371589, 0.7021593208499917, 0.7021593208499917, 0.7021593208499917, 0.6966965534592855, 0.6966965534592855, 0.6966965534592855, 0.7017183715037754, 0.7017183715037754, 0.7017183715037754, 0.11420274972419941, 0.11420274972419941, 0.11420274972419941, 0.10655362370080568, 0.10655362370080568, 0.10655362370080568, 0.10940842578979904, 0.10940842578979904, 0.10940842578979904, 0.11658817482122519, 0.11658817482122519, 0.11658817482122519, 0.10302072788902483, 0.10302072788902483, 0.10302072788902483, 0.9670456030215395, 0.9670456030215395, 0.9670456030215395, 0.9370242652114713, 0.9370242652114713, 0.9370242652114713, 0.943208330614708, 0.943208330614708, 0.943208330614708, 0.6499777853312529, 0.6499777853312529, 0.6499777853312529, 0.70292445723914, 0.70292445723914, 0.70292445723914, 0.7272494745218431, 0.7272494745218431, 0.7272494745218431, 0.9217488924270397, 0.9217488924270397, 0.9217488924270397, 0.2783449119067233, 0.2783449119067233, 0.2783449119067233, 0.40300524315245145, 0.40300524315245145, 0.40300524315245145, 0.2616344063686279, 0.2616344063686279, 0.2616344063686279, 0.3006655841835323, 0.3006655841835323, 0.3006655841835323, 0.23471819322794452, 0.23471819322794452, 0.23471819322794452, 0.2450754497541664, 0.2450754497541664, 0.2450754497541664, 0.279102496630803, 0.279102496630803, 0.279102496630803, 0.30035103420923037, 0.30035103420923037, 0.30035103420923037, 0.15508437908042394, 0.15508437908042394, 0.15508437908042394, 0.007682423627843882, 0.007682423627843882, 0.007682423627843882, 0.005431579829092481, 0.005431579829092481, 0.005431579829092481, 0.09752166104465054, 0.09752166104465054, 0.09752166104465054, 0.16849988868792043, 0.16849988868792043, 0.16849988868792043, 0.09080020440944414, 0.09080020440944414, 0.09080020440944414, 0.03690410622493834, 0.03690410622493834, 0.03690410622493834, 0.09135868256288215, 0.09135868256288215, 0.09135868256288215, 0.23470671519074726, 0.23470671519074726, 0.23470671519074726, 0.259810593542228, 0.259810593542228, 0.259810593542228, 0.04602897398537009, 0.04602897398537009, 0.04602897398537009, 0.20613934266855183, 0.20613934266855183, 0.20613934266855183, 0.5508895087622865, 0.5508895087622865, 0.5508895087622865, 0.576598858053466, 0.576598858053466, 0.576598858053466, 0.5617713598534195, 0.5617713598534195, 0.5617713598534195, 0.08497090815965602, 0.08497090815965602, 0.08497090815965602, 0.6909945890025044, 0.6909945890025044, 0.6909945890025044, 0.11397448445078973, 0.11397448445078973, 0.11397448445078973, 0.20631657944181792, 0.20631657944181792, 0.20631657944181792, 0.3738758387839328, 0.3738758387839328, 0.3738758387839328, 0.3031023751915761, 0.3031023751915761, 0.3031023751915761, 0.2645973609867317, 0.2645973609867317, 0.2645973609867317, 0.5013709517890637, 0.5013709517890637, 0.5013709517890637, 0.23055238808355039, 0.23055238808355039, 0.23055238808355039, 0.18995925653069434, 0.18995925653069434, 0.18995925653069434, 0.2651709909636295, 0.2651709909636295, 0.2651709909636295, 0.1834034337053415, 0.1834034337053415, 0.1834034337053415, 0.2164412794614322, 0.2164412794614322, 0.2164412794614322, 0.24299484166174712, 0.24299484166174712, 0.24299484166174712, 0.21220089750444904, 0.21220089750444904, 0.21220089750444904, 0.1838419247262515, 0.1838419247262515, 0.1838419247262515, 0.25205260177660815, 0.25205260177660815, 0.25205260177660815, 0.17643230325585357, 0.17643230325585357, 0.17643230325585357, 0.15653391360418212, 0.15653391360418212, 0.15653391360418212, 0.19686690781828597, 0.19686690781828597, 0.19686690781828597, 0.8670081251783647, 0.8670081251783647, 0.8670081251783647, 0.79296811355557, 0.79296811355557, 0.79296811355557, 0.20996650160763897, 0.20996650160763897, 0.20996650160763897, 0.21152964319239453, 0.21152964319239453, 0.21152964319239453, 0.22738865111222606, 0.22738865111222606, 0.22738865111222606, 0.2170374897325137, 0.2170374897325137, 0.2170374897325137, 0.1880374225323055, 0.1880374225323055, 0.1880374225323055, 0.08482665159317915, 0.08482665159317915, 0.08482665159317915, 0.10484284573668223, 0.10484284573668223, 0.10484284573668223, 0.07730302745706485, 0.07730302745706485, 0.07730302745706485]}, "mutation_prompt": null}
{"id": "7f90b602-9a0c-46cd-a3a0-d3d371793262", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.65\n        self.CR = 0.85\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F_adaptive = self.F * (0.9 + 0.2 * np.random.rand())  # Adaptive mutation scaling factor\n                mutant = np.clip(a + F_adaptive * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by incorporating adaptive mutation scaling and refined crossover strategies for improved convergence.", "configspace": "", "generation": 79, "fitness": 0.3233806178725956, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8849888391964731, 0.8849888391964731, 0.8849888391964731, 0.8851313955682725, 0.8851313955682725, 0.8851313955682725, 0.8897740481808409, 0.8897740481808409, 0.8897740481808409, 0.7517185847764633, 0.7517185847764633, 0.7517185847764633, 0.7597169507255405, 0.7597169507255405, 0.7597169507255405, 0.7642811007750767, 0.7642811007750767, 0.7642811007750767, 0.10914830801884223, 0.10914830801884223, 0.10914830801884223, 0.13956825466967626, 0.13956825466967626, 0.13956825466967626, 0.16118605739187275, 0.16118605739187275, 0.16118605739187275, 0.11361095081439054, 0.11361095081439054, 0.11361095081439054, 0.09065945780330453, 0.09065945780330453, 0.09065945780330453, 0.07496285904040256, 0.07496285904040256, 0.07496285904040256, 0.9468361156762857, 0.9468361156762857, 0.9468361156762857, 0.9576240662313413, 0.9576240662313413, 0.9576240662313413, 0.9425137572418515, 0.9425137572418515, 0.9425137572418515, 0.6833036190078994, 0.6833036190078994, 0.6833036190078994, 0.7257230165480358, 0.7257230165480358, 0.7257230165480358, 0.7535196101199112, 0.7535196101199112, 0.7535196101199112, 0.386155260112896, 0.386155260112896, 0.386155260112896, 0.21102901380822237, 0.21102901380822237, 0.21102901380822237, 0.1456824945212365, 0.1456824945212365, 0.1456824945212365, 0.2420264616415253, 0.2420264616415253, 0.2420264616415253, 0.16856348669241705, 0.16856348669241705, 0.16856348669241705, 0.24776568466767912, 0.24776568466767912, 0.24776568466767912, 0.13185174183915238, 0.13185174183915238, 0.13185174183915238, 0.24448360456237683, 0.24448360456237683, 0.24448360456237683, 0.24701290180548463, 0.24701290180548463, 0.24701290180548463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13952708167789518, 0.13952708167789518, 0.13952708167789518, 0.08558119719536006, 0.08558119719536006, 0.08558119719536006, 0.07928208377358137, 0.07928208377358137, 0.07928208377358137, 0.050236100750792545, 0.050236100750792545, 0.050236100750792545, 0.1551134630425124, 0.1551134630425124, 0.1551134630425124, 0.24668387084176913, 0.24668387084176913, 0.24668387084176913, 0.05257394421126915, 0.05257394421126915, 0.05257394421126915, 0.11914696995504404, 0.11914696995504404, 0.11914696995504404, 0.2032514481483534, 0.2032514481483534, 0.2032514481483534, 0.6371330343682553, 0.6371330343682553, 0.6371330343682553, 0.5471960204488908, 0.5471960204488908, 0.5471960204488908, 0.5763195130993359, 0.5763195130993359, 0.5763195130993359, 0.0824931280854364, 0.0824931280854364, 0.0824931280854364, 0.13080761169490507, 0.13080761169490507, 0.13080761169490507, 0.15635707806808474, 0.15635707806808474, 0.15635707806808474, 0.40422805389740757, 0.40422805389740757, 0.40422805389740757, 0.29803573195840183, 0.29803573195840183, 0.29803573195840183, 0.25212195958170547, 0.25212195958170547, 0.25212195958170547, 0.36603072216349286, 0.36603072216349286, 0.36603072216349286, 0.4204070464452586, 0.4204070464452586, 0.4204070464452586, 0.6786011817658593, 0.6786011817658593, 0.6786011817658593, 0.33905116849665606, 0.33905116849665606, 0.33905116849665606, 0.31169225287013813, 0.31169225287013813, 0.31169225287013813, 0.39363396035747245, 0.39363396035747245, 0.39363396035747245, 0.28866575332282096, 0.28866575332282096, 0.28866575332282096, 0.26988463139828434, 0.26988463139828434, 0.26988463139828434, 0.2443455845494914, 0.2443455845494914, 0.2443455845494914, 0.20400461943442982, 0.20400461943442982, 0.20400461943442982, 0.21233534010593713, 0.21233534010593713, 0.21233534010593713, 0.19126240722700527, 0.19126240722700527, 0.19126240722700527, 0.16367822780184893, 0.16367822780184893, 0.16367822780184893, 0.17153772913204846, 0.17153772913204846, 0.17153772913204846, 0.8679852127911298, 0.8679852127911298, 0.8679852127911298, 0.08256883769711387, 0.08256883769711387, 0.08256883769711387, 0.2101116214045372, 0.2101116214045372, 0.2101116214045372, 0.09398135528337292, 0.09398135528337292, 0.09398135528337292, 0.1837042356514187, 0.1837042356514187, 0.1837042356514187, 0.1897793678023677, 0.1897793678023677, 0.1897793678023677, 0.19863871606450034, 0.19863871606450034, 0.19863871606450034, 0.1101279069556842, 0.1101279069556842, 0.1101279069556842, 0.10662562561995836, 0.10662562561995836, 0.10662562561995836, 0.10952505024958648, 0.10952505024958648, 0.10952505024958648]}, "mutation_prompt": null}
{"id": "9c73cb12-b7ec-493a-8d86-58e0973eaee3", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.65\n        self.CR = 0.85\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Slightly reduced scale for precision\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by optimizing mutation strategy further and refining parameter tuning for improved performance.", "configspace": "", "generation": 80, "fitness": 0.36076845900490695, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8766077085016191, 0.8766077085016191, 0.8766077085016191, 0.8712158280968778, 0.8712158280968778, 0.8712158280968778, 0.8781882570488363, 0.8781882570488363, 0.8781882570488363, 0.7435960645297459, 0.7435960645297459, 0.7435960645297459, 0.7412663049893709, 0.7412663049893709, 0.7412663049893709, 0.636558697164235, 0.636558697164235, 0.636558697164235, 0.09510178940934033, 0.09510178940934033, 0.09510178940934033, 0.11704947809535293, 0.11704947809535293, 0.11704947809535293, 0.15924699695299627, 0.15924699695299627, 0.15924699695299627, 0.07769323506726977, 0.07769323506726977, 0.07769323506726977, 0.11612862051077899, 0.11612862051077899, 0.11612862051077899, 0.10859318163246257, 0.10859318163246257, 0.10859318163246257, 0.9294314125243509, 0.9294314125243509, 0.9294314125243509, 0.9180613070292895, 0.9180613070292895, 0.9180613070292895, 0.9392398168462692, 0.9392398168462692, 0.9392398168462692, 0.7105345307208788, 0.7105345307208788, 0.7105345307208788, 0.741404048172243, 0.741404048172243, 0.741404048172243, 0.7446902842063955, 0.7446902842063955, 0.7446902842063955, 0.8967490483748554, 0.8967490483748554, 0.8967490483748554, 0.3786343505531641, 0.3786343505531641, 0.3786343505531641, 0.8638668636443851, 0.8638668636443851, 0.8638668636443851, 0.2471313141055137, 0.2471313141055137, 0.2471313141055137, 0.22785731551109256, 0.22785731551109256, 0.22785731551109256, 0.220006461009988, 0.220006461009988, 0.220006461009988, 0.26194664090541087, 0.26194664090541087, 0.26194664090541087, 0.26594021627776354, 0.26594021627776354, 0.26594021627776354, 0.11700260004322338, 0.11700260004322338, 0.11700260004322338, 0.15519702317659156, 0.15519702317659156, 0.15519702317659156, 0.00034193680695737694, 0.00034193680695737694, 0.00034193680695737694, 0.08626819933984975, 0.08626819933984975, 0.08626819933984975, 0.1626406442060243, 0.1626406442060243, 0.1626406442060243, 0.19770329551162358, 0.19770329551162358, 0.19770329551162358, 0.14391145911970504, 0.14391145911970504, 0.14391145911970504, 0.20439152929594429, 0.20439152929594429, 0.20439152929594429, 0.1044708557836399, 0.1044708557836399, 0.1044708557836399, 0.10021013822909386, 0.10021013822909386, 0.10021013822909386, 0.37633053462801225, 0.37633053462801225, 0.37633053462801225, 0.22963158331076727, 0.22963158331076727, 0.22963158331076727, 0.24408496004173452, 0.24408496004173452, 0.24408496004173452, 0.5403580048242311, 0.5403580048242311, 0.5403580048242311, 0.5979682579320373, 0.5979682579320373, 0.5979682579320373, 0.6221750474255001, 0.6221750474255001, 0.6221750474255001, 0.13512640660442599, 0.13512640660442599, 0.13512640660442599, 0.1445865548916534, 0.1445865548916534, 0.1445865548916534, 0.14108395412851893, 0.14108395412851893, 0.14108395412851893, 0.18412792937388966, 0.18412792937388966, 0.18412792937388966, 0.35386601153826125, 0.35386601153826125, 0.35386601153826125, 0.15339179029123062, 0.15339179029123062, 0.15339179029123062, 0.2603124390894548, 0.2603124390894548, 0.2603124390894548, 0.5226158140493216, 0.5226158140493216, 0.5226158140493216, 0.27275117973531826, 0.27275117973531826, 0.27275117973531826, 0.22099848624845764, 0.22099848624845764, 0.22099848624845764, 0.4256281129318198, 0.4256281129318198, 0.4256281129318198, 0.2750244048787144, 0.2750244048787144, 0.2750244048787144, 0.26232298401305365, 0.26232298401305365, 0.26232298401305365, 0.30395957311650457, 0.30395957311650457, 0.30395957311650457, 0.2696465974271689, 0.2696465974271689, 0.2696465974271689, 0.20912822061110503, 0.20912822061110503, 0.20912822061110503, 0.17062720017254507, 0.17062720017254507, 0.17062720017254507, 0.1628663824749823, 0.1628663824749823, 0.1628663824749823, 0.8842984660248387, 0.8842984660248387, 0.8842984660248387, 0.1469760744134141, 0.1469760744134141, 0.1469760744134141, 0.21102101448608257, 0.21102101448608257, 0.21102101448608257, 0.8359956534003338, 0.8359956534003338, 0.8359956534003338, 0.16740506995075521, 0.16740506995075521, 0.16740506995075521, 0.7266259834005946, 0.7266259834005946, 0.7266259834005946, 0.19034626549582867, 0.19034626549582867, 0.19034626549582867, 0.20824890871866142, 0.20824890871866142, 0.20824890871866142, 0.18932373975684924, 0.18932373975684924, 0.18932373975684924, 0.09462069008518736, 0.09462069008518736, 0.09462069008518736, 0.09683842553594568, 0.09683842553594568, 0.09683842553594568, 0.1061388739529695, 0.1061388739529695, 0.1061388739529695]}, "mutation_prompt": null}
{"id": "edb47c25-8b86-4c43-a24a-253785322264", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.10, 0.10]  # Slightly tighter velocity bounds for better stability\n        self.F = 0.68  # Slightly increased DE scaling factor for better exploration\n        self.CR = 0.80  # Slightly reduced DE crossover probability for strategic diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.4, 1.6  # Slightly adjusted PSO coefficients for balanced influence\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Adjusted dynamic mutation for enhanced stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by refining velocity and mutation strategies with minimal changes to improve convergence.", "configspace": "", "generation": 81, "fitness": 0.3531380192233897, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8752559826314747, 0.8752559826314747, 0.8752559826314747, 0.8767470980960282, 0.8767470980960282, 0.8767470980960282, 0.8778064243698652, 0.8778064243698652, 0.8778064243698652, 0.7385787354293054, 0.7385787354293054, 0.7385787354293054, 0.7360529474305806, 0.7360529474305806, 0.7360529474305806, 0.7410511097168346, 0.7410511097168346, 0.7410511097168346, 0.1410324937154932, 0.1410324937154932, 0.1410324937154932, 0.15785135651841598, 0.15785135651841598, 0.15785135651841598, 0.1606951846721535, 0.1606951846721535, 0.1606951846721535, 0.10321716744944676, 0.10321716744944676, 0.10321716744944676, 0.11465888192552465, 0.11465888192552465, 0.11465888192552465, 0.09629102229534015, 0.09629102229534015, 0.09629102229534015, 0.960169854492889, 0.960169854492889, 0.960169854492889, 0.9134157576614453, 0.9134157576614453, 0.9134157576614453, 0.9434029902185583, 0.9434029902185583, 0.9434029902185583, 0.7081476784305948, 0.7081476784305948, 0.7081476784305948, 0.7490318303732675, 0.7490318303732675, 0.7490318303732675, 0.6981426604779459, 0.6981426604779459, 0.6981426604779459, 0.22314213522344906, 0.22314213522344906, 0.22314213522344906, 0.27401129039921834, 0.27401129039921834, 0.27401129039921834, 0.21790881374852822, 0.21790881374852822, 0.21790881374852822, 0.24611246395833386, 0.24611246395833386, 0.24611246395833386, 0.21615960601077122, 0.21615960601077122, 0.21615960601077122, 0.2427768919463038, 0.2427768919463038, 0.2427768919463038, 0.2308431667969144, 0.2308431667969144, 0.2308431667969144, 0.2505361670488272, 0.2505361670488272, 0.2505361670488272, 0.24418927803200874, 0.24418927803200874, 0.24418927803200874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018760102682350732, 0.018760102682350732, 0.018760102682350732, 0.10828712412588648, 0.10828712412588648, 0.10828712412588648, 0.19625294834856766, 0.19625294834856766, 0.19625294834856766, 0.1647147835904178, 0.1647147835904178, 0.1647147835904178, 0.04342425598123534, 0.04342425598123534, 0.04342425598123534, 0.26306723730119874, 0.26306723730119874, 0.26306723730119874, 0.11213933736296444, 0.11213933736296444, 0.11213933736296444, 0.05664245148962177, 0.05664245148962177, 0.05664245148962177, 0.038400071740990804, 0.038400071740990804, 0.038400071740990804, 0.17202074549396673, 0.17202074549396673, 0.17202074549396673, 0.5534569645521435, 0.5534569645521435, 0.5534569645521435, 0.5968554461271024, 0.5968554461271024, 0.5968554461271024, 0.5874916305918357, 0.5874916305918357, 0.5874916305918357, 0.14459007299224236, 0.14459007299224236, 0.14459007299224236, 0.6919461516346702, 0.6919461516346702, 0.6919461516346702, 0.07649111663976926, 0.07649111663976926, 0.07649111663976926, 0.6221299040602657, 0.6221299040602657, 0.6221299040602657, 0.33255301158770123, 0.33255301158770123, 0.33255301158770123, 0.20525161820548132, 0.20525161820548132, 0.20525161820548132, 0.5166517270956237, 0.5166517270956237, 0.5166517270956237, 0.31296532591719484, 0.31296532591719484, 0.31296532591719484, 0.5969879773914354, 0.5969879773914354, 0.5969879773914354, 0.21821862145930015, 0.21821862145930015, 0.21821862145930015, 0.23079395079419374, 0.23079395079419374, 0.23079395079419374, 0.33684114407990284, 0.33684114407990284, 0.33684114407990284, 0.21136000489957674, 0.21136000489957674, 0.21136000489957674, 0.21015784820383676, 0.21015784820383676, 0.21015784820383676, 0.21309710723830944, 0.21309710723830944, 0.21309710723830944, 0.18030873576007833, 0.18030873576007833, 0.18030873576007833, 0.20847724199494877, 0.20847724199494877, 0.20847724199494877, 0.1961046964833224, 0.1961046964833224, 0.1961046964833224, 0.8557904045303237, 0.8557904045303237, 0.8557904045303237, 0.9117027032365917, 0.9117027032365917, 0.9117027032365917, 0.17106710151466853, 0.17106710151466853, 0.17106710151466853, 0.7078010314181404, 0.7078010314181404, 0.7078010314181404, 0.5471920300247124, 0.5471920300247124, 0.5471920300247124, 0.2123128196297892, 0.2123128196297892, 0.2123128196297892, 0.19679649398319254, 0.19679649398319254, 0.19679649398319254, 0.18121227929491324, 0.18121227929491324, 0.18121227929491324, 0.1844420182983535, 0.1844420182983535, 0.1844420182983535, 0.10819293115091055, 0.10819293115091055, 0.10819293115091055, 0.10541546937484314, 0.10541546937484314, 0.10541546937484314, 0.09014375673197006, 0.09014375673197006, 0.09014375673197006]}, "mutation_prompt": null}
{"id": "e533a494-3b16-45f0-b652-da732aada219", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]  # Adjusted for finer velocity control\n        self.F = 0.7  # Modified for better exploration/exploitation balance\n        self.CR = 0.9  # Increased for enhanced diversity\n        self.w_max, self.w_min = 0.8, 0.3  # Adjusted inertia weight for improved convergence\n        self.c1, self.c2 = 1.4, 1.6  # Fine-tuned cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Slight reduction for dynamic stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by tuning parameters for precise control of exploration and exploitation balance.", "configspace": "", "generation": 82, "fitness": 0.3511641292170367, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8620912911706584, 0.8620912911706584, 0.8620912911706584, 0.8511803105794403, 0.8511803105794403, 0.8511803105794403, 0.8455205198454712, 0.8455205198454712, 0.8455205198454712, 0.7048655607641376, 0.7048655607641376, 0.7048655607641376, 0.7046368700355632, 0.7046368700355632, 0.7046368700355632, 0.7090907420485272, 0.7090907420485272, 0.7090907420485272, 0.15334716844431773, 0.15334716844431773, 0.15334716844431773, 0.1269254433168724, 0.1269254433168724, 0.1269254433168724, 0.17780403825630275, 0.17780403825630275, 0.17780403825630275, 0.10851951212803412, 0.10851951212803412, 0.10851951212803412, 0.08094277035558939, 0.08094277035558939, 0.08094277035558939, 0.11908500109380205, 0.11908500109380205, 0.11908500109380205, 0.9233121878673782, 0.9233121878673782, 0.9233121878673782, 0.9557490244740632, 0.9557490244740632, 0.9557490244740632, 0.9628518360026022, 0.9628518360026022, 0.9628518360026022, 0.6254633383607997, 0.6254633383607997, 0.6254633383607997, 0.6850011453936474, 0.6850011453936474, 0.6850011453936474, 0.7267247077256349, 0.7267247077256349, 0.7267247077256349, 0.22720233886581498, 0.22720233886581498, 0.22720233886581498, 0.9025936102028757, 0.9025936102028757, 0.9025936102028757, 0.7474931695976186, 0.7474931695976186, 0.7474931695976186, 0.24535089932337162, 0.24535089932337162, 0.24535089932337162, 0.2659664744779979, 0.2659664744779979, 0.2659664744779979, 0.24983513045586647, 0.24983513045586647, 0.24983513045586647, 0.33698852644764754, 0.33698852644764754, 0.33698852644764754, 0.2620355629626643, 0.2620355629626643, 0.2620355629626643, 0.263005987116397, 0.263005987116397, 0.263005987116397, 0.1372732739290008, 0.1372732739290008, 0.1372732739290008, 0.11885924915123647, 0.11885924915123647, 0.11885924915123647, 0.022224622922023318, 0.022224622922023318, 0.022224622922023318, 0.18208574298673563, 0.18208574298673563, 0.18208574298673563, 0.09796331785208312, 0.09796331785208312, 0.09796331785208312, 0.1617547275091734, 0.1617547275091734, 0.1617547275091734, 0.07883009845284783, 0.07883009845284783, 0.07883009845284783, 0.13847017485647573, 0.13847017485647573, 0.13847017485647573, 0.09479568279293382, 0.09479568279293382, 0.09479568279293382, 0.04194641628250284, 0.04194641628250284, 0.04194641628250284, 0.22672748612231586, 0.22672748612231586, 0.22672748612231586, 0.11844916271010586, 0.11844916271010586, 0.11844916271010586, 0.53795016945435, 0.53795016945435, 0.53795016945435, 0.5991899957782807, 0.5991899957782807, 0.5991899957782807, 0.5770002972039111, 0.5770002972039111, 0.5770002972039111, 0.11088200540101734, 0.11088200540101734, 0.11088200540101734, 0.12201044150858598, 0.12201044150858598, 0.12201044150858598, 0.1534314240662894, 0.1534314240662894, 0.1534314240662894, 0.3939824971462609, 0.3939824971462609, 0.3939824971462609, 0.3168191907167799, 0.3168191907167799, 0.3168191907167799, 0.22344000328695668, 0.22344000328695668, 0.22344000328695668, 0.4199734094010601, 0.4199734094010601, 0.4199734094010601, 0.5761887542030095, 0.5761887542030095, 0.5761887542030095, 0.5392679224987977, 0.5392679224987977, 0.5392679224987977, 0.31586729775967004, 0.31586729775967004, 0.31586729775967004, 0.2509116874009849, 0.2509116874009849, 0.2509116874009849, 0.24311546833513453, 0.24311546833513453, 0.24311546833513453, 0.20141488230451887, 0.20141488230451887, 0.20141488230451887, 0.2646118486393172, 0.2646118486393172, 0.2646118486393172, 0.24471313576130405, 0.24471313576130405, 0.24471313576130405, 0.18463846487854396, 0.18463846487854396, 0.18463846487854396, 0.1944358000054739, 0.1944358000054739, 0.1944358000054739, 0.1776047520208922, 0.1776047520208922, 0.1776047520208922, 0.9096845451728217, 0.9096845451728217, 0.9096845451728217, 0.1304092464287332, 0.1304092464287332, 0.1304092464287332, 0.16430330875744603, 0.16430330875744603, 0.16430330875744603, 0.8418402077123861, 0.8418402077123861, 0.8418402077123861, 0.20715521287485517, 0.20715521287485517, 0.20715521287485517, 0.21276502806049635, 0.21276502806049635, 0.21276502806049635, 0.20891527059222714, 0.20891527059222714, 0.20891527059222714, 0.190828864101232, 0.190828864101232, 0.190828864101232, 0.21740700567668314, 0.21740700567668314, 0.21740700567668314, 0.10555352964138365, 0.10555352964138365, 0.10555352964138365, 0.103643359613115, 0.103643359613115, 0.103643359613115, 0.10089915434359686, 0.10089915434359686, 0.10089915434359686]}, "mutation_prompt": null}
{"id": "e6f3e3aa-3abf-4102-9874-06632f262bbc", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.65\n        self.CR = 0.85\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            mutation_adjustment = 0.08 * (1 - evaluations / self.budget)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=mutation_adjustment)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by refining the inertia weight adaptation and introducing a dynamic strategy for mutation rate adjustment.", "configspace": "", "generation": 83, "fitness": 0.36427037060294803, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8911274182775112, 0.8911274182775112, 0.8911274182775112, 0.8800113741914463, 0.8800113741914463, 0.8800113741914463, 0.8808555939227317, 0.8808555939227317, 0.8808555939227317, 0.7504338035623955, 0.7504338035623955, 0.7504338035623955, 0.7529487314625268, 0.7529487314625268, 0.7529487314625268, 0.758217961374486, 0.758217961374486, 0.758217961374486, 0.15791741314136032, 0.15791741314136032, 0.15791741314136032, 0.15860506639517002, 0.15860506639517002, 0.15860506639517002, 0.1869010354057239, 0.1869010354057239, 0.1869010354057239, 0.10782857954224823, 0.10782857954224823, 0.10782857954224823, 0.11043704223042039, 0.11043704223042039, 0.11043704223042039, 0.13204008193320538, 0.13204008193320538, 0.13204008193320538, 0.9293082915083414, 0.9293082915083414, 0.9293082915083414, 0.9427802602026613, 0.9427802602026613, 0.9427802602026613, 0.9413631681980538, 0.9413631681980538, 0.9413631681980538, 0.726960440703793, 0.726960440703793, 0.726960440703793, 0.7542928644713691, 0.7542928644713691, 0.7542928644713691, 0.7326927379950552, 0.7326927379950552, 0.7326927379950552, 0.9051135412662749, 0.9051135412662749, 0.9051135412662749, 0.27610322367393003, 0.27610322367393003, 0.27610322367393003, 0.8933941435621312, 0.8933941435621312, 0.8933941435621312, 0.28303575236542133, 0.28303575236542133, 0.28303575236542133, 0.20810506941856888, 0.20810506941856888, 0.20810506941856888, 0.3098929699003332, 0.3098929699003332, 0.3098929699003332, 0.2378192950619712, 0.2378192950619712, 0.2378192950619712, 0.2740350958062625, 0.2740350958062625, 0.2740350958062625, 0.2862965966602775, 0.2862965966602775, 0.2862965966602775, 0.0651158359253099, 0.0651158359253099, 0.0651158359253099, 0.054656915132155315, 0.054656915132155315, 0.054656915132155315, 0.14654738639515452, 0.14654738639515452, 0.14654738639515452, 0.11854991171914375, 0.11854991171914375, 0.11854991171914375, 0.22048687151419788, 0.22048687151419788, 0.22048687151419788, 0.13729896995511626, 0.13729896995511626, 0.13729896995511626, 0.25680523705242664, 0.25680523705242664, 0.25680523705242664, 0.12890693858147173, 0.12890693858147173, 0.12890693858147173, 0.10374428321456453, 0.10374428321456453, 0.10374428321456453, 0.15113979015501933, 0.15113979015501933, 0.15113979015501933, 0.1816485135758258, 0.1816485135758258, 0.1816485135758258, 0.1220812263604556, 0.1220812263604556, 0.1220812263604556, 0.561751886320613, 0.561751886320613, 0.561751886320613, 0.5477142381685145, 0.5477142381685145, 0.5477142381685145, 0.6053550445144287, 0.6053550445144287, 0.6053550445144287, 0.11004913525665938, 0.11004913525665938, 0.11004913525665938, 0.18456987655235724, 0.18456987655235724, 0.18456987655235724, 0.0773152411748137, 0.0773152411748137, 0.0773152411748137, 0.14477490815428173, 0.14477490815428173, 0.14477490815428173, 0.2358577590977694, 0.2358577590977694, 0.2358577590977694, 0.23311811183586573, 0.23311811183586573, 0.23311811183586573, 0.2348143895375957, 0.2348143895375957, 0.2348143895375957, 0.7150400263577357, 0.7150400263577357, 0.7150400263577357, 0.2630481876764805, 0.2630481876764805, 0.2630481876764805, 0.12841059176572267, 0.12841059176572267, 0.12841059176572267, 0.23316315488360795, 0.23316315488360795, 0.23316315488360795, 0.2630143360435837, 0.2630143360435837, 0.2630143360435837, 0.23314287120662125, 0.23314287120662125, 0.23314287120662125, 0.278431633560423, 0.278431633560423, 0.278431633560423, 0.20540865377029627, 0.20540865377029627, 0.20540865377029627, 0.1936229362536801, 0.1936229362536801, 0.1936229362536801, 0.21314404616538762, 0.21314404616538762, 0.21314404616538762, 0.20760548713940374, 0.20760548713940374, 0.20760548713940374, 0.910579475030527, 0.910579475030527, 0.910579475030527, 0.19723887129871853, 0.19723887129871853, 0.19723887129871853, 0.2114458810211366, 0.2114458810211366, 0.2114458810211366, 0.9184451991684862, 0.9184451991684862, 0.9184451991684862, 0.8765451012753711, 0.8765451012753711, 0.8765451012753711, 0.2121628785676306, 0.2121628785676306, 0.2121628785676306, 0.1843591300849171, 0.1843591300849171, 0.1843591300849171, 0.21167883487193684, 0.21167883487193684, 0.21167883487193684, 0.2030421948876706, 0.2030421948876706, 0.2030421948876706, 0.10037704649302615, 0.10037704649302615, 0.10037704649302615, 0.07168273708222628, 0.07168273708222628, 0.07168273708222628, 0.10505738638025797, 0.10505738638025797, 0.10505738638025797]}, "mutation_prompt": null}
{"id": "b1dbe71c-0f07-4226-8fe1-c87c2264c2c9", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "6e839ee0-da19-498a-ade8-c6cf5f3fd407", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "f3d9afc3-d56b-4bd2-86b5-49140ddca1e2", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F_adaptive = self.F * (1 - evaluations / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(a + F_adaptive * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with adaptive mutation scaling for improved search efficiency.", "configspace": "", "generation": 86, "fitness": 0.34414863767639853, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8858774648525176, 0.8858774648525176, 0.8858774648525176, 0.8759537918461311, 0.8759537918461311, 0.8759537918461311, 0.8716153998164937, 0.8716153998164937, 0.8716153998164937, 0.7672986024978963, 0.7672986024978963, 0.7672986024978963, 0.7596696844809898, 0.7596696844809898, 0.7596696844809898, 0.7567116621548176, 0.7567116621548176, 0.7567116621548176, 0.12315101249916094, 0.12315101249916094, 0.12315101249916094, 0.12335809679719789, 0.12335809679719789, 0.12335809679719789, 0.15913993208935262, 0.15913993208935262, 0.15913993208935262, 0.09539621111339092, 0.09539621111339092, 0.09539621111339092, 0.09481228638210126, 0.09481228638210126, 0.09481228638210126, 0.13276686836273222, 0.13276686836273222, 0.13276686836273222, 0.9175021269554632, 0.9175021269554632, 0.9175021269554632, 0.9393026813321365, 0.9393026813321365, 0.9393026813321365, 0.9361956173683834, 0.9361956173683834, 0.9361956173683834, 0.7781558799550541, 0.7781558799550541, 0.7781558799550541, 0.7505562152638687, 0.7505562152638687, 0.7505562152638687, 0.773429121639782, 0.773429121639782, 0.773429121639782, 0.9002196266442127, 0.9002196266442127, 0.9002196266442127, 0.22074467745069404, 0.22074467745069404, 0.22074467745069404, 0.907978647859814, 0.907978647859814, 0.907978647859814, 0.1336370923054928, 0.1336370923054928, 0.1336370923054928, 0.1237992460103593, 0.1237992460103593, 0.1237992460103593, 0.2212733799819303, 0.2212733799819303, 0.2212733799819303, 0.10964898840487569, 0.10964898840487569, 0.10964898840487569, 0.24745960525896438, 0.24745960525896438, 0.24745960525896438, 0.2796161363198223, 0.2796161363198223, 0.2796161363198223, 0.0161747697300747, 0.0161747697300747, 0.0161747697300747, 0.013524811239888579, 0.013524811239888579, 0.013524811239888579, 0.015857577303309833, 0.015857577303309833, 0.015857577303309833, 0.11440254590786658, 0.11440254590786658, 0.11440254590786658, 0.10047177550131159, 0.10047177550131159, 0.10047177550131159, 0.14891535037011816, 0.14891535037011816, 0.14891535037011816, 0.37494350451932545, 0.37494350451932545, 0.37494350451932545, 0.15792971341996032, 0.15792971341996032, 0.15792971341996032, 0.10700240340061717, 0.10700240340061717, 0.10700240340061717, 0.13178318358626895, 0.13178318358626895, 0.13178318358626895, 0.07470120138532643, 0.07470120138532643, 0.07470120138532643, 0.09592672480587028, 0.09592672480587028, 0.09592672480587028, 0.5768171993891471, 0.5768171993891471, 0.5768171993891471, 0.5493694419755533, 0.5493694419755533, 0.5493694419755533, 0.6018932885739072, 0.6018932885739072, 0.6018932885739072, 0.09660864389390877, 0.09660864389390877, 0.09660864389390877, 0.14454668675401317, 0.14454668675401317, 0.14454668675401317, 0.13163270980822095, 0.13163270980822095, 0.13163270980822095, 0.25972105838722814, 0.25972105838722814, 0.25972105838722814, 0.32472237172591367, 0.32472237172591367, 0.32472237172591367, 0.17382590732448067, 0.17382590732448067, 0.17382590732448067, 0.2324249009431515, 0.2324249009431515, 0.2324249009431515, 0.4986206538230433, 0.4986206538230433, 0.4986206538230433, 0.38212962230207226, 0.38212962230207226, 0.38212962230207226, 0.2961370330117149, 0.2961370330117149, 0.2961370330117149, 0.22170840143520198, 0.22170840143520198, 0.22170840143520198, 0.2833835248823463, 0.2833835248823463, 0.2833835248823463, 0.2747834066515994, 0.2747834066515994, 0.2747834066515994, 0.25726305014215267, 0.25726305014215267, 0.25726305014215267, 0.23151564665030733, 0.23151564665030733, 0.23151564665030733, 0.17031586625732598, 0.17031586625732598, 0.17031586625732598, 0.17242829149210015, 0.17242829149210015, 0.17242829149210015, 0.22717664948442295, 0.22717664948442295, 0.22717664948442295, 0.9058935369191249, 0.9058935369191249, 0.9058935369191249, 0.14667638923129744, 0.14667638923129744, 0.14667638923129744, 0.21159349197474708, 0.21159349197474708, 0.21159349197474708, 0.8770849636660449, 0.8770849636660449, 0.8770849636660449, 0.16602919741552558, 0.16602919741552558, 0.16602919741552558, 0.21196021884989524, 0.21196021884989524, 0.21196021884989524, 0.20767854236957994, 0.20767854236957994, 0.20767854236957994, 0.20056281751866067, 0.20056281751866067, 0.20056281751866067, 0.19540749129731094, 0.19540749129731094, 0.19540749129731094, 0.11065462890621225, 0.11065462890621225, 0.11065462890621225, 0.10762952957382821, 0.10762952957382821, 0.10762952957382821, 0.09360313325708214, 0.09360313325708214, 0.09360313325708214]}, "mutation_prompt": null}
{"id": "4a7cd1a4-4fce-4188-ae47-e8597c443747", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.67  # Slightly increased DE scaling factor for improved exploration\n        self.CR = 0.84  # Decreased DE crossover probability for exploitation balance\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.4, 1.6  # Slightly adjusted PSO coefficients for better balance\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refinement of HybridDEPSO by tweaking control parameters and logic flow to precisely achieve a 2% code modification for enhanced optimization performance.", "configspace": "", "generation": 87, "fitness": 0.33323453866511565, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8890434336391427, 0.8890434336391427, 0.8890434336391427, 0.8842389090200763, 0.8842389090200763, 0.8842389090200763, 0.8764535692955819, 0.8764535692955819, 0.8764535692955819, 0.7515413329274148, 0.7515413329274148, 0.7515413329274148, 0.7558196475162305, 0.7558196475162305, 0.7558196475162305, 0.5734675882407214, 0.5734675882407214, 0.5734675882407214, 0.13198934699307519, 0.13198934699307519, 0.13198934699307519, 0.1578600742362125, 0.1578600742362125, 0.1578600742362125, 0.14635415444353894, 0.14635415444353894, 0.14635415444353894, 0.11618783641371533, 0.11618783641371533, 0.11618783641371533, 0.06361735493274157, 0.06361735493274157, 0.06361735493274157, 0.06460893923232014, 0.06460893923232014, 0.06460893923232014, 0.9381876702388531, 0.9381876702388531, 0.9381876702388531, 0.9424041513850926, 0.9424041513850926, 0.9424041513850926, 0.9470654470637162, 0.9470654470637162, 0.9470654470637162, 0.7593245779713704, 0.7593245779713704, 0.7593245779713704, 0.7362110976516535, 0.7362110976516535, 0.7362110976516535, 0.7201275445832689, 0.7201275445832689, 0.7201275445832689, 0.22474872300388737, 0.22474872300388737, 0.22474872300388737, 0.27709962701571256, 0.27709962701571256, 0.27709962701571256, 0.2340988073839717, 0.2340988073839717, 0.2340988073839717, 0.24360515202909339, 0.24360515202909339, 0.24360515202909339, 0.12746009469897612, 0.12746009469897612, 0.12746009469897612, 0.13300265254401544, 0.13300265254401544, 0.13300265254401544, 0.23801707077969692, 0.23801707077969692, 0.23801707077969692, 0.25785225856110217, 0.25785225856110217, 0.25785225856110217, 0.26872350761883357, 0.26872350761883357, 0.26872350761883357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027674318650958263, 0.027674318650958263, 0.027674318650958263, 0.09530714795786899, 0.09530714795786899, 0.09530714795786899, 0.12477403932268738, 0.12477403932268738, 0.12477403932268738, 0.1497135091760149, 0.1497135091760149, 0.1497135091760149, 0.13701104725006774, 0.13701104725006774, 0.13701104725006774, 0.36693798375324016, 0.36693798375324016, 0.36693798375324016, 0.2867409582226901, 0.2867409582226901, 0.2867409582226901, 0.17366948292632955, 0.17366948292632955, 0.17366948292632955, 0.05800677206591753, 0.05800677206591753, 0.05800677206591753, 0.18117914719055106, 0.18117914719055106, 0.18117914719055106, 0.1635477377212674, 0.1635477377212674, 0.1635477377212674, 0.5578003612284662, 0.5578003612284662, 0.5578003612284662, 0.6242230883176658, 0.6242230883176658, 0.6242230883176658, 0.5859669281535828, 0.5859669281535828, 0.5859669281535828, 0.1232666657418151, 0.1232666657418151, 0.1232666657418151, 0.13252816241071141, 0.13252816241071141, 0.13252816241071141, 0.11159661561782619, 0.11159661561782619, 0.11159661561782619, 0.31799613040288977, 0.31799613040288977, 0.31799613040288977, 0.39403025329150987, 0.39403025329150987, 0.39403025329150987, 0.1740180001142635, 0.1740180001142635, 0.1740180001142635, 0.5219297422452386, 0.5219297422452386, 0.5219297422452386, 0.6126074618751183, 0.6126074618751183, 0.6126074618751183, 0.22951518356436462, 0.22951518356436462, 0.22951518356436462, 0.24223224523089026, 0.24223224523089026, 0.24223224523089026, 0.36217366739138956, 0.36217366739138956, 0.36217366739138956, 0.23169589725887385, 0.23169589725887385, 0.23169589725887385, 0.23317595132324254, 0.23317595132324254, 0.23317595132324254, 0.2280992107211719, 0.2280992107211719, 0.2280992107211719, 0.24965053507702983, 0.24965053507702983, 0.24965053507702983, 0.20790671006090755, 0.20790671006090755, 0.20790671006090755, 0.18632078522509254, 0.18632078522509254, 0.18632078522509254, 0.18055927090431667, 0.18055927090431667, 0.18055927090431667, 0.8935038279048131, 0.8935038279048131, 0.8935038279048131, 0.18511923931889962, 0.18511923931889962, 0.18511923931889962, 0.2092679935945846, 0.2092679935945846, 0.2092679935945846, 0.1671261602335571, 0.1671261602335571, 0.1671261602335571, 0.7011790595752545, 0.7011790595752545, 0.7011790595752545, 0.21029219832924595, 0.21029219832924595, 0.21029219832924595, 0.1972259166291176, 0.1972259166291176, 0.1972259166291176, 0.18271894771395358, 0.18271894771395358, 0.18271894771395358, 0.1914131717918538, 0.1914131717918538, 0.1914131717918538, 0.11085750215168877, 0.11085750215168877, 0.11085750215168877, 0.10829528795559595, 0.10829528795559595, 0.10829528795559595, 0.10482189887578697, 0.10482189887578697, 0.10482189887578697]}, "mutation_prompt": null}
{"id": "0e12a291-796e-423b-b861-ce79851304c9", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.10, 0.10]  # Adjusted velocity bounds for finer control\n        self.F = 0.67  # Slightly increased DE scaling factor for better exploration\n        self.CR = 0.83  # Slightly reduced DE crossover probability for stability\n        self.w_max, self.w_min = 0.6, 0.4  # Adjusted PSO inertia weights for dynamic adaptation\n        self.c1, self.c2 = 1.6, 1.4  # Fine-tuned PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia updated\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Adjusted dynamic mutation for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with subtle improvements in parameter tuning for optimal convergence performance.", "configspace": "", "generation": 88, "fitness": 0.36346820723465134, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8878890664500863, 0.8878890664500863, 0.8878890664500863, 0.8871857109645489, 0.8871857109645489, 0.8871857109645489, 0.8963551148299458, 0.8963551148299458, 0.8963551148299458, 0.7785986172909761, 0.7785986172909761, 0.7785986172909761, 0.7668784363369363, 0.7668784363369363, 0.7668784363369363, 0.7522611058164985, 0.7522611058164985, 0.7522611058164985, 0.11286700556947471, 0.11286700556947471, 0.11286700556947471, 0.1578876560709883, 0.1578876560709883, 0.1578876560709883, 0.11043289774262155, 0.11043289774262155, 0.11043289774262155, 0.1209721347842525, 0.1209721347842525, 0.1209721347842525, 0.1093990502219283, 0.1093990502219283, 0.1093990502219283, 0.10800721179078387, 0.10800721179078387, 0.10800721179078387, 0.9496580190096158, 0.9496580190096158, 0.9496580190096158, 0.9399331128590319, 0.9399331128590319, 0.9399331128590319, 0.9407337838804719, 0.9407337838804719, 0.9407337838804719, 0.7729562437380859, 0.7729562437380859, 0.7729562437380859, 0.7046301448142094, 0.7046301448142094, 0.7046301448142094, 0.6802403869916264, 0.6802403869916264, 0.6802403869916264, 0.34379732554523146, 0.34379732554523146, 0.34379732554523146, 0.27665568680355834, 0.27665568680355834, 0.27665568680355834, 0.23325055357871294, 0.23325055357871294, 0.23325055357871294, 0.13242338561798028, 0.13242338561798028, 0.13242338561798028, 0.2019464389953025, 0.2019464389953025, 0.2019464389953025, 0.23614855171680527, 0.23614855171680527, 0.23614855171680527, 0.20725721314353063, 0.20725721314353063, 0.20725721314353063, 0.2782285048040891, 0.2782285048040891, 0.2782285048040891, 0.286323498469941, 0.286323498469941, 0.286323498469941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009175245506857554, 0.009175245506857554, 0.009175245506857554, 0.10457654588250354, 0.10457654588250354, 0.10457654588250354, 0.07985555479792783, 0.07985555479792783, 0.07985555479792783, 0.13682480672829878, 0.13682480672829878, 0.13682480672829878, 0.1346455895968084, 0.1346455895968084, 0.1346455895968084, 0.4575627872688769, 0.4575627872688769, 0.4575627872688769, 0.0845493538505383, 0.0845493538505383, 0.0845493538505383, 0.08066148099778725, 0.08066148099778725, 0.08066148099778725, 0.24993299025518345, 0.24993299025518345, 0.24993299025518345, 0.31765202935446224, 0.31765202935446224, 0.31765202935446224, 0.09634729804992381, 0.09634729804992381, 0.09634729804992381, 0.5521517384232028, 0.5521517384232028, 0.5521517384232028, 0.571828539442639, 0.571828539442639, 0.571828539442639, 0.5993219688602047, 0.5993219688602047, 0.5993219688602047, 0.13376378450112025, 0.13376378450112025, 0.13376378450112025, 0.13952239795377464, 0.13952239795377464, 0.13952239795377464, 0.071865665832898, 0.071865665832898, 0.071865665832898, 0.21698961295163177, 0.21698961295163177, 0.21698961295163177, 0.30314027100869056, 0.30314027100869056, 0.30314027100869056, 0.19138531356039457, 0.19138531356039457, 0.19138531356039457, 0.4416295001627949, 0.4416295001627949, 0.4416295001627949, 0.5717841615715931, 0.5717841615715931, 0.5717841615715931, 0.6104979444984122, 0.6104979444984122, 0.6104979444984122, 0.1936523964399539, 0.1936523964399539, 0.1936523964399539, 0.3178747240572791, 0.3178747240572791, 0.3178747240572791, 0.20906091637132462, 0.20906091637132462, 0.20906091637132462, 0.25569762090255377, 0.25569762090255377, 0.25569762090255377, 0.2560034484728946, 0.2560034484728946, 0.2560034484728946, 0.2176792949558064, 0.2176792949558064, 0.2176792949558064, 0.18623681842394058, 0.18623681842394058, 0.18623681842394058, 0.22663548498690267, 0.22663548498690267, 0.22663548498690267, 0.18673616087377654, 0.18673616087377654, 0.18673616087377654, 0.8702795661826671, 0.8702795661826671, 0.8702795661826671, 0.8659499244368367, 0.8659499244368367, 0.8659499244368367, 0.8780453847496572, 0.8780453847496572, 0.8780453847496572, 0.5256663958064662, 0.5256663958064662, 0.5256663958064662, 0.8110019270782258, 0.8110019270782258, 0.8110019270782258, 0.20802949851863017, 0.20802949851863017, 0.20802949851863017, 0.21580560630354284, 0.21580560630354284, 0.21580560630354284, 0.2170485165488686, 0.2170485165488686, 0.2170485165488686, 0.18558355095664947, 0.18558355095664947, 0.18558355095664947, 0.09120852088938669, 0.09120852088938669, 0.09120852088938669, 0.1077019293339756, 0.1077019293339756, 0.1077019293339756, 0.11513179571179921, 0.11513179571179921, 0.11513179571179921]}, "mutation_prompt": null}
{"id": "1e992f98-df53-40f5-9df0-27d286119c00", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.1, 5.1]  # Slightly expanded search space for exploration\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.68  # Adjusted DE scaling factor for better balance\n        self.CR = 0.85\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by refining mutation scaling and optimizing search space boundaries for improved performance.", "configspace": "", "generation": 89, "fitness": 0.3430596842810462, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8795261314006393, 0.8795261314006393, 0.8795261314006393, 0.8837271536934973, 0.8837271536934973, 0.8837271536934973, 0.8771559498197778, 0.8771559498197778, 0.8771559498197778, 0.7513098500627714, 0.7513098500627714, 0.7513098500627714, 0.7453890904026437, 0.7453890904026437, 0.7453890904026437, 0.7421383570892721, 0.7421383570892721, 0.7421383570892721, 0.11647173535416133, 0.11647173535416133, 0.11647173535416133, 0.1859874896070498, 0.1859874896070498, 0.1859874896070498, 0.15793617182172603, 0.15793617182172603, 0.15793617182172603, 0.08884194914192323, 0.08884194914192323, 0.08884194914192323, 0.12146367635948174, 0.12146367635948174, 0.12146367635948174, 0.0941811046154124, 0.0941811046154124, 0.0941811046154124, 0.9382881840355546, 0.9382881840355546, 0.9382881840355546, 0.9515214596480764, 0.9515214596480764, 0.9515214596480764, 0.94422407075927, 0.94422407075927, 0.94422407075927, 0.7473692859803337, 0.7473692859803337, 0.7473692859803337, 0.777133366948341, 0.777133366948341, 0.777133366948341, 0.7388642475002145, 0.7388642475002145, 0.7388642475002145, 0.21307571873924502, 0.21307571873924502, 0.21307571873924502, 0.3573445389536697, 0.3573445389536697, 0.3573445389536697, 0.24317303249036326, 0.24317303249036326, 0.24317303249036326, 0.22761490590219235, 0.22761490590219235, 0.22761490590219235, 0.26547985858752277, 0.26547985858752277, 0.26547985858752277, 0.23337366803621673, 0.23337366803621673, 0.23337366803621673, 0.22678597702606007, 0.22678597702606007, 0.22678597702606007, 0.22267794662970775, 0.22267794662970775, 0.22267794662970775, 0.27667499490256486, 0.27667499490256486, 0.27667499490256486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06465660553585384, 0.06465660553585384, 0.06465660553585384, 0.007190278962161734, 0.007190278962161734, 0.007190278962161734, 0.170477890700243, 0.170477890700243, 0.170477890700243, 0.1508289913669001, 0.1508289913669001, 0.1508289913669001, 0.12600373642535578, 0.12600373642535578, 0.12600373642535578, 0.05904344698137831, 0.05904344698137831, 0.05904344698137831, 0.07994068196935056, 0.07994068196935056, 0.07994068196935056, 0.15736158991126958, 0.15736158991126958, 0.15736158991126958, 0.182434356993176, 0.182434356993176, 0.182434356993176, 0.051808546110685194, 0.051808546110685194, 0.051808546110685194, 0.27538584509350916, 0.27538584509350916, 0.27538584509350916, 0.5670974989560876, 0.5670974989560876, 0.5670974989560876, 0.5645227487088583, 0.5645227487088583, 0.5645227487088583, 0.5920757970247166, 0.5920757970247166, 0.5920757970247166, 0.18098452521764208, 0.18098452521764208, 0.18098452521764208, 0.12234071569738103, 0.12234071569738103, 0.12234071569738103, 0.15634394569144916, 0.15634394569144916, 0.15634394569144916, 0.1540679302147151, 0.1540679302147151, 0.1540679302147151, 0.1926925823625757, 0.1926925823625757, 0.1926925823625757, 0.14823118305882477, 0.14823118305882477, 0.14823118305882477, 0.3752107967393573, 0.3752107967393573, 0.3752107967393573, 0.36828605960068883, 0.36828605960068883, 0.36828605960068883, 0.6126511422138616, 0.6126511422138616, 0.6126511422138616, 0.2399429436003404, 0.2399429436003404, 0.2399429436003404, 0.30647087458341615, 0.30647087458341615, 0.30647087458341615, 0.4101801580689166, 0.4101801580689166, 0.4101801580689166, 0.22714182806675276, 0.22714182806675276, 0.22714182806675276, 0.2270649983338987, 0.2270649983338987, 0.2270649983338987, 0.24913620498561428, 0.24913620498561428, 0.24913620498561428, 0.19433813816270828, 0.19433813816270828, 0.19433813816270828, 0.21551546648432518, 0.21551546648432518, 0.21551546648432518, 0.19728459296272405, 0.19728459296272405, 0.19728459296272405, 0.8908519349580427, 0.8908519349580427, 0.8908519349580427, 0.8904539287922761, 0.8904539287922761, 0.8904539287922761, 0.21011095790661471, 0.21011095790661471, 0.21011095790661471, 0.7324234056543737, 0.7324234056543737, 0.7324234056543737, 0.2043659893105031, 0.2043659893105031, 0.2043659893105031, 0.2088880678969608, 0.2088880678969608, 0.2088880678969608, 0.19067869555550765, 0.19067869555550765, 0.19067869555550765, 0.22983603211129044, 0.22983603211129044, 0.22983603211129044, 0.19051368083506803, 0.19051368083506803, 0.19051368083506803, 0.11757954050023478, 0.11757954050023478, 0.11757954050023478, 0.100499108490959, 0.100499108490959, 0.100499108490959, 0.09955390993106883, 0.09955390993106883, 0.09955390993106883]}, "mutation_prompt": null}
{"id": "7e17c9c4-a25d-43e2-8fd6-cb93b8b3047f", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]  # Slightly adjusted velocity bounds\n        self.F = 0.68  # Fine-tuned DE scaling factor\n        self.CR = 0.82  # Slightly reduced DE crossover probability\n        self.w_max, self.w_min = 0.65, 0.35  # PSO inertia weights slightly adjusted\n        self.c1, self.c2 = 1.4, 1.6  # Small adjustments in PSO coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - (evaluations / self.budget) * (self.w_max - self.w_min)  # Adaptive inertia\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Slightly reduced sigma for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with fine-tuned parameters and streamlined logic for improved performance within 2.0% code difference.", "configspace": "", "generation": 90, "fitness": 0.33406922423388347, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.89575731047268, 0.89575731047268, 0.89575731047268, 0.8873867140911508, 0.8873867140911508, 0.8873867140911508, 0.8965793987403675, 0.8965793987403675, 0.8965793987403675, 0.7850362351627982, 0.7850362351627982, 0.7850362351627982, 0.759709111409098, 0.759709111409098, 0.759709111409098, 0.7666504628155891, 0.7666504628155891, 0.7666504628155891, 0.15723007979542958, 0.15723007979542958, 0.15723007979542958, 0.1402144266147437, 0.1402144266147437, 0.1402144266147437, 0.11605875419171119, 0.11605875419171119, 0.11605875419171119, 0.14275699972952693, 0.14275699972952693, 0.14275699972952693, 0.11386632371805572, 0.11386632371805572, 0.11386632371805572, 0.09519043657721482, 0.09519043657721482, 0.09519043657721482, 0.9623082656658816, 0.9623082656658816, 0.9623082656658816, 0.9339095061722379, 0.9339095061722379, 0.9339095061722379, 0.9418619546576262, 0.9418619546576262, 0.9418619546576262, 0.7111065928556206, 0.7111065928556206, 0.7111065928556206, 0.7670823336506762, 0.7670823336506762, 0.7670823336506762, 0.7175931281136565, 0.7175931281136565, 0.7175931281136565, 0.22686063665691159, 0.22686063665691159, 0.22686063665691159, 0.370906630657307, 0.370906630657307, 0.370906630657307, 0.23139275934542236, 0.23139275934542236, 0.23139275934542236, 0.2235777480729052, 0.2235777480729052, 0.2235777480729052, 0.13127700559594613, 0.13127700559594613, 0.13127700559594613, 0.24931555250643067, 0.24931555250643067, 0.24931555250643067, 0.12995772425704066, 0.12995772425704066, 0.12995772425704066, 0.3285952217834126, 0.3285952217834126, 0.3285952217834126, 0.25577031216039603, 0.25577031216039603, 0.25577031216039603, 0.060981709544926876, 0.060981709544926876, 0.060981709544926876, 0.01370388671798628, 0.01370388671798628, 0.01370388671798628, 0.0061481850581694975, 0.0061481850581694975, 0.0061481850581694975, 0.18318766944848708, 0.18318766944848708, 0.18318766944848708, 0.10135709698968387, 0.10135709698968387, 0.10135709698968387, 0.19469426650229638, 0.19469426650229638, 0.19469426650229638, 0.20930153729694512, 0.20930153729694512, 0.20930153729694512, 0.15284170312582934, 0.15284170312582934, 0.15284170312582934, 0.12674236604390732, 0.12674236604390732, 0.12674236604390732, 0.17373410928869726, 0.17373410928869726, 0.17373410928869726, 0.11898319069054109, 0.11898319069054109, 0.11898319069054109, 0.11107442968872072, 0.11107442968872072, 0.11107442968872072, 0.6113652152611653, 0.6113652152611653, 0.6113652152611653, 0.558296013742381, 0.558296013742381, 0.558296013742381, 0.5933285774843877, 0.5933285774843877, 0.5933285774843877, 0.12489261852795475, 0.12489261852795475, 0.12489261852795475, 0.1182122641689557, 0.1182122641689557, 0.1182122641689557, 0.12951284739868318, 0.12951284739868318, 0.12951284739868318, 0.15889667830697585, 0.15889667830697585, 0.15889667830697585, 0.19266968210956115, 0.19266968210956115, 0.19266968210956115, 0.5466611200928004, 0.5466611200928004, 0.5466611200928004, 0.4052102701772402, 0.4052102701772402, 0.4052102701772402, 0.3018665367440929, 0.3018665367440929, 0.3018665367440929, 0.3472512233368369, 0.3472512233368369, 0.3472512233368369, 0.32807794081881525, 0.32807794081881525, 0.32807794081881525, 0.1769489746157651, 0.1769489746157651, 0.1769489746157651, 0.23857428932331226, 0.23857428932331226, 0.23857428932331226, 0.2213272510168539, 0.2213272510168539, 0.2213272510168539, 0.22559390775855215, 0.22559390775855215, 0.22559390775855215, 0.3162832015638585, 0.3162832015638585, 0.3162832015638585, 0.19736674634457207, 0.19736674634457207, 0.19736674634457207, 0.1913421553769532, 0.1913421553769532, 0.1913421553769532, 0.21398219904113114, 0.21398219904113114, 0.21398219904113114, 0.9123568249325975, 0.9123568249325975, 0.9123568249325975, 0.16966010891902028, 0.16966010891902028, 0.16966010891902028, 0.8735350577936547, 0.8735350577936547, 0.8735350577936547, 0.20657596840541048, 0.20657596840541048, 0.20657596840541048, 0.20750666154307118, 0.20750666154307118, 0.20750666154307118, 0.21239722512825898, 0.21239722512825898, 0.21239722512825898, 0.2118652462578361, 0.2118652462578361, 0.2118652462578361, 0.19080200408895542, 0.19080200408895542, 0.19080200408895542, 0.18016701854080308, 0.18016701854080308, 0.18016701854080308, 0.08858648277747783, 0.08858648277747783, 0.08858648277747783, 0.10899005867755718, 0.10899005867755718, 0.10899005867755718, 0.10217999869808758, 0.10217999869808758, 0.10217999869808758]}, "mutation_prompt": null}
{"id": "d4ad26b5-f37c-4d23-8a6b-f05e7fee2863", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "e327f9e1-8c07-4470-83e7-e74baefc881c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "6cc2b093-7a30-4264-9374-f802598ccb8c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]  # Adjusted velocity bounds for better control\n        self.F = 0.65  # Slightly reduced DE scaling factor for improved exploitation\n        self.CR = 0.85  # Increased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3  # PSO inertia weight remains unchanged\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)  # adaptive inertia remains unchanged\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.08)  # Reduced dynamic mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Improved HybridDEPSO by fine-tuning velocity update parameters and adjusting mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8820498396512059, 0.8820498396512059, 0.8820498396512059, 0.8737740072737769, 0.8737740072737769, 0.8737740072737769, 0.8774542707519462, 0.8774542707519462, 0.8774542707519462, 0.7421221279864563, 0.7421221279864563, 0.7421221279864563, 0.755011312774376, 0.755011312774376, 0.755011312774376, 0.7731327646227215, 0.7731327646227215, 0.7731327646227215, 0.1595407962137897, 0.1595407962137897, 0.1595407962137897, 0.12405140561259942, 0.12405140561259942, 0.12405140561259942, 0.12265908501447431, 0.12265908501447431, 0.12265908501447431, 0.11441402870823492, 0.11441402870823492, 0.11441402870823492, 0.10915798217336303, 0.10915798217336303, 0.10915798217336303, 0.10038532552122093, 0.10038532552122093, 0.10038532552122093, 0.9268853836684867, 0.9268853836684867, 0.9268853836684867, 0.9286128489047336, 0.9286128489047336, 0.9286128489047336, 0.9414886455405569, 0.9414886455405569, 0.9414886455405569, 0.7066801119405436, 0.7066801119405436, 0.7066801119405436, 0.754674414825752, 0.754674414825752, 0.754674414825752, 0.7416533177605016, 0.7416533177605016, 0.7416533177605016, 0.9146339372246046, 0.9146339372246046, 0.9146339372246046, 0.8942803896170542, 0.8942803896170542, 0.8942803896170542, 0.37320382762803506, 0.37320382762803506, 0.37320382762803506, 0.2603750768352132, 0.2603750768352132, 0.2603750768352132, 0.21627708718524508, 0.21627708718524508, 0.21627708718524508, 0.24351612720178806, 0.24351612720178806, 0.24351612720178806, 0.2443060641767426, 0.2443060641767426, 0.2443060641767426, 0.2626151265111055, 0.2626151265111055, 0.2626151265111055, 0.2784540359055394, 0.2784540359055394, 0.2784540359055394, 0.049293690980410254, 0.049293690980410254, 0.049293690980410254, 0.01396796252727417, 0.01396796252727417, 0.01396796252727417, 0.13652913286776824, 0.13652913286776824, 0.13652913286776824, 0.1552726738002268, 0.1552726738002268, 0.1552726738002268, 0.17574163085514083, 0.17574163085514083, 0.17574163085514083, 0.1787975820908596, 0.1787975820908596, 0.1787975820908596, 0.22469824627945456, 0.22469824627945456, 0.22469824627945456, 0.10458039502665906, 0.10458039502665906, 0.10458039502665906, 0.11070857845797766, 0.11070857845797766, 0.11070857845797766, 0.17966501190309847, 0.17966501190309847, 0.17966501190309847, 0.15997616408470983, 0.15997616408470983, 0.15997616408470983, 0.09934665282742694, 0.09934665282742694, 0.09934665282742694, 0.5652722459279209, 0.5652722459279209, 0.5652722459279209, 0.5779296974779067, 0.5779296974779067, 0.5779296974779067, 0.5792977727109183, 0.5792977727109183, 0.5792977727109183, 0.1156911721134497, 0.1156911721134497, 0.1156911721134497, 0.15551098535235852, 0.15551098535235852, 0.15551098535235852, 0.09670903614136372, 0.09670903614136372, 0.09670903614136372, 0.13754943728610702, 0.13754943728610702, 0.13754943728610702, 0.3643595796471619, 0.3643595796471619, 0.3643595796471619, 0.19089214000438248, 0.19089214000438248, 0.19089214000438248, 0.21050771589686335, 0.21050771589686335, 0.21050771589686335, 0.6126947158025589, 0.6126947158025589, 0.6126947158025589, 0.6776575083286291, 0.6776575083286291, 0.6776575083286291, 0.25020534744141065, 0.25020534744141065, 0.25020534744141065, 0.301063014108672, 0.301063014108672, 0.301063014108672, 0.44778354733755255, 0.44778354733755255, 0.44778354733755255, 0.257781797668599, 0.257781797668599, 0.257781797668599, 0.23729195315111595, 0.23729195315111595, 0.23729195315111595, 0.2319733655710413, 0.2319733655710413, 0.2319733655710413, 0.18956912241228585, 0.18956912241228585, 0.18956912241228585, 0.1770189617685679, 0.1770189617685679, 0.1770189617685679, 0.19100156601508256, 0.19100156601508256, 0.19100156601508256, 0.9064812387761751, 0.9064812387761751, 0.9064812387761751, 0.1970755538469382, 0.1970755538469382, 0.1970755538469382, 0.2112694800327034, 0.2112694800327034, 0.2112694800327034, 0.9017435578673101, 0.9017435578673101, 0.9017435578673101, 0.8095284467611887, 0.8095284467611887, 0.8095284467611887, 0.2121628784358236, 0.2121628784358236, 0.2121628784358236, 0.19681650861001154, 0.19681650861001154, 0.19681650861001154, 0.20676278196978304, 0.20676278196978304, 0.20676278196978304, 0.20393007168482302, 0.20393007168482302, 0.20393007168482302, 0.09898265947969231, 0.09898265947969231, 0.09898265947969231, 0.09534430865624999, 0.09534430865624999, 0.09534430865624999, 0.06552318585481465, 0.06552318585481465, 0.06552318585481465]}, "mutation_prompt": null}
{"id": "0ea893e0-3d48-4f4b-82d5-e33cb6a338fd", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.67  # Adjusted DE scaling factor slightly for improved exploration\n        self.CR = 0.86  # Slightly increased DE crossover probability for better diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.4, 1.6  # Fine-tuned PSO cognitive and social coefficients for balance\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Adjusted mutation adjustment for better precision\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by optimizing velocity update strategy and tweaking mutation for better convergence.", "configspace": "", "generation": 94, "fitness": 0.3754664631564218, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "3022a27f-72d2-4955-9665-96b684ce33d7", "metadata": {"aucs": [0.8870074865958628, 0.8870074865958628, 0.8870074865958628, 0.8864950030585024, 0.8864950030585024, 0.8864950030585024, 0.8732766701448076, 0.8732766701448076, 0.8732766701448076, 0.7619947520930356, 0.7619947520930356, 0.7619947520930356, 0.743792643777458, 0.743792643777458, 0.743792643777458, 0.7424879029926867, 0.7424879029926867, 0.7424879029926867, 0.18170913734501548, 0.18170913734501548, 0.18170913734501548, 0.1590456615199215, 0.1590456615199215, 0.1590456615199215, 0.11552369215987768, 0.11552369215987768, 0.11552369215987768, 0.13063631959881916, 0.13063631959881916, 0.13063631959881916, 0.09500031863419611, 0.09500031863419611, 0.09500031863419611, 0.09785742035159706, 0.09785742035159706, 0.09785742035159706, 0.9128677642777079, 0.9128677642777079, 0.9128677642777079, 0.9407706523840224, 0.9407706523840224, 0.9407706523840224, 0.9580575624905289, 0.9580575624905289, 0.9580575624905289, 0.6613336789067943, 0.6613336789067943, 0.6613336789067943, 0.7737918962053613, 0.7737918962053613, 0.7737918962053613, 0.7614219799835213, 0.7614219799835213, 0.7614219799835213, 0.8986687743970609, 0.8986687743970609, 0.8986687743970609, 0.9150268663640451, 0.9150268663640451, 0.9150268663640451, 0.8935288909286818, 0.8935288909286818, 0.8935288909286818, 0.22179121553079795, 0.22179121553079795, 0.22179121553079795, 0.2724038780909591, 0.2724038780909591, 0.2724038780909591, 0.28495781278019805, 0.28495781278019805, 0.28495781278019805, 0.24784569741963902, 0.24784569741963902, 0.24784569741963902, 0.24916818841874588, 0.24916818841874588, 0.24916818841874588, 0.264945617615179, 0.264945617615179, 0.264945617615179, 0.24859921605214963, 0.24859921605214963, 0.24859921605214963, 0.059424672456892424, 0.059424672456892424, 0.059424672456892424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26830836264993096, 0.26830836264993096, 0.26830836264993096, 0.16245864783969777, 0.16245864783969777, 0.16245864783969777, 0.08904710489176615, 0.08904710489176615, 0.08904710489176615, 0.21066286551180047, 0.21066286551180047, 0.21066286551180047, 0.17825529128129125, 0.17825529128129125, 0.17825529128129125, 0.31160616930272766, 0.31160616930272766, 0.31160616930272766, 0.17086490470881144, 0.17086490470881144, 0.17086490470881144, 0.10218236725637109, 0.10218236725637109, 0.10218236725637109, 0.13669489498049514, 0.13669489498049514, 0.13669489498049514, 0.5323918018847249, 0.5323918018847249, 0.5323918018847249, 0.5829895473901979, 0.5829895473901979, 0.5829895473901979, 0.5959298565809986, 0.5959298565809986, 0.5959298565809986, 0.15610172361599783, 0.15610172361599783, 0.15610172361599783, 0.14070280211541264, 0.14070280211541264, 0.14070280211541264, 0.08248036069109543, 0.08248036069109543, 0.08248036069109543, 0.24185126879481122, 0.24185126879481122, 0.24185126879481122, 0.48373751269491505, 0.48373751269491505, 0.48373751269491505, 0.21165933431717587, 0.21165933431717587, 0.21165933431717587, 0.42344451336225775, 0.42344451336225775, 0.42344451336225775, 0.3260342306465601, 0.3260342306465601, 0.3260342306465601, 0.26159198277648155, 0.26159198277648155, 0.26159198277648155, 0.285376111229637, 0.285376111229637, 0.285376111229637, 0.2686004464849834, 0.2686004464849834, 0.2686004464849834, 0.20282819926589535, 0.20282819926589535, 0.20282819926589535, 0.21084481259131926, 0.21084481259131926, 0.21084481259131926, 0.24144154285244102, 0.24144154285244102, 0.24144154285244102, 0.26771708624386614, 0.26771708624386614, 0.26771708624386614, 0.17519171031962688, 0.17519171031962688, 0.17519171031962688, 0.22425190056098132, 0.22425190056098132, 0.22425190056098132, 0.2007232907554144, 0.2007232907554144, 0.2007232907554144, 0.8981611358359718, 0.8981611358359718, 0.8981611358359718, 0.8692541541090051, 0.8692541541090051, 0.8692541541090051, 0.2117681918468174, 0.2117681918468174, 0.2117681918468174, 0.7701288574739211, 0.7701288574739211, 0.7701288574739211, 0.207061685722303, 0.207061685722303, 0.207061685722303, 0.20959018155838005, 0.20959018155838005, 0.20959018155838005, 0.18866490864224905, 0.18866490864224905, 0.18866490864224905, 0.20847624831440614, 0.20847624831440614, 0.20847624831440614, 0.19323114804193753, 0.19323114804193753, 0.19323114804193753, 0.0868325456967497, 0.0868325456967497, 0.0868325456967497, 0.10786718438932297, 0.10786718438932297, 0.10786718438932297, 0.09704708945955587, 0.09704708945955587, 0.09704708945955587]}, "mutation_prompt": null}
{"id": "19b8bdbc-e516-42c6-b68a-775b7acd91eb", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.1, 0.1]  # Adjusted velocity bounds for stability\n        self.F = 0.65  # Slightly reduced DE scaling factor for better exploitation\n        self.CR = 0.88  # Increased DE crossover probability to enhance diversity\n        self.w_max, self.w_min = 0.75, 0.25  # Refined inertia weight range for PSO\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.06)  # Refined mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by fine-tuning DE and PSO parameters while maintaining balance to achieve a 2.0% improvement in performance.", "configspace": "", "generation": 95, "fitness": 0.3417498869141771, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "0ea893e0-3d48-4f4b-82d5-e33cb6a338fd", "metadata": {"aucs": [0.8722017440303834, 0.8722017440303834, 0.8722017440303834, 0.8518006397889316, 0.8518006397889316, 0.8518006397889316, 0.8748114317136363, 0.8748114317136363, 0.8748114317136363, 0.7300920112130724, 0.7300920112130724, 0.7300920112130724, 0.7391335487334842, 0.7391335487334842, 0.7391335487334842, 0.746321653836258, 0.746321653836258, 0.746321653836258, 0.15574985787742301, 0.15574985787742301, 0.15574985787742301, 0.10893307880418601, 0.10893307880418601, 0.10893307880418601, 0.12972501183392926, 0.12972501183392926, 0.12972501183392926, 0.1132744055614654, 0.1132744055614654, 0.1132744055614654, 0.11656129021311701, 0.11656129021311701, 0.11656129021311701, 0.0911549920955731, 0.0911549920955731, 0.0911549920955731, 0.9237358157442203, 0.9237358157442203, 0.9237358157442203, 0.9417018722142665, 0.9417018722142665, 0.9417018722142665, 0.942846319018181, 0.942846319018181, 0.942846319018181, 0.7284893540213881, 0.7284893540213881, 0.7284893540213881, 0.7313366370220516, 0.7313366370220516, 0.7313366370220516, 0.7409915119284706, 0.7409915119284706, 0.7409915119284706, 0.2410691638093143, 0.2410691638093143, 0.2410691638093143, 0.20571084734657163, 0.20571084734657163, 0.20571084734657163, 0.8374522946405716, 0.8374522946405716, 0.8374522946405716, 0.24557761980872927, 0.24557761980872927, 0.24557761980872927, 0.174738327897081, 0.174738327897081, 0.174738327897081, 0.29090949706499425, 0.29090949706499425, 0.29090949706499425, 0.13229732392228544, 0.13229732392228544, 0.13229732392228544, 0.2502886464056533, 0.2502886464056533, 0.2502886464056533, 0.24933765802872843, 0.24933765802872843, 0.24933765802872843, 0.05152024793744747, 0.05152024793744747, 0.05152024793744747, 0.005789865697360286, 0.005789865697360286, 0.005789865697360286, 0.09273904518066689, 0.09273904518066689, 0.09273904518066689, 0.21320307795029558, 0.21320307795029558, 0.21320307795029558, 0.08679770504889817, 0.08679770504889817, 0.08679770504889817, 0.1050384072888988, 0.1050384072888988, 0.1050384072888988, 0.04336688336415495, 0.04336688336415495, 0.04336688336415495, 0.0778473271795036, 0.0778473271795036, 0.0778473271795036, 0.166639943947113, 0.166639943947113, 0.166639943947113, 0.11712780076333207, 0.11712780076333207, 0.11712780076333207, 0.06477545701123721, 0.06477545701123721, 0.06477545701123721, 0.19121183185284985, 0.19121183185284985, 0.19121183185284985, 0.5578991904619132, 0.5578991904619132, 0.5578991904619132, 0.6528885051101885, 0.6528885051101885, 0.6528885051101885, 0.5886391749229756, 0.5886391749229756, 0.5886391749229756, 0.11401082752752756, 0.11401082752752756, 0.11401082752752756, 0.1429982100509969, 0.1429982100509969, 0.1429982100509969, 0.14041670767677006, 0.14041670767677006, 0.14041670767677006, 0.32250170439358694, 0.32250170439358694, 0.32250170439358694, 0.1650388761120083, 0.1650388761120083, 0.1650388761120083, 0.20858946245878185, 0.20858946245878185, 0.20858946245878185, 0.5219021005995951, 0.5219021005995951, 0.5219021005995951, 0.4636794648559006, 0.4636794648559006, 0.4636794648559006, 0.2384822253353941, 0.2384822253353941, 0.2384822253353941, 0.2281439265363645, 0.2281439265363645, 0.2281439265363645, 0.3392659617850875, 0.3392659617850875, 0.3392659617850875, 0.19479438459858345, 0.19479438459858345, 0.19479438459858345, 0.21565034702398056, 0.21565034702398056, 0.21565034702398056, 0.25784249121908065, 0.25784249121908065, 0.25784249121908065, 0.19718651836100898, 0.19718651836100898, 0.19718651836100898, 0.1967953853704162, 0.1967953853704162, 0.1967953853704162, 0.25241816562688624, 0.25241816562688624, 0.25241816562688624, 0.17656892131864077, 0.17656892131864077, 0.17656892131864077, 0.9212076323470815, 0.9212076323470815, 0.9212076323470815, 0.8703042908051568, 0.8703042908051568, 0.8703042908051568, 0.21233814918543203, 0.21233814918543203, 0.21233814918543203, 0.7250282875866667, 0.7250282875866667, 0.7250282875866667, 0.209834676892106, 0.209834676892106, 0.209834676892106, 0.21036905286904362, 0.21036905286904362, 0.21036905286904362, 0.1937366542111839, 0.1937366542111839, 0.1937366542111839, 0.21130345808083695, 0.21130345808083695, 0.21130345808083695, 0.20955475074195196, 0.20955475074195196, 0.20955475074195196, 0.0944486083806132, 0.0944486083806132, 0.0944486083806132, 0.10261810515719083, 0.10261810515719083, 0.10261810515719083, 0.08723549242207629, 0.08723549242207629, 0.08723549242207629]}, "mutation_prompt": null}
{"id": "5bcdca9b-79a8-4a8d-973e-df6c68a8966a", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.65  # Slight adjustment to DE scaling factor for exploration\n        self.CR = 0.85  # Minor tweak to improve diversity\n        self.w_max, self.w_min = 0.72, 0.32  # Slightly adjusted inertia weights for improved dynamic balance\n        self.c1, self.c2 = 1.5, 1.5  # Minor adjustment for better cognitive and social balance\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.07)  # Kept mutation adjustment stable for precision\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Fine-tuned HybridDEPSO by slightly adjusting DE scaling and PSO coefficients for better exploration and convergence.", "configspace": "", "generation": 96, "fitness": 0.341718216083885, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "0ea893e0-3d48-4f4b-82d5-e33cb6a338fd", "metadata": {"aucs": [0.8732207400405158, 0.8732207400405158, 0.8732207400405158, 0.8723277371277868, 0.8723277371277868, 0.8723277371277868, 0.868073519580762, 0.868073519580762, 0.868073519580762, 0.7249824060774608, 0.7249824060774608, 0.7249824060774608, 0.7468025669322438, 0.7468025669322438, 0.7468025669322438, 0.6102677894328246, 0.6102677894328246, 0.6102677894328246, 0.0819376892385375, 0.0819376892385375, 0.0819376892385375, 0.14365455148294692, 0.14365455148294692, 0.14365455148294692, 0.16026315258899537, 0.16026315258899537, 0.16026315258899537, 0.09493609718889728, 0.09493609718889728, 0.09493609718889728, 0.09598941390438409, 0.09598941390438409, 0.09598941390438409, 0.11211629939748635, 0.11211629939748635, 0.11211629939748635, 0.9233784686832602, 0.9233784686832602, 0.9233784686832602, 0.9406251163758789, 0.9406251163758789, 0.9406251163758789, 0.9391953753050004, 0.9391953753050004, 0.9391953753050004, 0.7071265322032548, 0.7071265322032548, 0.7071265322032548, 0.7319965848268688, 0.7319965848268688, 0.7319965848268688, 0.7470027012614059, 0.7470027012614059, 0.7470027012614059, 0.22703501023383577, 0.22703501023383577, 0.22703501023383577, 0.19518503856378278, 0.19518503856378278, 0.19518503856378278, 0.23268658483743443, 0.23268658483743443, 0.23268658483743443, 0.1339021873004974, 0.1339021873004974, 0.1339021873004974, 0.2992820837968022, 0.2992820837968022, 0.2992820837968022, 0.23452178917011568, 0.23452178917011568, 0.23452178917011568, 0.25127885686086016, 0.25127885686086016, 0.25127885686086016, 0.27148537881547796, 0.27148537881547796, 0.27148537881547796, 0.1167983621266252, 0.1167983621266252, 0.1167983621266252, 0.09513142111460815, 0.09513142111460815, 0.09513142111460815, 0.06371619652038829, 0.06371619652038829, 0.06371619652038829, 0.07741414712865335, 0.07741414712865335, 0.07741414712865335, 0.1466293148188279, 0.1466293148188279, 0.1466293148188279, 0.1492168716048078, 0.1492168716048078, 0.1492168716048078, 0.17189885707524877, 0.17189885707524877, 0.17189885707524877, 0.21057914559511226, 0.21057914559511226, 0.21057914559511226, 0.12723505886868736, 0.12723505886868736, 0.12723505886868736, 0.12228835909718294, 0.12228835909718294, 0.12228835909718294, 0.2906491472986331, 0.2906491472986331, 0.2906491472986331, 0.25349053267806176, 0.25349053267806176, 0.25349053267806176, 0.21488881470693977, 0.21488881470693977, 0.21488881470693977, 0.5634477608965061, 0.5634477608965061, 0.5634477608965061, 0.6186350279722452, 0.6186350279722452, 0.6186350279722452, 0.6153125094741394, 0.6153125094741394, 0.6153125094741394, 0.13426883339860374, 0.13426883339860374, 0.13426883339860374, 0.1316423998429762, 0.1316423998429762, 0.1316423998429762, 0.08277992704832793, 0.08277992704832793, 0.08277992704832793, 0.2691643468862067, 0.2691643468862067, 0.2691643468862067, 0.4199479941227743, 0.4199479941227743, 0.4199479941227743, 0.244512450589627, 0.244512450589627, 0.244512450589627, 0.5475923369560269, 0.5475923369560269, 0.5475923369560269, 0.42142083334381764, 0.42142083334381764, 0.42142083334381764, 0.27458311526174817, 0.27458311526174817, 0.27458311526174817, 0.23591816487178885, 0.23591816487178885, 0.23591816487178885, 0.21214335983001908, 0.21214335983001908, 0.21214335983001908, 0.2830946089620917, 0.2830946089620917, 0.2830946089620917, 0.2561141290739608, 0.2561141290739608, 0.2561141290739608, 0.261585071853371, 0.261585071853371, 0.261585071853371, 0.22292557628447307, 0.22292557628447307, 0.22292557628447307, 0.20684971795555718, 0.20684971795555718, 0.20684971795555718, 0.1718856115208819, 0.1718856115208819, 0.1718856115208819, 0.17190415790473113, 0.17190415790473113, 0.17190415790473113, 0.8693976966881187, 0.8693976966881187, 0.8693976966881187, 0.1470622408069414, 0.1470622408069414, 0.1470622408069414, 0.21116324393966557, 0.21116324393966557, 0.21116324393966557, 0.8672968143953357, 0.8672968143953357, 0.8672968143953357, 0.16738551129203572, 0.16738551129203572, 0.16738551129203572, 0.8089160032170075, 0.8089160032170075, 0.8089160032170075, 0.19522594349295241, 0.19522594349295241, 0.19522594349295241, 0.2197880744128915, 0.2197880744128915, 0.2197880744128915, 0.2003094683822425, 0.2003094683822425, 0.2003094683822425, 0.10184707498712431, 0.10184707498712431, 0.10184707498712431, 0.10173474065424726, 0.10173474065424726, 0.10173474065424726, 0.10864691186018427, 0.10864691186018427, 0.10864691186018427]}, "mutation_prompt": null}
{"id": "d28fdc99-497d-40ba-90fc-d23fc9ef0e55", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.69  # Slightly increased DE scaling factor for better exploration\n        self.CR = 0.85  # Slightly decreased DE crossover probability for diversity\n        self.w_max, self.w_min = 0.72, 0.28\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.06)  # Slightly refined mutation adjustment\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Tweaked HybridDEPSO parameters and logic for improved convergence and diversity with a slight 2% code adjustment.", "configspace": "", "generation": 97, "fitness": 0.36443878457779133, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "0ea893e0-3d48-4f4b-82d5-e33cb6a338fd", "metadata": {"aucs": [0.8741435455392099, 0.8741435455392099, 0.8741435455392099, 0.8635995837097945, 0.8635995837097945, 0.8635995837097945, 0.880630008237497, 0.880630008237497, 0.880630008237497, 0.6460091844015503, 0.6460091844015503, 0.6460091844015503, 0.7412750057635082, 0.7412750057635082, 0.7412750057635082, 0.7134816872341505, 0.7134816872341505, 0.7134816872341505, 0.10953136886963166, 0.10953136886963166, 0.10953136886963166, 0.11204733299256964, 0.11204733299256964, 0.11204733299256964, 0.7235907362630725, 0.7235907362630725, 0.7235907362630725, 0.1413536989787736, 0.1413536989787736, 0.1413536989787736, 0.14267551686922164, 0.14267551686922164, 0.14267551686922164, 0.1143016666668647, 0.1143016666668647, 0.1143016666668647, 0.934360410407118, 0.934360410407118, 0.934360410407118, 0.9430330802323272, 0.9430330802323272, 0.9430330802323272, 0.9446095864079763, 0.9446095864079763, 0.9446095864079763, 0.7015363349985098, 0.7015363349985098, 0.7015363349985098, 0.7233828614898292, 0.7233828614898292, 0.7233828614898292, 0.7342280783576667, 0.7342280783576667, 0.7342280783576667, 0.22667678254278845, 0.22667678254278845, 0.22667678254278845, 0.20992581763166784, 0.20992581763166784, 0.20992581763166784, 0.245653250686117, 0.245653250686117, 0.245653250686117, 0.21220821889040598, 0.21220821889040598, 0.21220821889040598, 0.13046928520170187, 0.13046928520170187, 0.13046928520170187, 0.25565349622786293, 0.25565349622786293, 0.25565349622786293, 0.24739332426768712, 0.24739332426768712, 0.24739332426768712, 0.13294077271929183, 0.13294077271929183, 0.13294077271929183, 0.2628501965487895, 0.2628501965487895, 0.2628501965487895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030478655721993375, 0.030478655721993375, 0.030478655721993375, 0.05929018634383032, 0.05929018634383032, 0.05929018634383032, 0.12778147458655187, 0.12778147458655187, 0.12778147458655187, 0.14213736491648776, 0.14213736491648776, 0.14213736491648776, 0.16278808693931968, 0.16278808693931968, 0.16278808693931968, 0.20424365281714818, 0.20424365281714818, 0.20424365281714818, 0.3760548130550261, 0.3760548130550261, 0.3760548130550261, 0.11819176786515051, 0.11819176786515051, 0.11819176786515051, 0.11346648326420072, 0.11346648326420072, 0.11346648326420072, 0.10779725697720732, 0.10779725697720732, 0.10779725697720732, 0.10280257710022722, 0.10280257710022722, 0.10280257710022722, 0.6205093982553465, 0.6205093982553465, 0.6205093982553465, 0.62441444434844, 0.62441444434844, 0.62441444434844, 0.5696336987125723, 0.5696336987125723, 0.5696336987125723, 0.16058985258282643, 0.16058985258282643, 0.16058985258282643, 0.1425275162351789, 0.1425275162351789, 0.1425275162351789, 0.07456154364660283, 0.07456154364660283, 0.07456154364660283, 0.1793039914224981, 0.1793039914224981, 0.1793039914224981, 0.37686011763922045, 0.37686011763922045, 0.37686011763922045, 0.1991676464630434, 0.1991676464630434, 0.1991676464630434, 0.2680023889539812, 0.2680023889539812, 0.2680023889539812, 0.278816312665747, 0.278816312665747, 0.278816312665747, 0.6441228887069205, 0.6441228887069205, 0.6441228887069205, 0.25885009028728423, 0.25885009028728423, 0.25885009028728423, 0.3257746658367212, 0.3257746658367212, 0.3257746658367212, 0.32149130373831547, 0.32149130373831547, 0.32149130373831547, 0.2275957627615911, 0.2275957627615911, 0.2275957627615911, 0.23341497467985295, 0.23341497467985295, 0.23341497467985295, 0.24015553598774053, 0.24015553598774053, 0.24015553598774053, 0.24479497458429822, 0.24479497458429822, 0.24479497458429822, 0.19884559163838167, 0.19884559163838167, 0.19884559163838167, 0.17821413978432232, 0.17821413978432232, 0.17821413978432232, 0.9192415037463307, 0.9192415037463307, 0.9192415037463307, 0.8378851739971752, 0.8378851739971752, 0.8378851739971752, 0.8538125801587267, 0.8538125801587267, 0.8538125801587267, 0.8245417674612159, 0.8245417674612159, 0.8245417674612159, 0.8355283478906215, 0.8355283478906215, 0.8355283478906215, 0.2123357222214538, 0.2123357222214538, 0.2123357222214538, 0.18659388153832168, 0.18659388153832168, 0.18659388153832168, 0.21358944845763783, 0.21358944845763783, 0.21358944845763783, 0.19591777115566666, 0.19591777115566666, 0.19591777115566666, 0.09430969524538324, 0.09430969524538324, 0.09430969524538324, 0.0955120361241889, 0.0955120361241889, 0.0955120361241889, 0.08998457095063783, 0.08998457095063783, 0.08998457095063783]}, "mutation_prompt": null}
{"id": "382878a4-9a81-4352-abfe-955db6697cb1", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.11, 0.11]  # Adjusted velocity bounds for better control\n        self.F = 0.68  # Fine-tuned DE scaling factor to balance exploration and exploitation\n        self.CR = 0.85  # Slightly reduced DE crossover probability for maintaining diversity\n        self.w_max, self.w_min = 0.72, 0.28  # Adjusted inertia weights for improved convergence\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.06)  # Slightly reduced mutation adjustment for stability\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO with refined velocity update and mutation strategies for improved efficiency.", "configspace": "", "generation": 98, "fitness": 0.3495878316640531, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "0ea893e0-3d48-4f4b-82d5-e33cb6a338fd", "metadata": {"aucs": [0.8801199221804604, 0.8801199221804604, 0.8801199221804604, 0.8690151752886857, 0.8690151752886857, 0.8690151752886857, 0.8795764733164592, 0.8795764733164592, 0.8795764733164592, 0.7500860058549472, 0.7500860058549472, 0.7500860058549472, 0.7442102418733492, 0.7442102418733492, 0.7442102418733492, 0.7397142025536462, 0.7397142025536462, 0.7397142025536462, 0.1160233389281824, 0.1160233389281824, 0.1160233389281824, 0.12259512238122894, 0.12259512238122894, 0.12259512238122894, 0.10841332176922369, 0.10841332176922369, 0.10841332176922369, 0.14264471532151168, 0.14264471532151168, 0.14264471532151168, 0.11058310437789964, 0.11058310437789964, 0.11058310437789964, 0.13722856053478594, 0.13722856053478594, 0.13722856053478594, 0.9479197174392585, 0.9479197174392585, 0.9479197174392585, 0.9376308041160237, 0.9376308041160237, 0.9376308041160237, 0.931139931773391, 0.931139931773391, 0.931139931773391, 0.7463056482111365, 0.7463056482111365, 0.7463056482111365, 0.7465377512440086, 0.7465377512440086, 0.7465377512440086, 0.7085065343164536, 0.7085065343164536, 0.7085065343164536, 0.8685773127613282, 0.8685773127613282, 0.8685773127613282, 0.37790491305210694, 0.37790491305210694, 0.37790491305210694, 0.16170319392418364, 0.16170319392418364, 0.16170319392418364, 0.2514952019444673, 0.2514952019444673, 0.2514952019444673, 0.1162296086954957, 0.1162296086954957, 0.1162296086954957, 0.2546225744170909, 0.2546225744170909, 0.2546225744170909, 0.23210909374973898, 0.23210909374973898, 0.23210909374973898, 0.13232589907029557, 0.13232589907029557, 0.13232589907029557, 0.2558541888267746, 0.2558541888267746, 0.2558541888267746, 0.08344460651021524, 0.08344460651021524, 0.08344460651021524, 0.043071048600171746, 0.043071048600171746, 0.043071048600171746, 0.003652123519778394, 0.003652123519778394, 0.003652123519778394, 0.14519340325947627, 0.14519340325947627, 0.14519340325947627, 0.1325811112611497, 0.1325811112611497, 0.1325811112611497, 0.1108609818035764, 0.1108609818035764, 0.1108609818035764, 0.15684911707103932, 0.15684911707103932, 0.15684911707103932, 0.1691625493014962, 0.1691625493014962, 0.1691625493014962, 0.182159300274637, 0.182159300274637, 0.182159300274637, 0.1456002326334117, 0.1456002326334117, 0.1456002326334117, 0.04278714392124816, 0.04278714392124816, 0.04278714392124816, 0.10026692479981325, 0.10026692479981325, 0.10026692479981325, 0.5765396993977765, 0.5765396993977765, 0.5765396993977765, 0.5778612541546932, 0.5778612541546932, 0.5778612541546932, 0.6155859319981718, 0.6155859319981718, 0.6155859319981718, 0.08933128242218225, 0.08933128242218225, 0.08933128242218225, 0.14216069201138903, 0.14216069201138903, 0.14216069201138903, 0.14231090248748746, 0.14231090248748746, 0.14231090248748746, 0.27176992307724335, 0.27176992307724335, 0.27176992307724335, 0.3564323657609204, 0.3564323657609204, 0.3564323657609204, 0.2353773787229232, 0.2353773787229232, 0.2353773787229232, 0.55550752161084, 0.55550752161084, 0.55550752161084, 0.47984889346239246, 0.47984889346239246, 0.47984889346239246, 0.26504027506353633, 0.26504027506353633, 0.26504027506353633, 0.2803660443303294, 0.2803660443303294, 0.2803660443303294, 0.38281638347088975, 0.38281638347088975, 0.38281638347088975, 0.2898671595513661, 0.2898671595513661, 0.2898671595513661, 0.2177515566689351, 0.2177515566689351, 0.2177515566689351, 0.2443657431688694, 0.2443657431688694, 0.2443657431688694, 0.27271575112895086, 0.27271575112895086, 0.27271575112895086, 0.2452099100960743, 0.2452099100960743, 0.2452099100960743, 0.21063232391086684, 0.21063232391086684, 0.21063232391086684, 0.21899386488224237, 0.21899386488224237, 0.21899386488224237, 0.9020165625978004, 0.9020165625978004, 0.9020165625978004, 0.1468854125807848, 0.1468854125807848, 0.1468854125807848, 0.8485859323799959, 0.8485859323799959, 0.8485859323799959, 0.6428085359369817, 0.6428085359369817, 0.6428085359369817, 0.20867690338026246, 0.20867690338026246, 0.20867690338026246, 0.21125333789064804, 0.21125333789064804, 0.21125333789064804, 0.2100230827617614, 0.2100230827617614, 0.2100230827617614, 0.20863101252718086, 0.20863101252718086, 0.20863101252718086, 0.1951881993930572, 0.1951881993930572, 0.1951881993930572, 0.1610918842316752, 0.1610918842316752, 0.1610918842316752, 0.07801531291403985, 0.07801531291403985, 0.07801531291403985, 0.10196174496140864, 0.10196174496140864, 0.10196174496140864]}, "mutation_prompt": null}
{"id": "11139ecc-a6ca-4241-9d46-23d5631b00b9", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.bounds = [-5.0, 5.0]\n        self.vel_bounds = [-0.12, 0.12]\n        self.F = 0.68  # Fine-tuned DE scaling factor for improved exploration\n        self.CR = 0.85  # Slightly adjusted DE crossover probability for diversity\n        self.w_max, self.w_min = 0.7, 0.3\n        self.c1, self.c2 = 1.5, 1.5  # Balanced PSO cognitive and social coefficients\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.vel_bounds[0], self.vel_bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        p_best = population.copy()\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx].copy()\n        g_best_fitness = fitness[g_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.w_max - evaluations / self.budget * (self.w_max - self.w_min)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                sigma = np.random.normal(scale=0.06)  # Adjusted mutation adjustment for precision\n                mutant += sigma * (g_best - mutant)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i], p_best_fitness[i] = trial, trial_fitness\n                        if trial_fitness < g_best_fitness:\n                            g_best, g_best_fitness = trial, trial_fitness\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (p_best - population) +\n                          self.c2 * r2 * (g_best - population))\n            velocities = np.clip(velocities, self.vel_bounds[0], self.vel_bounds[1])\n\n            population = np.clip(population + velocities, self.bounds[0], self.bounds[1])\n            new_fitness = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < p_best_fitness[i]:\n                    p_best[i], p_best_fitness[i] = population[i].copy(), new_fitness[i]\n                    if new_fitness[i] < g_best_fitness:\n                        g_best, g_best_fitness = population[i].copy(), new_fitness[i]\n\n        return g_best", "name": "HybridDEPSO", "description": "Refined HybridDEPSO by modifying velocity and mutation dynamics for more efficient convergence.", "configspace": "", "generation": 99, "fitness": 0.3701952085578452, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "0ea893e0-3d48-4f4b-82d5-e33cb6a338fd", "metadata": {"aucs": [0.8773564998406665, 0.8773564998406665, 0.8773564998406665, 0.8785883674464305, 0.8785883674464305, 0.8785883674464305, 0.8847512655575417, 0.8847512655575417, 0.8847512655575417, 0.7347793945479483, 0.7347793945479483, 0.7347793945479483, 0.6740656243906882, 0.6740656243906882, 0.6740656243906882, 0.7635613105927098, 0.7635613105927098, 0.7635613105927098, 0.09852048429778659, 0.09852048429778659, 0.09852048429778659, 0.15732490932309662, 0.15732490932309662, 0.15732490932309662, 0.122659622702458, 0.122659622702458, 0.122659622702458, 0.09871136816015202, 0.09871136816015202, 0.09871136816015202, 0.14145427526919907, 0.14145427526919907, 0.14145427526919907, 0.09814547558060893, 0.09814547558060893, 0.09814547558060893, 0.9234681767325791, 0.9234681767325791, 0.9234681767325791, 0.9401854494937676, 0.9401854494937676, 0.9401854494937676, 0.9249793191362943, 0.9249793191362943, 0.9249793191362943, 0.7049649249462332, 0.7049649249462332, 0.7049649249462332, 0.7681448844572248, 0.7681448844572248, 0.7681448844572248, 0.7503355064127871, 0.7503355064127871, 0.7503355064127871, 0.24068171908284275, 0.24068171908284275, 0.24068171908284275, 0.9187053918772355, 0.9187053918772355, 0.9187053918772355, 0.24384246594565406, 0.24384246594565406, 0.24384246594565406, 0.2394678059751415, 0.2394678059751415, 0.2394678059751415, 0.27402088384208967, 0.27402088384208967, 0.27402088384208967, 0.2621606262987056, 0.2621606262987056, 0.2621606262987056, 0.2479312104588941, 0.2479312104588941, 0.2479312104588941, 0.12630002461641, 0.12630002461641, 0.12630002461641, 0.2760372317523424, 0.2760372317523424, 0.2760372317523424, 0.2444723751266038, 0.2444723751266038, 0.2444723751266038, 0.047327324209527566, 0.047327324209527566, 0.047327324209527566, 0.12022973262478387, 0.12022973262478387, 0.12022973262478387, 0.20039350170931047, 0.20039350170931047, 0.20039350170931047, 0.23536638644230035, 0.23536638644230035, 0.23536638644230035, 0.09122670778081443, 0.09122670778081443, 0.09122670778081443, 0.1477659415245538, 0.1477659415245538, 0.1477659415245538, 0.30797052956988746, 0.30797052956988746, 0.30797052956988746, 0.18732987814310575, 0.18732987814310575, 0.18732987814310575, 0.12451523324766223, 0.12451523324766223, 0.12451523324766223, 0.07387116097344881, 0.07387116097344881, 0.07387116097344881, 0.1469355991717719, 0.1469355991717719, 0.1469355991717719, 0.6054109306921626, 0.6054109306921626, 0.6054109306921626, 0.5546921749048588, 0.5546921749048588, 0.5546921749048588, 0.6178960618095871, 0.6178960618095871, 0.6178960618095871, 0.12309843944917409, 0.12309843944917409, 0.12309843944917409, 0.1396505275199441, 0.1396505275199441, 0.1396505275199441, 0.1410507643525425, 0.1410507643525425, 0.1410507643525425, 0.22610214138471096, 0.22610214138471096, 0.22610214138471096, 0.5045117806011373, 0.5045117806011373, 0.5045117806011373, 0.42480743162197165, 0.42480743162197165, 0.42480743162197165, 0.22219690180438167, 0.22219690180438167, 0.22219690180438167, 0.3251167231776476, 0.3251167231776476, 0.3251167231776476, 0.5916491706181792, 0.5916491706181792, 0.5916491706181792, 0.3154785693380985, 0.3154785693380985, 0.3154785693380985, 0.44156224328169213, 0.44156224328169213, 0.44156224328169213, 0.21489288422122288, 0.21489288422122288, 0.21489288422122288, 0.23695477544350163, 0.23695477544350163, 0.23695477544350163, 0.2026098947132191, 0.2026098947132191, 0.2026098947132191, 0.22629195116096523, 0.22629195116096523, 0.22629195116096523, 0.1860924341534531, 0.1860924341534531, 0.1860924341534531, 0.2096061093232754, 0.2096061093232754, 0.2096061093232754, 0.19952850234437525, 0.19952850234437525, 0.19952850234437525, 0.9250551735192358, 0.9250551735192358, 0.9250551735192358, 0.9024416679213598, 0.9024416679213598, 0.9024416679213598, 0.8863228504249716, 0.8863228504249716, 0.8863228504249716, 0.7076210547658439, 0.7076210547658439, 0.7076210547658439, 0.1662394014080062, 0.1662394014080062, 0.1662394014080062, 0.21071939778693372, 0.21071939778693372, 0.21071939778693372, 0.18754768756331486, 0.18754768756331486, 0.18754768756331486, 0.1876876977942732, 0.1876876977942732, 0.1876876977942732, 0.17742094167862565, 0.17742094167862565, 0.17742094167862565, 0.10458280753768778, 0.10458280753768778, 0.10458280753768778, 0.09805480005421574, 0.09805480005421574, 0.09805480005421574, 0.09261253453303031, 0.09261253453303031, 0.09261253453303031]}, "mutation_prompt": null}
