{"id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.0971862907474716, "feedback": "The algorithm AdaptiveSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": null, "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "66d61c8b-311b-4fad-8864-1d2d62741459", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "1f584b6f-f18c-4965-8dc6-dee83ff0de13", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "68875b2b-dd9c-40c0-992a-9f58218d2291", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "dae6b80a-e083-48e4-a84d-33f35f7e6dde", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "2404be1e-9e92-4abf-b62e-06cc980361ae", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "849b0d36-6252-45f5-9794-f96e4539ac47", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "074890ee-8bf2-4b89-81a4-9185714c0e50", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "5fc83ea2-a5be-45ce-899c-06f5144c2981", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "574468d5-8b86-46f5-afbe-5614d7e84cf1", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "55ca00df-0224-4d82-bdae-61673712de30", "solution": "import numpy as np\n\nclass AdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 20\n        self.alpha = 0.05\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                particle_velocities[i] = 0.7 * particle_velocities[i] + self.alpha * np.random.rand(self.dim) * (personal_best_positions[i] - particle_positions[i]) + self.alpha * np.random.rand(self.dim) * (global_best_position - particle_positions[i])\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particle_positions[i]\n                    \n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particle_positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "AdaptiveSwarmGradientDescent", "description": "Adaptive Swarm-based Gradient Descent merges swarm intelligence and gradient descent strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.27920445724501197, 0.20471651201492436, 0.4482667532413569, 0.11181411940552188, 0.10702479541274001, 0.23440558117394972, 0.11772793895869071, 0.13807102446061092, 0.09538992657823053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05338492286786045, 0.0941899872129992, 0.03555530778947591, 0.09266146574098344, 0.07037553054562884, 0.09084774030460963, 0.06539403872941696, 0.07332715809753465, 0.07930545256422594, 0.05207270983735812, 0.0287519407824135, 0.030783468919847068, 0.06818071502637923, 0.04470330386763799, 0.0025078800412100533, 0.03736062836341536, 0.07491449412556972, 0.004138333003614214, 0.054845265587808, 0.04532854330196645, 0.04491175831527183, 0.07185398093957884, 0.051495300413255785, 0.05699073256711895, 0.07270131304055416, 0.058076872777189203, 0.05944103828704561, 0.08606789083964961, 0.014067162172098469, 0.05755195014820569, 0.0631187109444229, 0.04269984415353556, 0.060738220050451486, 0.05075152800603333, 0.037555053384363934, 9.999999999998899e-05, 0.20535215842943766, 0.10788555321854254, 0.0798824890439489, 0.09692229388956786, 0.06581865451327651, 0.02995517929120084, 0.13680539439332173, 0.1277176969089302, 0.12371694088737417, 0.018750851800384938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06766425382459251, 9.999999999998899e-05, 0.026480459547954194, 0.07639943311238839, 9.999999999998899e-05, 0.09521843420351594, 9.999999999998899e-05, 0.06109110686122843, 0.06715213394725983, 0.008553149478702449, 0.10034733901238646, 0.10312502830805625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010549331068729462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10152527265336009, 0.06608795091854536, 0.16274840135015878, 0.04895309323434105, 0.0068501437690816624, 0.04757418966377558, 0.13819018861799015, 0.06315229754096363, 0.15190574991411943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332511468643475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2992956140035974, 0.22561910051114487, 0.3295869099593981, 0.14347404000364072, 0.20280188858943515, 0.1676093300812579, 0.21844916879377196, 0.3195753028107653, 0.35624481266436214, 0.02080974196612484, 0.0241417695163485, 9.999999999998899e-05, 0.08230489195239532, 0.041595506686492034, 0.07930512232358145, 0.06809987109310911, 0.05963088493474533, 0.061441954205886606, 0.16077599152484467, 0.1880551897544387, 0.10703415664148885, 0.141583284270956, 0.12036511117165716, 0.10982622484873594, 0.11705533426503667, 0.1223312810722087, 0.1057144052823421, 0.15015696995156835, 0.20075268581502692, 0.16146048827856063, 0.18795781894704888, 0.22213084335459632, 0.20752523740961992, 0.1345631116540329, 0.22628006020870206, 0.12045151722019987, 0.07226515211901918, 0.09760122176500607, 0.1127514966189912, 0.14701623037628564, 0.17010224481887415, 0.15004236649903724, 0.07897605755250114, 0.15948572027591668, 0.0683582920664243, 0.23720633749272546, 0.21826896090380365, 0.22937892428708717, 0.19545111240517177, 0.20124479567200626, 0.22306146919556757, 0.2511478516217861, 0.23550863323985227, 0.20391540277079312, 0.15084518130355773, 0.1620793064895545, 0.16593233682142394, 0.1738057671272354, 0.15831378236743587, 0.16613322117847207, 0.1562982595309239, 0.15765434774827392, 0.13177117568689878, 0.1016429203667083, 0.18674525424039634, 0.11354423235063149, 0.16943534530250925, 0.1678682680214908, 0.13339481622415328, 0.08102314654504372, 0.11221497691689497, 0.28406611794814174, 0.3107030554298972, 0.16265851062611147, 0.04807238869296704, 0.10713938466744144, 0.10061175725024185, 0.06873373152295847, 0.131759839386273, 0.12222821364773895, 0.09921945253448372, 0.1970889829283088, 0.19670170086414152, 0.19600435076535327, 0.19438001310429887, 0.17844039358108899, 0.19180376401874355, 0.19691150028075277, 0.17719208531133013, 0.18543377584090848, 0.08488764458479692, 0.09610029013975308, 0.08793685562876397, 0.09387679494109946, 0.0647885251035234, 0.05445684587950983, 0.07280885035778684, 0.06822504746430658, 0.07814706395423177]}, "mutation_prompt": null}
{"id": "62138870-b4eb-426b-8ca5-9f0eac765cc9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Increased swarm size for better diversity\n        self.alpha = 0.1      # Increased influence of personal and global bests\n        self.inertia_start = 0.9  # Starting inertia weight\n        self.inertia_end = 0.4    # Ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with improved particle update mechanism and adaptive inertia weight for better convergence.", "configspace": "", "generation": 11, "fitness": 0.23139668553730208, "feedback": "The algorithm EnhancedAdaptiveSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "623812b0-e29d-4be3-a9a8-e230b9178e54", "metadata": {"aucs": [0.8792799352899773, 0.8762045730866073, 0.8789723318928863, 0.4369454470548534, 0.8698624808780299, 0.8638834489056221, 0.8758478061988946, 0.876629936750557, 0.33510857125685056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0899583755695339, 0.11387739887284609, 0.14315795030104217, 0.14732997978031803, 0.09862337535507848, 0.11689133185448353, 0.08307575778817677, 0.1046734982085189, 0.11278517815178202, 0.18517074648891207, 0.09509980725224265, 0.06424051782497942, 0.09342697428853008, 0.08631744652343243, 0.1236462968901405, 0.0740726853570206, 0.062139459609351744, 0.11519648676531924, 0.9651764320882624, 0.9643996761526112, 0.9546038909474155, 0.9131028822654155, 0.941331644204641, 0.9373009089571307, 0.9412978219333207, 0.9500060689814868, 0.9759803986482282, 0.11177293151383205, 0.2540950996385941, 0.17117585827609583, 0.25280221430981165, 0.33986714210200075, 0.1501259840633007, 0.21035008378679565, 0.13144098758831768, 0.06725486523393043, 0.1664458834221958, 0.32953218150750685, 0.20849063208095164, 0.35882261742942556, 0.21931558508172388, 0.378935544548618, 0.15160650307071644, 0.17346916281665303, 0.23132496347919262, 0.22224755735157065, 0.20174517736853315, 9.999999999998899e-05, 0.13582694793640948, 0.14483021852757338, 0.1380744384011774, 0.1328375198256162, 0.18014283767397388, 0.18171272118010828, 0.2288461570326905, 0.1576760669562598, 0.3580943131845141, 0.35129044141690924, 0.12672580539389566, 0.34008145389036426, 0.14123093834217837, 0.27544428278168676, 0.1662967330861571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08470455790022391, 0.0473593900879139, 0.10002214449133007, 0.055580817419644934, 0.021826382255964782, 0.06847563219374164, 0.08278271088732236, 0.06106267243287744, 0.0767461649908624, 0.18539972640985314, 0.22510756252605757, 0.12729882150137606, 0.07558651150569218, 0.3233250014672504, 0.24896884814543785, 0.22703590905816784, 0.07672869523475934, 0.07260140001553317, 0.11319027068730758, 0.24600056104498336, 0.22683079317778554, 0.014624041145125166, 0.15336109743111648, 0.09398030187079143, 9.999999999998899e-05, 0.055799603506089035, 0.08202000284289201, 0.5743265184534205, 0.45645039550970623, 0.5248917796627878, 0.4069499253975991, 0.48180561125313937, 0.20972259861873166, 0.5159160503666567, 0.47100348774190615, 0.5071173605566306, 0.04658450384153712, 0.06485425664538491, 0.05930075570267035, 0.08473250306385949, 0.08427534864102859, 0.09973064705252199, 0.10941118975532504, 0.11326108622723818, 0.09774785225427562, 0.21697595542712889, 0.12678529170669717, 0.25739481540789644, 0.20956771488091097, 0.25108979132894893, 0.24848215035438181, 0.23025522702291756, 0.14809676320016263, 0.17727093907519353, 0.22498186825605604, 0.33976368000639845, 0.35965714577762686, 0.2360002549642236, 0.30691636030140956, 0.23274512090528887, 0.2983732652605354, 0.3342428754497726, 0.26728022868819834, 0.15125286134761773, 0.21700614402933582, 0.19477646049136432, 0.18597203271914653, 0.18891853954829751, 0.3399798069178892, 0.2577237955677797, 0.22242946369464722, 0.17846013433948338, 0.1993928066543883, 0.22264053585091337, 0.1949097070197331, 0.22708834256658383, 0.28510486396798096, 0.24448961662662017, 0.20480473647119912, 0.16947581957912095, 0.2489466900213203, 0.1909037677006976, 0.19693226734431502, 0.2005770437827873, 0.22529578577192522, 0.16584691702640542, 0.1725869027989293, 0.17341813008949158, 0.1944643816614131, 0.2075803363502149, 0.12501630038949152, 0.1882540012813233, 0.15361992138683778, 0.9333714278564751, 0.199955018458421, 0.16892024407554984, 0.09934800930908627, 0.16829872131640622, 0.17756161586648578, 0.4882993652291575, 0.15551770616506477, 0.28079431449368997, 0.32240155148721783, 0.16795047578108935, 0.34397967411644537, 0.10448372903928671, 0.2737402685434931, 0.21466768056321028, 0.21368306437062212, 0.19105862804643992, 0.19865502695025838, 0.20529902490615293, 0.1800033274023113, 0.19167954266506115, 0.19242986749654156, 0.19581421212828398, 0.18612167999728513, 0.10448134966053202, 0.07509480867308482, 0.078156710836501, 0.07086779020673606, 0.08229726457008979, 0.08555764004379396, 0.07332545989939665, 0.07731332250357448, 0.0947571287402108]}, "mutation_prompt": null}
{"id": "0a59e401-2162-42c6-be1f-8f61d559d599", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for better exploration\n        self.alpha = 0.2      # Increased influence of personal and global bests\n        self.beta = 0.1       # New parameter for velocity damping to prevent overshooting\n        self.inertia_start = 0.8  # Adjusted starting inertia weight\n        self.inertia_end = 0.3    # Adjusted ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha * rand_social * (global_best_position - particle_positions[i]))\n                particle_velocities[i] *= (1 - self.beta)  # Apply velocity damping\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with optimized parameter tuning and improved velocity update mechanism for efficient convergence.", "configspace": "", "generation": 12, "fitness": 0.1824202159157298, "feedback": "The algorithm EnhancedAdaptiveSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "62138870-b4eb-426b-8ca5-9f0eac765cc9", "metadata": {"aucs": [0.9133237065650311, 0.770415082794059, 0.7771738225868988, 0.2527243121070063, 0.9098919940646638, 0.6988888520664326, 0.7406858878642795, 0.5976734242550181, 0.7643829775462596, 0.09700439016099704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08655785363556046, 0.14335978662729554, 0.08830153029889443, 0.11845347774316761, 0.07765010729798016, 0.17329198198082008, 0.09609032804931084, 0.10118860185847256, 0.10060088186264382, 0.09291041582903492, 0.06613597053023001, 0.057408950955594396, 0.10921716685191118, 0.06604182580036544, 0.07909178109695514, 0.08270736504323684, 0.053584203876898884, 0.03804157546313036, 0.12215299355648368, 0.13849260695511945, 0.11022564279640212, 0.0847851384195466, 0.08616708432838827, 0.10475257540850458, 0.10844774106022215, 0.10300399873260468, 0.08205567607382569, 0.20276747263347916, 0.13412606557460116, 0.12076456924869494, 0.29130668464994036, 0.15663242371849917, 0.08598454747970719, 0.0963156730438024, 0.06599837377090212, 0.06877115640448539, 0.3974404015343269, 0.1848040230454001, 0.1426362748696569, 0.26523420921607355, 0.2888924950480032, 0.21217954299073516, 0.0614269471080352, 0.14527962948713047, 0.11609365515890968, 9.999999999998899e-05, 0.19474301096661684, 0.19340754271252325, 0.15901308232645084, 0.13220078816355962, 0.07594376744048492, 0.14554625629631135, 0.29435399865148315, 0.13981389292618007, 0.1676921490681168, 0.12989444477558065, 0.12771385725084672, 0.20540443301605715, 0.1288862142253947, 0.17083145149557766, 0.34809564862844333, 0.0937151664976471, 0.14121417110295464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12924838932478122, 0.046840522438540755, 0.08402130221259196, 0.037637851903273845, 0.027169413056937097, 0.026684263057456525, 0.09553815963007894, 0.04866193346819403, 0.07364267981019168, 9.999999999998899e-05, 0.051227913138309655, 0.11379169549267443, 0.08127668035028468, 0.19075835501945615, 0.13373869844893538, 0.3621858042357875, 0.10822593874281461, 9.999999999998899e-05, 0.10023452035098834, 0.27195283669105275, 0.0527606227543993, 0.05321208043694292, 0.12225411663728425, 0.14132388963151754, 0.09130422884429701, 0.30201168560413927, 0.08404417183619262, 0.5202120418407548, 0.42769396647215796, 0.45070130038969347, 0.3899606296958614, 0.5175892216583453, 0.3605954010752871, 0.4592762677854717, 0.5051186655501874, 0.4661259994604269, 0.08868153690639591, 0.10157179541881722, 0.04353216392612358, 0.12119511738608613, 0.07224840566829627, 0.10780342358707717, 0.10998816551737745, 0.1009403298196705, 0.11851477380898234, 0.18834381989023774, 0.16904994667738626, 0.1729518755000854, 0.3027705786146976, 0.16369492478018366, 0.1935102786593479, 0.16721520331508932, 0.1685665337744473, 0.1543870215433617, 0.17273460382212158, 0.3170624493833184, 0.1822272274107508, 0.27438992610112534, 0.1781378235728851, 0.24262687279008965, 0.2679613336840547, 0.25084411262501105, 0.36356490487563353, 0.08308694308101316, 0.1429889263100249, 0.14490829858252618, 0.24503954970045683, 0.15900122451235843, 0.19592061704240105, 0.24801977460685476, 0.19711272506460853, 0.2178069068801467, 0.2534286323687204, 0.19142951111910556, 0.22368854399589677, 0.25765971856692493, 0.1948364453614143, 0.21098582706659008, 0.21359135916468464, 0.2429360795819967, 0.23694967247150112, 0.18994825692993011, 0.21662569441536084, 0.1795350148638627, 0.18593291732411177, 0.20184903653182573, 0.16887237221956708, 0.17943526315413583, 0.18031828103132974, 0.19218621074822195, 0.17920589374898466, 0.1881121607215468, 0.1537875482792762, 0.17285991230222986, 0.19454449622867664, 0.537969226044783, 0.4784632480689177, 0.16870462701007893, 0.5431629394964828, 0.3592182656717591, 0.15680130544013804, 0.19571148053968868, 0.43480674180777845, 0.16868476695374246, 0.363207474227056, 0.1991901670246805, 0.2168521619846232, 0.1043970421414504, 0.20860008710107747, 0.1902119007190124, 0.18348781644925538, 0.1938924256770923, 0.19062996639798202, 0.2189802545492574, 0.19103366412574108, 0.18357114168310718, 0.18510038952386942, 0.07071290325049107, 0.09629502395354905, 0.08217043316315864, 0.10664028192170316, 0.08396795399156598, 0.1015761127769349, 0.0617226328040279, 0.09446947750960866, 0.08838878303891429]}, "mutation_prompt": null}
{"id": "bd05e972-8dc3-4834-87bb-86ae86d38185", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Increased swarm size for better diversity\n        self.alpha = 0.1      # Increased influence of personal and global bests\n        self.inertia_start = 0.9  # Starting inertia weight\n        self.inertia_end = 0.4    # Ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with improved particle update mechanism and adaptive inertia weight for better convergence.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "62138870-b4eb-426b-8ca5-9f0eac765cc9", "metadata": {"aucs": [0.8792799352899773, 0.8762045730866073, 0.8789723318928863, 0.4369454470548534, 0.8698624808780299, 0.8638834489056221, 0.8758478061988946, 0.876629936750557, 0.33510857125685056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0899583755695339, 0.11387739887284609, 0.14315795030104217, 0.14732997978031803, 0.09862337535507848, 0.11689133185448353, 0.08307575778817677, 0.1046734982085189, 0.11278517815178202, 0.18517074648891207, 0.09509980725224265, 0.06424051782497942, 0.09342697428853008, 0.08631744652343243, 0.1236462968901405, 0.0740726853570206, 0.062139459609351744, 0.11519648676531924, 0.9651764320882624, 0.9643996761526112, 0.9546038909474155, 0.9131028822654155, 0.941331644204641, 0.9373009089571307, 0.9412978219333207, 0.9500060689814868, 0.9759803986482282, 0.11177293151383205, 0.2540950996385941, 0.17117585827609583, 0.25280221430981165, 0.33986714210200075, 0.1501259840633007, 0.21035008378679565, 0.13144098758831768, 0.06725486523393043, 0.1664458834221958, 0.32953218150750685, 0.20849063208095164, 0.35882261742942556, 0.21931558508172388, 0.378935544548618, 0.15160650307071644, 0.17346916281665303, 0.23132496347919262, 0.22224755735157065, 0.20174517736853315, 9.999999999998899e-05, 0.13582694793640948, 0.14483021852757338, 0.1380744384011774, 0.1328375198256162, 0.18014283767397388, 0.18171272118010828, 0.2288461570326905, 0.1576760669562598, 0.3580943131845141, 0.35129044141690924, 0.12672580539389566, 0.34008145389036426, 0.14123093834217837, 0.27544428278168676, 0.1662967330861571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08470455790022391, 0.0473593900879139, 0.10002214449133007, 0.055580817419644934, 0.021826382255964782, 0.06847563219374164, 0.08278271088732236, 0.06106267243287744, 0.0767461649908624, 0.18539972640985314, 0.22510756252605757, 0.12729882150137606, 0.07558651150569218, 0.3233250014672504, 0.24896884814543785, 0.22703590905816784, 0.07672869523475934, 0.07260140001553317, 0.11319027068730758, 0.24600056104498336, 0.22683079317778554, 0.014624041145125166, 0.15336109743111648, 0.09398030187079143, 9.999999999998899e-05, 0.055799603506089035, 0.08202000284289201, 0.5743265184534205, 0.45645039550970623, 0.5248917796627878, 0.4069499253975991, 0.48180561125313937, 0.20972259861873166, 0.5159160503666567, 0.47100348774190615, 0.5071173605566306, 0.04658450384153712, 0.06485425664538491, 0.05930075570267035, 0.08473250306385949, 0.08427534864102859, 0.09973064705252199, 0.10941118975532504, 0.11326108622723818, 0.09774785225427562, 0.21697595542712889, 0.12678529170669717, 0.25739481540789644, 0.20956771488091097, 0.25108979132894893, 0.24848215035438181, 0.23025522702291756, 0.14809676320016263, 0.17727093907519353, 0.22498186825605604, 0.33976368000639845, 0.35965714577762686, 0.2360002549642236, 0.30691636030140956, 0.23274512090528887, 0.2983732652605354, 0.3342428754497726, 0.26728022868819834, 0.15125286134761773, 0.21700614402933582, 0.19477646049136432, 0.18597203271914653, 0.18891853954829751, 0.3399798069178892, 0.2577237955677797, 0.22242946369464722, 0.17846013433948338, 0.1993928066543883, 0.22264053585091337, 0.1949097070197331, 0.22708834256658383, 0.28510486396798096, 0.24448961662662017, 0.20480473647119912, 0.16947581957912095, 0.2489466900213203, 0.1909037677006976, 0.19693226734431502, 0.2005770437827873, 0.22529578577192522, 0.16584691702640542, 0.1725869027989293, 0.17341813008949158, 0.1944643816614131, 0.2075803363502149, 0.12501630038949152, 0.1882540012813233, 0.15361992138683778, 0.9333714278564751, 0.199955018458421, 0.16892024407554984, 0.09934800930908627, 0.16829872131640622, 0.17756161586648578, 0.4882993652291575, 0.15551770616506477, 0.28079431449368997, 0.32240155148721783, 0.16795047578108935, 0.34397967411644537, 0.10448372903928671, 0.2737402685434931, 0.21466768056321028, 0.21368306437062212, 0.19105862804643992, 0.19865502695025838, 0.20529902490615293, 0.1800033274023113, 0.19167954266506115, 0.19242986749654156, 0.19581421212828398, 0.18612167999728513, 0.10448134966053202, 0.07509480867308482, 0.078156710836501, 0.07086779020673606, 0.08229726457008979, 0.08555764004379396, 0.07332545989939665, 0.07731332250357448, 0.0947571287402108]}, "mutation_prompt": null}
{"id": "e3090763-9fb6-4445-8098-844edc2d24ff", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Increased swarm size for better diversity\n        self.alpha = 0.1      # Increased influence of personal and global bests\n        self.inertia_start = 0.9  # Starting inertia weight\n        self.inertia_end = 0.4    # Ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with improved particle update mechanism and adaptive inertia weight for better convergence.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "62138870-b4eb-426b-8ca5-9f0eac765cc9", "metadata": {"aucs": [0.8792799352899773, 0.8762045730866073, 0.8789723318928863, 0.4369454470548534, 0.8698624808780299, 0.8638834489056221, 0.8758478061988946, 0.876629936750557, 0.33510857125685056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0899583755695339, 0.11387739887284609, 0.14315795030104217, 0.14732997978031803, 0.09862337535507848, 0.11689133185448353, 0.08307575778817677, 0.1046734982085189, 0.11278517815178202, 0.18517074648891207, 0.09509980725224265, 0.06424051782497942, 0.09342697428853008, 0.08631744652343243, 0.1236462968901405, 0.0740726853570206, 0.062139459609351744, 0.11519648676531924, 0.9651764320882624, 0.9643996761526112, 0.9546038909474155, 0.9131028822654155, 0.941331644204641, 0.9373009089571307, 0.9412978219333207, 0.9500060689814868, 0.9759803986482282, 0.11177293151383205, 0.2540950996385941, 0.17117585827609583, 0.25280221430981165, 0.33986714210200075, 0.1501259840633007, 0.21035008378679565, 0.13144098758831768, 0.06725486523393043, 0.1664458834221958, 0.32953218150750685, 0.20849063208095164, 0.35882261742942556, 0.21931558508172388, 0.378935544548618, 0.15160650307071644, 0.17346916281665303, 0.23132496347919262, 0.22224755735157065, 0.20174517736853315, 9.999999999998899e-05, 0.13582694793640948, 0.14483021852757338, 0.1380744384011774, 0.1328375198256162, 0.18014283767397388, 0.18171272118010828, 0.2288461570326905, 0.1576760669562598, 0.3580943131845141, 0.35129044141690924, 0.12672580539389566, 0.34008145389036426, 0.14123093834217837, 0.27544428278168676, 0.1662967330861571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08470455790022391, 0.0473593900879139, 0.10002214449133007, 0.055580817419644934, 0.021826382255964782, 0.06847563219374164, 0.08278271088732236, 0.06106267243287744, 0.0767461649908624, 0.18539972640985314, 0.22510756252605757, 0.12729882150137606, 0.07558651150569218, 0.3233250014672504, 0.24896884814543785, 0.22703590905816784, 0.07672869523475934, 0.07260140001553317, 0.11319027068730758, 0.24600056104498336, 0.22683079317778554, 0.014624041145125166, 0.15336109743111648, 0.09398030187079143, 9.999999999998899e-05, 0.055799603506089035, 0.08202000284289201, 0.5743265184534205, 0.45645039550970623, 0.5248917796627878, 0.4069499253975991, 0.48180561125313937, 0.20972259861873166, 0.5159160503666567, 0.47100348774190615, 0.5071173605566306, 0.04658450384153712, 0.06485425664538491, 0.05930075570267035, 0.08473250306385949, 0.08427534864102859, 0.09973064705252199, 0.10941118975532504, 0.11326108622723818, 0.09774785225427562, 0.21697595542712889, 0.12678529170669717, 0.25739481540789644, 0.20956771488091097, 0.25108979132894893, 0.24848215035438181, 0.23025522702291756, 0.14809676320016263, 0.17727093907519353, 0.22498186825605604, 0.33976368000639845, 0.35965714577762686, 0.2360002549642236, 0.30691636030140956, 0.23274512090528887, 0.2983732652605354, 0.3342428754497726, 0.26728022868819834, 0.15125286134761773, 0.21700614402933582, 0.19477646049136432, 0.18597203271914653, 0.18891853954829751, 0.3399798069178892, 0.2577237955677797, 0.22242946369464722, 0.17846013433948338, 0.1993928066543883, 0.22264053585091337, 0.1949097070197331, 0.22708834256658383, 0.28510486396798096, 0.24448961662662017, 0.20480473647119912, 0.16947581957912095, 0.2489466900213203, 0.1909037677006976, 0.19693226734431502, 0.2005770437827873, 0.22529578577192522, 0.16584691702640542, 0.1725869027989293, 0.17341813008949158, 0.1944643816614131, 0.2075803363502149, 0.12501630038949152, 0.1882540012813233, 0.15361992138683778, 0.9333714278564751, 0.199955018458421, 0.16892024407554984, 0.09934800930908627, 0.16829872131640622, 0.17756161586648578, 0.4882993652291575, 0.15551770616506477, 0.28079431449368997, 0.32240155148721783, 0.16795047578108935, 0.34397967411644537, 0.10448372903928671, 0.2737402685434931, 0.21466768056321028, 0.21368306437062212, 0.19105862804643992, 0.19865502695025838, 0.20529902490615293, 0.1800033274023113, 0.19167954266506115, 0.19242986749654156, 0.19581421212828398, 0.18612167999728513, 0.10448134966053202, 0.07509480867308482, 0.078156710836501, 0.07086779020673606, 0.08229726457008979, 0.08555764004379396, 0.07332545989939665, 0.07731332250357448, 0.0947571287402108]}, "mutation_prompt": null}
{"id": "71111337-f952-4753-80fe-7e984e7087c1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Increased swarm size for better diversity\n        self.alpha = 0.1      # Increased influence of personal and global bests\n        self.inertia_start = 0.9  # Starting inertia weight\n        self.inertia_end = 0.4    # Ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with improved particle update mechanism and adaptive inertia weight for better convergence.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "62138870-b4eb-426b-8ca5-9f0eac765cc9", "metadata": {"aucs": [0.8792799352899773, 0.8762045730866073, 0.8789723318928863, 0.4369454470548534, 0.8698624808780299, 0.8638834489056221, 0.8758478061988946, 0.876629936750557, 0.33510857125685056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0899583755695339, 0.11387739887284609, 0.14315795030104217, 0.14732997978031803, 0.09862337535507848, 0.11689133185448353, 0.08307575778817677, 0.1046734982085189, 0.11278517815178202, 0.18517074648891207, 0.09509980725224265, 0.06424051782497942, 0.09342697428853008, 0.08631744652343243, 0.1236462968901405, 0.0740726853570206, 0.062139459609351744, 0.11519648676531924, 0.9651764320882624, 0.9643996761526112, 0.9546038909474155, 0.9131028822654155, 0.941331644204641, 0.9373009089571307, 0.9412978219333207, 0.9500060689814868, 0.9759803986482282, 0.11177293151383205, 0.2540950996385941, 0.17117585827609583, 0.25280221430981165, 0.33986714210200075, 0.1501259840633007, 0.21035008378679565, 0.13144098758831768, 0.06725486523393043, 0.1664458834221958, 0.32953218150750685, 0.20849063208095164, 0.35882261742942556, 0.21931558508172388, 0.378935544548618, 0.15160650307071644, 0.17346916281665303, 0.23132496347919262, 0.22224755735157065, 0.20174517736853315, 9.999999999998899e-05, 0.13582694793640948, 0.14483021852757338, 0.1380744384011774, 0.1328375198256162, 0.18014283767397388, 0.18171272118010828, 0.2288461570326905, 0.1576760669562598, 0.3580943131845141, 0.35129044141690924, 0.12672580539389566, 0.34008145389036426, 0.14123093834217837, 0.27544428278168676, 0.1662967330861571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08470455790022391, 0.0473593900879139, 0.10002214449133007, 0.055580817419644934, 0.021826382255964782, 0.06847563219374164, 0.08278271088732236, 0.06106267243287744, 0.0767461649908624, 0.18539972640985314, 0.22510756252605757, 0.12729882150137606, 0.07558651150569218, 0.3233250014672504, 0.24896884814543785, 0.22703590905816784, 0.07672869523475934, 0.07260140001553317, 0.11319027068730758, 0.24600056104498336, 0.22683079317778554, 0.014624041145125166, 0.15336109743111648, 0.09398030187079143, 9.999999999998899e-05, 0.055799603506089035, 0.08202000284289201, 0.5743265184534205, 0.45645039550970623, 0.5248917796627878, 0.4069499253975991, 0.48180561125313937, 0.20972259861873166, 0.5159160503666567, 0.47100348774190615, 0.5071173605566306, 0.04658450384153712, 0.06485425664538491, 0.05930075570267035, 0.08473250306385949, 0.08427534864102859, 0.09973064705252199, 0.10941118975532504, 0.11326108622723818, 0.09774785225427562, 0.21697595542712889, 0.12678529170669717, 0.25739481540789644, 0.20956771488091097, 0.25108979132894893, 0.24848215035438181, 0.23025522702291756, 0.14809676320016263, 0.17727093907519353, 0.22498186825605604, 0.33976368000639845, 0.35965714577762686, 0.2360002549642236, 0.30691636030140956, 0.23274512090528887, 0.2983732652605354, 0.3342428754497726, 0.26728022868819834, 0.15125286134761773, 0.21700614402933582, 0.19477646049136432, 0.18597203271914653, 0.18891853954829751, 0.3399798069178892, 0.2577237955677797, 0.22242946369464722, 0.17846013433948338, 0.1993928066543883, 0.22264053585091337, 0.1949097070197331, 0.22708834256658383, 0.28510486396798096, 0.24448961662662017, 0.20480473647119912, 0.16947581957912095, 0.2489466900213203, 0.1909037677006976, 0.19693226734431502, 0.2005770437827873, 0.22529578577192522, 0.16584691702640542, 0.1725869027989293, 0.17341813008949158, 0.1944643816614131, 0.2075803363502149, 0.12501630038949152, 0.1882540012813233, 0.15361992138683778, 0.9333714278564751, 0.199955018458421, 0.16892024407554984, 0.09934800930908627, 0.16829872131640622, 0.17756161586648578, 0.4882993652291575, 0.15551770616506477, 0.28079431449368997, 0.32240155148721783, 0.16795047578108935, 0.34397967411644537, 0.10448372903928671, 0.2737402685434931, 0.21466768056321028, 0.21368306437062212, 0.19105862804643992, 0.19865502695025838, 0.20529902490615293, 0.1800033274023113, 0.19167954266506115, 0.19242986749654156, 0.19581421212828398, 0.18612167999728513, 0.10448134966053202, 0.07509480867308482, 0.078156710836501, 0.07086779020673606, 0.08229726457008979, 0.08555764004379396, 0.07332545989939665, 0.07731332250357448, 0.0947571287402108]}, "mutation_prompt": null}
{"id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.2  # Split influence for personal and global bests\n        self.alpha_social = 0.2\n        self.inertia_start = 0.85  # Slightly adjusted starting inertia weight\n        self.inertia_end = 0.3  # Slightly adjusted ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:  # Check budget before updating each particle\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with dual adaptive parameters and dynamic velocity adjustment for better convergence.", "configspace": "", "generation": 16, "fitness": 0.24945444455112556, "feedback": "The algorithm EnhancedAdaptiveSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "62138870-b4eb-426b-8ca5-9f0eac765cc9", "metadata": {"aucs": [0.8957985916311573, 0.8872145966229463, 0.8945527291877602, 0.8818125403159197, 0.8857397788695567, 0.8913923332049689, 0.8958048602714308, 0.8904613652353742, 0.8884552095439588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02172618972936413, 9.999999999998899e-05, 0.07955259532255365, 0.11702716170342375, 0.1589789537701337, 0.11792556896747608, 0.11344514790168703, 0.10620729034379162, 0.07886353454868744, 0.1082825301176541, 0.14232467027425155, 0.0961367296857647, 0.05345064074046735, 0.06730914306352442, 0.08625134130382761, 0.07775129542453485, 0.06762633781338923, 0.14233434435691072, 0.07652674046925623, 0.07884522607805522, 0.9632001322294796, 0.9577902453901562, 0.9677467904953159, 0.9240631244535167, 0.9515347095858894, 0.9279183041775199, 0.9558308890125765, 0.9515985765455275, 0.9607995915778704, 0.1844237575420571, 0.6457950575927107, 0.28844673167696033, 0.4229183820524951, 0.4215437579977408, 0.3324621998418563, 0.14513124987490067, 0.08750117648460543, 0.18352327354433484, 0.21732039566873818, 0.22884316234351676, 0.16968235768868778, 0.22068255210260923, 0.17290116642842857, 0.1929997026598973, 0.06778079956686833, 0.15318718384634245, 0.35201102116698857, 0.18198267822371605, 0.17673746820788983, 0.03850357651379854, 0.21546102043287652, 0.14531678188406727, 9.999999999998899e-05, 0.12633258408075732, 0.2268702957362615, 0.15344838594137877, 0.14430759374005242, 0.15890355620383978, 0.12370908782104417, 0.36678300183731793, 0.13350992223460378, 0.15218492128232863, 0.18618181569434566, 0.22564008171377414, 0.13296013947605423, 9.999999999998899e-05, 9.999999999998899e-05, 0.06941540937860569, 0.039204352669887865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06433151026611905, 0.13034145603432357, 0.08566007536941156, 0.08124897939583753, 0.06795581608406409, 0.017752659040250363, 0.012915493287475877, 0.08300105905358435, 0.09323699555855314, 0.07576317628071683, 0.049057019035295024, 0.05002259340321602, 0.07888619132503027, 0.07668325331308334, 0.24297646953601892, 0.12167115044123988, 0.4435982524073242, 0.07219490299609965, 0.10839732455768403, 0.09369009816392349, 0.18219734155425593, 0.1602626776231304, 0.05929357950405445, 0.1960778960791999, 0.16972976687117647, 0.08227117530681194, 0.0842492356884813, 0.08314122249140621, 0.5002020795728912, 0.5349236363149164, 0.44775951816617254, 0.5101628959618454, 0.47544556763957413, 0.5125745639672336, 0.5306790652011882, 0.5004635028300082, 0.4316564214489663, 0.07029980510943346, 0.08724563140307218, 0.10911168541637195, 0.13478450290099642, 0.14128293350392618, 0.09541977888234665, 0.11635444822651642, 0.1362020930020824, 0.09668161352112092, 0.20382724681590492, 0.24302748385787198, 0.16645217830195236, 0.2572318498678522, 0.3562453649952607, 0.198154630670222, 0.2504973594228379, 0.21548435017527312, 0.2428839182178102, 0.19814487050661578, 0.3281235428548446, 0.294888008927237, 0.26099813012138684, 0.40698364108710217, 0.3150014286896846, 0.5683504944500195, 0.2716604060052741, 0.29328739347488186, 0.1710634310510335, 0.19878960329973894, 0.21275783989201535, 0.22512324446215148, 0.16644527851598045, 0.2496856685026796, 0.19232339432881984, 0.26567953662136723, 0.19178646540015853, 0.2226365251758814, 0.15678928531776604, 0.2226623962117973, 0.2130252798616632, 0.22606166305233266, 0.2129314295923419, 0.2665587837574358, 0.2129062517944068, 0.25390537965695326, 0.18023499882360206, 0.20804690957939498, 0.21039540131550094, 0.8409313946228231, 0.1829168769894013, 0.1869484062742346, 0.18437088148271208, 0.21652961122219716, 0.19324233114952427, 0.10676964580054915, 0.18772557791395317, 0.18774455210627627, 0.8248274299202691, 0.2005819992373582, 0.9177568899063734, 0.1220968003566757, 0.16949783584305766, 0.16812373629560384, 0.48504924140998096, 0.1565594442693804, 0.4950886419563326, 0.5446992357884102, 0.16854348798559093, 0.3124586683099083, 0.1044782368314594, 0.10472125709163482, 0.22430300637621348, 0.208251815025987, 0.18473328354555474, 0.19601639068901466, 0.200777908453022, 0.1894474830574968, 0.19680795375987792, 0.1933245598555272, 0.18624718223452952, 0.22484230393956794, 0.09238523865150783, 0.1057958865822276, 0.09915212072882462, 0.1067537801279923, 0.09579486621526412, 0.15842740036773417, 0.10143787185566999, 0.09558150455867542, 0.08312269474522838]}, "mutation_prompt": null}
{"id": "fc098e78-98ed-4d33-a333-8c42b885e313", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 32  # Slightly increased swarm size\n        self.alpha_cognitive = 0.25  # Adjusted cognitive influence\n        self.alpha_social = 0.15  # Adjusted social influence\n        self.inertia_start = 0.9  # Increased starting inertia weight\n        self.inertia_end = 0.2  # Reduced ending inertia weight\n        self.quantum_behavior = 0.1  # Quantum behavior adjustment\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (self.swarm_size, self.dim))  # Adjusted initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i])\n                                         + self.quantum_behavior * (np.random.uniform(self.lower_bound, self.upper_bound, self.dim) - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveQuantumSwarmGradientDescent", "description": "Adaptive Quantum-inspired Swarm Gradient Descent with quantum behavior imitation and parameter tuning for improved optimization.", "configspace": "", "generation": 17, "fitness": 0.1262330216832309, "feedback": "The algorithm AdaptiveQuantumSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.28404381662069766, 0.28319901788656643, 0.28457225958251, 0.19318957600796638, 0.2271914974919258, 0.19228142521739588, 0.20949948547765285, 0.22803229947430415, 0.20662996116017607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06941998349351475, 0.07856676190075518, 0.06053514478018529, 0.058968816171795724, 0.08490818603160055, 0.0734482165799909, 0.09324078987152151, 0.0669202830472555, 0.1041546871586001, 0.08558869403311331, 0.07551142767976193, 0.05691740635135101, 0.05868399664695678, 0.058479005920196725, 0.05926680674118945, 0.06715229713040316, 0.05690448251604485, 0.07208577350074263, 0.06693482496830983, 0.12882604231048644, 0.08785450807890616, 0.06871443450195824, 0.07728938658898532, 0.08147807867130885, 0.0787670100866048, 0.07367322968611656, 0.0713194723972227, 0.10545264053691894, 0.13023458090394002, 0.13202795445462834, 0.1263234527081999, 0.10244681042095638, 0.08583705262975039, 0.10640364461547847, 0.12053699563811593, 0.10976170971628874, 0.20172914508314332, 0.1991710556688755, 0.19697059317122056, 0.17273191535209753, 0.19469564983549892, 0.15873276519223223, 0.21058657074136378, 0.14683106819071112, 0.17195348683260203, 0.07678611750264153, 0.07444629674444114, 0.09006656214392172, 0.02100863379159601, 0.09889211950935584, 0.055975338972452326, 0.04852379515261762, 0.07541541217127268, 0.10445294419071183, 0.12292669535347756, 0.11196509002842481, 0.10827628598558547, 0.11405645236054096, 0.10972837818663628, 0.1273850082892437, 0.10529564291428084, 0.12387305771337664, 0.12571268234005306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09180038589013106, 0.12409931736970103, 0.11683201616014216, 0.07652759639953854, 0.07929663797656372, 0.082605444472033, 0.10101402139958116, 0.09664949802603007, 0.1123971915006825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033828022686577253, 0.00044316722161530375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018298942121930395, 9.999999999998899e-05, 0.30054672660522286, 0.28680282261467405, 0.2612974547880711, 0.22754596455613119, 0.26464758253084997, 0.2721958235324452, 0.2908634289932216, 0.2822928564845235, 0.3022129860947468, 0.04925938801297858, 0.04219035692471129, 0.039898936043778144, 0.06052751780422949, 0.07391435914912159, 0.06509247318892608, 0.06993841771022469, 0.07210396392745755, 0.08125611476374273, 0.13530216105640502, 0.16201785257657197, 0.15261097015213687, 0.13784874881282483, 0.15236247200456488, 0.15571380362384757, 0.17476347860942953, 0.16715264044688938, 0.14447326438048458, 0.2089500947393479, 0.21234843155151206, 0.21015171132374832, 0.23532769406166754, 0.22541928621426166, 0.22244378099847117, 0.1774564365653437, 0.19646769579651213, 0.18130188716659146, 0.1366901775128294, 0.1569725088535281, 0.16321970163836863, 0.1978289753886192, 0.1918954082324682, 0.16917200685638822, 0.14862516405695658, 0.1386561454464379, 0.1464654434926841, 0.239380677749934, 0.22239693078360057, 0.22467546400078342, 0.22800445100460853, 0.21716835965419878, 0.2351120735676372, 0.2226380628307757, 0.22861711114239125, 0.23927718365235395, 0.16821711720960286, 0.16375244471391748, 0.16431848640562896, 0.16660068277236006, 0.16650014393099188, 0.17016362979700284, 0.17880144293204925, 0.17754882056677812, 0.16971811969670925, 0.17221598790474368, 0.17689477127607622, 0.17869976523154107, 0.3120680502893206, 0.2992094584955043, 0.1345027955892505, 0.2209179660090096, 0.34782418212521504, 0.3088852883597738, 0.31858425337709895, 0.37501631926122614, 0.2959962233150556, 0.1633226173804635, 0.11826439082717921, 0.17582175259715527, 0.22274018048395205, 0.16320077381071718, 0.2314538298123776, 0.19958922164746462, 0.1823135616707412, 0.17778001407143806, 0.18507835699139574, 0.1766435163537553, 0.20224293966629214, 0.1746433085157234, 0.19009445145565806, 0.1825916705845806, 0.08704476217526058, 0.07274872943354693, 0.07427738965223585, 0.06310715503999742, 0.07290810572178597, 0.06716275527978344, 0.07401980471433511, 0.08085464346787463, 0.07885670959147917]}, "mutation_prompt": null}
{"id": "d8665ce9-46d3-456f-8aee-dd0a3d5dc3b9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        # Retain original parameters with minor adjustments\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better diversity\n        self.alpha_cognitive = 0.3  # Adjusted cognitive influence\n        self.alpha_social = 0.3  # Adjusted social influence\n        self.inertia_start = 0.9  # Higher starting inertia weight for exploration\n        self.inertia_end = 0.4  # Higher ending inertia weight for stability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.zeros((self.swarm_size, self.dim))  # Start with zero velocities for stability\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * np.exp(-5 * evaluations / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with tuned parameters and velocity control for improved convergence efficiency.", "configspace": "", "generation": 18, "fitness": 0.24829263484321515, "feedback": "The algorithm EnhancedAdaptiveSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.897595655357998, 0.8882756467866686, 0.8916406564540977, 0.8881333759252675, 0.8685512064967646, 0.8927368852445663, 0.8894352383213071, 0.8831637933368852, 0.8809788353004769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030589363014512982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10497046616925088, 0.10993579512139329, 0.18359524219152923, 0.11073014096174028, 0.13908232994195424, 0.14488379740189594, 0.0916536972862767, 0.09699184768417413, 0.08237201161255214, 0.08789827984232212, 0.09593874423240845, 0.07345173641936198, 0.0769057030307504, 0.0962741675476152, 0.08165093684059943, 0.12200599509728671, 0.0958294811349919, 0.0916028093162562, 0.967682568554431, 0.975446566151093, 0.9704415311307399, 0.9516673625169456, 0.952893114390099, 0.9512112379694897, 0.9720743729123507, 0.9566185797151114, 0.9607833866989124, 0.35305849323552685, 0.41528509160964866, 0.2924438039484708, 0.35196941118222924, 0.17663784080917833, 0.15161919664348555, 0.5240183854660521, 0.22869720356858902, 0.3384242855140098, 0.18667062989085248, 0.14547127079824984, 0.16974950181729986, 0.21375479353725113, 0.1936125637984405, 0.27286098301780526, 0.0932980201025625, 0.15093930795875854, 0.17936804838491205, 0.1748125519570085, 0.44527802444944986, 0.12348469292085829, 0.13130667801230378, 0.1272850321311515, 0.1296270297314075, 0.3005522383923217, 0.13168598926695463, 0.14669355954851782, 0.16016332935376576, 0.12098152779818883, 0.13254052875757394, 0.15580972118631287, 0.13797300495734144, 0.13550617329587678, 0.17684034806575277, 0.16789671936529071, 0.2773925146107752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00937369697973156, 9.999999999998899e-05, 9.999999999998899e-05, 0.06036151321918837, 9.999999999998899e-05, 9.999999999998899e-05, 0.1151427694616115, 0.08038331424103795, 0.09642821409938629, 0.01910413291369406, 0.057636366839968645, 0.022764291786131263, 0.06691313261468057, 0.04762292681597935, 0.03304322722536779, 0.09806118180867363, 0.16360826850910926, 0.23113256363434798, 0.08470722651161322, 0.185161459454656, 0.0821083969735733, 0.181198923877689, 0.07279858197372557, 0.10798082187912583, 0.28762263960243395, 0.051374511240924625, 0.3003893001970144, 0.15271924930423797, 0.136170792579847, 0.025125856617242204, 0.1412222496281611, 0.13513456730750517, 0.08257274286398242, 0.47452657060315895, 0.4666019545094666, 0.46688911559254764, 0.4572651846113097, 0.4899780459518607, 0.5971261716767704, 0.44737320091751476, 0.49214706585485624, 0.5074363792317238, 0.0961734917017113, 0.12184911598054571, 0.10449645342860736, 0.11492263909144129, 0.10711747237073521, 0.14119003344468561, 0.11602065651384497, 0.1087393192065561, 0.08431290041227968, 0.20929641335307536, 0.2399406756980922, 0.20275915177457116, 0.2746691173262489, 0.4051667045402544, 0.21744567744309462, 0.17618082226685705, 0.17087110711158182, 0.19314344782695025, 0.1725303803560575, 0.25649443278914796, 0.2533999364455535, 0.2651702382637553, 0.22922818056100092, 0.289373682049371, 0.26604997467180325, 0.26643274833266073, 0.3524393124255434, 0.19627836495303086, 0.18831611430195316, 0.25804672319807576, 0.27437416561369676, 0.16801517403038435, 0.25278234632515684, 0.2732920625469121, 0.27176943480157756, 0.20503720466198683, 0.21523731907101495, 0.23348700661895228, 0.20601836371262616, 0.24675545335869953, 0.20580591931564918, 0.20100901792351233, 0.2312642135533366, 0.24110841879896883, 0.2112089090734871, 0.1802992346666128, 0.1976764586240367, 0.1796741358623407, 0.19929881054985477, 0.18509984105996669, 0.2265945556446628, 0.18575327357411975, 0.18677358001699695, 0.200755609408115, 0.12649890637874872, 0.17597895110389106, 0.15362939600306835, 0.9385739732658135, 0.2006603762442002, 0.8125830229978532, 0.7186949498407877, 0.16973576595061035, 0.6701807954031813, 0.4545527679993808, 0.21101482446156228, 0.4257045861071097, 0.10423643648479264, 0.1681898233045389, 0.1553720005358793, 0.10479712707657818, 0.15903898828445184, 0.27656630552876826, 0.20223212135591973, 0.18387298957703857, 0.20457155111569425, 0.20829301204910822, 0.19322221888174174, 0.19497876294423933, 0.2297842892880687, 0.18130458981349684, 0.1909776615422092, 0.08794402859880524, 0.08786666889138595, 0.06960597981611294, 0.10307112804833085, 0.13338220000697643, 0.09669201113296344, 0.10028731632644738, 0.09917142686968605, 0.08268871394918009]}, "mutation_prompt": null}
{"id": "2d584e44-c409-4106-972c-62f0caeaea45", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.2  # Split influence for personal and global bests\n        self.alpha_social = 0.2\n        self.inertia_start = 0.85  # Slightly adjusted starting inertia weight\n        self.inertia_end = 0.3  # Slightly adjusted ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:  # Check budget before updating each particle\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with dual adaptive parameters and dynamic velocity adjustment for better convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.8957985916311573, 0.8872145966229463, 0.8945527291877602, 0.8818125403159197, 0.8857397788695567, 0.8913923332049689, 0.8958048602714308, 0.8904613652353742, 0.8884552095439588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02172618972936413, 9.999999999998899e-05, 0.07955259532255365, 0.11702716170342375, 0.1589789537701337, 0.11792556896747608, 0.11344514790168703, 0.10620729034379162, 0.07886353454868744, 0.1082825301176541, 0.14232467027425155, 0.0961367296857647, 0.05345064074046735, 0.06730914306352442, 0.08625134130382761, 0.07775129542453485, 0.06762633781338923, 0.14233434435691072, 0.07652674046925623, 0.07884522607805522, 0.9632001322294796, 0.9577902453901562, 0.9677467904953159, 0.9240631244535167, 0.9515347095858894, 0.9279183041775199, 0.9558308890125765, 0.9515985765455275, 0.9607995915778704, 0.1844237575420571, 0.6457950575927107, 0.28844673167696033, 0.4229183820524951, 0.4215437579977408, 0.3324621998418563, 0.14513124987490067, 0.08750117648460543, 0.18352327354433484, 0.21732039566873818, 0.22884316234351676, 0.16968235768868778, 0.22068255210260923, 0.17290116642842857, 0.1929997026598973, 0.06778079956686833, 0.15318718384634245, 0.35201102116698857, 0.18198267822371605, 0.17673746820788983, 0.03850357651379854, 0.21546102043287652, 0.14531678188406727, 9.999999999998899e-05, 0.12633258408075732, 0.2268702957362615, 0.15344838594137877, 0.14430759374005242, 0.15890355620383978, 0.12370908782104417, 0.36678300183731793, 0.13350992223460378, 0.15218492128232863, 0.18618181569434566, 0.22564008171377414, 0.13296013947605423, 9.999999999998899e-05, 9.999999999998899e-05, 0.06941540937860569, 0.039204352669887865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06433151026611905, 0.13034145603432357, 0.08566007536941156, 0.08124897939583753, 0.06795581608406409, 0.017752659040250363, 0.012915493287475877, 0.08300105905358435, 0.09323699555855314, 0.07576317628071683, 0.049057019035295024, 0.05002259340321602, 0.07888619132503027, 0.07668325331308334, 0.24297646953601892, 0.12167115044123988, 0.4435982524073242, 0.07219490299609965, 0.10839732455768403, 0.09369009816392349, 0.18219734155425593, 0.1602626776231304, 0.05929357950405445, 0.1960778960791999, 0.16972976687117647, 0.08227117530681194, 0.0842492356884813, 0.08314122249140621, 0.5002020795728912, 0.5349236363149164, 0.44775951816617254, 0.5101628959618454, 0.47544556763957413, 0.5125745639672336, 0.5306790652011882, 0.5004635028300082, 0.4316564214489663, 0.07029980510943346, 0.08724563140307218, 0.10911168541637195, 0.13478450290099642, 0.14128293350392618, 0.09541977888234665, 0.11635444822651642, 0.1362020930020824, 0.09668161352112092, 0.20382724681590492, 0.24302748385787198, 0.16645217830195236, 0.2572318498678522, 0.3562453649952607, 0.198154630670222, 0.2504973594228379, 0.21548435017527312, 0.2428839182178102, 0.19814487050661578, 0.3281235428548446, 0.294888008927237, 0.26099813012138684, 0.40698364108710217, 0.3150014286896846, 0.5683504944500195, 0.2716604060052741, 0.29328739347488186, 0.1710634310510335, 0.19878960329973894, 0.21275783989201535, 0.22512324446215148, 0.16644527851598045, 0.2496856685026796, 0.19232339432881984, 0.26567953662136723, 0.19178646540015853, 0.2226365251758814, 0.15678928531776604, 0.2226623962117973, 0.2130252798616632, 0.22606166305233266, 0.2129314295923419, 0.2665587837574358, 0.2129062517944068, 0.25390537965695326, 0.18023499882360206, 0.20804690957939498, 0.21039540131550094, 0.8409313946228231, 0.1829168769894013, 0.1869484062742346, 0.18437088148271208, 0.21652961122219716, 0.19324233114952427, 0.10676964580054915, 0.18772557791395317, 0.18774455210627627, 0.8248274299202691, 0.2005819992373582, 0.9177568899063734, 0.1220968003566757, 0.16949783584305766, 0.16812373629560384, 0.48504924140998096, 0.1565594442693804, 0.4950886419563326, 0.5446992357884102, 0.16854348798559093, 0.3124586683099083, 0.1044782368314594, 0.10472125709163482, 0.22430300637621348, 0.208251815025987, 0.18473328354555474, 0.19601639068901466, 0.200777908453022, 0.1894474830574968, 0.19680795375987792, 0.1933245598555272, 0.18624718223452952, 0.22484230393956794, 0.09238523865150783, 0.1057958865822276, 0.09915212072882462, 0.1067537801279923, 0.09579486621526412, 0.15842740036773417, 0.10143787185566999, 0.09558150455867542, 0.08312269474522838]}, "mutation_prompt": null}
{"id": "5b2337dd-b533-41ad-84b9-e8bae8dd3b11", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.2  # Split influence for personal and global bests\n        self.alpha_social = 0.2\n        self.inertia_start = 0.85  # Slightly adjusted starting inertia weight\n        self.inertia_end = 0.3  # Slightly adjusted ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:  # Check budget before updating each particle\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with dual adaptive parameters and dynamic velocity adjustment for better convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.8957985916311573, 0.8872145966229463, 0.8945527291877602, 0.8818125403159197, 0.8857397788695567, 0.8913923332049689, 0.8958048602714308, 0.8904613652353742, 0.8884552095439588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02172618972936413, 9.999999999998899e-05, 0.07955259532255365, 0.11702716170342375, 0.1589789537701337, 0.11792556896747608, 0.11344514790168703, 0.10620729034379162, 0.07886353454868744, 0.1082825301176541, 0.14232467027425155, 0.0961367296857647, 0.05345064074046735, 0.06730914306352442, 0.08625134130382761, 0.07775129542453485, 0.06762633781338923, 0.14233434435691072, 0.07652674046925623, 0.07884522607805522, 0.9632001322294796, 0.9577902453901562, 0.9677467904953159, 0.9240631244535167, 0.9515347095858894, 0.9279183041775199, 0.9558308890125765, 0.9515985765455275, 0.9607995915778704, 0.1844237575420571, 0.6457950575927107, 0.28844673167696033, 0.4229183820524951, 0.4215437579977408, 0.3324621998418563, 0.14513124987490067, 0.08750117648460543, 0.18352327354433484, 0.21732039566873818, 0.22884316234351676, 0.16968235768868778, 0.22068255210260923, 0.17290116642842857, 0.1929997026598973, 0.06778079956686833, 0.15318718384634245, 0.35201102116698857, 0.18198267822371605, 0.17673746820788983, 0.03850357651379854, 0.21546102043287652, 0.14531678188406727, 9.999999999998899e-05, 0.12633258408075732, 0.2268702957362615, 0.15344838594137877, 0.14430759374005242, 0.15890355620383978, 0.12370908782104417, 0.36678300183731793, 0.13350992223460378, 0.15218492128232863, 0.18618181569434566, 0.22564008171377414, 0.13296013947605423, 9.999999999998899e-05, 9.999999999998899e-05, 0.06941540937860569, 0.039204352669887865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06433151026611905, 0.13034145603432357, 0.08566007536941156, 0.08124897939583753, 0.06795581608406409, 0.017752659040250363, 0.012915493287475877, 0.08300105905358435, 0.09323699555855314, 0.07576317628071683, 0.049057019035295024, 0.05002259340321602, 0.07888619132503027, 0.07668325331308334, 0.24297646953601892, 0.12167115044123988, 0.4435982524073242, 0.07219490299609965, 0.10839732455768403, 0.09369009816392349, 0.18219734155425593, 0.1602626776231304, 0.05929357950405445, 0.1960778960791999, 0.16972976687117647, 0.08227117530681194, 0.0842492356884813, 0.08314122249140621, 0.5002020795728912, 0.5349236363149164, 0.44775951816617254, 0.5101628959618454, 0.47544556763957413, 0.5125745639672336, 0.5306790652011882, 0.5004635028300082, 0.4316564214489663, 0.07029980510943346, 0.08724563140307218, 0.10911168541637195, 0.13478450290099642, 0.14128293350392618, 0.09541977888234665, 0.11635444822651642, 0.1362020930020824, 0.09668161352112092, 0.20382724681590492, 0.24302748385787198, 0.16645217830195236, 0.2572318498678522, 0.3562453649952607, 0.198154630670222, 0.2504973594228379, 0.21548435017527312, 0.2428839182178102, 0.19814487050661578, 0.3281235428548446, 0.294888008927237, 0.26099813012138684, 0.40698364108710217, 0.3150014286896846, 0.5683504944500195, 0.2716604060052741, 0.29328739347488186, 0.1710634310510335, 0.19878960329973894, 0.21275783989201535, 0.22512324446215148, 0.16644527851598045, 0.2496856685026796, 0.19232339432881984, 0.26567953662136723, 0.19178646540015853, 0.2226365251758814, 0.15678928531776604, 0.2226623962117973, 0.2130252798616632, 0.22606166305233266, 0.2129314295923419, 0.2665587837574358, 0.2129062517944068, 0.25390537965695326, 0.18023499882360206, 0.20804690957939498, 0.21039540131550094, 0.8409313946228231, 0.1829168769894013, 0.1869484062742346, 0.18437088148271208, 0.21652961122219716, 0.19324233114952427, 0.10676964580054915, 0.18772557791395317, 0.18774455210627627, 0.8248274299202691, 0.2005819992373582, 0.9177568899063734, 0.1220968003566757, 0.16949783584305766, 0.16812373629560384, 0.48504924140998096, 0.1565594442693804, 0.4950886419563326, 0.5446992357884102, 0.16854348798559093, 0.3124586683099083, 0.1044782368314594, 0.10472125709163482, 0.22430300637621348, 0.208251815025987, 0.18473328354555474, 0.19601639068901466, 0.200777908453022, 0.1894474830574968, 0.19680795375987792, 0.1933245598555272, 0.18624718223452952, 0.22484230393956794, 0.09238523865150783, 0.1057958865822276, 0.09915212072882462, 0.1067537801279923, 0.09579486621526412, 0.15842740036773417, 0.10143787185566999, 0.09558150455867542, 0.08312269474522838]}, "mutation_prompt": null}
{"id": "247f0e47-61f0-49a8-8338-0b9459131295", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.2  # Split influence for personal and global bests\n        self.alpha_social = 0.2\n        self.inertia_start = 0.85  # Slightly adjusted starting inertia weight\n        self.inertia_end = 0.3  # Slightly adjusted ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:  # Check budget before updating each particle\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with dual adaptive parameters and dynamic velocity adjustment for better convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.8957985916311573, 0.8872145966229463, 0.8945527291877602, 0.8818125403159197, 0.8857397788695567, 0.8913923332049689, 0.8958048602714308, 0.8904613652353742, 0.8884552095439588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02172618972936413, 9.999999999998899e-05, 0.07955259532255365, 0.11702716170342375, 0.1589789537701337, 0.11792556896747608, 0.11344514790168703, 0.10620729034379162, 0.07886353454868744, 0.1082825301176541, 0.14232467027425155, 0.0961367296857647, 0.05345064074046735, 0.06730914306352442, 0.08625134130382761, 0.07775129542453485, 0.06762633781338923, 0.14233434435691072, 0.07652674046925623, 0.07884522607805522, 0.9632001322294796, 0.9577902453901562, 0.9677467904953159, 0.9240631244535167, 0.9515347095858894, 0.9279183041775199, 0.9558308890125765, 0.9515985765455275, 0.9607995915778704, 0.1844237575420571, 0.6457950575927107, 0.28844673167696033, 0.4229183820524951, 0.4215437579977408, 0.3324621998418563, 0.14513124987490067, 0.08750117648460543, 0.18352327354433484, 0.21732039566873818, 0.22884316234351676, 0.16968235768868778, 0.22068255210260923, 0.17290116642842857, 0.1929997026598973, 0.06778079956686833, 0.15318718384634245, 0.35201102116698857, 0.18198267822371605, 0.17673746820788983, 0.03850357651379854, 0.21546102043287652, 0.14531678188406727, 9.999999999998899e-05, 0.12633258408075732, 0.2268702957362615, 0.15344838594137877, 0.14430759374005242, 0.15890355620383978, 0.12370908782104417, 0.36678300183731793, 0.13350992223460378, 0.15218492128232863, 0.18618181569434566, 0.22564008171377414, 0.13296013947605423, 9.999999999998899e-05, 9.999999999998899e-05, 0.06941540937860569, 0.039204352669887865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06433151026611905, 0.13034145603432357, 0.08566007536941156, 0.08124897939583753, 0.06795581608406409, 0.017752659040250363, 0.012915493287475877, 0.08300105905358435, 0.09323699555855314, 0.07576317628071683, 0.049057019035295024, 0.05002259340321602, 0.07888619132503027, 0.07668325331308334, 0.24297646953601892, 0.12167115044123988, 0.4435982524073242, 0.07219490299609965, 0.10839732455768403, 0.09369009816392349, 0.18219734155425593, 0.1602626776231304, 0.05929357950405445, 0.1960778960791999, 0.16972976687117647, 0.08227117530681194, 0.0842492356884813, 0.08314122249140621, 0.5002020795728912, 0.5349236363149164, 0.44775951816617254, 0.5101628959618454, 0.47544556763957413, 0.5125745639672336, 0.5306790652011882, 0.5004635028300082, 0.4316564214489663, 0.07029980510943346, 0.08724563140307218, 0.10911168541637195, 0.13478450290099642, 0.14128293350392618, 0.09541977888234665, 0.11635444822651642, 0.1362020930020824, 0.09668161352112092, 0.20382724681590492, 0.24302748385787198, 0.16645217830195236, 0.2572318498678522, 0.3562453649952607, 0.198154630670222, 0.2504973594228379, 0.21548435017527312, 0.2428839182178102, 0.19814487050661578, 0.3281235428548446, 0.294888008927237, 0.26099813012138684, 0.40698364108710217, 0.3150014286896846, 0.5683504944500195, 0.2716604060052741, 0.29328739347488186, 0.1710634310510335, 0.19878960329973894, 0.21275783989201535, 0.22512324446215148, 0.16644527851598045, 0.2496856685026796, 0.19232339432881984, 0.26567953662136723, 0.19178646540015853, 0.2226365251758814, 0.15678928531776604, 0.2226623962117973, 0.2130252798616632, 0.22606166305233266, 0.2129314295923419, 0.2665587837574358, 0.2129062517944068, 0.25390537965695326, 0.18023499882360206, 0.20804690957939498, 0.21039540131550094, 0.8409313946228231, 0.1829168769894013, 0.1869484062742346, 0.18437088148271208, 0.21652961122219716, 0.19324233114952427, 0.10676964580054915, 0.18772557791395317, 0.18774455210627627, 0.8248274299202691, 0.2005819992373582, 0.9177568899063734, 0.1220968003566757, 0.16949783584305766, 0.16812373629560384, 0.48504924140998096, 0.1565594442693804, 0.4950886419563326, 0.5446992357884102, 0.16854348798559093, 0.3124586683099083, 0.1044782368314594, 0.10472125709163482, 0.22430300637621348, 0.208251815025987, 0.18473328354555474, 0.19601639068901466, 0.200777908453022, 0.1894474830574968, 0.19680795375987792, 0.1933245598555272, 0.18624718223452952, 0.22484230393956794, 0.09238523865150783, 0.1057958865822276, 0.09915212072882462, 0.1067537801279923, 0.09579486621526412, 0.15842740036773417, 0.10143787185566999, 0.09558150455867542, 0.08312269474522838]}, "mutation_prompt": null}
{"id": "dfcd5068-add7-449f-a493-92b9c53ab8a6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.2  # Split influence for personal and global bests\n        self.alpha_social = 0.2\n        self.inertia_start = 0.85  # Slightly adjusted starting inertia weight\n        self.inertia_end = 0.3  # Slightly adjusted ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:  # Check budget before updating each particle\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with dual adaptive parameters and dynamic velocity adjustment for better convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.8957985916311573, 0.8872145966229463, 0.8945527291877602, 0.8818125403159197, 0.8857397788695567, 0.8913923332049689, 0.8958048602714308, 0.8904613652353742, 0.8884552095439588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02172618972936413, 9.999999999998899e-05, 0.07955259532255365, 0.11702716170342375, 0.1589789537701337, 0.11792556896747608, 0.11344514790168703, 0.10620729034379162, 0.07886353454868744, 0.1082825301176541, 0.14232467027425155, 0.0961367296857647, 0.05345064074046735, 0.06730914306352442, 0.08625134130382761, 0.07775129542453485, 0.06762633781338923, 0.14233434435691072, 0.07652674046925623, 0.07884522607805522, 0.9632001322294796, 0.9577902453901562, 0.9677467904953159, 0.9240631244535167, 0.9515347095858894, 0.9279183041775199, 0.9558308890125765, 0.9515985765455275, 0.9607995915778704, 0.1844237575420571, 0.6457950575927107, 0.28844673167696033, 0.4229183820524951, 0.4215437579977408, 0.3324621998418563, 0.14513124987490067, 0.08750117648460543, 0.18352327354433484, 0.21732039566873818, 0.22884316234351676, 0.16968235768868778, 0.22068255210260923, 0.17290116642842857, 0.1929997026598973, 0.06778079956686833, 0.15318718384634245, 0.35201102116698857, 0.18198267822371605, 0.17673746820788983, 0.03850357651379854, 0.21546102043287652, 0.14531678188406727, 9.999999999998899e-05, 0.12633258408075732, 0.2268702957362615, 0.15344838594137877, 0.14430759374005242, 0.15890355620383978, 0.12370908782104417, 0.36678300183731793, 0.13350992223460378, 0.15218492128232863, 0.18618181569434566, 0.22564008171377414, 0.13296013947605423, 9.999999999998899e-05, 9.999999999998899e-05, 0.06941540937860569, 0.039204352669887865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06433151026611905, 0.13034145603432357, 0.08566007536941156, 0.08124897939583753, 0.06795581608406409, 0.017752659040250363, 0.012915493287475877, 0.08300105905358435, 0.09323699555855314, 0.07576317628071683, 0.049057019035295024, 0.05002259340321602, 0.07888619132503027, 0.07668325331308334, 0.24297646953601892, 0.12167115044123988, 0.4435982524073242, 0.07219490299609965, 0.10839732455768403, 0.09369009816392349, 0.18219734155425593, 0.1602626776231304, 0.05929357950405445, 0.1960778960791999, 0.16972976687117647, 0.08227117530681194, 0.0842492356884813, 0.08314122249140621, 0.5002020795728912, 0.5349236363149164, 0.44775951816617254, 0.5101628959618454, 0.47544556763957413, 0.5125745639672336, 0.5306790652011882, 0.5004635028300082, 0.4316564214489663, 0.07029980510943346, 0.08724563140307218, 0.10911168541637195, 0.13478450290099642, 0.14128293350392618, 0.09541977888234665, 0.11635444822651642, 0.1362020930020824, 0.09668161352112092, 0.20382724681590492, 0.24302748385787198, 0.16645217830195236, 0.2572318498678522, 0.3562453649952607, 0.198154630670222, 0.2504973594228379, 0.21548435017527312, 0.2428839182178102, 0.19814487050661578, 0.3281235428548446, 0.294888008927237, 0.26099813012138684, 0.40698364108710217, 0.3150014286896846, 0.5683504944500195, 0.2716604060052741, 0.29328739347488186, 0.1710634310510335, 0.19878960329973894, 0.21275783989201535, 0.22512324446215148, 0.16644527851598045, 0.2496856685026796, 0.19232339432881984, 0.26567953662136723, 0.19178646540015853, 0.2226365251758814, 0.15678928531776604, 0.2226623962117973, 0.2130252798616632, 0.22606166305233266, 0.2129314295923419, 0.2665587837574358, 0.2129062517944068, 0.25390537965695326, 0.18023499882360206, 0.20804690957939498, 0.21039540131550094, 0.8409313946228231, 0.1829168769894013, 0.1869484062742346, 0.18437088148271208, 0.21652961122219716, 0.19324233114952427, 0.10676964580054915, 0.18772557791395317, 0.18774455210627627, 0.8248274299202691, 0.2005819992373582, 0.9177568899063734, 0.1220968003566757, 0.16949783584305766, 0.16812373629560384, 0.48504924140998096, 0.1565594442693804, 0.4950886419563326, 0.5446992357884102, 0.16854348798559093, 0.3124586683099083, 0.1044782368314594, 0.10472125709163482, 0.22430300637621348, 0.208251815025987, 0.18473328354555474, 0.19601639068901466, 0.200777908453022, 0.1894474830574968, 0.19680795375987792, 0.1933245598555272, 0.18624718223452952, 0.22484230393956794, 0.09238523865150783, 0.1057958865822276, 0.09915212072882462, 0.1067537801279923, 0.09579486621526412, 0.15842740036773417, 0.10143787185566999, 0.09558150455867542, 0.08312269474522838]}, "mutation_prompt": null}
{"id": "9c41c766-1618-47bc-9490-9efd984ca517", "solution": "import numpy as np\n\nclass EnhancedDualStrategySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.25  # Adjusted cognitive component for better self-discovery\n        self.alpha_social = 0.25  # Adjusted social component for global influence\n        self.inertia_start = 0.9  # Enhanced starting inertia weight\n        self.inertia_end = 0.4  # Enhanced ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.7, 0.7, (self.swarm_size, self.dim))  # Adjusted initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            topology_matrix = np.random.binomial(1, 0.2, (self.swarm_size, self.swarm_size))\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                local_best_position = np.copy(global_best_position)\n                for j in range(self.swarm_size):\n                    if topology_matrix[i, j] and personal_best_values[j] < func(local_best_position):\n                        local_best_position = personal_best_positions[j]\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (local_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedDualStrategySwarmOptimization", "description": "Enhanced Dual-Strategy Swarm Optimization with adaptive learning factors and dynamic topology for improved convergence.", "configspace": "", "generation": 23, "fitness": 0.1456463868154795, "feedback": "The algorithm EnhancedDualStrategySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.3053640126662356, 0.3054458293714697, 0.3109813201584113, 0.23893334586538517, 0.2636601030951339, 0.2653123194283715, 0.26748614520030656, 0.27837208875614805, 0.2897396675587033, 9.999999999998899e-05, 9.999999999998899e-05, 0.0044695038233623086, 0.0362405253933914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07352731909145094, 0.060644799947842, 0.05327023460764635, 0.07104262914190662, 0.07229745229885998, 0.07761367737804581, 0.05395052006480561, 0.06811533778531831, 0.060197349088063845, 0.052993005642527846, 0.0722555709265591, 0.05700764170548478, 0.061844129022396, 0.05232477250023315, 0.04209341428728819, 0.05309785888474394, 0.0580908702759414, 0.05103952043008142, 0.7856884425555509, 0.8537893648920079, 0.8142240165656159, 0.6567452738953204, 0.7397572913680109, 0.6774746380600918, 0.7259485287243654, 0.7370883656940657, 0.7445541198575624, 0.13340143604461974, 0.16334691949958557, 0.042509416731460026, 0.14098061382561078, 0.10588638827846986, 0.12096937455328005, 0.07275784555687859, 0.08990746296091057, 0.07467514128028163, 0.16245799107858294, 0.18883709321596043, 0.15140135923983378, 0.17227303853656561, 0.15634885967916778, 0.1692201136682594, 0.12972469429888078, 0.18836125145519766, 0.18246578105812916, 0.08637491080473392, 0.05494638524723827, 0.08362959139110093, 0.09450475793842394, 0.05912338235646253, 0.07242714950084428, 0.0662972584531355, 0.0918065520448601, 0.10850782510371793, 0.10363799712031219, 0.09578551175694705, 0.06928393373644381, 0.10524676927334242, 0.09183561051870914, 0.11401001961084112, 0.11575958359400196, 0.05486600379051165, 0.09491035453745822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002544821464604996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06288190299526197, 0.02681625311161384, 0.06978353926208825, 0.05211386056726697, 0.03062519494647309, 0.0003623617976014071, 0.03832533630830315, 0.039687380806084915, 0.043437302176185244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023683413332266756, 0.020975065867828935, 0.05293551591458068, 0.03938747110738239, 0.03923967498639469, 0.01872564972231172, 0.045887559555688684, 0.04238773389285344, 0.032982018099351085, 0.2878867405790253, 0.2742366622688631, 0.3068271098730435, 0.28182862426574806, 0.19790085594513374, 0.2678694653450462, 0.31913239467448007, 0.28303505861661626, 0.3062667435836096, 0.059682172339147854, 0.05580560389636635, 0.046005600059904506, 0.07754446502031442, 0.042813492050977175, 0.09723668921387674, 0.06679346172480238, 0.06624570241560579, 0.0744439070189743, 0.08944062899854832, 0.17596544045727247, 0.12539846320458914, 0.16784038146810398, 0.16114112537563874, 0.10734248854529438, 0.15482624471249606, 0.16399557392648023, 0.16384694893607954, 0.20747028604489615, 0.1943567136887122, 0.20847328086303374, 0.24064163088769597, 0.21204341680979488, 0.2284835696759644, 0.2027714184329329, 0.22945667378122048, 0.2152262543599145, 0.12297742123049227, 0.15705820243523672, 0.1451618195695089, 0.16720457630368457, 0.14520626057368569, 0.1579657992199236, 0.1597045249806166, 0.19123813630414266, 0.14447467127168856, 0.15800886801703273, 0.1406823892482616, 0.16889787047190408, 0.1836417567235592, 0.16116714038222868, 0.18764925232806295, 0.1655733371592798, 0.18936393594350254, 0.19923339829974196, 0.16274914178566757, 0.1616708677020351, 0.15770191952615298, 0.1719138122133227, 0.17176266561679499, 0.16432921051545346, 0.15665056568492386, 0.1595103715893511, 0.17652403802420957, 0.11463340870557182, 0.15646101636466792, 0.13525596765717096, 0.16032184357725177, 0.18654141784200307, 0.40597272082294145, 0.1335524846742433, 0.11072221671082083, 0.3688124729568577, 0.298733827064391, 0.1398741711452276, 0.10029694409274159, 0.32763903940075534, 0.11606650782850025, 0.17148981227416493, 0.1736061799566172, 0.22251201515686436, 0.13234835157246216, 0.16621741962538183, 0.17894624688850436, 0.17488896260965447, 0.1682260932676507, 0.15477871505783314, 0.16173499387053725, 0.16071270935798188, 0.17020924129207038, 0.1688404102459563, 0.08018466802439306, 0.06137467999892143, 0.08716740795290112, 0.06750510606521909, 0.0699137448748619, 0.06961857565288154, 0.07722795168678509, 0.05068503757834042, 0.06190850844616802]}, "mutation_prompt": null}
{"id": "f47b4ceb-fce2-44db-82c8-f7280ed1700a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.2  # Split influence for personal and global bests\n        self.alpha_social = 0.2\n        self.inertia_start = 0.85  # Slightly adjusted starting inertia weight\n        self.inertia_end = 0.3  # Slightly adjusted ending inertia weight\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced initial velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:  # Check budget before updating each particle\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmGradientDescent", "description": "Enhanced Adaptive Swarm Gradient Descent with dual adaptive parameters and dynamic velocity adjustment for better convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.8957985916311573, 0.8872145966229463, 0.8945527291877602, 0.8818125403159197, 0.8857397788695567, 0.8913923332049689, 0.8958048602714308, 0.8904613652353742, 0.8884552095439588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02172618972936413, 9.999999999998899e-05, 0.07955259532255365, 0.11702716170342375, 0.1589789537701337, 0.11792556896747608, 0.11344514790168703, 0.10620729034379162, 0.07886353454868744, 0.1082825301176541, 0.14232467027425155, 0.0961367296857647, 0.05345064074046735, 0.06730914306352442, 0.08625134130382761, 0.07775129542453485, 0.06762633781338923, 0.14233434435691072, 0.07652674046925623, 0.07884522607805522, 0.9632001322294796, 0.9577902453901562, 0.9677467904953159, 0.9240631244535167, 0.9515347095858894, 0.9279183041775199, 0.9558308890125765, 0.9515985765455275, 0.9607995915778704, 0.1844237575420571, 0.6457950575927107, 0.28844673167696033, 0.4229183820524951, 0.4215437579977408, 0.3324621998418563, 0.14513124987490067, 0.08750117648460543, 0.18352327354433484, 0.21732039566873818, 0.22884316234351676, 0.16968235768868778, 0.22068255210260923, 0.17290116642842857, 0.1929997026598973, 0.06778079956686833, 0.15318718384634245, 0.35201102116698857, 0.18198267822371605, 0.17673746820788983, 0.03850357651379854, 0.21546102043287652, 0.14531678188406727, 9.999999999998899e-05, 0.12633258408075732, 0.2268702957362615, 0.15344838594137877, 0.14430759374005242, 0.15890355620383978, 0.12370908782104417, 0.36678300183731793, 0.13350992223460378, 0.15218492128232863, 0.18618181569434566, 0.22564008171377414, 0.13296013947605423, 9.999999999998899e-05, 9.999999999998899e-05, 0.06941540937860569, 0.039204352669887865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06433151026611905, 0.13034145603432357, 0.08566007536941156, 0.08124897939583753, 0.06795581608406409, 0.017752659040250363, 0.012915493287475877, 0.08300105905358435, 0.09323699555855314, 0.07576317628071683, 0.049057019035295024, 0.05002259340321602, 0.07888619132503027, 0.07668325331308334, 0.24297646953601892, 0.12167115044123988, 0.4435982524073242, 0.07219490299609965, 0.10839732455768403, 0.09369009816392349, 0.18219734155425593, 0.1602626776231304, 0.05929357950405445, 0.1960778960791999, 0.16972976687117647, 0.08227117530681194, 0.0842492356884813, 0.08314122249140621, 0.5002020795728912, 0.5349236363149164, 0.44775951816617254, 0.5101628959618454, 0.47544556763957413, 0.5125745639672336, 0.5306790652011882, 0.5004635028300082, 0.4316564214489663, 0.07029980510943346, 0.08724563140307218, 0.10911168541637195, 0.13478450290099642, 0.14128293350392618, 0.09541977888234665, 0.11635444822651642, 0.1362020930020824, 0.09668161352112092, 0.20382724681590492, 0.24302748385787198, 0.16645217830195236, 0.2572318498678522, 0.3562453649952607, 0.198154630670222, 0.2504973594228379, 0.21548435017527312, 0.2428839182178102, 0.19814487050661578, 0.3281235428548446, 0.294888008927237, 0.26099813012138684, 0.40698364108710217, 0.3150014286896846, 0.5683504944500195, 0.2716604060052741, 0.29328739347488186, 0.1710634310510335, 0.19878960329973894, 0.21275783989201535, 0.22512324446215148, 0.16644527851598045, 0.2496856685026796, 0.19232339432881984, 0.26567953662136723, 0.19178646540015853, 0.2226365251758814, 0.15678928531776604, 0.2226623962117973, 0.2130252798616632, 0.22606166305233266, 0.2129314295923419, 0.2665587837574358, 0.2129062517944068, 0.25390537965695326, 0.18023499882360206, 0.20804690957939498, 0.21039540131550094, 0.8409313946228231, 0.1829168769894013, 0.1869484062742346, 0.18437088148271208, 0.21652961122219716, 0.19324233114952427, 0.10676964580054915, 0.18772557791395317, 0.18774455210627627, 0.8248274299202691, 0.2005819992373582, 0.9177568899063734, 0.1220968003566757, 0.16949783584305766, 0.16812373629560384, 0.48504924140998096, 0.1565594442693804, 0.4950886419563326, 0.5446992357884102, 0.16854348798559093, 0.3124586683099083, 0.1044782368314594, 0.10472125709163482, 0.22430300637621348, 0.208251815025987, 0.18473328354555474, 0.19601639068901466, 0.200777908453022, 0.1894474830574968, 0.19680795375987792, 0.1933245598555272, 0.18624718223452952, 0.22484230393956794, 0.09238523865150783, 0.1057958865822276, 0.09915212072882462, 0.1067537801279923, 0.09579486621526412, 0.15842740036773417, 0.10143787185566999, 0.09558150455867542, 0.08312269474522838]}, "mutation_prompt": null}
{"id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for better exploration\n        self.alpha_cognitive = 0.25  # Enhanced influence of personal best positions\n        self.alpha_social = 0.15  # Reduced influence of global best positions\n        self.inertia_start = 0.9  # Increased starting inertia weight for exploration\n        self.inertia_end = 0.2  # More aggressive reduction of inertia weight\n        self.mutation_prob = 0.1  # Introduce mutation for better local search\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (self.swarm_size, self.dim))  # Further reduced velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridSwarmGradientDescent", "description": "Enhanced Hybrid Swarm Gradient Descent with adaptive inertia and mutation for improved exploration and exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.26282580984720155, "feedback": "The algorithm EnhancedHybridSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "1c8f1a9f-57fd-4495-97e8-4f0c3b73137a", "metadata": {"aucs": [0.7968277812232611, 0.7934472895551195, 0.8162267204685324, 0.7947425303763661, 0.7707111676557716, 0.7976153976425988, 0.7889478026634961, 0.7871423979003522, 0.8062566781757212, 9.999999999998899e-05, 0.05965888948814868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10115709969003506, 0.11535047143730748, 0.1593133277622052, 0.1312065428620861, 0.12859349842344558, 0.09109568920953393, 0.08162072844211266, 0.1418241322927143, 0.11970392753039538, 0.1139687140208604, 0.07514933646087862, 0.10512045919924207, 0.12816280036977346, 0.07839776036949475, 0.07912441349373345, 0.1051816188588951, 0.10316926271531357, 0.0737791091040928, 0.9582644575068447, 0.9686799983147324, 0.9611504250343573, 0.8820196158654723, 0.9422889994917742, 0.9283236768396343, 0.948105071782861, 0.9449491966295289, 0.930625108521268, 0.47791950493000446, 0.30391094443810684, 0.3408578576277955, 0.43254693242845443, 0.48572939290575445, 0.3274188478985083, 0.41649552351155494, 0.3229835161668533, 0.4612777030982459, 0.21512540826139825, 0.38393320768532246, 0.16872531995522644, 0.2792071347014886, 0.2727209967799793, 0.20943856326751742, 0.14965327389152205, 0.12958332287607588, 0.23359906026996868, 0.15964151096630375, 0.12454553561966042, 0.0015620142394525693, 0.15103620051970756, 0.16996856885617073, 0.1316445904066188, 0.24518335238499833, 0.1478572935493052, 0.17591864664068158, 0.15176628727686803, 0.15724005417596765, 0.18275702377437664, 0.14732225647355845, 0.17323821401147255, 0.17379403722868814, 0.17816930784467133, 0.18734865116225796, 0.16188514897713924, 0.004679932872377335, 9.999999999998899e-05, 0.00425822591661984, 0.058087458023667216, 0.004995473763403813, 0.0005887194355885805, 0.012923587434170214, 0.004195569584551251, 0.0027464376303037996, 0.11871052322521414, 0.03192397948250114, 0.16012332701846244, 0.060905869905846566, 0.03347523885122938, 0.023417677757209043, 0.12571312279366864, 0.07388963878976451, 0.14540433050604518, 0.11420181398845874, 0.09060767128913172, 0.2150607216742243, 0.13024303513426583, 0.06847739667046249, 0.12274750236306431, 0.14668594130922175, 0.06865191351548261, 0.11257083238588517, 0.10092182720505716, 0.2154171455268309, 0.16848953249962673, 0.2806491942521039, 0.02907398011515472, 0.07438391883214157, 0.08420493586857614, 0.20853356488510322, 0.0830007295842865, 0.5333536484459028, 0.5596132862518091, 0.5222858531071166, 0.49309973973775123, 0.5528819599909605, 0.48478855486215755, 0.5555818419522274, 0.5541661061927666, 0.5544151605223608, 0.11375336642861766, 0.08981787170628996, 0.11544825879599407, 0.08921875922714495, 0.1065657003471091, 0.13752374803591882, 0.14038201616471924, 0.15121616747103495, 0.11512761424616524, 0.19630620217831252, 0.3240586971212944, 0.21609347222395414, 0.4773252305849419, 0.2754356245128594, 0.30275989816496485, 0.2589588535566427, 0.24663853148829706, 0.3063723064804361, 0.261571638862085, 0.3742855491685928, 0.4192027623855985, 0.3502366520215111, 0.2903174066442532, 0.28201388346757905, 0.2912619728226946, 0.4172834592129093, 0.3519128621550972, 0.21333467055297473, 0.22885273250352633, 0.1487614927421511, 0.25321133607719293, 0.23660445008202913, 0.27412668053906275, 0.2252848179560567, 0.23228451275982498, 0.20115257387227903, 0.2330171180521341, 0.2175687699228518, 0.20201313950133026, 0.2532591751755242, 0.21437828363132805, 0.22949677603909258, 0.20295955913161456, 0.21105947319729867, 0.21043656521802545, 0.18330019416648824, 0.1878250250523833, 0.178273330606309, 0.22444372910257804, 0.2081795596207695, 0.18915684959033163, 0.2093466699319121, 0.20811518199958334, 0.22669794897861195, 0.8810280255236793, 0.1764539968749208, 0.16643023008373292, 0.9001482386803583, 0.19984195736814248, 0.9090754450115904, 0.14271878950030348, 0.1694022961314886, 0.8702256881704196, 0.37864250723858583, 0.2864094421646951, 0.12373456104218128, 0.921161284333544, 0.1677743849525345, 0.5354950160877485, 0.2885201702288732, 0.10428955907990034, 0.340554421552935, 0.19689402199733974, 0.2216846610840717, 0.21238917440651728, 0.1900182843067657, 0.22073494287692164, 0.19774623072133102, 0.21638995375025405, 0.19983548544009877, 0.20844117571657284, 0.08319963558352828, 0.08870344140339859, 0.1008380980020176, 0.10597901977759538, 0.0994125590797501, 0.09947095465896205, 0.07468093278819454, 0.09171945318239738, 0.06514754338351636]}, "mutation_prompt": null}
{"id": "8e59cc89-5252-4198-ba3d-247536be6104", "solution": "import numpy as np\n\nclass RefinedHybridSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Adjusted swarm size for efficiency\n        self.alpha_cognitive = 0.3  # Increased cognitive influence\n        self.alpha_social = 0.1  # Further reduced social influence\n        self.inertia_start = 0.8  # Modified starting inertia\n        self.inertia_end = 0.3  # Adjusted inertia reduction\n        self.mutation_prob_start = 0.15  # Dynamic mutation with higher initial probability\n        self.mutation_prob_end = 0.05  # Reduced mutation probability over time\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.2, 0.2, (self.swarm_size, self.dim))  # Adjusted velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            mutation_prob = self.mutation_prob_end + (self.mutation_prob_start - self.mutation_prob_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Refined mutation step size\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "RefinedHybridSwarmGradientDescent", "description": "Refined Enhanced Hybrid Swarm Gradient Descent with dynamic mutation and adaptive velocity scaling for improved convergence.", "configspace": "", "generation": 26, "fitness": 0.19785720072122095, "feedback": "The algorithm RefinedHybridSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.8145832644393906, 0.8008686272915055, 0.7977346972081338, 0.7918344714571569, 0.7825389530548756, 0.7734577247041319, 0.8140327953808651, 0.7681964272912992, 0.8099486758524892, 0.0022079023987433555, 0.09105656347076696, 9.999999999998899e-05, 0.002162594623242864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09964195018760524, 0.146167509644747, 0.09595948978097546, 0.11807014933284354, 0.13166393069349813, 0.15945554097811, 0.061656475172555125, 0.11686579638674754, 0.1137242783987773, 0.10944029026990443, 0.06503055123862345, 0.06455438552815507, 0.08535162055073175, 0.08068330517653943, 0.04969743722702458, 0.09851549680676508, 0.04751922602493597, 0.018457942800451765, 0.1203197684455879, 0.14764549301911156, 0.1084860689485091, 0.08108368636048635, 0.08287487335694366, 0.10383181963641142, 0.11209987728465387, 0.09087182442423092, 0.10300594143177166, 0.39044369009777624, 0.1664534044845848, 0.09958505839378051, 0.46354280989003593, 0.4027263554777989, 0.13389131190732007, 0.3675604270563625, 0.08907647848904521, 0.11895312386042844, 0.18682508824531308, 0.173651462715396, 0.11740558276571922, 0.3608187755225154, 0.17540378840921644, 0.12382723908743465, 0.12590446021657886, 0.12695789482969122, 0.1952486941265521, 0.3003022928897995, 0.11826798399688454, 0.24835392307640836, 0.26185542672942796, 0.14310691017753685, 0.24210127860937947, 0.20148735346191893, 0.3040354438486321, 0.13943859443912665, 0.1875800958712701, 9.999999999998899e-05, 0.1303581109978832, 0.12783547054096978, 0.14950054912246302, 0.24797293748247595, 0.2481685860781011, 9.999999999998899e-05, 0.11698346322293529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408437350009986, 0.005236153605480132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09461685428150746, 0.10410571753625186, 0.08578555428483159, 0.07290870965712526, 0.039799737246409284, 0.03270045870889493, 0.11487451478069055, 0.0902894502296323, 0.07682148764236552, 0.13459957126782485, 0.18738931577461415, 0.07986216591496909, 0.0781285132320727, 0.1489475194259141, 0.11314654885268627, 0.10953848587186199, 0.16791667715186342, 0.08321772842606001, 0.17577857647794404, 0.2454047048901512, 0.13036439350285223, 0.05593639285161567, 0.03301400268653398, 0.1333599803124409, 0.08369825277880394, 0.11955363003394504, 0.08306579178575757, 0.49789482981869804, 0.5395081647344961, 0.5151681194727953, 0.46946345689670443, 0.41992513189394576, 0.4720891822393831, 0.5872873782617092, 0.5493680644878098, 0.5292402736686241, 0.06511872691657195, 0.08004593287019923, 0.038690500164724306, 0.0957096123385851, 0.12076623600873515, 0.08715103545501801, 0.08662027992443122, 0.09912039875206535, 0.08856056005225932, 0.1885087409568157, 0.21221417013912047, 0.18914413731014268, 0.22875579771691124, 0.14332410536008977, 0.24365601864657116, 0.17642530656753386, 0.15956982330838743, 0.19843055166184254, 0.17743494961582984, 0.35923743210340375, 0.1809418742646569, 0.23940630039115685, 0.18759077104860877, 0.2936340990522486, 0.20916190752683628, 0.31777949249163784, 0.1701722127352583, 0.23502968306547822, 0.21544699261273237, 0.11951708225528002, 0.29945888617329464, 0.17856384653733837, 0.23531088237694353, 0.17377485488454936, 0.2270206757427834, 0.16054279239440317, 0.22571534151743267, 0.2657133957935094, 0.2589976328319832, 0.19326651735105482, 0.25859600562528107, 0.20159578513047594, 0.24723214248383563, 0.2125615979075245, 0.2170924267726957, 0.1717349722004825, 0.1777792733897804, 0.18337936748668604, 0.1979182178810377, 0.19967974115356535, 0.19278078637151075, 0.1836093405995618, 0.18180501980983077, 0.1809222336372105, 0.12409489093533288, 0.17041121249484492, 0.1874257840651058, 0.9256455618016628, 0.19969994104953537, 0.7498505007637226, 0.09862060744530976, 0.16826248769804042, 0.6163990101467511, 0.4212812334990703, 0.1562706471027634, 0.4249697698188053, 0.46399657690014595, 0.1679511467090471, 0.3335186109908572, 0.10385629532996177, 0.09426906901751408, 0.12928867186334847, 0.206501490623909, 0.19320172970479643, 0.20736843370111468, 0.1803592906296908, 0.19623433705386784, 0.1987813723752312, 0.22033330262487627, 0.20538096282396967, 0.21627237745857164, 0.08849689150906326, 0.08789962812027463, 0.08848384973129009, 0.09907089885246734, 0.0865405890194535, 0.0989962248079671, 0.07202490360683189, 0.08305106131472839, 0.08761817024247287]}, "mutation_prompt": null}
{"id": "e04611d2-6207-442c-bb91-752a217b5d09", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Adjusted swarm size for better convergence\n        self.alpha_cognitive = 0.3  # Increased influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.8  # Balanced starting inertia weight\n        self.inertia_end = 0.3  # Adjusted final inertia weight\n        self.mutation_prob = 0.15  # Adjusted mutation rate for diversity\n        self.neighborhood_size = 5  # Dynamic influence from neighborhood\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.2, 0.2, (self.swarm_size, self.dim))  # Adjusted velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                neighborhood_best_value = np.inf\n                neighborhood_best_position = personal_best_positions[i]\n                for j in range(max(0, i - self.neighborhood_size), min(self.swarm_size, i + self.neighborhood_size)):\n                    if personal_best_values[j] < neighborhood_best_value:\n                        neighborhood_best_value = personal_best_values[j]\n                        neighborhood_best_position = personal_best_positions[j]\n\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (neighborhood_best_position - particle_positions[i]))\n\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Refined mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridSwarmGradientDescent", "description": "Enhanced Hybrid Swarm Gradient Descent with dynamic neighborhood influence and adaptive learning rates for improved convergence.", "configspace": "", "generation": 27, "fitness": 0.25637372519064466, "feedback": "The algorithm EnhancedHybridSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.7826598334189827, 0.8209620530802327, 0.7745162758461657, 0.7555345467429893, 0.7590574577999678, 0.7607351730719831, 0.7604315370417176, 0.8018027701011622, 0.7584434820765633, 0.07098310808293229, 0.05539316420366758, 0.06563981985491008, 9.999999999998899e-05, 0.05226938196946085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11679383741552396, 0.14075084417245287, 0.14111834983121008, 0.1110660433518953, 0.11532094624585476, 0.14069370179985985, 0.10871272099728435, 0.11440024225083112, 0.1233863386288514, 0.09085640153619534, 0.10252577117627515, 0.07957306170376066, 0.09969726667234968, 0.08085888640328265, 0.06285265959256592, 0.10357279630202543, 0.09085635748543752, 0.09477014203525991, 0.9439979917308685, 0.9624697055476477, 0.9426984132166777, 0.7160541507734421, 0.9569871857066186, 0.9231383797347745, 0.9118487142767873, 0.9422271485650385, 0.9130163767756949, 0.3143251512906836, 0.23016867942810937, 0.2235473891150388, 0.4282261743925785, 0.3373209735179754, 0.4771232428479495, 0.4537593609836561, 0.3179745207086223, 0.3022923674490595, 0.8347465094924249, 0.2288738936775344, 0.1686447399291755, 0.2202800148922659, 0.9076392909586362, 0.21015676640593106, 0.14859440656350997, 0.2764066172601485, 0.23518972868700672, 0.21611427524157567, 0.13494400164744524, 0.17804140084687314, 0.18869967684964895, 0.19573610223988291, 0.17525745658791148, 0.1562908125085687, 0.18341445110414412, 0.204411544734722, 0.19360676578969083, 0.1649552019679853, 0.2656484015575411, 0.40847533662979696, 0.1682208604583888, 0.17969320190442506, 0.2725288099634524, 0.17384331715738788, 0.16004703035437629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004860487398015145, 0.11339428633095816, 0.01883499104983677, 0.007378699000017863, 0.0034215787813661747, 0.059875531773151636, 0.13796810641148094, 0.06785319908617293, 0.11033081344610185, 0.04983833881047062, 0.030963278257102544, 0.05150046083537907, 0.13077996182853824, 0.08322098822384616, 0.07681271884757679, 0.1256720187896937, 0.18846613652752386, 0.1343103662559484, 0.08223988349990363, 0.18531360285270404, 0.11864037370742775, 0.1614177123674626, 0.1591996037636496, 0.08119483420831619, 0.19137587453391247, 0.1373908359623507, 0.1479547193580376, 0.15105872318840663, 0.17216714336221683, 0.1300554744784007, 0.15688460684072802, 0.14429686098369965, 0.09698441996324325, 0.5372788142112817, 0.5211438970004252, 0.5121913286926076, 0.5219622213631064, 0.5158785291885006, 0.573753378615605, 0.5229101515495669, 0.6213001082613047, 0.5755422370589569, 0.0771519618698503, 0.10845006042330385, 0.09402587361040315, 0.17423919266891685, 0.10687616219426932, 0.1261420981982082, 0.09562394825644582, 0.10294584605520363, 0.09005742336709477, 0.20899644653256055, 0.19850662019115606, 0.3405942224605464, 0.24968106072425267, 0.20023165227832174, 0.2524613359411072, 0.23701070533744617, 0.19372333710152245, 0.2136938776473446, 0.23215517699227384, 0.2726446331919543, 0.23024410277610063, 0.44453849183428895, 0.2400606670950005, 0.41185602903574314, 0.22783159439973766, 0.27348762828256923, 0.35468724993000056, 0.1402044559269745, 0.2442167313010476, 0.1713135602162773, 0.24022403051020114, 0.22890831206886397, 0.2693816598104981, 0.23032741759719433, 0.24649361997298413, 0.1867618451352765, 0.2376678573992751, 0.2492253730959988, 0.23046361990879172, 0.2714167618936022, 0.2127385860619424, 0.19888776387764306, 0.24451503431483257, 0.23638351891837228, 0.20817935640147311, 0.18169312736531895, 0.2257428977552286, 0.1811559518513518, 0.1955744774454039, 0.21050449484182665, 0.1702614617591358, 0.17411842397715505, 0.1926677141102695, 0.16786967558253696, 0.15616493835525103, 0.18730809568751616, 0.1643716831760914, 0.173031755633132, 0.20009034453271146, 0.19856856690088065, 0.7743281250359777, 0.16751609663908806, 0.795966188950979, 0.6884440687956755, 0.1568713103578584, 0.242802132517982, 0.19848423347786348, 0.30013268385173697, 0.19607422374908934, 0.1652424412839184, 0.4046022684692443, 0.21331918850980947, 0.20115390492007723, 0.20758073580258274, 0.22759576016378147, 0.21125483370295783, 0.2172152680888021, 0.21598172321089182, 0.23075612806895573, 0.2197352637444241, 0.2054448098487558, 0.10849086433625943, 0.08444738491429393, 0.09297254930626309, 0.11065735518079822, 0.08455273110958039, 0.09551973366120614, 0.08860621178007222, 0.09297890760804517, 0.09535819328327666]}, "mutation_prompt": null}
{"id": "71e6f475-810a-44b9-95be-bed859be7c8d", "solution": "import numpy as np\n\nclass AdaptiveHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Slightly reduced swarm size for more budget per particle\n        self.alpha_cognitive = 0.3  # Increased cognitive influence for rapid personal best convergence\n        self.alpha_social = 0.2  # Increased social influence to enhance global convergence\n        self.inertia_start = 0.8  # Balanced starting inertia for exploration\n        self.inertia_end = 0.1  # Lower ending inertia for intensified exploitation\n        self.mutation_prob = 0.15  # Increased mutation probability for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.zeros((self.swarm_size, self.dim))  # Start with zero velocity for stability\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Reduced mutation step for refined exploration\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveHybridSwarmOptimizer", "description": "Adaptive hybrid swarm optimizer with dynamic parameter adjustment and enhanced local search.", "configspace": "", "generation": 28, "fitness": 0.24394261786419624, "feedback": "The algorithm AdaptiveHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.8689606225655978, 0.8473687318364402, 0.8475042488867692, 0.8497411871208405, 0.8168231968431755, 0.8337244008413578, 0.8557298428929895, 0.8682928610413136, 0.8385566103697625, 0.005304633705772388, 0.05285245858826948, 0.0019825189742854743, 0.09466721553088575, 0.0009884515438610686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13425035663905305, 0.11065534049036918, 0.1460736332504461, 0.16036587871133146, 0.1107536975654293, 0.10115882820986422, 0.11759195721738436, 0.1847445735226434, 0.11631994092059472, 0.11686343070579097, 0.054966206359671976, 0.05519126075157732, 0.1264506004173387, 0.0685413713422649, 0.10992306757354475, 0.07315289594102847, 0.06399634624800232, 0.06165567014433326, 0.9335614450929236, 0.9671435791647294, 0.954340716720977, 0.12515691536977813, 0.8208022276176814, 0.13537151336946607, 0.9112100585043017, 0.933232218698337, 0.8923881928687614, 0.35075427080793087, 0.5088215013985804, 0.2714401791548299, 0.4944491175738941, 0.5467942469861844, 0.5975247969147377, 0.42295885748708895, 0.24407081033925948, 0.4417306370199139, 0.18673058030040068, 0.1395319978510171, 0.18441549535962054, 0.20925979115267124, 0.21364055258134096, 0.2112923198414005, 0.1520357896926131, 0.14503645222526407, 0.17769886742750063, 0.14254198061201329, 0.13032280744976543, 0.2377013686540117, 0.15773913530420036, 0.13225009431257462, 0.2715265971327422, 0.13236499973186377, 0.21556833966350974, 0.16763809512275873, 0.1885962897921215, 0.1805138633252451, 0.17257497485710815, 0.13337926157735636, 0.16840710617465904, 0.18296233062845035, 0.1326942442205118, 0.018743489709370786, 0.11698350284837, 9.999999999998899e-05, 9.999999999998899e-05, 0.004581798753453548, 0.05867413614427264, 9.999999999998899e-05, 0.012408267221566849, 0.0016300959082725663, 9.999999999998899e-05, 0.023311888371344125, 0.15252496014579375, 0.041554022969930715, 0.09565937719692941, 0.06485296525463802, 0.005626922012420432, 0.0024759176330660937, 0.1360914773632811, 0.08526923398766428, 0.08928273865534198, 0.04825129805175732, 0.18377179332329519, 0.18944435090869105, 0.07897264715002639, 0.1315993494253065, 0.12412563939358934, 0.13542806253172834, 0.18089682173890165, 0.11386070743806753, 0.19795646400433475, 0.12205265296757783, 0.20965379591300248, 0.023239348896539336, 0.039551887942027464, 0.2030870103835306, 0.10095115316073167, 0.19284633763902148, 0.08782088400454724, 0.5371763714039868, 0.5188458657162058, 0.5184132900822258, 0.549500531349833, 0.523018973721721, 0.4946544736958868, 0.5301058047958218, 0.5200113387784454, 0.5302278069208455, 0.12085672102650546, 0.09603021063906947, 0.09536077652533825, 0.09213913490867398, 0.07767769064043273, 0.09320553999572823, 0.10642903478113108, 0.09992650855906593, 0.07627907730932826, 0.20527033499645753, 0.17301089338063413, 0.2270730622877658, 0.18899953949786608, 0.4440324043739482, 0.20752226947553176, 0.16781402520602273, 0.21367910346640628, 0.24601044622038604, 0.16435100861920182, 0.39053689233677324, 0.3115063966065381, 0.2801040732718809, 0.3932920211098402, 0.2759362247208077, 0.4226098659506924, 0.3158858585552492, 0.2382530596075395, 0.1282584265876261, 0.12763914750899008, 0.15101062576401236, 0.2222338488894896, 0.15291047271194835, 0.2759321148371865, 0.1993877925434745, 0.26916323064360137, 0.27326981152505037, 0.26146302105181163, 0.1701793994314006, 0.20011687839923742, 0.2307465827538444, 0.2299805740413875, 0.22585596719884515, 0.2394273650040475, 0.21235362364028876, 0.21222467310560755, 0.1880797416893769, 0.20909185679108555, 0.2011900613292963, 0.18624717185125106, 0.1868997742771633, 0.19974055768802546, 0.2156423312299458, 0.2033470954004366, 0.20951499226037418, 0.12550623680525697, 0.1262838700816421, 0.15410503430244993, 0.17291177795674817, 0.2012385653828972, 0.9083543143032402, 0.12225374393105248, 0.7352077405437767, 0.15888938714474388, 0.575740766140292, 0.3923396773027974, 0.40991565501176486, 0.6187088450733912, 0.16946370728793025, 0.6144293347630722, 0.19728440317810036, 0.09418021862551307, 0.25349688168758744, 0.21998159992273503, 0.21266867793613287, 0.20444139055197819, 0.21430019213776297, 0.257898574497308, 0.2276077662553393, 0.20395795513270853, 0.1986472790000372, 0.19359041980984826, 0.0701036164868537, 0.10311432508599205, 0.09910612693229837, 0.10389998829478042, 0.08766895157100374, 0.10430003070302318, 0.08179754419582863, 0.09362084564418582, 0.06962859041724734]}, "mutation_prompt": null}
{"id": "948dc67f-2157-4442-8d2a-95e8cbf598d1", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for better exploration\n        self.alpha_cognitive = 0.25  # Enhanced influence of personal best positions\n        self.alpha_social = 0.15  # Reduced influence of global best positions\n        self.inertia_start = 0.9  # Increased starting inertia weight for exploration\n        self.inertia_end = 0.2  # More aggressive reduction of inertia weight\n        self.mutation_prob = 0.1  # Introduce mutation for better local search\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (self.swarm_size, self.dim))  # Further reduced velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridSwarmGradientDescent", "description": "Enhanced Hybrid Swarm Gradient Descent with adaptive inertia and mutation for improved exploration and exploitation balance.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.7968277812232611, 0.7934472895551195, 0.8162267204685324, 0.7947425303763661, 0.7707111676557716, 0.7976153976425988, 0.7889478026634961, 0.7871423979003522, 0.8062566781757212, 9.999999999998899e-05, 0.05965888948814868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10115709969003506, 0.11535047143730748, 0.1593133277622052, 0.1312065428620861, 0.12859349842344558, 0.09109568920953393, 0.08162072844211266, 0.1418241322927143, 0.11970392753039538, 0.1139687140208604, 0.07514933646087862, 0.10512045919924207, 0.12816280036977346, 0.07839776036949475, 0.07912441349373345, 0.1051816188588951, 0.10316926271531357, 0.0737791091040928, 0.9582644575068447, 0.9686799983147324, 0.9611504250343573, 0.8820196158654723, 0.9422889994917742, 0.9283236768396343, 0.948105071782861, 0.9449491966295289, 0.930625108521268, 0.47791950493000446, 0.30391094443810684, 0.3408578576277955, 0.43254693242845443, 0.48572939290575445, 0.3274188478985083, 0.41649552351155494, 0.3229835161668533, 0.4612777030982459, 0.21512540826139825, 0.38393320768532246, 0.16872531995522644, 0.2792071347014886, 0.2727209967799793, 0.20943856326751742, 0.14965327389152205, 0.12958332287607588, 0.23359906026996868, 0.15964151096630375, 0.12454553561966042, 0.0015620142394525693, 0.15103620051970756, 0.16996856885617073, 0.1316445904066188, 0.24518335238499833, 0.1478572935493052, 0.17591864664068158, 0.15176628727686803, 0.15724005417596765, 0.18275702377437664, 0.14732225647355845, 0.17323821401147255, 0.17379403722868814, 0.17816930784467133, 0.18734865116225796, 0.16188514897713924, 0.004679932872377335, 9.999999999998899e-05, 0.00425822591661984, 0.058087458023667216, 0.004995473763403813, 0.0005887194355885805, 0.012923587434170214, 0.004195569584551251, 0.0027464376303037996, 0.11871052322521414, 0.03192397948250114, 0.16012332701846244, 0.060905869905846566, 0.03347523885122938, 0.023417677757209043, 0.12571312279366864, 0.07388963878976451, 0.14540433050604518, 0.11420181398845874, 0.09060767128913172, 0.2150607216742243, 0.13024303513426583, 0.06847739667046249, 0.12274750236306431, 0.14668594130922175, 0.06865191351548261, 0.11257083238588517, 0.10092182720505716, 0.2154171455268309, 0.16848953249962673, 0.2806491942521039, 0.02907398011515472, 0.07438391883214157, 0.08420493586857614, 0.20853356488510322, 0.0830007295842865, 0.5333536484459028, 0.5596132862518091, 0.5222858531071166, 0.49309973973775123, 0.5528819599909605, 0.48478855486215755, 0.5555818419522274, 0.5541661061927666, 0.5544151605223608, 0.11375336642861766, 0.08981787170628996, 0.11544825879599407, 0.08921875922714495, 0.1065657003471091, 0.13752374803591882, 0.14038201616471924, 0.15121616747103495, 0.11512761424616524, 0.19630620217831252, 0.3240586971212944, 0.21609347222395414, 0.4773252305849419, 0.2754356245128594, 0.30275989816496485, 0.2589588535566427, 0.24663853148829706, 0.3063723064804361, 0.261571638862085, 0.3742855491685928, 0.4192027623855985, 0.3502366520215111, 0.2903174066442532, 0.28201388346757905, 0.2912619728226946, 0.4172834592129093, 0.3519128621550972, 0.21333467055297473, 0.22885273250352633, 0.1487614927421511, 0.25321133607719293, 0.23660445008202913, 0.27412668053906275, 0.2252848179560567, 0.23228451275982498, 0.20115257387227903, 0.2330171180521341, 0.2175687699228518, 0.20201313950133026, 0.2532591751755242, 0.21437828363132805, 0.22949677603909258, 0.20295955913161456, 0.21105947319729867, 0.21043656521802545, 0.18330019416648824, 0.1878250250523833, 0.178273330606309, 0.22444372910257804, 0.2081795596207695, 0.18915684959033163, 0.2093466699319121, 0.20811518199958334, 0.22669794897861195, 0.8810280255236793, 0.1764539968749208, 0.16643023008373292, 0.9001482386803583, 0.19984195736814248, 0.9090754450115904, 0.14271878950030348, 0.1694022961314886, 0.8702256881704196, 0.37864250723858583, 0.2864094421646951, 0.12373456104218128, 0.921161284333544, 0.1677743849525345, 0.5354950160877485, 0.2885201702288732, 0.10428955907990034, 0.340554421552935, 0.19689402199733974, 0.2216846610840717, 0.21238917440651728, 0.1900182843067657, 0.22073494287692164, 0.19774623072133102, 0.21638995375025405, 0.19983548544009877, 0.20844117571657284, 0.08319963558352828, 0.08870344140339859, 0.1008380980020176, 0.10597901977759538, 0.0994125590797501, 0.09947095465896205, 0.07468093278819454, 0.09171945318239738, 0.06514754338351636]}, "mutation_prompt": null}
{"id": "4421654e-eb93-4af6-ac41-f5d5b8bc761d", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for better exploration\n        self.alpha_cognitive = 0.25  # Enhanced influence of personal best positions\n        self.alpha_social = 0.15  # Reduced influence of global best positions\n        self.inertia_start = 0.9  # Increased starting inertia weight for exploration\n        self.inertia_end = 0.2  # More aggressive reduction of inertia weight\n        self.mutation_prob = 0.1  # Introduce mutation for better local search\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (self.swarm_size, self.dim))  # Further reduced velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridSwarmGradientDescent", "description": "Enhanced Hybrid Swarm Gradient Descent with adaptive inertia and mutation for improved exploration and exploitation balance.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.7968277812232611, 0.7934472895551195, 0.8162267204685324, 0.7947425303763661, 0.7707111676557716, 0.7976153976425988, 0.7889478026634961, 0.7871423979003522, 0.8062566781757212, 9.999999999998899e-05, 0.05965888948814868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10115709969003506, 0.11535047143730748, 0.1593133277622052, 0.1312065428620861, 0.12859349842344558, 0.09109568920953393, 0.08162072844211266, 0.1418241322927143, 0.11970392753039538, 0.1139687140208604, 0.07514933646087862, 0.10512045919924207, 0.12816280036977346, 0.07839776036949475, 0.07912441349373345, 0.1051816188588951, 0.10316926271531357, 0.0737791091040928, 0.9582644575068447, 0.9686799983147324, 0.9611504250343573, 0.8820196158654723, 0.9422889994917742, 0.9283236768396343, 0.948105071782861, 0.9449491966295289, 0.930625108521268, 0.47791950493000446, 0.30391094443810684, 0.3408578576277955, 0.43254693242845443, 0.48572939290575445, 0.3274188478985083, 0.41649552351155494, 0.3229835161668533, 0.4612777030982459, 0.21512540826139825, 0.38393320768532246, 0.16872531995522644, 0.2792071347014886, 0.2727209967799793, 0.20943856326751742, 0.14965327389152205, 0.12958332287607588, 0.23359906026996868, 0.15964151096630375, 0.12454553561966042, 0.0015620142394525693, 0.15103620051970756, 0.16996856885617073, 0.1316445904066188, 0.24518335238499833, 0.1478572935493052, 0.17591864664068158, 0.15176628727686803, 0.15724005417596765, 0.18275702377437664, 0.14732225647355845, 0.17323821401147255, 0.17379403722868814, 0.17816930784467133, 0.18734865116225796, 0.16188514897713924, 0.004679932872377335, 9.999999999998899e-05, 0.00425822591661984, 0.058087458023667216, 0.004995473763403813, 0.0005887194355885805, 0.012923587434170214, 0.004195569584551251, 0.0027464376303037996, 0.11871052322521414, 0.03192397948250114, 0.16012332701846244, 0.060905869905846566, 0.03347523885122938, 0.023417677757209043, 0.12571312279366864, 0.07388963878976451, 0.14540433050604518, 0.11420181398845874, 0.09060767128913172, 0.2150607216742243, 0.13024303513426583, 0.06847739667046249, 0.12274750236306431, 0.14668594130922175, 0.06865191351548261, 0.11257083238588517, 0.10092182720505716, 0.2154171455268309, 0.16848953249962673, 0.2806491942521039, 0.02907398011515472, 0.07438391883214157, 0.08420493586857614, 0.20853356488510322, 0.0830007295842865, 0.5333536484459028, 0.5596132862518091, 0.5222858531071166, 0.49309973973775123, 0.5528819599909605, 0.48478855486215755, 0.5555818419522274, 0.5541661061927666, 0.5544151605223608, 0.11375336642861766, 0.08981787170628996, 0.11544825879599407, 0.08921875922714495, 0.1065657003471091, 0.13752374803591882, 0.14038201616471924, 0.15121616747103495, 0.11512761424616524, 0.19630620217831252, 0.3240586971212944, 0.21609347222395414, 0.4773252305849419, 0.2754356245128594, 0.30275989816496485, 0.2589588535566427, 0.24663853148829706, 0.3063723064804361, 0.261571638862085, 0.3742855491685928, 0.4192027623855985, 0.3502366520215111, 0.2903174066442532, 0.28201388346757905, 0.2912619728226946, 0.4172834592129093, 0.3519128621550972, 0.21333467055297473, 0.22885273250352633, 0.1487614927421511, 0.25321133607719293, 0.23660445008202913, 0.27412668053906275, 0.2252848179560567, 0.23228451275982498, 0.20115257387227903, 0.2330171180521341, 0.2175687699228518, 0.20201313950133026, 0.2532591751755242, 0.21437828363132805, 0.22949677603909258, 0.20295955913161456, 0.21105947319729867, 0.21043656521802545, 0.18330019416648824, 0.1878250250523833, 0.178273330606309, 0.22444372910257804, 0.2081795596207695, 0.18915684959033163, 0.2093466699319121, 0.20811518199958334, 0.22669794897861195, 0.8810280255236793, 0.1764539968749208, 0.16643023008373292, 0.9001482386803583, 0.19984195736814248, 0.9090754450115904, 0.14271878950030348, 0.1694022961314886, 0.8702256881704196, 0.37864250723858583, 0.2864094421646951, 0.12373456104218128, 0.921161284333544, 0.1677743849525345, 0.5354950160877485, 0.2885201702288732, 0.10428955907990034, 0.340554421552935, 0.19689402199733974, 0.2216846610840717, 0.21238917440651728, 0.1900182843067657, 0.22073494287692164, 0.19774623072133102, 0.21638995375025405, 0.19983548544009877, 0.20844117571657284, 0.08319963558352828, 0.08870344140339859, 0.1008380980020176, 0.10597901977759538, 0.0994125590797501, 0.09947095465896205, 0.07468093278819454, 0.09171945318239738, 0.06514754338351636]}, "mutation_prompt": null}
{"id": "6af66567-799e-4b30-804b-286c55b7090d", "solution": "import numpy as np\n\nclass QuantumEnhancedHybridSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Slightly increased influence of global best positions\n        self.inertia_start = 0.85  # Adjusted starting inertia weight\n        self.inertia_end = 0.4  # More gradual reduction of inertia weight\n        self.mutation_prob = 0.15  # Increased mutation probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.2, 0.2, (self.swarm_size, self.dim))  # Adjusted velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)**1.2\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                          + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                          + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.2, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumEnhancedHybridSwarmGradientDescent", "description": "Quantum-Inspired Enhanced Hybrid Swarm Gradient Descent with enhanced exploration using quantum-inspired particles and non-linear inertia adjustment.", "configspace": "", "generation": 31, "fitness": 0.2558912172639365, "feedback": "The algorithm QuantumEnhancedHybridSwarmGradientDescent got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.6968176936193577, 0.6755787566512685, 0.6875738646438418, 0.7284131094146884, 0.6523550438992145, 0.7087435077690973, 0.7170455182244403, 0.6966215752683784, 0.6850884087107116, 0.11659143454889509, 0.05449599542364281, 0.00926617596268986, 9.999999999998899e-05, 0.06127811388926441, 0.030324912712620944, 9.999999999998899e-05, 0.005306831407252299, 9.999999999998899e-05, 0.08915007072082992, 0.11536085897118242, 0.10126354839939922, 0.12393383257283841, 0.14007617789644444, 0.13115422183320824, 0.11450921670957837, 0.1592549050281974, 0.1562520271620147, 0.08393042941856843, 0.09664605235524382, 0.04490694484899671, 0.10698951372083698, 0.08986688969574552, 0.07725529212088422, 0.09705083695086847, 0.1029445370300357, 0.10112363122048318, 0.9500661054124429, 0.9670944541644124, 0.9524096122868851, 0.9023541726153865, 0.9170481123891293, 0.9072286844354411, 0.9584864401947103, 0.9352340576968526, 0.9514376873965984, 0.4021113931767757, 0.4012022660546679, 0.37911242939597045, 0.3900055644929816, 0.3908104965415612, 0.42753173313682147, 0.384603381513157, 0.35609674887921006, 0.4378185334557261, 0.8191800106451653, 0.2230948329523772, 0.22506996040549998, 0.25575036597212475, 0.3237900755206914, 0.2158647434559161, 0.23307537870040274, 0.17631621700711153, 0.36980818621768996, 0.18949598953514013, 0.12494546665236339, 0.1731620009089102, 0.27124293293112733, 0.1276305402363047, 0.1306152787986683, 0.22389489564707243, 0.24847397436932883, 0.1829719528615683, 0.15545912543006746, 0.20415521395483394, 0.12329671907836637, 0.178321582879426, 0.15048306506125297, 0.16926954386784288, 0.2985163423908188, 0.12735295145933412, 0.08157139345218489, 0.0038233032874681605, 0.0036163105367434945, 9.999999999998899e-05, 0.04162300373140693, 0.00012548276535218061, 9.999999999998899e-05, 0.01054667648908214, 0.004802008088701015, 0.07275296629614114, 0.0722766294652154, 0.053220887787989835, 0.10180705602171725, 0.09090783897539656, 0.043775813553433185, 0.01917629241339114, 0.06913050022701195, 0.0632880872904259, 0.04560889397647638, 0.14466018953239856, 0.1685421574826088, 0.0987195624479682, 0.10455143350116036, 0.13338752842489632, 0.07006290015351002, 0.15389418026783364, 0.09103948993257904, 0.05819624778697163, 0.1573385992240819, 0.25396882632677087, 0.14824453829601936, 0.17298233082517345, 0.11015303492618533, 0.07248724002601481, 0.11352761363287611, 0.07985610714619651, 0.08318791728573016, 0.5747079169961025, 0.5357541399041738, 0.4824509622498462, 0.5207313202861628, 0.5063356582106138, 0.48598358945642517, 0.5378928474405918, 0.5387913965678852, 0.4946375582005633, 0.07605030534522883, 0.08083945459662467, 0.08661608982387115, 0.13493468758503746, 0.09448357178156586, 0.15586917775026743, 0.13729659016165696, 0.11638852474569261, 0.08176103838012949, 0.3237960462466861, 0.3025760598581263, 0.2812243153269427, 0.24057174456419073, 0.36034316838886105, 0.26178242444664224, 0.2016334222101276, 0.1970203150304305, 0.21806924891130808, 0.29917265715000196, 0.3183551259385373, 0.30733246652020396, 0.41771825541736907, 0.24740456478134365, 0.2980410016782702, 0.31792202861256325, 0.31105593907703255, 0.270468113821994, 0.19630570045262707, 0.30035357323246037, 0.24623786857250507, 0.28126931523888865, 0.24097859991209425, 0.2563410772340228, 0.22269534930780044, 0.23519835322834526, 0.24881833361086525, 0.20365764246460627, 0.21160072208709724, 0.2020657093282816, 0.24438066683538484, 0.23310231720545294, 0.2639941188353879, 0.22432678699410669, 0.22497673140108831, 0.22515393416022922, 0.1901582918559066, 0.23888261963258917, 0.22625513708832834, 0.22432478835481195, 0.1947128823551013, 0.18234087085742368, 0.18824520951693446, 0.22083424429154097, 0.2090846559967804, 0.12644167370455106, 0.18805982837633506, 0.15297688392631914, 0.9152935514909171, 0.20070614002814768, 0.19834069426226375, 0.14258106932467285, 0.8941447452560114, 0.882353329792754, 0.5782074890119666, 0.15610504706942752, 0.7605083328429496, 0.2066851787758982, 0.16724799143991642, 0.15339761218431724, 0.1045412849703109, 0.1659314976555395, 0.360379276236915, 0.17853907958829096, 0.1972041280377177, 0.18761626481636007, 0.2001998055154316, 0.18537343706609832, 0.20011607915953789, 0.2006194322922129, 0.1984208767446809, 0.19462677022152397, 0.09358383196169584, 0.09995725762710828, 0.09670500484768285, 0.10161630551817458, 0.0860480621841665, 0.10726161386788935, 0.08278298650658977, 0.0817686029304161, 0.09144234570579246]}, "mutation_prompt": null}
{"id": "850c830f-11d3-4b2a-868f-e28bb5bf58d0", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 32  # Adjusted swarm size for better balance\n        self.alpha_cognitive = 0.3  # Increased influence of personal best for faster convergence\n        self.alpha_social = 0.2  # Enhanced global attraction\n        self.inertia_start = 0.8  # Adjusted inertia for controlled exploration\n        self.inertia_end = 0.3  # Adjusted inertia end for better local search\n        self.mutation_prob = 0.15  # Increased mutation probability for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.2, 0.2, (self.swarm_size, self.dim))  # Reduced velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.2, self.dim)  # Enhanced mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveQuantumSwarmOptimization", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with enhanced mutation and communication.", "configspace": "", "generation": 32, "fitness": 0.2539504668363492, "feedback": "The algorithm AdaptiveQuantumSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.7439832894703036, 0.7222679014540283, 0.7444822044146657, 0.7205258648981032, 0.7560530208169551, 0.7136398276746216, 0.7202090466691862, 0.7612652073617888, 0.6973903018435057, 0.08200899950958085, 0.03832953468383371, 9.999999999998899e-05, 0.12099644394874232, 0.01819538436862045, 9.999999999998899e-05, 9.999999999998899e-05, 0.08650213472070356, 9.999999999998899e-05, 0.09940835174130902, 0.15684136926804293, 0.1077063020612179, 0.14950226285721946, 0.13005045962481, 0.12199127743287985, 0.08347200912544506, 0.11915056163035842, 0.15638155587321179, 0.09968256617035098, 0.09523242415048971, 0.05913214271315814, 0.10388389456123714, 0.09022539470068947, 0.09437977856959934, 0.09164528505723102, 0.09213805185811619, 0.08737090304701922, 0.954118018151218, 0.9613546233775544, 0.9578584414145387, 0.48881404627902947, 0.92223352968294, 0.764431573746975, 0.9388154860716804, 0.9380124744177678, 0.9604521911277865, 0.44360205629614624, 0.43637234743439435, 0.48291108841846586, 0.3931797495149467, 0.39078973910439385, 0.41226092352475074, 0.4575221062145627, 0.3993322370765827, 0.41705249099382324, 0.22964023862777871, 0.2283226329943835, 0.14153754080760717, 0.22030665105096692, 0.3586212034890168, 0.23460364968038416, 0.12822603818327993, 0.15100498529500805, 0.23583414493569443, 0.19056607335503073, 9.999999999998899e-05, 0.150299941069715, 0.16760903215604306, 0.1494191998523171, 0.15821937378026973, 0.151255122160334, 0.11810446261015017, 0.19226865769630497, 0.19754651654017152, 0.15400254270462466, 0.13332669514669926, 0.16829664215258322, 0.12717568471246954, 0.15602826339724685, 0.21934314969711954, 0.20807541305312582, 0.12392132833872693, 0.004203680053813885, 0.0011580818122436387, 9.999999999998899e-05, 0.035882332828321206, 0.0043283363751728254, 0.0612700519165561, 9.999999999998899e-05, 0.003657316920202769, 0.051507172298709936, 0.08193166960491949, 0.064311915782572, 0.08504675406284112, 0.07771119298001505, 0.025635034326166206, 0.00959433576288049, 0.0788655191470089, 0.0782899692573421, 0.06653618368310377, 0.07689675005051, 0.20346550253001439, 0.12204460906281223, 0.09927362613957535, 0.0923627785223271, 0.06659021561202716, 0.14610948897135456, 0.09930860258449048, 0.09458171421277295, 0.1036171902741182, 0.11859428627674529, 0.24728020835896392, 0.09062029043101372, 0.06459615450356959, 0.060632362881759994, 0.17314771650230376, 0.09862559483440492, 0.08295816558283764, 0.4943559114637154, 0.5321965621821945, 0.607436127035828, 0.4973038680379902, 0.5376014558477195, 0.4699807824520008, 0.5387338208769965, 0.49682854722457837, 0.5288313280798776, 0.11689065136695331, 0.09389461286389522, 0.05766613201575599, 0.13367989484252452, 0.12079853550574227, 0.11052905531451618, 0.0637276307701653, 0.12900019453469436, 0.08267933239929393, 0.295918868843021, 0.2477871167832465, 0.18309863674822546, 0.27084058261618416, 0.38992016993204104, 0.305047865273011, 0.26715521499953077, 0.3142299525566602, 0.19291764397908195, 0.24343908617000332, 0.3899306438838416, 0.3602766448250321, 0.35077048303770464, 0.2468792427779546, 0.3216327403256003, 0.26208038008340595, 0.34917143377282844, 0.22556872567464237, 0.2044818348275408, 0.1669452875297609, 0.28087166246920936, 0.32914291655581596, 0.21350816367170056, 0.3390170241806685, 0.20036926025412805, 0.3131301590326977, 0.16026468396411708, 0.26733719054243243, 0.1795859358001497, 0.18105838639083993, 0.2392023553731879, 0.22466215705593406, 0.237114311636213, 0.22070309919688436, 0.2198873568176869, 0.22645139285269655, 0.2072428128995708, 0.17056369311453634, 0.18137213867615354, 0.25222461476961455, 0.25175263560988503, 0.18434500238962526, 0.1856389988503313, 0.2066751872845034, 0.20061863500705546, 0.9069618370450955, 0.18780231220774546, 0.16927632779829294, 0.9115792070000053, 0.20115339349843475, 0.924579412217748, 0.12259242534337533, 0.16902751204551858, 0.8823048045818032, 0.4850642672444476, 0.44652774019190966, 0.5119607355878836, 0.20959419225746267, 0.16890452722046378, 0.5813366168420738, 0.09416782896696363, 0.10419061727904733, 0.3278230643652842, 0.18391403857298838, 0.1866160284202557, 0.2023497939404434, 0.18437950116859347, 0.19396297436891297, 0.20195615369066122, 0.20989733878327932, 0.23324826283327915, 0.19411572098730168, 0.08798858171727675, 0.08442672129873496, 0.06782946108441223, 0.08719211882411104, 0.10161571183837748, 0.06423768893903603, 0.067629877318103, 0.0978706339633656, 0.078209772604234]}, "mutation_prompt": null}
{"id": "fab8d671-ac68-4fa3-969e-a80c15fe9afc", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmGradientDescent:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for better exploration\n        self.alpha_cognitive = 0.25  # Enhanced influence of personal best positions\n        self.alpha_social = 0.15  # Reduced influence of global best positions\n        self.inertia_start = 0.9  # Increased starting inertia weight for exploration\n        self.inertia_end = 0.2  # More aggressive reduction of inertia weight\n        self.mutation_prob = 0.1  # Introduce mutation for better local search\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (self.swarm_size, self.dim))  # Further reduced velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridSwarmGradientDescent", "description": "Enhanced Hybrid Swarm Gradient Descent with adaptive inertia and mutation for improved exploration and exploitation balance.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.7968277812232611, 0.7934472895551195, 0.8162267204685324, 0.7947425303763661, 0.7707111676557716, 0.7976153976425988, 0.7889478026634961, 0.7871423979003522, 0.8062566781757212, 9.999999999998899e-05, 0.05965888948814868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10115709969003506, 0.11535047143730748, 0.1593133277622052, 0.1312065428620861, 0.12859349842344558, 0.09109568920953393, 0.08162072844211266, 0.1418241322927143, 0.11970392753039538, 0.1139687140208604, 0.07514933646087862, 0.10512045919924207, 0.12816280036977346, 0.07839776036949475, 0.07912441349373345, 0.1051816188588951, 0.10316926271531357, 0.0737791091040928, 0.9582644575068447, 0.9686799983147324, 0.9611504250343573, 0.8820196158654723, 0.9422889994917742, 0.9283236768396343, 0.948105071782861, 0.9449491966295289, 0.930625108521268, 0.47791950493000446, 0.30391094443810684, 0.3408578576277955, 0.43254693242845443, 0.48572939290575445, 0.3274188478985083, 0.41649552351155494, 0.3229835161668533, 0.4612777030982459, 0.21512540826139825, 0.38393320768532246, 0.16872531995522644, 0.2792071347014886, 0.2727209967799793, 0.20943856326751742, 0.14965327389152205, 0.12958332287607588, 0.23359906026996868, 0.15964151096630375, 0.12454553561966042, 0.0015620142394525693, 0.15103620051970756, 0.16996856885617073, 0.1316445904066188, 0.24518335238499833, 0.1478572935493052, 0.17591864664068158, 0.15176628727686803, 0.15724005417596765, 0.18275702377437664, 0.14732225647355845, 0.17323821401147255, 0.17379403722868814, 0.17816930784467133, 0.18734865116225796, 0.16188514897713924, 0.004679932872377335, 9.999999999998899e-05, 0.00425822591661984, 0.058087458023667216, 0.004995473763403813, 0.0005887194355885805, 0.012923587434170214, 0.004195569584551251, 0.0027464376303037996, 0.11871052322521414, 0.03192397948250114, 0.16012332701846244, 0.060905869905846566, 0.03347523885122938, 0.023417677757209043, 0.12571312279366864, 0.07388963878976451, 0.14540433050604518, 0.11420181398845874, 0.09060767128913172, 0.2150607216742243, 0.13024303513426583, 0.06847739667046249, 0.12274750236306431, 0.14668594130922175, 0.06865191351548261, 0.11257083238588517, 0.10092182720505716, 0.2154171455268309, 0.16848953249962673, 0.2806491942521039, 0.02907398011515472, 0.07438391883214157, 0.08420493586857614, 0.20853356488510322, 0.0830007295842865, 0.5333536484459028, 0.5596132862518091, 0.5222858531071166, 0.49309973973775123, 0.5528819599909605, 0.48478855486215755, 0.5555818419522274, 0.5541661061927666, 0.5544151605223608, 0.11375336642861766, 0.08981787170628996, 0.11544825879599407, 0.08921875922714495, 0.1065657003471091, 0.13752374803591882, 0.14038201616471924, 0.15121616747103495, 0.11512761424616524, 0.19630620217831252, 0.3240586971212944, 0.21609347222395414, 0.4773252305849419, 0.2754356245128594, 0.30275989816496485, 0.2589588535566427, 0.24663853148829706, 0.3063723064804361, 0.261571638862085, 0.3742855491685928, 0.4192027623855985, 0.3502366520215111, 0.2903174066442532, 0.28201388346757905, 0.2912619728226946, 0.4172834592129093, 0.3519128621550972, 0.21333467055297473, 0.22885273250352633, 0.1487614927421511, 0.25321133607719293, 0.23660445008202913, 0.27412668053906275, 0.2252848179560567, 0.23228451275982498, 0.20115257387227903, 0.2330171180521341, 0.2175687699228518, 0.20201313950133026, 0.2532591751755242, 0.21437828363132805, 0.22949677603909258, 0.20295955913161456, 0.21105947319729867, 0.21043656521802545, 0.18330019416648824, 0.1878250250523833, 0.178273330606309, 0.22444372910257804, 0.2081795596207695, 0.18915684959033163, 0.2093466699319121, 0.20811518199958334, 0.22669794897861195, 0.8810280255236793, 0.1764539968749208, 0.16643023008373292, 0.9001482386803583, 0.19984195736814248, 0.9090754450115904, 0.14271878950030348, 0.1694022961314886, 0.8702256881704196, 0.37864250723858583, 0.2864094421646951, 0.12373456104218128, 0.921161284333544, 0.1677743849525345, 0.5354950160877485, 0.2885201702288732, 0.10428955907990034, 0.340554421552935, 0.19689402199733974, 0.2216846610840717, 0.21238917440651728, 0.1900182843067657, 0.22073494287692164, 0.19774623072133102, 0.21638995375025405, 0.19983548544009877, 0.20844117571657284, 0.08319963558352828, 0.08870344140339859, 0.1008380980020176, 0.10597901977759538, 0.0994125590797501, 0.09947095465896205, 0.07468093278819454, 0.09171945318239738, 0.06514754338351636]}, "mutation_prompt": null}
{"id": "4264614c-5ed8-4922-b0e2-abc664afee77", "solution": "import numpy as np\n\nclass AdaptiveDifferentialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size\n        self.alpha_cognitive = 0.3  # Adjusted cognitive influence\n        self.alpha_social = 0.1  # Reduced social influence\n        self.inertia_start = 0.8  # Adjusted starting inertia\n        self.inertia_end = 0.3  # Adjusted ending inertia\n        self.mutation_prob = 0.15  # Increased mutation probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.25, 0.25, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDifferentialSwarmOptimization", "description": "Adaptive Particle Swarm with Differential Strategies for Enhanced Optimization Performance.", "configspace": "", "generation": 34, "fitness": 0.1961462123999534, "feedback": "The algorithm AdaptiveDifferentialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.7305495244648124, 0.7511331994080043, 0.7366594787280203, 0.7159013343888629, 0.6807243929262345, 0.766412541150546, 0.7188306729391658, 0.6454204084102784, 0.6518880964885851, 0.05237810136264509, 0.08622684345250597, 9.999999999998899e-05, 9.999999999998899e-05, 0.040650776697142676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07842761297155743, 0.1449423804454425, 0.12085455595990569, 0.08874465153208078, 0.1490165174195135, 0.0853525896548506, 0.08861214168285736, 0.1582896702990123, 0.08612097298755705, 0.07807311226014158, 0.08659345064225166, 0.06644519222245959, 0.10435568803746609, 0.03918180887508138, 0.08067595786735782, 0.10747815025521124, 0.1289824552673785, 0.08886268389288365, 0.100980135648573, 0.1753166878617265, 0.10654928689298193, 0.10648644760696002, 0.08348946242963318, 0.07905214374061709, 0.32761550524201133, 0.08743307947026602, 0.10197245454211568, 0.288506557800966, 0.2630073011823735, 0.06125964279550866, 0.42455105669381266, 0.25692650608064493, 0.21132944326916636, 0.3087825074519376, 0.09741340635952134, 0.3658464131451761, 0.213864236262704, 0.1564913824292069, 0.17075011166290077, 0.2735439974329159, 0.1701512980401203, 0.14536505817383627, 0.13690180315772882, 0.174148266385458, 0.22606649571193582, 0.3545961474165694, 0.12854526166154556, 0.004806906452967219, 0.057059290781626415, 0.13332847389073665, 0.08976750409984757, 0.1802051934418869, 0.2217410638157027, 0.1439512021237932, 0.14787710976641522, 0.13232100438663108, 0.11903298706336718, 0.10919999263170721, 0.14705709101922748, 0.14598776897750176, 0.1932342493757061, 0.1706568684918891, 0.15856995872488955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02312590094076261, 0.007326573735785269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09758458403061288, 0.08825098773387796, 0.10242507831982062, 0.07940539680756087, 0.027675190852240128, 0.03972916165500395, 0.09187615956973583, 0.08267952116399502, 0.11416967663808641, 0.10684954762322252, 0.10508682466416663, 0.1125539601638833, 0.16794410744454402, 0.12353760515928025, 0.07170532544076491, 0.10761611419785899, 0.24642217130329946, 0.14455480585568636, 0.1720846689056008, 0.23720417023692075, 0.22384086829783634, 0.05981568050026176, 0.15950320698599774, 0.09300188241310081, 0.2133925613005182, 0.10660895722882158, 0.07902793072882308, 0.4409693700198446, 0.507840785241187, 0.530962139850444, 0.43808661371123647, 0.46862266027242017, 0.383459100829979, 0.5290352902718198, 0.49789511776321127, 0.5075744832846278, 0.09487757629202664, 0.060570231702928856, 0.06702859072469147, 0.15348362569477136, 0.06021256256671781, 0.09554927761965859, 0.06726418678549051, 0.07700419367135514, 0.10254111311812608, 0.23752403116384802, 0.17468568193995393, 0.148115496349691, 0.136351820559947, 0.14939945536247579, 0.1828158283724779, 0.2749611516152539, 0.20462045323093914, 0.13067537851474098, 0.17733244465742826, 0.39459681899318255, 0.18700248440721934, 0.2923818754855376, 0.19018964063684107, 0.3705037247054159, 0.23455650197128253, 0.2748977580912756, 0.2704687665502806, 0.21488920704392012, 0.19803525404582611, 0.2743891231978698, 0.26388541457862313, 0.24853080870877553, 0.1977306241408996, 0.2217748045705069, 0.24021255300651068, 0.22808072839612636, 0.22479268738294111, 0.2213949942303195, 0.19162537943137725, 0.22178632354850125, 0.23138520713166078, 0.23198756161584677, 0.2201799227390786, 0.2131297175935808, 0.19293826923300228, 0.18424126194504675, 0.19374399722730362, 0.18873881705107098, 0.20840081976438485, 0.21130188429735464, 0.20066125772413002, 0.16747235902332702, 0.20710999468029645, 0.16594948421685018, 0.125049986737244, 0.1766841669612098, 0.1835854613951129, 0.8328520513285257, 0.19760366860852696, 0.1981223395707129, 0.1412910719127567, 0.4304798296637691, 0.8644653761739376, 0.4427799853027249, 0.15549483288106603, 0.5237443190242752, 0.1865981708751573, 0.1661098329081253, 0.11734575417936288, 0.2947730848703506, 0.25793005127956714, 0.25917560404768647, 0.2095730668275011, 0.18444780794392834, 0.19865956610096946, 0.17593847100873627, 0.19477390762463542, 0.19908935881728562, 0.19471530253794223, 0.20494968170994077, 0.19348876017417083, 0.10047259120140783, 0.09328990047736607, 0.08645426434737202, 0.09013947320975912, 0.09158815940173659, 0.08273949753276244, 0.08355439009784316, 0.056741944895221774, 0.09863311402709551]}, "mutation_prompt": null}
{"id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 35, "fitness": 0.2815405771266027, "feedback": "The algorithm AdaptiveDiversityEnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "48e004a3-95bf-4a46-913e-1a1f6ccf6aff", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "595d0727-1770-40e2-9d45-b4096c78232f", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.35  # Modified influence of personal best positions\n        self.alpha_social = 0.25  # Adjusted influence of global best positions\n        self.inertia_start = 0.9  # Slightly increased starting inertia for more exploration\n        self.inertia_end = 0.2  # Higher inertia reduction for faster convergence\n        self.mutation_prob = 0.2  # Increased mutation probability\n        self.crossover_prob = 0.35  # Higher crossover probability for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with improved velocity update and adaptive parameters for enhanced convergence.", "configspace": "", "generation": 36, "fitness": 0.27914794610663185, "feedback": "The algorithm AdaptiveDiversityEnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7222490690026886, 0.6919221069370952, 0.7138758724675635, 0.716324471513321, 0.6866557599939971, 0.690935729009421, 0.6999181950315178, 0.685273069587929, 0.7156530366067415, 0.22934392937132653, 0.13007586382841818, 0.2140967047932235, 0.22959282866213016, 0.12341597348809519, 0.15372756387897046, 0.2235931000502469, 0.2233463452465393, 0.21950407536097105, 0.15553334742742786, 0.33054705697439624, 0.1594529718558415, 0.1349905565114583, 0.15748818351182292, 0.17038203505946226, 0.15118464536778042, 0.16220413974536674, 0.14965575507350493, 0.12782237377107908, 0.11807587736366332, 0.11229324560116005, 0.16723916957695728, 0.10986853249721351, 0.15518269036992371, 0.14106866172065857, 0.14396952761145554, 0.16644119934580526, 0.9560266569442615, 0.9554433618360156, 0.9636228450135584, 0.9322465949989676, 0.9524332161053705, 0.952599534902453, 0.9577676036357221, 0.9463511772133277, 0.9669394545732525, 0.42873826616649613, 0.4711046580016962, 0.4568354286817372, 0.47250441516975183, 0.37332600568916086, 0.44315163438720695, 0.4228041183129858, 0.36915162933538304, 0.4028203289330601, 0.22453440051378304, 0.7660478234405681, 0.224461672075278, 0.2168552432559563, 0.36716225804673575, 0.20681364293639692, 0.13056291316847346, 0.23531682086406458, 0.21958294657959165, 0.1867219122517083, 0.09839032507848022, 0.19658485967248884, 0.11405511833849413, 0.16215773241745823, 0.1637828107704019, 0.17499200632666612, 0.1161354738304341, 0.1810388628287969, 0.17786713186081338, 0.1581954206318642, 0.12223511607402793, 0.1548873052462283, 0.18254749798316194, 0.14122257103792402, 0.20924711896509873, 0.12120316108719331, 0.13627484644221388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04886858866690691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006393607564292525, 0.133284097583815, 0.11385553527162084, 0.05052267047783898, 0.07586578154176182, 0.06499039614349733, 0.08601686989958313, 0.023806236400234604, 0.09357109736466662, 0.08256074326627261, 0.08719408705642762, 0.08680888510457374, 0.03669784827010858, 0.08508453961128415, 0.06511822460513972, 0.15939397713066739, 0.06585610221763949, 0.10805453919216579, 0.10782992278009274, 0.0557837037311103, 0.24952035135904393, 0.23186393456748788, 0.18295080228860383, 0.0547510751031004, 0.14559142945349213, 0.19890235785831945, 0.05396387232284794, 0.07851505000473535, 0.08639285398449825, 0.5393455373552959, 0.5103651225224337, 0.4848895969280812, 0.49735664802834234, 0.5223900092355073, 0.5224710529381995, 0.48427186290300706, 0.4897554021750956, 0.5122512185271682, 0.1477586722872798, 0.10329614668468656, 0.0940153908530379, 0.10162053706518914, 0.3209026932456097, 0.13616674176187515, 0.11903094167258566, 0.15012262517716313, 0.1472430608348475, 0.3340275650929846, 0.18368667957831153, 0.2241482287413198, 0.23268747123905142, 0.4044743952177363, 0.27274367427949786, 0.3537316026763164, 0.3465222001727364, 0.2335104218448324, 0.38528458383491393, 0.40613210093305796, 0.379213278730417, 0.24570491228694102, 0.27482233330712136, 0.42501035631533246, 0.39862106953502074, 0.4069501946576265, 0.40732811504028155, 0.2621527190388373, 0.3126082829744986, 0.2831329270179569, 0.2286176916997008, 0.20596929185787471, 0.2749202317247963, 0.3263504844369348, 0.2656583231072487, 0.22289518528588836, 0.22896738199166555, 0.1972256069066317, 0.2195313660439231, 0.23272299121213158, 0.2607651744411382, 0.21496916976244718, 0.2634802357704227, 0.22042636817458128, 0.2212933060185983, 0.21887188534247393, 0.4819216162383766, 0.2375352831763573, 0.24029900838181384, 0.2424029188385518, 0.22279650989025057, 0.22021151274790762, 0.2222159938709274, 0.2185348904767639, 0.1868637091094567, 0.18129566821269227, 0.1825103141984702, 0.8850931352492157, 0.19884679843826114, 0.8593612161710924, 0.16133523193752242, 0.16504881358495915, 0.8685368744954977, 0.58478016222601, 0.21085071059288585, 0.20871677794038923, 0.8333211850381324, 0.20226667586603486, 0.15319835702322948, 0.2075847467896449, 0.7960276240350984, 0.7295479486783845, 0.20965558812601115, 0.19069456282500252, 0.19147525450705438, 0.18228306125364846, 0.18415081342584727, 0.18318166506531175, 0.19368160754969632, 0.1982263272588779, 0.18849438344842506, 0.07651013210926272, 0.0850577604162559, 0.0973343062241998, 0.0890386050733778, 0.09288867677974999, 0.09026494268932217, 0.08307440706903146, 0.09050614783389666, 0.09366660102121727]}, "mutation_prompt": null}
{"id": "666be743-bdf5-44ec-bd3d-31e98e1191aa", "solution": "import numpy as np\n\nclass EnhancedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Slightly larger swarm size for better exploration\n        self.alpha_cognitive = 0.35  # Increased influence of personal best positions\n        self.alpha_social = 0.25  # Increased influence of global best positions\n        self.inertia_start = 0.9  # Start with higher inertia for improved exploration\n        self.inertia_end = 0.2  # Greater reduction in inertia for better convergence\n        self.mutation_prob = 0.1  # Reduced mutation probability for stability\n        self.velocity_clamp = 0.5  # Clamp velocities for more stable exploration\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.2, 0.2, (self.swarm_size, self.dim))  # Narrowed velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + np.random.uniform(0.1, self.alpha_cognitive) * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + np.random.uniform(0.1, self.alpha_social) * rand_social * (global_best_position - particle_positions[i]))\n                particle_velocities[i] = np.clip(particle_velocities[i], -self.velocity_clamp, self.velocity_clamp)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Smaller mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedParticleSwarmOptimization", "description": "Enhanced Particle Swarm Optimization with random dynamic acceleration coefficients and adaptive velocity clamping for improved convergence and exploration.", "configspace": "", "generation": 37, "fitness": 0.244897163340092, "feedback": "The algorithm EnhancedParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.793586385843906, 0.7897322278349291, 0.7765983991036539, 0.7957839012751373, 0.8051064077543538, 0.8117203062748455, 0.7947153841258234, 0.782785755970585, 0.7853743804210588, 0.10237457937720096, 0.08167463480882997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11803419008655835, 0.12543401769937812, 0.08662747469066923, 0.13089943092801237, 0.10384684653521925, 0.1588533243423833, 0.07140817661855237, 0.10696120825358557, 0.1025108422831259, 0.08492304946324325, 0.06790406888850142, 0.10776682163038243, 0.14062687988240974, 0.09039047565870839, 0.07697817198323242, 0.09885252673590439, 0.10408889603865623, 0.08753312210764963, 0.8650952883516071, 0.8857759964156506, 0.8834163546844905, 0.8513506752432408, 0.8525874534498832, 0.8682896218663188, 0.8899194873307787, 0.15542210195472994, 0.8950209586349708, 0.3114234894283452, 0.48581640422307515, 0.08184435867346906, 0.32873429360427353, 0.44840214351321095, 0.4413148709857675, 0.4769322727576043, 0.42113439780477646, 0.48696503309156625, 0.21357064779544388, 0.2516308714808372, 0.22217793818662668, 0.21792781331352162, 0.20963778493487228, 0.21256700078828483, 0.17572228320634897, 0.1295593575179188, 0.23113141854129637, 0.2480294371167303, 0.122875539820411, 0.2133803464804871, 0.1253344385695524, 0.16263188626174108, 0.052978834437065414, 0.3587914084524848, 0.16739053520546043, 0.23165762082163388, 0.15056314928964254, 0.1954194221192802, 0.14584517463507785, 0.16633558229931555, 0.14227065036042552, 0.18728335521182182, 0.12964698701708421, 0.2064296024977862, 0.12627337995010823, 0.017131317437585003, 0.09578551766255405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04033559355848115, 9.999999999998899e-05, 0.05562257540148363, 0.15065494340287733, 0.04988141854323691, 0.10174820840007981, 0.05414917438224387, 0.01839344020260336, 0.03167442406208176, 0.07067690502869806, 0.0851381074766967, 0.10860675059864333, 0.07794597912233969, 0.10530550679259598, 0.1780528937371717, 0.10926313902152052, 0.09213930527855263, 0.0845136501878807, 0.12583775044089196, 0.10049138965561921, 0.0743466878540947, 0.11548953653305949, 0.049946659978146846, 0.09950379481244986, 0.04813696731834172, 0.130838814376944, 0.07920517268289207, 0.09009279750971289, 0.25590220254397944, 0.07919231300533325, 0.5710717045451243, 0.5096365215541422, 0.5073598413514493, 0.5023468816394998, 0.5177757411987287, 0.46976982268121714, 0.5243858309342482, 0.5657301854965807, 0.5737249678984637, 0.07683824183689081, 0.05950785587897556, 0.07475353662012418, 0.1792354088548911, 0.09606768708713154, 0.1392593773604318, 0.1093502275545365, 0.09170319675698191, 0.10210911107745835, 0.1888629936679289, 0.17145064068452498, 0.1848913771897326, 0.19608237760974456, 0.20523621755250832, 0.17655498506733036, 0.2898655920036889, 0.19686035617724162, 0.20166453293021291, 0.336171220448529, 0.3872009899271752, 0.3414316819713692, 0.38400217361428957, 0.23461589545624462, 0.38174851191153614, 0.23758246492792778, 0.32666615094928764, 0.25350048828058414, 0.26058027434327247, 0.2958254036137914, 0.3294513478481258, 0.22639555305556502, 0.18093364463153172, 0.34257383823851284, 0.2505551177989289, 0.27605706927841855, 0.23748568082505594, 0.20333199546876735, 0.20671126447416166, 0.21563603926713315, 0.22238550024175274, 0.2742784565020172, 0.21393853571571386, 0.21833854546033205, 0.2656080103383064, 0.24402361640515757, 0.1830248246708004, 0.1893167660611179, 0.20451231506515555, 0.189222223072269, 0.22059344961759986, 0.18027597519724037, 0.19048150566615019, 0.2184737683970569, 0.19908148112069268, 0.12608438599056648, 0.1698940210249864, 0.18337842649237135, 0.8780461025806072, 0.19923039160988754, 0.8733888913011649, 0.14117531286923846, 0.14860452145247294, 0.8773001919979252, 0.5345542601905724, 0.1547092005342211, 0.07351093895722027, 0.4350746686716819, 0.09338324565271161, 0.31880786672224803, 0.23386694100726135, 0.35486425599066984, 0.2528586243625215, 0.19908639959573715, 0.19436894891155831, 0.1923047726550985, 0.20046619074230354, 0.2147596605286326, 0.207209486313234, 0.19492902974411985, 0.19036801916644264, 0.20659063421951185, 0.09662919185637242, 0.09659289636382762, 0.07565393322559899, 0.09722014129748713, 0.09620568005657237, 0.09764615851646541, 0.09678981822946953, 0.10259197094223294, 0.09873261666521649]}, "mutation_prompt": null}
{"id": "d497446e-88cd-4890-995f-adc22eecd79a", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "2b40c534-ea38-46dd-9a1b-3758b9dce9ca", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Further increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.4  # Increased cognitive factor for personal influence\n        self.alpha_social = 0.3  # Enhanced social factor for global guidance\n        self.inertia_start = 0.9  # Higher inertia start for initial exploration\n        self.inertia_end = 0.2  # Lower inertia end for better exploitation\n        self.mutation_prob = 0.2  # Further increased mutation probability\n        self.crossover_prob = 0.35  # Increased crossover probability for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Broadened velocity range for diversity\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_start - (self.inertia_start - self.inertia_end) * (evaluations / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] = np.clip(particle_positions[i] + particle_velocities[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] += np.random.normal(0, 0.2, self.dim)  # Increased mutation step size\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Enhanced swarm optimization with adaptive parameters and strategic crossover for improved global exploration and convergence.", "configspace": "", "generation": 39, "fitness": 0.2793185860721749, "feedback": "The algorithm AdaptiveDiversityEnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.6800206908877469, 0.6903059334341866, 0.6282027126097418, 0.6660551948365186, 0.6809408698855541, 0.6530529819213835, 0.6778541661090061, 0.6993324299962258, 0.6702828689339688, 0.20209255428452844, 0.18234214700935458, 0.0864148429690853, 0.09199430548165821, 0.22147644827533342, 0.2214534442709607, 0.18389840831767001, 0.1792957878353313, 0.23606555104786042, 0.1433685394441292, 0.15218027148548752, 0.14940492548464046, 0.14691559997051606, 0.31420256710306016, 0.16379631845440779, 0.15131842794108652, 0.25205805056877517, 0.22472905360841, 0.13296498869965, 0.11305643650800734, 0.13089676740359968, 0.14402706113096042, 0.12976707289293776, 0.12954679973285543, 0.1367821672129308, 0.10554503224250023, 0.13380277698103016, 0.9621253234283621, 0.9563220655077931, 0.9691725357832922, 0.9481269515665177, 0.9509629787892024, 0.9575399169001533, 0.9592357092958012, 0.9465636860098852, 0.9743984341099896, 0.4306062356748309, 0.44427350661612686, 0.4303787446719567, 0.3943264141762838, 0.39639528467090857, 0.38733821836624216, 0.4140513449057709, 0.3988602635223353, 0.403098560230541, 0.8201064789045543, 0.2471501205638913, 0.7379835270129053, 0.21521817658773368, 0.7748973714315976, 0.7130416652604502, 0.7624272736388, 0.23214043619768865, 0.826850981539187, 0.19232386987397432, 0.10147020188605693, 0.16714159048740918, 0.11587240136122912, 0.18364492270560506, 0.17691464386421485, 0.1801718925027339, 0.17657266829021978, 0.20169168301028617, 0.25226042936384696, 0.12461273570619924, 0.20384476450756883, 0.20109397200201296, 0.17086720995054494, 0.17662419306789212, 0.1728513112708595, 0.12700387266852708, 0.17711767463808714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004639252508614522, 9.999999999998899e-05, 9.999999999998899e-05, 0.004266418745485168, 0.0034395811540096632, 0.05048306215216747, 0.14785280346636753, 0.07819033608712511, 0.1171276160285859, 0.07355805335426613, 0.057820513094604786, 0.07223708665746831, 0.06579412241563132, 0.10949309597420709, 0.06679666171705922, 0.06994759558412733, 0.038676487530798664, 0.03644991461471636, 0.05799646789901092, 0.0558915428740514, 0.06484161521042842, 0.052816651054602315, 0.10482084417851034, 0.058547535515599325, 0.13888934678097953, 0.06870723099524434, 0.12197175257970505, 0.0285515069877329, 0.09026730703145591, 0.09873494007069838, 0.21176203693936413, 0.1953291833989732, 0.08474201149748528, 0.5140444380848377, 0.49018414018929657, 0.47427376782957675, 0.4911334185964288, 0.5014033913951614, 0.527421895636744, 0.5049178410246418, 0.4944311120603807, 0.48231057399053734, 0.105205775162865, 0.11881013930400353, 0.14841012135244014, 0.12302799593826863, 0.14155782759835822, 0.13771398899101261, 0.11195796409262526, 0.1459223950165649, 0.19675139274769549, 0.1906558008509559, 0.1805351530230932, 0.3076668284064301, 0.33301827615671364, 0.3786724142133392, 0.3550911167938354, 0.3216023536419249, 0.32839346976693795, 0.239333635769715, 0.2507242299669572, 0.3751204700651355, 0.3917611399024653, 0.22952034567994584, 0.34691189750937546, 0.39597279277222963, 0.38697101029804626, 0.37102726532802743, 0.28239506500552214, 0.09724246575871476, 0.24947134285571637, 0.2956614492699392, 0.24046497276652434, 0.233592257080531, 0.2950233198059934, 0.28464265836392155, 0.2523146523403892, 0.25819147328131575, 0.23052264992007065, 0.21486675445109793, 0.21372637295553676, 0.2142226194274185, 0.23168835215837347, 0.24199743155800657, 0.22503501641385548, 0.21457793132501823, 0.21944012754098796, 0.2345613237175015, 0.24463254716922234, 0.2192049925371733, 0.212936998613507, 0.19939869356695716, 0.21272458265982164, 0.23620676333581714, 0.21970739725350064, 0.2117472775749768, 0.18675740865631374, 0.17577485098253187, 0.1644212824830965, 0.8642018690387665, 0.19893409437577025, 0.8511943669079998, 0.1759115356099683, 0.16069542467737552, 0.8650529154812256, 0.5266946292449322, 0.21183229468801434, 0.2083200846963601, 0.48739422600454174, 0.29779539723688664, 0.15467309328721224, 0.35317266896730104, 0.1044380931934864, 0.5553621968121906, 0.18582609304372666, 0.1826690622438525, 0.18749633734468885, 0.19423311368549712, 0.1835611224882333, 0.1796473993319847, 0.17965512962244357, 0.1965160583802179, 0.18733238623436754, 0.08910680615866007, 0.09304319197967525, 0.10766053391382557, 0.0925950710683826, 0.09241921917282891, 0.09505718018811715, 0.08788381025556247, 0.09738154155282697, 0.0871912231266988]}, "mutation_prompt": null}
{"id": "fff6d706-fda2-4a87-8057-781bd640ab8d", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Increased swarm size for enhanced exploration\n        self.alpha_cognitive = 0.35  # Increased personal best influence\n        self.alpha_social = 0.25  # Enhanced global best influence\n        self.inertia_start = 0.9  # Increased starting inertia for better global exploration\n        self.inertia_end = 0.3  # Slightly adjusted inertia reduction\n        self.mutation_prob = 0.2  # Increased mutation probability for diversity\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Adjusted velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * (1 - evaluations / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.15, self.dim)  # Increased mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Enhanced Swarm Optimization with fine-tuned parameters, dynamic inertia adjustment, and improved diversity mechanisms.", "configspace": "", "generation": 40, "fitness": 0.2771072073225351, "feedback": "The algorithm AdaptiveDiversityEnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.650449068615859, 0.6273132657845395, 0.6466398957449754, 0.667190774854655, 0.6544372876924782, 0.6502554643802596, 0.6619011116982452, 0.6566336392855279, 0.6527351263345418, 0.20922586952659394, 0.1661099234400525, 0.11721006886697938, 0.17244449276446872, 0.15732058830452056, 0.1469124383320024, 0.18594190471032468, 0.20009019808126227, 0.1830645201066562, 0.2170258712888844, 0.2540265438629593, 0.2855951140827544, 0.16145976805005335, 0.277414610637165, 0.15396012360728872, 0.14894844687755016, 0.1547000580257507, 0.128573794868032, 0.13946677582533196, 0.13573308920646543, 0.13554744491464643, 0.11048645277118507, 0.11291407080699278, 0.14241892225477515, 0.15746172046355367, 0.14138607104332845, 0.1217162041666301, 0.9562968133287446, 0.9552944988865746, 0.9640544034770013, 0.9324240577904314, 0.9519087417518668, 0.9484289045095678, 0.9577461817032761, 0.9462843238200572, 0.9669671637230611, 0.4379905339097959, 0.4062549301326164, 0.4162545191693018, 0.42477704378834047, 0.4153097967758166, 0.3570663929206024, 0.41681168032076443, 0.37798664480171085, 0.42849053378001367, 0.2911914165017645, 0.6897282069828007, 0.6572084317754421, 0.21670141644674823, 0.5637815264531154, 0.21262268668569895, 0.16693826202180373, 0.2320686435392445, 0.793271568736367, 0.1968550952890301, 0.15852140845870255, 0.16461937857190878, 0.1055596831206469, 0.18246645056843236, 0.18660102575823456, 0.17257440883332698, 0.11653058498984248, 0.16904776405415955, 0.15803441598402512, 0.1413688178332484, 0.24281003629778852, 0.2085706624960051, 0.14607667232780808, 0.15943996298419227, 0.17084906384482146, 0.20682761245712533, 0.12146798849254992, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05207913768867878, 9.999999999998899e-05, 9.999999999998899e-05, 0.0362311462489866, 0.07479594499500541, 0.051268505002011855, 0.14924229385732635, 0.10949876216503163, 0.14124470691965907, 0.07338936493932158, 0.0670233575993896, 0.01947389162530433, 0.15303751207224958, 0.10443247596061378, 0.04275984606486194, 0.08113907592426917, 0.027464270924874468, 0.11101942571497025, 0.06416861019472142, 0.12195674137707169, 0.06582096006990523, 0.08951579173271007, 0.09697749313652038, 0.04854815242816635, 0.18607622571306415, 0.140964415873586, 0.16535144627192933, 0.05769332224402102, 0.15623698726560165, 0.19336212831623734, 0.05403368750033277, 0.10331984666350214, 0.09097927769224701, 0.520928297022937, 0.49523371136275607, 0.5199081558385157, 0.4916877476294449, 0.5010172169661025, 0.5090245066284682, 0.4875892091170253, 0.4995196603359291, 0.4927522992277249, 0.14168651524712894, 0.10325414890805806, 0.12195387881452102, 0.1447156283743829, 0.1255520149379239, 0.1493144241545037, 0.15648194815074745, 0.09726998233672135, 0.16117671857961668, 0.17753961574055466, 0.2970882709184348, 0.2645230835337611, 0.3622232203615159, 0.25588224557070793, 0.2362231953683347, 0.3038295681975647, 0.3243832724504151, 0.33632884704429533, 0.24926446853584017, 0.38649223081911077, 0.36380686880324364, 0.2505001257140981, 0.3837605052304357, 0.37833476366762364, 0.3665783086156673, 0.3735382873671479, 0.371507355584048, 0.24404061221691453, 0.30002283491528836, 0.24872621588165222, 0.1831075985064614, 0.19315598621794494, 0.31187209580957076, 0.25019605511428944, 0.30844465394230436, 0.21561996657240246, 0.21326540925517, 0.1939632084150077, 0.20770368474138734, 0.2775194919804751, 0.22768846733295145, 0.19941976038311693, 0.18936461482183897, 0.21503610988309751, 0.2238046014060503, 0.20062071117579394, 0.21240685677978188, 0.22998947926766578, 0.24183655250190628, 0.3770679602399952, 0.26372494862661966, 0.2107407484301237, 0.4678203532032441, 0.20300428783819435, 0.18707692104984586, 0.17651477781581837, 0.18023539792902432, 0.8638195845681915, 0.1991288790672333, 0.8446868673020591, 0.161202373187879, 0.16366554516039233, 0.8516972894368005, 0.4824196686711444, 0.21147980952348022, 0.20836271385798788, 0.8119901989601084, 0.2002371007996363, 0.15291532382143047, 0.2079354543928591, 0.5115427170579827, 0.47970466181256866, 0.17862935603759034, 0.18963662555608085, 0.20045986170616437, 0.19720545503525344, 0.18009887639724897, 0.18805143487351106, 0.19158928763743943, 0.18513438825840656, 0.18556114587480776, 0.09277858541065376, 0.0924624120703198, 0.09615811077038905, 0.09669688197104753, 0.09243338646259802, 0.09233365690851913, 0.09248531204356658, 0.1009982896415762, 0.09039898642957145]}, "mutation_prompt": null}
{"id": "e7e031c1-7abf-43e0-b842-747340feaee2", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "468f76d4-c91e-4fab-8193-72b6108faee4", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "c5c04048-544b-4004-b58e-62a964047c17", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "99a9ac57-035c-418d-8eb3-058c7f0916d4", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "5c781b28-4423-4e55-8cee-bd76b2f2328e", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "90293263-8aa6-477c-8873-67060d85ca4e", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "e586afa3-8e26-4af6-9500-60d04e4df00b", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "cf66b564-6700-4c29-8ba9-01d7ae80956a", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.3  # Modified influence of personal best positions\n        self.alpha_social = 0.2  # Adjusted influence of global best positions\n        self.inertia_start = 0.85  # Slightly reduced starting inertia for balanced exploration\n        self.inertia_end = 0.25  # Adjusted inertia reduction\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Introduce crossover for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))  # Broadened velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)\n                    particle_positions[i] += mutation_step  # Apply mutation\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    crossover_point = np.random.randint(1, self.dim)\n                    particle_positions[i][:crossover_point] = personal_best_positions[partner_idx][:crossover_point]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Diversity-Enhanced Swarm Optimization with dynamic parameters and crossover mechanism for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.7573158591955, 0.7786721092293829, 0.78483445008012, 0.7436135290038035, 0.7685941037767912, 0.7704451328043695, 0.7602729598095426, 0.7748342068588414, 0.7666709583869125, 0.32914203945650033, 0.23263315437189358, 0.13976653116579507, 0.2442595416371679, 0.11422858714932538, 0.2373341988124168, 0.16416780607090553, 0.2824843092331951, 0.2770596522081509, 0.17970639931881383, 0.3005919674450681, 0.14171258119008723, 0.13493193168319917, 0.15653192693547935, 0.18074026250306308, 0.1397137325254485, 0.17279074600461553, 0.148101993181611, 0.11023461373234344, 0.13842532537508379, 0.11203200843242267, 0.15193106816243818, 0.1383752283494306, 0.10467506762174184, 0.10883607583929555, 0.10925174793219716, 0.10167497490886002, 0.9653705591606743, 0.9638648862695319, 0.9523814629954115, 0.9409757695008327, 0.9278368403429805, 0.9329391533161265, 0.9557312274184743, 0.9688524276541212, 0.9151809652292304, 0.5019188997151602, 0.5287431845414543, 0.2705337376226178, 0.4530170851262366, 0.33382751215902207, 0.4196436028152666, 0.4242328385244175, 0.3183149386386297, 0.42593913708776376, 0.22791509953138578, 0.35423900192855573, 0.4728642770756839, 0.21116283443831463, 0.21292647690227506, 0.2748272975286691, 0.22680270706067507, 0.7734931431374525, 0.8642965176379092, 0.17532878636356108, 0.12802885893988825, 0.18696410726244828, 0.1308600489696533, 0.1255734545877547, 0.1974167443715763, 0.1759490773119744, 0.20536448636350613, 0.20039330220610618, 0.18101359960227592, 0.12707751227299902, 0.18488612291028317, 0.12958062349828592, 0.18330132340273397, 0.19425405730647194, 0.12765198906038966, 0.2560991098475449, 0.19686369019211047, 0.008573296710928324, 0.1283252888958275, 0.004899314214189543, 0.0430862780759147, 0.0516287216799306, 9.999999999998899e-05, 0.004864149279334429, 0.013421055089676504, 0.001356480913387137, 0.1499526167159323, 0.1002966608180732, 0.08998673526772094, 0.06522529850918968, 0.04122579904610357, 0.031144034517576635, 0.13371379080588086, 0.1003225187614114, 0.08365591367494596, 0.044044207978587435, 0.20435339503572436, 0.04371828458907423, 0.13505512701606948, 0.07049622539435185, 0.07103180970731737, 0.12135987009883287, 0.11059641233509043, 0.12212615802796567, 0.2213314445000848, 0.14839126402939706, 0.16979846568134327, 0.069170011257365, 0.07912943127731376, 0.06913071601000942, 0.08445939447098949, 0.21816180159916065, 0.12287719254244056, 0.5922762598817687, 0.5576951002105417, 0.5302799558645489, 0.5292798681680132, 0.5298260903141374, 0.5422997462321677, 0.5424667092887228, 0.5489045028301015, 0.5220578494613719, 0.1447040902383424, 0.11978273041837695, 0.1212501333863274, 0.15438661460486414, 0.09531465812697593, 0.11017292390723255, 0.15189242828367444, 0.13790175130195204, 0.10177678782465904, 0.16807556678870073, 0.3680841603528836, 0.21567033717905437, 0.22210181706868637, 0.2577907472730011, 0.27103152963271804, 0.18054832145242794, 0.2866947472829692, 0.1685137244537558, 0.26853076064974335, 0.29842793667994705, 0.38450142856039327, 0.24933306438758385, 0.44010834213454064, 0.32387353760965576, 0.4323222564673168, 0.4406908082932771, 0.27148461668721513, 0.2836245021672381, 0.26513595246774213, 0.2563656687003272, 0.2833497388209, 0.2250893767383696, 0.25757795744348255, 0.3083954368831531, 0.34366459553713924, 0.2756499673968531, 0.24675644143664022, 0.20654269533194602, 0.18872492033829757, 0.2320014927888716, 0.22807548585526316, 0.20092635440877016, 0.21985334535626666, 0.23640134476650787, 0.18927295237522468, 0.2194423494796608, 0.21778138606385355, 0.20605525364836386, 0.19295564295246026, 0.19660893480420638, 0.20637672276183594, 0.205172070582462, 0.18764811455235353, 0.21898845456965743, 0.1868616155112992, 0.18713217852166175, 0.16215998743037674, 0.9218635355494192, 0.19952170275857561, 0.8942081961048892, 0.14255057933339632, 0.16922712316327748, 0.16786505064426005, 0.44721590222425534, 0.21147276601345966, 0.5745949891681437, 0.21050952674305512, 0.1690888310295965, 0.48900266884755006, 0.6020684695396487, 0.5347509182780671, 0.7460511326017951, 0.18851034602869465, 0.18728947950220176, 0.19111705375275911, 0.21640808124657696, 0.19575359461934638, 0.18252221830892623, 0.1929863613540016, 0.17987692161312696, 0.1851616842241235, 0.09302231125318483, 0.09624303747265661, 0.09500141648587035, 0.09230650763947945, 0.09379118234138573, 0.08843634778139442, 0.10374073230147862, 0.10106009789433335, 0.0968686277910289]}, "mutation_prompt": null}
{"id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 49, "fitness": 0.3198544416933372, "feedback": "The algorithm AdaptiveDiversityEnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "ea77c70c-f2e9-45cd-b4f7-71cfa40a0862", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "f65b81b7-cb59-4489-b49c-57edbbe2a2c1", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "f5eb4a30-3f07-4e06-892a-120170c98952", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "f0623a2a-394f-4f47-8e8d-c5f56703258a", "solution": "import numpy as np\n\nclass AdaptiveHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Slightly larger swarm for diversity\n        self.alpha_cognitive = 0.3  # Balanced cognitive influence\n        self.alpha_social = 0.3  # Balanced social influence\n        self.inertia_start = 0.8  # Optimized starting inertia for better exploration\n        self.inertia_end = 0.3  # Optimized ending inertia for better exploitation\n        self.mutation_prob = 0.15  # Increased mutation probability for diversification\n        self.crossover_prob = 0.25  # Optimized crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.zeros((self.swarm_size, self.dim))  # Zero initial velocity for stability\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)  # Larger mutation step for exploration\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveHybridSwarmOptimization", "description": "Adaptive Particle Swarm Optimization with Enhanced Dynamic Parameters and Hybrid Mutation-Crossover Strategy.", "configspace": "", "generation": 52, "fitness": 0.28050497993951173, "feedback": "The algorithm AdaptiveHybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8117027738034779, 0.8106606128699986, 0.8094472610488277, 0.8038399285293322, 0.7790430074951283, 0.7928151134292946, 0.8075307600743665, 0.8007581873186793, 0.7921679591414428, 0.20474590763408684, 0.33989104963566485, 0.18174574021435774, 0.18027935089219227, 0.1042172599937019, 0.35694638289135106, 0.07295197906480666, 0.1413173823354591, 0.029291190104771547, 0.11799604206128533, 0.17602975969808488, 0.14168669960805003, 0.14324382500189403, 0.1579021963409486, 0.17374781813759532, 0.1283001256504871, 0.1344608097338552, 0.14380367114272596, 0.11476650015165668, 0.15175812998522364, 0.08936605696813205, 0.10767631179423665, 0.12434384349123462, 0.10522996509413718, 0.15668820419902874, 0.132034967268429, 0.11409342617928064, 0.9570285670652648, 0.9756166949327502, 0.9600497058021156, 0.9373346752724262, 0.9581386517431619, 0.9515424481655995, 0.9682721118905321, 0.9479125411359814, 0.9566566882345137, 0.45747329160320227, 0.586417015745837, 0.539250971168244, 0.5657700215250013, 0.48935641887916614, 0.45542885976164793, 0.5329497733194848, 0.42588059151498536, 0.5094923053761227, 0.8882307242030969, 0.1294692688972514, 0.2264463226126624, 0.2797344439255851, 0.21808603586173225, 0.36179053480197876, 0.21987090358117134, 0.2194853283751339, 0.2422537695093392, 0.17465150561929677, 0.16946262807489998, 0.18426657308238736, 0.20452085215819293, 0.1309714294075035, 0.18478314345708158, 0.13167577776267314, 0.2289656353849162, 0.18020954730684358, 0.16873218497532105, 0.18907211542686964, 0.18326327835093148, 0.20008160095408434, 0.1506761645601744, 0.12850845998523563, 0.13103820829976554, 0.19742827718931155, 0.1343814618433009, 9.999999999998899e-05, 9.999999999998899e-05, 0.02034440241580482, 0.009033087958109753, 9.999999999998899e-05, 9.999999999998899e-05, 0.05347549060154033, 9.999999999998899e-05, 9.999999999998899e-05, 0.1993189816255796, 0.02548535486777237, 0.1423024128282666, 0.0752718756387547, 0.03335048971336707, 0.02614143795384427, 0.0865142618983884, 0.1484308641505453, 0.02988180247980088, 0.23456573474902198, 0.10789486968836359, 0.17808333242963958, 0.10488942888267994, 0.16566732970572484, 0.07343723964574056, 0.2534392975259213, 0.09424446718929502, 0.1060340920521623, 0.2337697291996741, 0.18772161516918395, 0.16342126712988192, 0.03288171201119017, 0.07377968083728048, 0.13406476469232698, 0.08379551888530135, 0.057282394544024506, 0.08135338695295469, 0.5522826917178834, 0.5166807641521063, 0.5124545989510076, 0.5099665728660363, 0.5454751845135877, 0.5318930769165024, 0.6302653017530201, 0.5346760218323396, 0.5812601190126753, 0.0975593625920328, 0.09665885775331884, 0.09686656009042649, 0.10404002659239064, 0.09434734095150776, 0.07038996142379073, 0.09680865090156365, 0.14122180401388762, 0.0916659751444151, 0.1889290620436882, 0.2418066391174427, 0.22646565887853698, 0.43576486786795376, 0.3833133970932272, 0.3757676447054227, 0.35030715503094056, 0.19104296301044188, 0.2418674126961139, 0.4049829392212744, 0.4295885061063023, 0.3255544520993744, 0.32022546630574156, 0.3543351823124242, 0.3913118209263102, 0.24659971644892265, 0.45084283717418727, 0.29759372318346533, 0.3741454153942392, 0.254393171378403, 0.23334101128136542, 0.2825927722018582, 0.22790552207610415, 0.27996000271310517, 0.24044393213973814, 0.22505737875699838, 0.24971664279013517, 0.1989207013967872, 0.21424367126577704, 0.2233534890147545, 0.20371235696918788, 0.20674753944683044, 0.220073004870052, 0.2404348562018045, 0.20624473858347103, 0.20315570025103957, 0.20743983905976737, 0.2255837440453865, 0.20019246839715155, 0.22546906378096332, 0.18770141283150554, 0.20905435926145377, 0.18919566254214215, 0.22421826228318964, 0.24856689129947107, 0.18759320518489675, 0.18769381079803105, 0.15350493708795854, 0.9122575281994765, 0.2008629987579016, 0.9143031679391472, 0.14245811707134237, 0.16918158508144354, 0.8781185798565948, 0.6580643071859416, 0.21220959239571147, 0.5811088861021001, 0.128251564827513, 0.1546767833061391, 0.15367946755259765, 0.47330144825282305, 0.1041684357928565, 0.4501263866282097, 0.17896443702666076, 0.1807710585222092, 0.17706915758465913, 0.1956825824635975, 0.1815284482349072, 0.1848368978656566, 0.19168322617633482, 0.23034808290696218, 0.19761943758768208, 0.09130280296970816, 0.08816252317265205, 0.09606236602253371, 0.08700871737913873, 0.08200349674658847, 0.13673070860656422, 0.11012448430159782, 0.08151456966053616, 0.091841910904772]}, "mutation_prompt": null}
{"id": "a22a90b4-0137-431d-b886-b21291ca6f0c", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "5bbe59e6-1c18-4adf-8a3d-6dfa92afec42", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "d6c66302-8ca3-4321-a92c-639529f47cad", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "89154c0d-79f9-4fd1-9f5c-6531b6ef79f9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDiversitySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_swarm_size = 30  # Reduced initial swarm size\n        self.final_swarm_size = 40  # Increased final swarm size\n        self.alpha_cognitive = 0.3  # Adjusted personal influence\n        self.alpha_social = 0.3  # Balanced social influence\n        self.inertia_start = 0.85  # Adjusted starting inertia\n        self.inertia_end = 0.25  # Adjusted ending inertia\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Slightly decreased crossover probability\n\n    def __call__(self, func):\n        swarm_size = self.initial_swarm_size\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (swarm_size, self.dim))  # Adjusted velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = swarm_size\n\n        while evaluations < self.budget:\n            swarm_size = self.initial_swarm_size + int((self.final_swarm_size - self.initial_swarm_size) * evaluations / self.budget)\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.laplace(0, 0.02, self.dim)  # Changed mutation strategy\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveDiversitySwarmOptimization", "description": "Enhanced Adaptive Swarm Optimization with Dynamic Swarm Size and Improved Mutation Strategy for Better Convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {}, "mutation_prompt": null}
{"id": "8f329b9a-6fd1-47ce-8d40-049cb5c213eb", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Slightly reduced swarm size\n        self.alpha_cognitive = 0.4  # Increased personal influence\n        self.alpha_social = 0.3  # Increased social influence\n        self.inertia_start = 0.8  # Lower starting inertia\n        self.inertia_end = 0.3  # Higher ending inertia\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.3  # Slightly decreased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)  # Increased mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Dynamic Mutation and Adaptive Parameter Scaling for Swarm Optimization.", "configspace": "", "generation": 57, "fitness": 0.29368970708648706, "feedback": "The algorithm AdaptiveDiversityEnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8467865325113311, 0.8279002819235637, 0.8318378128415924, 0.8647794396029318, 0.8225535099308865, 0.8249858944836158, 0.8257385273160793, 0.8259252732817414, 0.8212691434658599, 0.5366259876275982, 0.28532609936652675, 0.10755477117350765, 0.3618664485564679, 0.1853429375562018, 0.18251879375089441, 0.4479104451307754, 0.3363733249449893, 0.43509549758716626, 0.14250966526462183, 0.11761836396477787, 0.4797395292351103, 0.1769633696888364, 0.18412586514776585, 0.15084681584793658, 0.09143610707331318, 0.157221461052799, 0.1889135896590125, 0.15397450729358275, 0.1163056812047435, 0.0876621853156836, 0.10989518096996564, 0.09501199718525954, 0.13990504481376342, 0.11422576935878848, 0.1540103137703478, 0.12937465257304537, 0.9708120124421092, 0.9729391426903611, 0.9717563211858803, 0.9367109610457309, 0.9710005259522998, 0.9515285730360031, 0.9642481465120417, 0.9686456939048443, 0.9504397910867167, 0.5905677296769296, 0.5770566266250475, 0.552660328930352, 0.5238882799380356, 0.5477216436801935, 0.4716125363298501, 0.5079516439488774, 0.5211616876208105, 0.5358714046239648, 0.3598928576100706, 0.14048314024082065, 0.22733000572017048, 0.2829937340540206, 0.19337386599744621, 0.21199036916249558, 0.1524612285691681, 0.13866230449161687, 0.22323738017334604, 0.17188907396285036, 0.13260631426967173, 0.22278049361718533, 0.1304912781149049, 0.18930208139154447, 0.12498856216587806, 0.17817435415039418, 0.201179323542936, 0.16806297504110213, 0.20366055981018005, 0.14029991702978062, 0.1762964283990952, 0.19703809923620297, 0.2094974573496614, 0.1653346268811683, 0.20083955449441415, 0.11838042945698213, 0.18070667310111133, 0.01448188192344746, 0.008864418050652967, 0.0954019696646825, 0.0016123401630629974, 9.999999999998899e-05, 0.00011052081373963407, 0.007679829795527837, 9.999999999998899e-05, 9.999999999998899e-05, 0.08513039147794221, 0.06679855750680874, 0.10634525995841126, 0.08641669840409427, 0.030005743306918187, 0.034517903434959085, 0.18211840838150595, 0.08943900874356037, 0.14887813818782147, 0.20023980309862266, 0.08435177048388998, 0.11643501701350356, 0.110637415923456, 0.08565708564101515, 0.1379506647610278, 0.09198818311300327, 0.07360736087792097, 0.07007989682695137, 0.24862809762330196, 0.07378972970471354, 0.15559793607692896, 0.04303644285291175, 0.05533982167293938, 0.08521281898593536, 0.3200478525395415, 0.15664402502767372, 0.08301586049793552, 0.5634456944765662, 0.5396901320227195, 0.57379868572498, 0.5201778727306241, 0.5288699652200359, 0.571821418323228, 0.5395016496856988, 0.5304075470519614, 0.62264219768919, 0.09965532927645016, 0.14284329841274013, 0.06476709462735741, 0.12614317109039308, 0.13102107443938404, 0.14050385475159177, 0.11499219243171555, 0.10947287920235982, 0.10061284296704176, 0.2821316318622946, 0.36800912467768077, 0.31809456548625425, 0.26799806558036243, 0.28247439306213495, 0.2839134995196496, 0.3250427297978721, 0.44377200286422425, 0.2679507854906156, 0.37798693344901846, 0.4671167956693274, 0.351766846723797, 0.4048154828921009, 0.4600727312026186, 0.4825524204095555, 0.21794359766694216, 0.3459452764402299, 0.2956928826579942, 0.2843338754719329, 0.291157569242918, 0.25162825504313346, 0.17757580404980777, 0.1999887386975825, 0.23164219110308282, 0.17742881699714308, 0.37548050869439564, 0.2705377609094525, 0.2960657598698583, 0.20188607366481492, 0.2039293344742481, 0.20232769088304026, 0.2210763242616387, 0.22501523946309976, 0.2431994752970268, 0.26909062962331753, 0.262810752418131, 0.21116445042213283, 0.20584057332567274, 0.19238938304494568, 0.21060495479765307, 0.20782888379498476, 0.2085696993652868, 0.2247012694595404, 0.21870329126850985, 0.22278591349335353, 0.908372842438526, 0.1756518998010128, 0.15391062207736617, 0.9248010890660996, 0.20107303280752398, 0.9268899388144574, 0.16653228721048619, 0.16986551203357192, 0.16734714242668358, 0.7989570447661843, 0.7313373509708458, 0.5653349338777413, 0.20911183773026998, 0.15594512056661514, 0.8169976470517889, 0.10487248152645534, 0.10456522522704437, 0.09454634340227586, 0.18618399312720602, 0.19835838035718634, 0.18006466165924662, 0.176812846604261, 0.18305092486524088, 0.18252672705152617, 0.19516871021537208, 0.21253979047738025, 0.2029669223199999, 0.13037802382440755, 0.0966771376192781, 0.09753512641608109, 0.1021947364095851, 0.12129239082001331, 0.10334514755280377, 0.09066112520296465, 0.1046620431417763, 0.10601799623875763]}, "mutation_prompt": null}
{"id": "50cd9ec9-f466-4071-9906-e6455b2a76da", "solution": "import numpy as np\n\nclass EnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Reduced swarm size for faster convergence\n        self.alpha_cognitive = 0.4  # Increased personal influence\n        self.alpha_social = 0.3  # Increased social influence\n        self.inertia_start = 0.8  # Balanced starting inertia for exploration\n        self.inertia_end = 0.3  # Increased ending inertia for exploitation\n        self.mutation_prob = 0.15  # Higher mutation probability\n        self.crossover_prob = 0.4  # Higher crossover probability for diversity\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (self.swarm_size, self.dim))  # Adjusted velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)  # Increased mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedSwarmOptimizer", "description": "Enhanced Particle Swarm Optimization with refined adaptive parameters for improved convergence.", "configspace": "", "generation": 58, "fitness": 0.31226090806839857, "feedback": "The algorithm EnhancedSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8469929283688769, 0.8375273079533273, 0.8356643844882312, 0.8500845786709267, 0.8485295492979352, 0.8332310035321535, 0.8464773564084744, 0.8636532873446282, 0.8348405084809661, 0.5922838653082534, 0.5264188233979452, 0.34223644702524025, 0.3883097630161305, 0.39219797846594817, 0.3602926225494024, 0.47157775368666066, 0.516354570577811, 0.4278239368938619, 0.15902620547681035, 0.13719694753891987, 0.15961499256430123, 0.13229095447874983, 0.5365247666467361, 0.11596332172407708, 0.0825384880302068, 0.5496999353219058, 0.14443956843117978, 0.13740912982375053, 0.10733960078978799, 0.15431692475959569, 0.17256431096588765, 0.12313572403309248, 0.09486148066721323, 0.10986905250182155, 0.10086600552475533, 0.0924440795504533, 0.9703197155973904, 0.9809971954219259, 0.9727137136225725, 0.9253688123027802, 0.9654359959242089, 0.938034276560162, 0.9507753207906282, 0.9647813624577063, 0.9584130321878255, 0.5880824013264159, 0.5233229981790801, 0.5282474859905817, 0.598967207708371, 0.571640159640017, 0.5693985320208704, 0.5858610281547832, 0.5499411317821863, 0.5458634104963782, 0.22638781869848135, 0.15673337111985963, 0.22743386069319027, 0.2729499289772812, 0.28125210853727467, 0.2204480283740542, 0.12871272081527818, 0.1777837968732392, 0.23484013518031954, 0.22650005056143852, 0.224700763291657, 0.1950220719107929, 0.13379309841795095, 0.20676523404214708, 0.1412283344508627, 0.17584464071173478, 0.19625272785611347, 0.17541042443420118, 0.19703595131634777, 0.13163919552090608, 0.2875214474631286, 0.20550391929332024, 0.20423098539056128, 0.18095246819315725, 0.2205859973693871, 0.1191663821766511, 0.11803281446494251, 0.002833306221791787, 9.999999999998899e-05, 0.07106601353469488, 0.03157162494466281, 0.012342439180376141, 0.03143562080599116, 0.08704228638220934, 9.999999999998899e-05, 9.999999999998899e-05, 0.140093354815499, 0.05122573565743371, 0.2604121539304113, 0.09975154910901951, 0.028497407288462617, 0.029313050170875377, 0.1476031872265927, 0.07048712283941883, 0.0905770079754673, 0.10092201366076259, 0.14129668035441478, 0.1140169053301342, 0.0782832206534555, 0.2810556726014255, 0.0773466795427068, 0.09997542972582907, 0.0950606823696637, 0.0692511707523834, 0.125338428034804, 0.1402554091675513, 0.10167983259455193, 0.05859415286890213, 0.1672351039670853, 0.0523579322113763, 0.1344452927237758, 0.14225820184298898, 0.08672111672672056, 0.5446564017991524, 0.5124064963939725, 0.6181579758538129, 0.5530346166257161, 0.5048709727789644, 0.5455452239853646, 0.6004493556808317, 0.5249150318143461, 0.5592650442125044, 0.13730481544794637, 0.12280147336587943, 0.14282407904091599, 0.10425144762232519, 0.12652016914999165, 0.15007304690074308, 0.11414814801535345, 0.10921221310604379, 0.09779377782242904, 0.35033366828935675, 0.23309819580413305, 0.23784875499227698, 0.22437326435786265, 0.27489555887602257, 0.34156414787066514, 0.2840371871020706, 0.4507614235639942, 0.20794889235612468, 0.2638742115295092, 0.42640279778610446, 0.36307171541285, 0.5055076927557072, 0.4638287878668481, 0.45951048400786254, 0.4755072513105765, 0.4754225567071668, 0.2684070818532228, 0.2583170905836525, 0.24858247689335156, 0.2555468798134425, 0.30125763956851437, 0.23474459400434367, 0.3093748607807092, 0.2066187471959644, 0.2721615734075835, 0.23001135128705474, 0.22087707869028628, 0.23357150615196676, 0.19940822767970467, 0.20902394588732098, 0.24102956280626553, 0.23633402118513636, 0.22787515485835252, 0.24631763446356703, 0.24732917492001893, 0.20759839342136444, 0.2077754897787356, 0.18999944480952324, 0.20664350400206122, 0.22533910009073654, 0.2285343125032263, 0.21156694976956103, 0.20922271837360706, 0.6871669166711363, 0.9139733510598892, 0.17544240293538893, 0.14709500777297058, 0.9295183769599618, 0.20040834625214154, 0.9291198416016522, 0.9035030431333937, 0.16966108487382658, 0.9119293806576424, 0.7960610188271304, 0.15634289085482922, 0.7024616523792171, 0.21152813061950038, 0.6057653306654258, 0.21194240244953533, 0.5933068571441, 0.10483806527512607, 0.167068792929692, 0.17532322368748898, 0.214199106840668, 0.1936009996293211, 0.17496607065367864, 0.18710226617730452, 0.2056245412833153, 0.19922748018548575, 0.18690172641371772, 0.18400124270594453, 0.09904387703209361, 0.10659030758292742, 0.09491277667238773, 0.09675661130930224, 0.08489912782639186, 0.09581896864690154, 0.10953012883020985, 0.0833437762153848, 0.09955962722870393]}, "mutation_prompt": null}
{"id": "ba561e7d-f8cd-4f52-af11-f155b847e9af", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "393fd0c0-8956-4139-9904-af2c6230c0c4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Slightly reduced swarm size\n        self.alpha_cognitive = 0.4  # Increased personal influence\n        self.alpha_social = 0.3  # Further increased social influence\n        self.inertia_start = 0.8  # Adjusted starting inertia\n        self.inertia_end = 0.3  # Modified ending inertia\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.4  # Higher crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.6, 0.6, (self.swarm_size, self.dim))  # Modified velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * (1 - evaluations / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                          + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                          + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)  # Increased mutation step standard deviation\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.6  # Adjusted crossover threshold\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedAdaptiveSwarmOptimization", "description": "Enhanced Adaptive Swarm Optimization with Dynamic Inertia and Randomized Mutation for Improved Convergence.", "configspace": "", "generation": 60, "fitness": 0.31633562757697864, "feedback": "The algorithm EnhancedAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8508375804628574, 0.8578335846216304, 0.8513006487441204, 0.8672324276094958, 0.8536226760514802, 0.8662171173382782, 0.8677877584675393, 0.8444243318116886, 0.8391879249294041, 0.4389960345218328, 0.424736608784397, 0.4678804603412732, 0.48362148578061803, 0.4569296342895742, 0.356299816660841, 0.5008980297186292, 0.44398549431429624, 0.4682497796566404, 0.17859954793014354, 0.14059806908140582, 0.16733038313106063, 0.1838181551286222, 0.13542755807129958, 0.1826140651623387, 0.15524571154777334, 0.1508601248313094, 0.16036341592448133, 0.1149177145620417, 0.14189195081102568, 0.15283091837174556, 0.15904919680633922, 0.1193357898448636, 0.1125894689027247, 0.09627065339014529, 0.13093496619728462, 0.15031327526722704, 0.9691608242603965, 0.9755793493723732, 0.9780644504273033, 0.9576340313778096, 0.9746159366677855, 0.915749094544374, 0.9568678267215317, 0.9692703951182016, 0.9633968911973998, 0.6180024872903529, 0.6064332149862295, 0.6068759015623275, 0.6381310414517101, 0.5948414106545041, 0.5858437568539832, 0.5301659457681649, 0.5562872302288779, 0.5884601952058719, 0.22828877818820215, 0.2245895113958305, 0.8797427203142484, 0.22138174779981423, 0.906949462413384, 0.2795713684178127, 0.17638166254721543, 0.1675130396707678, 0.8142579204855231, 0.2636137809811404, 0.17886570514786326, 0.2365469740513899, 0.175970284082261, 0.17293748217378746, 0.19369999987214082, 0.17097960442274762, 0.18441192226578762, 0.18400066125731596, 0.17763575453351477, 0.1431083443789597, 0.1836687224654603, 0.24699549681981592, 0.1887362643589504, 0.19506759320610823, 0.20622103613840748, 0.11513554778497326, 0.19906577721530772, 9.999999999998899e-05, 0.012712397950296883, 0.011614062105334222, 0.053087512893278066, 0.049420523593687316, 9.999999999998899e-05, 0.06858230107223484, 9.999999999998899e-05, 0.12985053322192652, 0.08545117690125792, 0.04927433754855415, 0.0752721278905496, 0.07608199199037258, 0.023621572363416443, 0.02322176021644895, 0.15652564600516994, 0.04805185970546921, 0.11009786994093773, 0.24669452227307542, 0.0397508641929577, 0.20594081872334224, 0.07740194789485122, 0.18916292308009264, 0.07705467671136235, 0.15730671238515548, 0.20222142400259913, 0.0756859434896644, 0.10541193021201511, 0.05979756693780369, 0.07402000077020254, 0.03134700219024178, 0.052152509933939606, 0.18041298940621386, 0.08282587729572988, 0.1683873559780359, 0.0887403238272817, 0.5204436890045385, 0.5392014066944583, 0.5592121031488342, 0.5025113514904945, 0.5803420872548948, 0.5688719944987631, 0.5742659735081235, 0.554956417201895, 0.5828745424091677, 0.12304680397257872, 0.12820626505341737, 0.13978483700175293, 0.12126258939456724, 0.1325088128534886, 0.15709020530840767, 0.13541294956373096, 0.15398648493988454, 0.123970766485193, 0.23213763444770175, 0.3366988655335704, 0.3309138195997462, 0.35423289928359136, 0.441178323403729, 0.21872478957639108, 0.32641708244710976, 0.2761160454590408, 0.2796464468635471, 0.45987705878511564, 0.4175282366920924, 0.34113914566681347, 0.5125893102201149, 0.28411949185212027, 0.42162166243662447, 0.47930802024375585, 0.45417697350114117, 0.2739839459936234, 0.2219190816982748, 0.2635046143233347, 0.2088439097340964, 0.2731932684120816, 0.18292985652337812, 0.31477088459824987, 0.21763661729401307, 0.31257368807481933, 0.2623834926148729, 0.23840832113371635, 0.18939046354462763, 0.23400672572905845, 0.24292674676279236, 0.2026280828313518, 0.2389764353607967, 0.2601668615174325, 0.22774389180929844, 0.2677597060859448, 0.2496835422818099, 0.19167292894371102, 0.22516821189973502, 0.2165456195388068, 0.7216146867177207, 0.22394528689735183, 0.24668497527927913, 0.209503058269638, 0.1866801385721294, 0.8288304612472582, 0.18619594438282216, 0.15287934111775736, 0.15896006266917861, 0.20120329136098103, 0.9182696639522037, 0.8845704290308194, 0.16992088384937765, 0.916333579231621, 0.616777715281732, 0.15699550338211976, 0.47420402721657684, 0.20909454946731265, 0.15474226760981402, 0.210385298109526, 0.816887987335214, 0.1049036046297922, 0.16668810513481203, 0.2090613840613016, 0.20962499342683205, 0.19687268974435523, 0.21601623641469492, 0.19839361428971036, 0.21833147386248475, 0.180402301722837, 0.20383027223529526, 0.23713495677879015, 0.10785026165038492, 0.10471058609407724, 0.10341557679571434, 0.0977649773890269, 0.0928857038315346, 0.09935552836926032, 0.0901731646124696, 0.10346817038863121, 0.10051025386487422]}, "mutation_prompt": null}
{"id": "41216fd2-fc1c-4b85-804c-fa1f01ff4335", "solution": "import numpy as np\n\nclass EnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for more exploration\n        self.alpha_cognitive = 0.4  # Increased personal influence\n        self.alpha_social = 0.3  # Increased social influence\n        self.inertia_max = 0.8  # Adjusted starting inertia for better balance\n        self.inertia_min = 0.3  # Adjusted ending inertia for better balance\n        self.mutation_prob = 0.12  # Increased mutation probability\n        self.crossover_prob = 0.4  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.6, 0.6, (self.swarm_size, self.dim))  # Adjusted velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.07, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedSwarmOptimization", "description": "Enhanced Swarm-Based Optimization with Dynamic Inertia and Refined Evolutionary Operators.", "configspace": "", "generation": 61, "fitness": 0.3070498869920235, "feedback": "The algorithm EnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8408824340471266, 0.8295149162439858, 0.8558696734813187, 0.8492958469443712, 0.8447966420494037, 0.8534108678788868, 0.8317902892436485, 0.8388020472329591, 0.8473583781127243, 0.5502726882112354, 0.552397848879227, 0.5725946934699799, 0.5181296470545841, 0.43204538516080837, 0.5159151305137502, 0.4289975806787172, 0.4945518574579769, 0.4369337157131178, 0.13761918318732658, 0.1445306692020899, 0.15378051218140842, 0.15549780022401138, 0.17801405012619176, 0.17629676072085254, 0.11173914890909842, 0.17948004908679427, 0.18458313235402668, 0.10818656945186012, 0.13419882241089331, 0.1426324039705531, 0.13010234491257977, 0.11420951795065215, 0.11777000052566178, 0.1732356777037175, 0.1406508827431333, 0.12105978476317181, 0.9656041349578447, 0.9688667691343106, 0.9655259488886384, 0.9273175493279087, 0.9150848195976699, 0.9718533391399032, 0.9602699565187036, 0.971230010047324, 0.9615188310315824, 0.5671324203854526, 0.599331877030683, 0.5682986182063765, 0.5768726696766557, 0.5935081198666929, 0.5668761456807576, 0.5811018841265942, 0.36489172851378426, 0.5687308599638812, 0.8601865181477397, 0.828941400138951, 0.17065378665931608, 0.21231632984274262, 0.27536763491768945, 0.20641006798157824, 0.16181090469558967, 0.23827532051516587, 0.8875706733402913, 0.12041202121586936, 0.1642196690459572, 0.13942156436080277, 0.17672837366277594, 0.13093885071137046, 0.27577489530669785, 0.19191993000840135, 0.21850642723756108, 0.18218141799210985, 0.16638178931250802, 0.1490235953537533, 0.20259206217925674, 0.18718416031938934, 0.19379546818692628, 0.17821791247294116, 0.20168120542405488, 0.12604250433153297, 0.23229355416021735, 0.031611350324690424, 0.06226072781318526, 0.09150997282788398, 0.04407218286284387, 0.05903729582043982, 0.0170913725221995, 9.999999999998899e-05, 9.999999999998899e-05, 0.003909564376501695, 0.09460755379445984, 0.053999364865300215, 0.10581599563104449, 0.07467158433825427, 0.01856064374699795, 0.056014583962175624, 0.08171604194995308, 0.12267645336730215, 0.09372777925499054, 0.06598624952128374, 0.11185980098291659, 0.19000460471133718, 0.07365220572600462, 0.19257113819108562, 0.12883648903136058, 0.19916233262005367, 0.14524738909994017, 0.26331756139075035, 0.23829306285807572, 0.12753633135024578, 0.17090700020911753, 0.14534327968250615, 0.038352569774773304, 0.07897754809532032, 0.08236512008978791, 0.25733575954927745, 0.082205010114341, 0.5737342763495887, 0.5147310658502371, 0.576821237193775, 0.5594024356337863, 0.5489182269465515, 0.5142808942539175, 0.5653538673330654, 0.5862134742910763, 0.5777496242333464, 0.11258675660619188, 0.10539447500637689, 0.13001080750890304, 0.13556546760108923, 0.1363154931168017, 0.1573154341329609, 0.11308476011323909, 0.0938645710120225, 0.08812774750767782, 0.17510458790148953, 0.2702806282559196, 0.22483212172294842, 0.24990573656501536, 0.2574851331565471, 0.2728067148941712, 0.256912761921978, 0.20642159792644632, 0.2864455644664853, 0.36956337046381094, 0.4768442952890849, 0.5038414932894871, 0.42011893783820997, 0.45971751769531644, 0.48624819839992806, 0.29264417402762444, 0.4881210772132909, 0.3178306077365327, 0.21903996846174, 0.3336061175254721, 0.3186913396961246, 0.30126068069735734, 0.2713613456386047, 0.30458729150927033, 0.24193153552345326, 0.2981743447360945, 0.2044752720376628, 0.22927714286392076, 0.23690166871884322, 0.22944873306432478, 0.23535551076016248, 0.19244658255260472, 0.2380643976992749, 0.23651329237207197, 0.21499002290292368, 0.23138025357735492, 0.21197571805205362, 0.253689766299521, 0.24935063718988482, 0.615086817421157, 0.2013628166336432, 0.1995183213256646, 0.24382726501460694, 0.24871417368294746, 0.21883237338615125, 0.1872391239113138, 0.17658005651009534, 0.14594924095790196, 0.9139687195897528, 0.2003237788731136, 0.1990534330156546, 0.14215057421913624, 0.16502017281936054, 0.1684552594340636, 0.49175762380464083, 0.21229959546510468, 0.6112299871268432, 0.6629614510211428, 0.20875904022919745, 0.15456278152645386, 0.10472998179614479, 0.3969555591545153, 0.5385474442847523, 0.2006635096059427, 0.19449075517286563, 0.17547456659371763, 0.18907706567932547, 0.187724029440001, 0.18141775836762708, 0.20772075057753936, 0.18060603967938094, 0.18790711588585263, 0.09676790204182217, 0.09456972063217706, 0.10725386256560432, 0.08832354238164575, 0.09030867247731289, 0.12221204642819716, 0.08602733005187657, 0.09477220501630035, 0.0990097782727265]}, "mutation_prompt": null}
{"id": "8836c0a2-2e41-45bb-b017-f06f5754bd6a", "solution": "import numpy as np\n\nclass AdaptiveDiversityEnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Adjusted swarm size for improved balance\n        self.alpha_cognitive = 0.35  # Slightly increased personal influence\n        self.alpha_social = 0.25  # Increased social influence\n        self.inertia_start = 0.9  # Higher starting inertia for exploration\n        self.inertia_end = 0.2  # Lower ending inertia for exploitation\n        self.mutation_prob = 0.1  # Adjusted mutation probability for balance\n        self.crossover_prob = 0.35  # Increased crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.05, self.dim)  # Adjusted mutation step\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "AdaptiveDiversityEnhancedSwarmOptimization", "description": "Adaptive Parameter Control and Stochastic Crossover for Dynamic Swarm Optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8481916857860141, 0.8456081493679353, 0.8372249079502521, 0.8269952788742138, 0.8482364698359919, 0.837317490157515, 0.8364328019064702, 0.8379578470068713, 0.8307835701091997, 0.6054923961346308, 0.5349879325353432, 0.5435669742577443, 0.6100286325068804, 0.5660888376133789, 0.45678596072980493, 0.563141929044727, 0.5783224641494511, 0.5202831770819742, 0.14660145986216067, 0.1665505402501889, 0.5773299255601702, 0.16472793352223725, 0.40205959543501224, 0.15314284794918398, 0.09573350899727062, 0.5014554688087756, 0.15286272162549253, 0.13587503576639137, 0.1179129029715732, 0.13822298119026855, 0.13501785871520167, 0.10863833098524267, 0.1401933448166761, 0.11596152248908276, 0.14498616007554788, 0.20153213917651158, 0.968127434304099, 0.9765699323033478, 0.9721235899598526, 0.9396298275049482, 0.9711382546850033, 0.965557912208782, 0.9722660526915303, 0.9639873402292576, 0.9734980526121806, 0.6173898246927473, 0.5458626742717037, 0.5716030012434226, 0.5916209715818064, 0.49832202504143264, 0.44831138124813197, 0.5514135715958977, 0.5606442424080536, 0.5573646363558153, 0.8643851906264086, 0.2024503563350747, 0.22003919542150296, 0.5377335112187904, 0.3732458080126171, 0.20738165696387534, 0.165520740389129, 0.23146081436983434, 0.8810058096427328, 0.1793046412402518, 0.12525352143378554, 0.16002663087898694, 0.2795014331359319, 0.1333775249201744, 0.1420302076190284, 0.18844351032129425, 0.1320840589057206, 0.17184170320164416, 0.18375712174722536, 0.2543721174703968, 0.17046449742099978, 0.2001044131002636, 0.1304914878683494, 0.18606387564047377, 0.22557649252557121, 0.20656237201416083, 0.20068507662800217, 9.999999999998899e-05, 9.999999999998899e-05, 0.055770842037786816, 0.054623985355479965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008623392765519933, 0.05494914858662048, 0.05596396753978683, 0.15139221475160447, 0.05744211525205278, 0.04562296784787745, 0.05553933516860177, 0.11333283271221295, 0.04740236519559071, 0.07062952788273091, 0.23330667527876836, 0.046923634715520524, 0.15299385346902528, 0.13701610880142256, 0.0738770360176566, 0.08753586509938871, 0.16066496162970523, 0.09438471414744598, 0.18726639523794697, 0.15637076518351245, 0.19111337112338156, 0.1575391839148237, 0.11619404350151741, 0.025341087803152362, 0.16390584419220633, 0.07650816041278707, 0.10173621095773666, 0.1018592203383627, 0.5466434067705226, 0.5324231911273059, 0.5415739151495249, 0.5237412876344645, 0.5127254165096122, 0.5570498115013105, 0.5428005063521808, 0.5515437182706941, 0.5625945623225128, 0.12321131831152032, 0.09907171619720534, 0.07676310334470604, 0.12949054664052506, 0.10737529906322307, 0.1334971229395363, 0.13750336125370866, 0.15314631924571964, 0.09717042021152278, 0.17154995271160534, 0.26292572217899957, 0.22101937254926163, 0.37260350933864694, 0.24313924682755428, 0.20271038972080802, 0.21730403192121606, 0.16961862339411526, 0.22599490971004899, 0.29154942305419074, 0.21352289510714462, 0.4050081040758372, 0.3570016590783365, 0.23980802245086774, 0.40251548848964325, 0.28293601962945547, 0.29264234775453046, 0.48985712561786154, 0.24178644557114526, 0.26624380790375746, 0.2015880126246089, 0.2998516572583376, 0.3723534357908166, 0.252299139100541, 0.3041224391391477, 0.2795655601649756, 0.3500519103199695, 0.23037011109371242, 0.20610254897803948, 0.2612532290350277, 0.20715393094191215, 0.18978957563116006, 0.23318764850854323, 0.24897411064082564, 0.21245783578572086, 0.22282932520132026, 0.6390180177017037, 0.21328791291133897, 0.19859421652676956, 0.2198311509399603, 0.21317191202099517, 0.24648015666851908, 0.2077485901782239, 0.6666642232449991, 0.22145513806233041, 0.16735486652990406, 0.17508169449961064, 0.17437789687420535, 0.8982542516676425, 0.19923648417091222, 0.8866847179113237, 0.14208360003801157, 0.16926413803220408, 0.8591331218024427, 0.8181779962590229, 0.21138103919926288, 0.6701117225969502, 0.20854536870508977, 0.748480503385978, 0.8365532512029235, 0.6572810673664168, 0.10442540719446847, 0.46420176130723967, 0.21243315617196623, 0.1847628163163808, 0.17571814205972291, 0.1781344381311315, 0.18761875304928677, 0.2113866355533478, 0.19068797800669834, 0.17612921368873447, 0.1963074204816776, 0.09671917389883145, 0.10571669487599189, 0.08761129694515535, 0.09385216389012097, 0.08806164156873764, 0.09255445700020504, 0.08649134457158492, 0.0885537429458535, 0.09541348879458567]}, "mutation_prompt": null}
{"id": "9cffde72-f077-406e-9210-de549c9a95ee", "solution": "import numpy as np\n\nclass EnhancedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Reduced swarm size for faster convergence\n        self.alpha_cognitive = 0.4  # Increased cognitive factor\n        self.alpha_social = 0.3  # Slightly increased social factor\n        self.inertia_start = 0.85  # Adjusted starting inertia\n        self.inertia_end = 0.15  # Lower ending inertia for greater convergence\n        self.mutation_prob = 0.15  # Increased mutation probability\n        self.crossover_prob = 0.4  # Higher crossover probability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.6, 0.6, (self.swarm_size, self.dim))  # Expanded velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.1, self.dim)  # Larger mutation step for greater diversity\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.6  # Increased crossover selection probability\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedSwarmOptimization", "description": "Enhanced Diversity-Controlled Swarm Optimization using Adaptive Parameters and Dynamic Crossover.", "configspace": "", "generation": 63, "fitness": 0.32121927378213827, "feedback": "The algorithm EnhancedSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "2ddfbbe4-3f79-4ee4-8e65-9b94bfa16361", "metadata": {"aucs": [0.8491360703285904, 0.8422835558749873, 0.8514565931216964, 0.8460295574809815, 0.8443914601274868, 0.8437838073472417, 0.8525137617620957, 0.8559200663673929, 0.8253953310334357, 0.5631208744349827, 0.5646831977703703, 0.5618048202305933, 0.46623299577680055, 0.5014802699703755, 0.5579422564747555, 0.5379193501687637, 0.4517278693663852, 0.4833729660315125, 0.17939651712672766, 0.12124786627247308, 0.18146699137080302, 0.17784484031143144, 0.5966036682265202, 0.6294211365043154, 0.15032451664544566, 0.15038718530232276, 0.16871289489975594, 0.15702906189697552, 0.12786499338965718, 0.12222643517481624, 0.11129970536470268, 0.08953132742259928, 0.1495869715292032, 0.13662277648365873, 0.17446365187672197, 0.09561488306821353, 0.9719393692393874, 0.9811698561913104, 0.9782756681079824, 0.962372915197225, 0.9772645410648936, 0.9348556972079014, 0.96241197141551, 0.970410142158685, 0.9669628385202642, 0.5850752547810647, 0.5644667334478266, 0.5481789423051078, 0.5770192058659991, 0.6175761539985298, 0.5248698123238161, 0.5954367068367559, 0.5440129498373621, 0.5511160929698107, 0.8971912934152837, 0.2243995103126113, 0.8813299261122016, 0.28099038234869145, 0.8927999791548523, 0.21971494464528718, 0.1770296730485228, 0.37821039666781975, 0.2343025482596267, 0.2697605444494868, 0.16187267613582756, 0.15854717701136745, 0.16845198870153721, 0.19837196883633035, 0.16186549134220618, 0.17330420957754, 0.21442821406568102, 0.19320441641978492, 0.19748583290200572, 0.20286013276986814, 0.1848662267712613, 0.18554058533160067, 0.17542703804129434, 0.16367038290999048, 0.22435664944526434, 0.11104614537080815, 0.20536301719218852, 9.999999999998899e-05, 9.999999999998899e-05, 0.03109317944449208, 0.04611610004615829, 9.999999999998899e-05, 9.999999999998899e-05, 0.06044228376890026, 9.999999999998899e-05, 0.05535487748868928, 0.10671459706673159, 0.06751944375781371, 0.09835884196037092, 0.052632304228118154, 0.014190341287895314, 0.038801130935711026, 0.12519260515900865, 0.047926598631889306, 0.12015085377483592, 0.06852471063996834, 0.055372305646509856, 0.0793072514754094, 0.07490947141502824, 0.22487758005270975, 0.07461794614254702, 0.09374392694332545, 0.09321347135283908, 0.07325192617083431, 0.26133803915119846, 0.11483043402000126, 0.08572239156992856, 0.0997426370584844, 0.04959689841432069, 0.2640225193479707, 0.08197131748707343, 0.18329827355734152, 0.08275650482223462, 0.5546830516217915, 0.5502402784908965, 0.5189007922672335, 0.5888738332924655, 0.5383151752224384, 0.5109362638948654, 0.5164333717338794, 0.5530328490464865, 0.5568836712285858, 0.13423647809352512, 0.13150008096008803, 0.11570960104295447, 0.15321464596875556, 0.14676966726157914, 0.15127073890169507, 0.15100301814512007, 0.15648772675025835, 0.08938943408012456, 0.17569359771172743, 0.24370462341473575, 0.25139093659927025, 0.4252460228999013, 0.24371235850291262, 0.31970771288012545, 0.39656574908915554, 0.24380717619501469, 0.24200280187010526, 0.43636334661177034, 0.36347730525522925, 0.5374172151395324, 0.4409000731126539, 0.2648700479989389, 0.41304534700580775, 0.4530893478266903, 0.4197802920987348, 0.2857406590604046, 0.22952635305134605, 0.28739634386015145, 0.2385177346777103, 0.24331350018007347, 0.22939251515753734, 0.32513884789406, 0.30506131700406436, 0.31358761809819247, 0.2431117012752444, 0.23126600789194407, 0.23938506147888505, 0.2327874791623723, 0.20514477119437302, 0.20387325227399244, 0.22749873048014158, 0.23126584861402277, 0.21218489863731083, 0.2711949686360805, 0.2498497196924635, 0.20870540480664013, 0.20831833755017193, 0.2061328177713614, 0.6888964898066636, 0.25372832347106256, 0.206922315653712, 0.20287247232375438, 0.19918338561179827, 0.18647809483626598, 0.1567647755153736, 0.15330230032121217, 0.15901010009259042, 0.2007419560068402, 0.9139879666013129, 0.9113894119646576, 0.16992410653564916, 0.9158462892549089, 0.8607072194084581, 0.15651610536139615, 0.37901311749962374, 0.6766969871880895, 0.15446046583347883, 0.21078542745495055, 0.6342695420209066, 0.10483360009547726, 0.45300424931966077, 0.2031177059347652, 0.20349247609476684, 0.18770239301237723, 0.19173036179435932, 0.189112458868558, 0.2010749682283588, 0.23366707628532846, 0.20830221681491756, 0.2062415662844227, 0.11316140813955566, 0.1044953896695241, 0.10075101548038623, 0.08129763384465782, 0.09148044191733828, 0.09704168437220195, 0.10458024881454475, 0.09252421229380836, 0.11246946418906245]}, "mutation_prompt": null}
{"id": "904ccc19-5094-41b3-8c6b-6c5d2192fe02", "solution": "import numpy as np\n\nclass EnhancedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 28  # Slightly adjusted swarm size for diversity\n        self.alpha_cognitive = 0.5  # Increased cognitive factor for exploration\n        self.alpha_social = 0.25  # Reduced social factor to focus on personal best\n        self.inertia_start = 0.9  # Higher starting inertia for initial exploration\n        self.inertia_end = 0.2  # Increased ending inertia for local exploitation\n        self.mutation_prob = 0.2  # Higher mutation probability for diversity\n        self.crossover_prob = 0.35  # Reduced crossover probability for stability\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))  # Reduced velocity range\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, 0.15, self.dim)  # Increased mutation magnitude\n                    particle_positions[i] += mutation_step\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5  # Adjusted crossover selection probability\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "EnhancedParticleSwarmOptimization", "description": "Enhanced Particle Swarm Optimization with Adaptive Learning and Dynamic Neighborhood Influence.", "configspace": "", "generation": 64, "fitness": 0.29601562067465526, "feedback": "The algorithm EnhancedParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "9cffde72-f077-406e-9210-de549c9a95ee", "metadata": {"aucs": [0.7576475748119013, 0.7319411164067446, 0.7554554711473249, 0.7513396140771559, 0.7358370794346651, 0.7443831205496207, 0.7492539584191529, 0.7180294787048775, 0.7165863046063691, 0.371457207364724, 0.38530992042080114, 0.3715358476250683, 0.3255226657579704, 0.3455172089047511, 0.32977874207985736, 0.31304712606275475, 0.36308355082004407, 0.3754707710273808, 0.155884261383179, 0.16153207122739566, 0.15681426699516865, 0.30573380860590815, 0.14870482836184473, 0.15820948395416323, 0.09400101743925371, 0.332476622966002, 0.14926585646761137, 0.11806356051833866, 0.1661087570728389, 0.1651570548799034, 0.14969736468737482, 0.12849711167223488, 0.15177740349646718, 0.11028858059805513, 0.12321568319240683, 0.14932237813610227, 0.9814635527275061, 0.9800851062491608, 0.9812372090030649, 0.9642257025062457, 0.9642944722064368, 0.9725851565241196, 0.9700575872458532, 0.9624896816320856, 0.982683602153838, 0.47627985896294633, 0.4477632962547373, 0.48127151083656194, 0.4511695440033262, 0.45073512247891, 0.49858347379905577, 0.43164145438147583, 0.4665266058044324, 0.46896831499376346, 0.2278707142346108, 0.8084245527908411, 0.22451308670079284, 0.5335689644728712, 0.27596505409703, 0.2157017764992455, 0.15947249876595326, 0.17718534472204395, 0.8025936331049921, 0.17949941366648237, 0.14168679220490954, 0.15408358243232456, 0.17173781738236105, 0.13301595342836314, 0.17163572542470973, 0.17052915163250615, 0.17885550519577886, 0.17509080235175212, 0.20033121079367533, 0.1816129984724837, 0.12281345447725345, 0.13176743098706212, 0.21156247277775841, 0.187208170729118, 0.22381846420472584, 0.13113845260490087, 0.2099194846293122, 9.999999999998899e-05, 0.00323918417735658, 9.999999999998899e-05, 0.02595376211541367, 0.05134989101214782, 0.0041113665266444555, 0.011551842207285667, 9.999999999998899e-05, 0.17872291706120635, 0.07219510680132335, 0.028682751467340117, 0.10714651099751826, 0.07459645778958024, 0.02094187998537278, 0.027861869507427084, 0.13453680727273165, 0.08942577085428294, 0.05933810895000913, 0.11254771758995608, 0.053344867185072364, 0.05488888662088598, 0.06373210981983535, 0.06775141974865051, 0.06791404690472169, 0.10999551203794622, 0.13619752494217263, 0.0871511038307835, 0.2508152006550568, 0.17013550183056758, 0.17017448539958457, 0.12280339889199754, 0.052293934570488254, 0.05110916384988995, 0.18051203006568028, 0.22525302643315692, 0.0871750203127416, 0.49862026403874626, 0.538131892839883, 0.5308344819012427, 0.5513877638063978, 0.5217506713074729, 0.4980214396620689, 0.5548163581423506, 0.5149438188923777, 0.566345078754654, 0.10726784105642728, 0.12761552875622983, 0.11181231609753373, 0.16686659964893902, 0.10749377373528846, 0.1583939709363258, 0.12785644211829517, 0.11033053768837586, 0.10024196393642582, 0.21274177174519338, 0.39454659491066146, 0.35701967367177234, 0.23663232632354048, 0.22192627445390933, 0.32237147173403413, 0.2777879521232661, 0.19888391625413937, 0.32071439821894365, 0.3035487009862974, 0.41188927803300013, 0.3544564320293948, 0.3520186522642961, 0.42787285860926627, 0.3867718146784591, 0.40731972453568244, 0.4207805403415198, 0.36566035720968804, 0.28486643899984143, 0.24943466442187978, 0.33529209570980933, 0.19453076146040194, 0.24384648451386703, 0.26299534321889395, 0.32691200150130273, 0.27922828786676646, 0.22975884225336196, 0.22598988117727425, 0.21990339755890131, 0.21010084188024336, 0.2602204069250328, 0.25034360266719036, 0.2081255618688892, 0.20359719966784628, 0.23179968548841456, 0.23076848880195366, 0.23795894909012372, 0.2082704301963879, 0.20039551900520391, 0.21778442270824916, 0.2337268851091141, 0.2200103997430759, 0.22113220985979654, 0.22641836852593256, 0.20208450564894798, 0.8777137962190313, 0.18744001953862433, 0.18525030413933563, 0.8949178400088125, 0.19964022746595778, 0.2004845164956538, 0.15697378791053473, 0.16907174234041245, 0.8824948558570368, 0.5597261004640408, 0.40543466320174437, 0.6166562710575794, 0.20844774164135982, 0.16981852801157615, 0.6445887929013467, 0.10481777790057445, 0.7399390898612839, 0.684292282182035, 0.1905536933684383, 0.19704904274683, 0.19483402188474608, 0.2186407014156161, 0.20092091074612073, 0.1916147877221246, 0.17909816364972375, 0.18312393457135734, 0.1774946947433933, 0.09999035798372713, 0.08979747209487554, 0.08941121592516121, 0.09367735252139775, 0.09147771768783952, 0.12891798143635458, 0.10132775126118354, 0.09389342867009198, 0.09531353495120076]}, "mutation_prompt": null}
{"id": "76278641-cb0c-428e-b600-41fb396c8d57", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 65, "fitness": 0.32205279540899234, "feedback": "The algorithm QuantumSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "9cffde72-f077-406e-9210-de549c9a95ee", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "face75df-c554-4d5e-a936-e63369b1f08d", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "83392959-1615-44e0-a694-b2add3c102f1", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "a058d761-a511-483b-8626-0bb50062f082", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "4e7d133e-260d-495a-8878-e2857f4b36f9", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "5b06be58-dc82-4b59-81d8-f70f1dd9e9a6", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "06fdb48e-ba17-4a22-9edc-d5575eba2c8d", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "a42f6bbf-e700-4e6b-88f8-4892b922b2ee", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "914daf59-5635-454e-97c5-3b523dae3099", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Slightly increased swarm size\n        self.alpha_cognitive = 0.6  # Adjusted cognitive factor for better learning\n        self.alpha_social = 0.4  # Boosted social factor\n        self.inertia_start = 0.85  # Balanced starting inertia\n        self.inertia_end = 0.15  # Slightly adjusted ending inertia\n        self.mutation_prob = 0.25  # Further increased mutation probability\n        self.crossover_prob = 0.55  # Further increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Maintain diversity by adding a small uniform perturbation\n        perturbation = np.random.uniform(-0.1, 0.1, position.shape)\n        return np.random.normal(position, np.abs(global_best - position)) + perturbation\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                r1, r2 = np.random.rand(2)\n                # Dynamic adjustment of cognitive and social components\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + r1 * self.alpha_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + r2 * self.alpha_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive learning rates and diversity maintenance for improved exploration.", "configspace": "", "generation": 73, "fitness": 0.3169909307333416, "feedback": "The algorithm QuantumSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.8262562431647417, 0.8047998697626684, 0.8348657321023639, 0.8165152372774667, 0.8101964683300226, 0.8088797480574357, 0.8242998322241788, 0.8140658102543287, 0.8177100886340033, 0.4872813412473851, 0.4902162393368452, 0.48113833669650574, 0.4885977097566191, 0.5058772699478289, 0.49626251133736854, 0.44145803043316045, 0.5113579457077279, 0.4695976192859691, 0.1834512862600821, 0.49090364696138034, 0.1515030285926663, 0.4706988466449926, 0.17558746794718627, 0.17432915486215006, 0.48507662730842027, 0.15225576281313402, 0.46528839789097065, 0.11901954697098094, 0.1432325701948357, 0.12819700164907244, 0.3636025170328938, 0.17106317644321334, 0.13005209118471117, 0.14723168369949258, 0.15403246656633196, 0.15171259451018848, 0.9857645486060508, 0.9839217563518566, 0.9823201390699419, 0.9730083880168771, 0.9737842673113635, 0.983314237034499, 0.979291869943844, 0.9740602315804621, 0.9769386725924585, 0.5693503932781436, 0.5323243036356231, 0.5750419319777664, 0.5298512157117097, 0.5770481972926795, 0.47604785794445426, 0.5675649797643452, 0.5197584250942315, 0.5322904725813367, 0.8944050174619151, 0.16988983475932073, 0.22372477093606535, 0.21466688304315007, 0.2783445154257108, 0.19211166821253678, 0.1487018812599581, 0.2227180517951337, 0.23434405691882643, 0.17919472922737745, 0.1901804830607744, 0.1878572254319435, 0.19215278455975426, 0.12910608921306743, 0.18992949893201716, 0.1954289263955934, 0.20689465395707707, 0.2290208502082718, 0.20288300249681623, 0.1465408900006454, 0.330197108015547, 0.19057871934309456, 0.16333825411574365, 0.18183198332681816, 0.13315841755101177, 0.17472749462712267, 0.1928821891418323, 0.10615862748308791, 0.049075057625835306, 9.999999999998899e-05, 0.036827881993118705, 0.009489652454289565, 0.05337643626567712, 0.005865200183434505, 9.999999999998899e-05, 0.135184133668397, 0.18381819837484703, 0.020335044847386907, 0.14765662851179517, 0.04807441701114623, 0.022641158582008436, 0.03452376377010802, 0.1522482226809223, 0.05474665243169352, 0.0318144570190374, 0.11811634459635156, 0.0731465871535989, 0.19655563618150207, 0.11504991938429743, 0.1574473164184247, 0.08337546565596643, 0.20851705456008462, 0.21818517929059622, 0.06488347465365929, 0.16961208653205173, 0.1600931854880453, 0.12089794411822763, 0.044862905015607635, 0.020354269930018876, 0.07322526719449818, 0.08394859535538912, 0.16816777539871242, 0.0839368325056008, 0.5120545280417169, 0.5588457759409231, 0.560736451612891, 0.5695267204787078, 0.581035504805389, 0.5822240508080456, 0.5830025821593257, 0.526749693107728, 0.5744615424812245, 0.08055153392715186, 0.1693604985444459, 0.13440849431659285, 0.13530363129541767, 0.14496926026198564, 0.10040281698393361, 0.1390815288545777, 0.11413774880325656, 0.13147601336479453, 0.46916037269920996, 0.30353534481670275, 0.335382762320126, 0.2794779757056348, 0.1997237079340053, 0.17950840136614066, 0.26598821174029874, 0.20730075799016123, 0.21327612951781016, 0.31226548535672116, 0.4348124309264918, 0.4218028128995708, 0.3165668169919724, 0.33003157933403504, 0.47341493475839336, 0.4722671955199891, 0.4624253705175737, 0.4386751217671587, 0.3357396090914194, 0.2450083693259837, 0.18276209822790468, 0.2660694736266038, 0.20467253126060025, 0.35621678012006264, 0.3913949806804957, 0.33352615959534093, 0.30930972597234463, 0.2157628104890329, 0.24382044630416666, 0.20232900234075368, 0.2660923646708, 0.21846716473650818, 0.20514382197472802, 0.25074828106991076, 0.19968576996210308, 0.20394301728265463, 0.22211826019179737, 0.22400926451934333, 0.22084049136650175, 0.249653153660489, 0.2115206431404949, 0.21307647859858447, 0.25006046381580405, 0.1913853014613336, 0.6342109242368356, 0.18662282337049652, 0.2084267873804856, 0.8915980758992343, 0.9144215299975192, 0.20002216892166913, 0.19870875316887116, 0.15193922396068427, 0.1699950509008924, 0.9109928750878302, 0.6480648299532835, 0.15593020919964218, 0.6690072354630193, 0.7432391240510645, 0.5922089821699685, 0.15397071347671187, 0.16767024251682183, 0.10513143863133922, 0.532719070142562, 0.1844208374287899, 0.19409810082669776, 0.1856283465361276, 0.2055550768723875, 0.17845569758013002, 0.21175808902172133, 0.1750600767571857, 0.2003246486456931, 0.2229333882384983, 0.08645840755332623, 0.09013872748365792, 0.08282091566874294, 0.09952943692525495, 0.09487407439757356, 0.08765559999738692, 0.08978947832065864, 0.09607676029469803, 0.09676592525895145]}, "mutation_prompt": null}
{"id": "99a07f6a-a75c-4097-b0e0-ca8ac9bf02a2", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "402b74af-1338-4e32-b907-befb31a241eb", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 25  # Modified swarm size for balance\n        self.alpha_cognitive = 0.5  # Adjusted cognitive factor for exploration\n        self.alpha_social = 0.35  # Enhanced social factor\n        self.inertia_start = 0.9  # Increased starting inertia\n        self.inertia_end = 0.1  # Reduced ending inertia\n        self.mutation_prob = 0.2  # Higher mutation probability\n        self.crossover_prob = 0.5  # Increased crossover probability\n\n    def quantum_update(self, position, global_best):\n        # Quantum-inspired position update using Delta Potential Wells\n        return np.random.normal(position, np.abs(global_best - position))\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization using Quantum Delta Potential Wells for enhanced convergence and exploration.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.894537764247655, 0.8789250880301285, 0.891877480282871, 0.8828451805919455, 0.8828389738630688, 0.19033407244838318, 0.8922225605826708, 0.886523357263605, 0.886316973471203, 0.7841674712351006, 0.7823625403652316, 0.801033521356961, 0.8003674012104747, 0.7923011269025744, 0.7968567092836031, 0.7951308540020452, 0.7999317599599426, 0.7983514069758675, 0.13306719131853462, 0.17677407620672403, 0.1724815885284544, 0.18306791237738484, 0.6970551000787732, 0.7199911821485339, 0.16956430238480558, 0.15393768077110748, 0.15187403500660135, 0.15057828079799496, 0.1551295204168719, 0.13840020553725974, 0.11551886653642673, 0.14041053713611218, 0.1736040881654104, 0.7259520537836552, 0.1290706307538041, 0.14521021684732316, 0.9797297826046562, 0.9835659256893925, 0.9799059334500998, 0.9824371662711535, 0.9824104983130293, 0.9824630221898654, 0.9866188348324573, 0.9825245164696318, 0.9811156459302703, 0.7543984448022304, 0.6665040772995228, 0.6028525734306145, 0.15394754893071128, 0.15287516700302073, 0.45774314652526127, 0.6392073362505096, 0.1693846444924758, 0.6815230607858933, 0.22857644972757196, 0.21878807967127878, 0.13940932004141637, 0.19425304760530693, 0.19267181479644446, 0.1931027260463426, 0.21638066275257117, 0.854477662753619, 0.2365902770071665, 0.20017206659559117, 0.1280116934031177, 0.2191542121710902, 0.18120150973806182, 0.1723204602385633, 0.13292315146506029, 0.20989386796949505, 0.16646488627617584, 0.15760283320502988, 0.15931999976166733, 0.20504604280787497, 0.1877856757572992, 0.18299814018829497, 0.18041141633107727, 0.21094964390248172, 0.2526059373231052, 0.18608418914014768, 0.19230972299976756, 0.14059644000800475, 9.999999999998899e-05, 0.007187668614820231, 0.05596252562668835, 9.999999999998899e-05, 0.028427419721478553, 0.0686949619473819, 9.999999999998899e-05, 0.08712775465133094, 0.06899927568176767, 0.047418040432471775, 0.08958946745990504, 0.0865964214029078, 0.02717070550406442, 0.018982216012998987, 0.11367612081872136, 0.10413555857979029, 0.03829719946140886, 0.049627844101711505, 0.1840386838441419, 0.10291671230188126, 0.07898376727397904, 0.08808327289453588, 0.0781370279751713, 0.15074384933291496, 0.12036706750501291, 0.07459006550802982, 0.12154441768429292, 0.04486744995034897, 0.05219680914362401, 0.2147789050659149, 0.15077159351721725, 0.15589070820363593, 0.08314487499518197, 0.22806670108353821, 0.08336257645460587, 0.6196446785621414, 0.578252749465648, 0.549214175363773, 0.5927197999874678, 0.5348002721736942, 0.5181620234649258, 0.5692808049365968, 0.5959840440944157, 0.6142895062919002, 0.09877766725433634, 0.052514797501581945, 0.10132717054506934, 0.17966169941982646, 0.1318952597655656, 0.09639886255787478, 0.14989643232469374, 0.14805002551552682, 0.11433287385035351, 0.34727900579802595, 0.18258442590281942, 0.22337429236447748, 0.27158573524925966, 0.1719549313140133, 0.4093272498251991, 0.2082408994656837, 0.42339850655811784, 0.44479692850354147, 0.2604704998627414, 0.5637930219042042, 0.38590339318326894, 0.40085158480174454, 0.5238944126525268, 0.4413505158506903, 0.7079143902881875, 0.4373795186414884, 0.4017103516955469, 0.2957789732691045, 0.2713833958036792, 0.30116451840878045, 0.35459478489736107, 0.23515832689846905, 0.2775806499623692, 0.2685988186257583, 0.2731015379378813, 0.2582725299192167, 0.22869916175176486, 0.24434036715424468, 0.21282597677387294, 0.24427252985229875, 0.20954536955304015, 0.2317300468167226, 0.27793763141722017, 0.22232008732082376, 0.21781902156465316, 0.2216150415162167, 0.24605560051819864, 0.197280401576563, 0.19893035224857913, 0.2184354897484313, 0.2407603871114501, 0.2071955987191787, 0.2008344959259576, 0.20957831898399304, 0.8882482033168859, 0.18712061042868133, 0.15282199306980893, 0.9119921290794167, 0.2004566960656935, 0.8876306570313739, 0.09962429380706361, 0.16735386315152323, 0.1700364787425962, 0.6656597578989495, 0.1567439326491098, 0.34905499561107844, 0.20960171955804707, 0.1690846430222922, 0.21136130556820987, 0.10540227404953217, 0.3338250413930577, 0.531342341072302, 0.1847158075734079, 0.21984471374488423, 0.18839773367944668, 0.2356642692740325, 0.2378014022372945, 0.19344919940402805, 0.19626168156433255, 0.21157047372491145, 0.18918390748504432, 0.08774842341347189, 0.09726787620227384, 0.08442568930620986, 0.1269471652088099, 0.07924917002745113, 0.08788403984859594, 0.09718287160106065, 0.09911847432329757, 0.09990942442041073]}, "mutation_prompt": null}
{"id": "50bfdfc8-db42-4efc-a858-c287054712f9", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for diversity\n        self.alpha_cognitive = 0.45  # Balanced cognitive factor\n        self.alpha_social = 0.4  # Adjusted social factor for collaboration\n        self.inertia_start = 0.85  # Adaptive inertia to balance exploration and exploitation\n        self.inertia_end = 0.2\n        self.mutation_prob = 0.25  # Dynamic mutation probability\n        self.crossover_prob = 0.6  # Enhanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with influence of iteration\n        sigma = np.abs(global_best - position) * (1 - iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration and convergence.", "configspace": "", "generation": 76, "fitness": 0.3293823334137154, "feedback": "The algorithm QuantumSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "76278641-cb0c-428e-b600-41fb396c8d57", "metadata": {"aucs": [0.8992010265067831, 0.8860404931172434, 0.8994152960669936, 0.895173405818972, 0.8899274668040984, 0.8977947031689227, 0.8934602646076866, 0.8930436331709792, 0.8883530765220917, 0.7912682809245966, 0.7837098810950276, 0.801359701270755, 0.7943346156187638, 0.7915088101401786, 0.7810856480996899, 0.800554428947315, 0.7942415885060128, 0.7224551868902661, 0.1786959903773936, 0.18646573702083058, 0.1541714298238812, 0.15761731476208074, 0.15308857165998813, 0.16038744328956323, 0.15443488324255616, 0.669331724882553, 0.1547023503053564, 0.14375200587422365, 0.1189007286943834, 0.13174046229963698, 0.18000805806663533, 0.13807869127253103, 0.11450683404687534, 0.114895850471612, 0.1419038827139939, 0.17615835720996276, 0.9776070574903509, 0.9870278872985945, 0.9782142296453961, 0.9815188906369502, 0.9726478995962978, 0.9810846013947053, 0.9848581327508171, 0.9745205547679766, 0.979873464257713, 0.7721545429269793, 0.5135913805956105, 0.7449393424960278, 0.5402737137625893, 0.7314765765680937, 0.729162536842343, 0.7759781419466621, 0.08777656918496979, 0.7798900001700058, 0.16717019684859336, 0.22343862573538797, 0.22499850433666424, 0.19483731600566612, 0.8721858688402557, 0.9054080144589154, 0.19488724447693628, 0.339243258513624, 0.8699151076681313, 0.23965110930631095, 0.17064656830727765, 0.11876106830410116, 0.09772035880381014, 0.20668210068924786, 0.1149815699735911, 0.18956096148487744, 0.20930337172174862, 0.1799512515394749, 0.18813032371839933, 0.18662488251821763, 0.12705484213186502, 0.17689888530749198, 0.18573593583955406, 0.1721604779500835, 0.3614747168743019, 0.13553866346503474, 0.25380229175883773, 0.06900503889590126, 9.999999999998899e-05, 0.05238279545331026, 9.999999999998899e-05, 9.999999999998899e-05, 0.007229900486852792, 0.0077476847377638824, 9.999999999998899e-05, 9.999999999998899e-05, 0.11835194470667898, 0.06865189905026636, 0.1097579735680998, 0.08236514294363784, 0.028830826842044743, 0.06537698288778415, 0.11924237090372769, 0.0538558621441938, 0.04893799580046765, 0.12409425622812653, 0.17040370055769982, 0.13619691914796173, 0.07849241784173044, 0.09373685596682368, 0.08578665908689087, 0.10085491111808731, 0.12662576069407694, 0.0739649399513812, 0.12849485734254507, 0.24743796219293168, 0.11044729036513579, 0.06600257251502806, 0.15086664487766088, 0.08407115356335215, 0.0831179259997138, 0.09845746634831665, 0.08397931258897484, 0.5216525222491175, 0.5188169674230769, 0.5935278555401546, 0.5457998319673816, 0.538250546474508, 0.5230067204463573, 0.542388919795581, 0.5864647434005592, 0.619395805778133, 0.13565430045212234, 0.06441979032222878, 0.10614312628312106, 0.12195437403246856, 0.10307598365112114, 0.11189518754014804, 0.12974713430729823, 0.14162829789192632, 0.15198966510087053, 0.26370136638514974, 0.1795176209511543, 0.36091980118475253, 0.24305663918361164, 0.224622762769903, 0.21680806689641396, 0.32137328262169074, 0.17859921209209517, 0.25523886821730724, 0.1754824748075744, 0.44460761472284804, 0.43580405044195225, 0.4016927032032832, 0.45314383074213527, 0.4644677486674408, 0.32939060416890487, 0.7334859314725986, 0.4965695342893641, 0.283624043201126, 0.2513455542674583, 0.18291775169404778, 0.2681735037896158, 0.2758285150211004, 0.38960924894785054, 0.24548625434431348, 0.267336709907809, 0.2846022480058805, 0.20407169570368755, 0.22184236117121703, 0.20132612937758965, 0.2050250598339458, 0.2184747401854158, 0.20949277882566741, 0.2536482855925618, 0.23953952467279227, 0.19974813857075902, 0.18805968849410282, 0.24916985108259038, 0.2041659600674658, 0.24867204652060426, 0.24850258011589133, 0.8346600357177011, 0.2492868927692966, 0.22313951592922865, 0.24963231307233347, 0.9195381617181632, 0.18724650667347864, 0.1876542606511209, 0.20009522579729133, 0.19905817012684512, 0.8963648675592011, 0.1583239269547999, 0.16953126439092026, 0.9169591964699131, 0.6305127792145244, 0.15608550519776654, 0.07336274947440324, 0.4801191873082419, 0.15466554882432104, 0.41954825919582206, 0.10413337398091171, 0.10458917685521751, 0.16556747660938131, 0.1977800434725665, 0.18724247500576485, 0.2197752788090931, 0.20193235407848764, 0.1976325245387608, 0.21450557597682707, 0.1857273692766518, 0.19519527712456763, 0.215032652405585, 0.13321595671237885, 0.11020230490960825, 0.09820239401921993, 0.09203297379552045, 0.07934496241169886, 0.09411998360895868, 0.08527518460285499, 0.08692339822390382, 0.09101747202327748]}, "mutation_prompt": null}
{"id": "60392d02-392f-44bc-a327-d7bdea875854", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for diversity\n        self.alpha_cognitive = 0.45  # Balanced cognitive factor\n        self.alpha_social = 0.4  # Adjusted social factor for collaboration\n        self.inertia_start = 0.85  # Adaptive inertia to balance exploration and exploitation\n        self.inertia_end = 0.2\n        self.mutation_prob = 0.25  # Dynamic mutation probability\n        self.crossover_prob = 0.6  # Enhanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with influence of iteration\n        sigma = np.abs(global_best - position) * (1 - iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration and convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50bfdfc8-db42-4efc-a858-c287054712f9", "metadata": {"aucs": [0.8992010265067831, 0.8860404931172434, 0.8994152960669936, 0.895173405818972, 0.8899274668040984, 0.8977947031689227, 0.8934602646076866, 0.8930436331709792, 0.8883530765220917, 0.7912682809245966, 0.7837098810950276, 0.801359701270755, 0.7943346156187638, 0.7915088101401786, 0.7810856480996899, 0.800554428947315, 0.7942415885060128, 0.7224551868902661, 0.1786959903773936, 0.18646573702083058, 0.1541714298238812, 0.15761731476208074, 0.15308857165998813, 0.16038744328956323, 0.15443488324255616, 0.669331724882553, 0.1547023503053564, 0.14375200587422365, 0.1189007286943834, 0.13174046229963698, 0.18000805806663533, 0.13807869127253103, 0.11450683404687534, 0.114895850471612, 0.1419038827139939, 0.17615835720996276, 0.9776070574903509, 0.9870278872985945, 0.9782142296453961, 0.9815188906369502, 0.9726478995962978, 0.9810846013947053, 0.9848581327508171, 0.9745205547679766, 0.979873464257713, 0.7721545429269793, 0.5135913805956105, 0.7449393424960278, 0.5402737137625893, 0.7314765765680937, 0.729162536842343, 0.7759781419466621, 0.08777656918496979, 0.7798900001700058, 0.16717019684859336, 0.22343862573538797, 0.22499850433666424, 0.19483731600566612, 0.8721858688402557, 0.9054080144589154, 0.19488724447693628, 0.339243258513624, 0.8699151076681313, 0.23965110930631095, 0.17064656830727765, 0.11876106830410116, 0.09772035880381014, 0.20668210068924786, 0.1149815699735911, 0.18956096148487744, 0.20930337172174862, 0.1799512515394749, 0.18813032371839933, 0.18662488251821763, 0.12705484213186502, 0.17689888530749198, 0.18573593583955406, 0.1721604779500835, 0.3614747168743019, 0.13553866346503474, 0.25380229175883773, 0.06900503889590126, 9.999999999998899e-05, 0.05238279545331026, 9.999999999998899e-05, 9.999999999998899e-05, 0.007229900486852792, 0.0077476847377638824, 9.999999999998899e-05, 9.999999999998899e-05, 0.11835194470667898, 0.06865189905026636, 0.1097579735680998, 0.08236514294363784, 0.028830826842044743, 0.06537698288778415, 0.11924237090372769, 0.0538558621441938, 0.04893799580046765, 0.12409425622812653, 0.17040370055769982, 0.13619691914796173, 0.07849241784173044, 0.09373685596682368, 0.08578665908689087, 0.10085491111808731, 0.12662576069407694, 0.0739649399513812, 0.12849485734254507, 0.24743796219293168, 0.11044729036513579, 0.06600257251502806, 0.15086664487766088, 0.08407115356335215, 0.0831179259997138, 0.09845746634831665, 0.08397931258897484, 0.5216525222491175, 0.5188169674230769, 0.5935278555401546, 0.5457998319673816, 0.538250546474508, 0.5230067204463573, 0.542388919795581, 0.5864647434005592, 0.619395805778133, 0.13565430045212234, 0.06441979032222878, 0.10614312628312106, 0.12195437403246856, 0.10307598365112114, 0.11189518754014804, 0.12974713430729823, 0.14162829789192632, 0.15198966510087053, 0.26370136638514974, 0.1795176209511543, 0.36091980118475253, 0.24305663918361164, 0.224622762769903, 0.21680806689641396, 0.32137328262169074, 0.17859921209209517, 0.25523886821730724, 0.1754824748075744, 0.44460761472284804, 0.43580405044195225, 0.4016927032032832, 0.45314383074213527, 0.4644677486674408, 0.32939060416890487, 0.7334859314725986, 0.4965695342893641, 0.283624043201126, 0.2513455542674583, 0.18291775169404778, 0.2681735037896158, 0.2758285150211004, 0.38960924894785054, 0.24548625434431348, 0.267336709907809, 0.2846022480058805, 0.20407169570368755, 0.22184236117121703, 0.20132612937758965, 0.2050250598339458, 0.2184747401854158, 0.20949277882566741, 0.2536482855925618, 0.23953952467279227, 0.19974813857075902, 0.18805968849410282, 0.24916985108259038, 0.2041659600674658, 0.24867204652060426, 0.24850258011589133, 0.8346600357177011, 0.2492868927692966, 0.22313951592922865, 0.24963231307233347, 0.9195381617181632, 0.18724650667347864, 0.1876542606511209, 0.20009522579729133, 0.19905817012684512, 0.8963648675592011, 0.1583239269547999, 0.16953126439092026, 0.9169591964699131, 0.6305127792145244, 0.15608550519776654, 0.07336274947440324, 0.4801191873082419, 0.15466554882432104, 0.41954825919582206, 0.10413337398091171, 0.10458917685521751, 0.16556747660938131, 0.1977800434725665, 0.18724247500576485, 0.2197752788090931, 0.20193235407848764, 0.1976325245387608, 0.21450557597682707, 0.1857273692766518, 0.19519527712456763, 0.215032652405585, 0.13321595671237885, 0.11020230490960825, 0.09820239401921993, 0.09203297379552045, 0.07934496241169886, 0.09411998360895868, 0.08527518460285499, 0.08692339822390382, 0.09101747202327748]}, "mutation_prompt": null}
{"id": "06f3e29f-0649-465e-95f8-c2d359f0aa57", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for diversity\n        self.alpha_cognitive = 0.45  # Balanced cognitive factor\n        self.alpha_social = 0.4  # Adjusted social factor for collaboration\n        self.inertia_start = 0.85  # Adaptive inertia to balance exploration and exploitation\n        self.inertia_end = 0.2\n        self.mutation_prob = 0.25  # Dynamic mutation probability\n        self.crossover_prob = 0.6  # Enhanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with influence of iteration\n        sigma = np.abs(global_best - position) * (1 - iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration and convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50bfdfc8-db42-4efc-a858-c287054712f9", "metadata": {"aucs": [0.8992010265067831, 0.8860404931172434, 0.8994152960669936, 0.895173405818972, 0.8899274668040984, 0.8977947031689227, 0.8934602646076866, 0.8930436331709792, 0.8883530765220917, 0.7912682809245966, 0.7837098810950276, 0.801359701270755, 0.7943346156187638, 0.7915088101401786, 0.7810856480996899, 0.800554428947315, 0.7942415885060128, 0.7224551868902661, 0.1786959903773936, 0.18646573702083058, 0.1541714298238812, 0.15761731476208074, 0.15308857165998813, 0.16038744328956323, 0.15443488324255616, 0.669331724882553, 0.1547023503053564, 0.14375200587422365, 0.1189007286943834, 0.13174046229963698, 0.18000805806663533, 0.13807869127253103, 0.11450683404687534, 0.114895850471612, 0.1419038827139939, 0.17615835720996276, 0.9776070574903509, 0.9870278872985945, 0.9782142296453961, 0.9815188906369502, 0.9726478995962978, 0.9810846013947053, 0.9848581327508171, 0.9745205547679766, 0.979873464257713, 0.7721545429269793, 0.5135913805956105, 0.7449393424960278, 0.5402737137625893, 0.7314765765680937, 0.729162536842343, 0.7759781419466621, 0.08777656918496979, 0.7798900001700058, 0.16717019684859336, 0.22343862573538797, 0.22499850433666424, 0.19483731600566612, 0.8721858688402557, 0.9054080144589154, 0.19488724447693628, 0.339243258513624, 0.8699151076681313, 0.23965110930631095, 0.17064656830727765, 0.11876106830410116, 0.09772035880381014, 0.20668210068924786, 0.1149815699735911, 0.18956096148487744, 0.20930337172174862, 0.1799512515394749, 0.18813032371839933, 0.18662488251821763, 0.12705484213186502, 0.17689888530749198, 0.18573593583955406, 0.1721604779500835, 0.3614747168743019, 0.13553866346503474, 0.25380229175883773, 0.06900503889590126, 9.999999999998899e-05, 0.05238279545331026, 9.999999999998899e-05, 9.999999999998899e-05, 0.007229900486852792, 0.0077476847377638824, 9.999999999998899e-05, 9.999999999998899e-05, 0.11835194470667898, 0.06865189905026636, 0.1097579735680998, 0.08236514294363784, 0.028830826842044743, 0.06537698288778415, 0.11924237090372769, 0.0538558621441938, 0.04893799580046765, 0.12409425622812653, 0.17040370055769982, 0.13619691914796173, 0.07849241784173044, 0.09373685596682368, 0.08578665908689087, 0.10085491111808731, 0.12662576069407694, 0.0739649399513812, 0.12849485734254507, 0.24743796219293168, 0.11044729036513579, 0.06600257251502806, 0.15086664487766088, 0.08407115356335215, 0.0831179259997138, 0.09845746634831665, 0.08397931258897484, 0.5216525222491175, 0.5188169674230769, 0.5935278555401546, 0.5457998319673816, 0.538250546474508, 0.5230067204463573, 0.542388919795581, 0.5864647434005592, 0.619395805778133, 0.13565430045212234, 0.06441979032222878, 0.10614312628312106, 0.12195437403246856, 0.10307598365112114, 0.11189518754014804, 0.12974713430729823, 0.14162829789192632, 0.15198966510087053, 0.26370136638514974, 0.1795176209511543, 0.36091980118475253, 0.24305663918361164, 0.224622762769903, 0.21680806689641396, 0.32137328262169074, 0.17859921209209517, 0.25523886821730724, 0.1754824748075744, 0.44460761472284804, 0.43580405044195225, 0.4016927032032832, 0.45314383074213527, 0.4644677486674408, 0.32939060416890487, 0.7334859314725986, 0.4965695342893641, 0.283624043201126, 0.2513455542674583, 0.18291775169404778, 0.2681735037896158, 0.2758285150211004, 0.38960924894785054, 0.24548625434431348, 0.267336709907809, 0.2846022480058805, 0.20407169570368755, 0.22184236117121703, 0.20132612937758965, 0.2050250598339458, 0.2184747401854158, 0.20949277882566741, 0.2536482855925618, 0.23953952467279227, 0.19974813857075902, 0.18805968849410282, 0.24916985108259038, 0.2041659600674658, 0.24867204652060426, 0.24850258011589133, 0.8346600357177011, 0.2492868927692966, 0.22313951592922865, 0.24963231307233347, 0.9195381617181632, 0.18724650667347864, 0.1876542606511209, 0.20009522579729133, 0.19905817012684512, 0.8963648675592011, 0.1583239269547999, 0.16953126439092026, 0.9169591964699131, 0.6305127792145244, 0.15608550519776654, 0.07336274947440324, 0.4801191873082419, 0.15466554882432104, 0.41954825919582206, 0.10413337398091171, 0.10458917685521751, 0.16556747660938131, 0.1977800434725665, 0.18724247500576485, 0.2197752788090931, 0.20193235407848764, 0.1976325245387608, 0.21450557597682707, 0.1857273692766518, 0.19519527712456763, 0.215032652405585, 0.13321595671237885, 0.11020230490960825, 0.09820239401921993, 0.09203297379552045, 0.07934496241169886, 0.09411998360895868, 0.08527518460285499, 0.08692339822390382, 0.09101747202327748]}, "mutation_prompt": null}
{"id": "04094a10-7b21-43eb-8fbd-64b8d5daf21d", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for diversity\n        self.alpha_cognitive = 0.45  # Balanced cognitive factor\n        self.alpha_social = 0.4  # Adjusted social factor for collaboration\n        self.inertia_start = 0.85  # Adaptive inertia to balance exploration and exploitation\n        self.inertia_end = 0.2\n        self.mutation_prob = 0.25  # Dynamic mutation probability\n        self.crossover_prob = 0.6  # Enhanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with influence of iteration\n        sigma = np.abs(global_best - position) * (1 - iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration and convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50bfdfc8-db42-4efc-a858-c287054712f9", "metadata": {"aucs": [0.8992010265067831, 0.8860404931172434, 0.8994152960669936, 0.895173405818972, 0.8899274668040984, 0.8977947031689227, 0.8934602646076866, 0.8930436331709792, 0.8883530765220917, 0.7912682809245966, 0.7837098810950276, 0.801359701270755, 0.7943346156187638, 0.7915088101401786, 0.7810856480996899, 0.800554428947315, 0.7942415885060128, 0.7224551868902661, 0.1786959903773936, 0.18646573702083058, 0.1541714298238812, 0.15761731476208074, 0.15308857165998813, 0.16038744328956323, 0.15443488324255616, 0.669331724882553, 0.1547023503053564, 0.14375200587422365, 0.1189007286943834, 0.13174046229963698, 0.18000805806663533, 0.13807869127253103, 0.11450683404687534, 0.114895850471612, 0.1419038827139939, 0.17615835720996276, 0.9776070574903509, 0.9870278872985945, 0.9782142296453961, 0.9815188906369502, 0.9726478995962978, 0.9810846013947053, 0.9848581327508171, 0.9745205547679766, 0.979873464257713, 0.7721545429269793, 0.5135913805956105, 0.7449393424960278, 0.5402737137625893, 0.7314765765680937, 0.729162536842343, 0.7759781419466621, 0.08777656918496979, 0.7798900001700058, 0.16717019684859336, 0.22343862573538797, 0.22499850433666424, 0.19483731600566612, 0.8721858688402557, 0.9054080144589154, 0.19488724447693628, 0.339243258513624, 0.8699151076681313, 0.23965110930631095, 0.17064656830727765, 0.11876106830410116, 0.09772035880381014, 0.20668210068924786, 0.1149815699735911, 0.18956096148487744, 0.20930337172174862, 0.1799512515394749, 0.18813032371839933, 0.18662488251821763, 0.12705484213186502, 0.17689888530749198, 0.18573593583955406, 0.1721604779500835, 0.3614747168743019, 0.13553866346503474, 0.25380229175883773, 0.06900503889590126, 9.999999999998899e-05, 0.05238279545331026, 9.999999999998899e-05, 9.999999999998899e-05, 0.007229900486852792, 0.0077476847377638824, 9.999999999998899e-05, 9.999999999998899e-05, 0.11835194470667898, 0.06865189905026636, 0.1097579735680998, 0.08236514294363784, 0.028830826842044743, 0.06537698288778415, 0.11924237090372769, 0.0538558621441938, 0.04893799580046765, 0.12409425622812653, 0.17040370055769982, 0.13619691914796173, 0.07849241784173044, 0.09373685596682368, 0.08578665908689087, 0.10085491111808731, 0.12662576069407694, 0.0739649399513812, 0.12849485734254507, 0.24743796219293168, 0.11044729036513579, 0.06600257251502806, 0.15086664487766088, 0.08407115356335215, 0.0831179259997138, 0.09845746634831665, 0.08397931258897484, 0.5216525222491175, 0.5188169674230769, 0.5935278555401546, 0.5457998319673816, 0.538250546474508, 0.5230067204463573, 0.542388919795581, 0.5864647434005592, 0.619395805778133, 0.13565430045212234, 0.06441979032222878, 0.10614312628312106, 0.12195437403246856, 0.10307598365112114, 0.11189518754014804, 0.12974713430729823, 0.14162829789192632, 0.15198966510087053, 0.26370136638514974, 0.1795176209511543, 0.36091980118475253, 0.24305663918361164, 0.224622762769903, 0.21680806689641396, 0.32137328262169074, 0.17859921209209517, 0.25523886821730724, 0.1754824748075744, 0.44460761472284804, 0.43580405044195225, 0.4016927032032832, 0.45314383074213527, 0.4644677486674408, 0.32939060416890487, 0.7334859314725986, 0.4965695342893641, 0.283624043201126, 0.2513455542674583, 0.18291775169404778, 0.2681735037896158, 0.2758285150211004, 0.38960924894785054, 0.24548625434431348, 0.267336709907809, 0.2846022480058805, 0.20407169570368755, 0.22184236117121703, 0.20132612937758965, 0.2050250598339458, 0.2184747401854158, 0.20949277882566741, 0.2536482855925618, 0.23953952467279227, 0.19974813857075902, 0.18805968849410282, 0.24916985108259038, 0.2041659600674658, 0.24867204652060426, 0.24850258011589133, 0.8346600357177011, 0.2492868927692966, 0.22313951592922865, 0.24963231307233347, 0.9195381617181632, 0.18724650667347864, 0.1876542606511209, 0.20009522579729133, 0.19905817012684512, 0.8963648675592011, 0.1583239269547999, 0.16953126439092026, 0.9169591964699131, 0.6305127792145244, 0.15608550519776654, 0.07336274947440324, 0.4801191873082419, 0.15466554882432104, 0.41954825919582206, 0.10413337398091171, 0.10458917685521751, 0.16556747660938131, 0.1977800434725665, 0.18724247500576485, 0.2197752788090931, 0.20193235407848764, 0.1976325245387608, 0.21450557597682707, 0.1857273692766518, 0.19519527712456763, 0.215032652405585, 0.13321595671237885, 0.11020230490960825, 0.09820239401921993, 0.09203297379552045, 0.07934496241169886, 0.09411998360895868, 0.08527518460285499, 0.08692339822390382, 0.09101747202327748]}, "mutation_prompt": null}
{"id": "d7a14ebe-ab57-4149-b588-1dd65f60dbb5", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for diversity\n        self.alpha_cognitive = 0.45  # Balanced cognitive factor\n        self.alpha_social = 0.4  # Adjusted social factor for collaboration\n        self.inertia_start = 0.85  # Adaptive inertia to balance exploration and exploitation\n        self.inertia_end = 0.2\n        self.mutation_prob = 0.25  # Dynamic mutation probability\n        self.crossover_prob = 0.6  # Enhanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with influence of iteration\n        sigma = np.abs(global_best - position) * (1 - iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration and convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50bfdfc8-db42-4efc-a858-c287054712f9", "metadata": {"aucs": [0.8992010265067831, 0.8860404931172434, 0.8994152960669936, 0.895173405818972, 0.8899274668040984, 0.8977947031689227, 0.8934602646076866, 0.8930436331709792, 0.8883530765220917, 0.7912682809245966, 0.7837098810950276, 0.801359701270755, 0.7943346156187638, 0.7915088101401786, 0.7810856480996899, 0.800554428947315, 0.7942415885060128, 0.7224551868902661, 0.1786959903773936, 0.18646573702083058, 0.1541714298238812, 0.15761731476208074, 0.15308857165998813, 0.16038744328956323, 0.15443488324255616, 0.669331724882553, 0.1547023503053564, 0.14375200587422365, 0.1189007286943834, 0.13174046229963698, 0.18000805806663533, 0.13807869127253103, 0.11450683404687534, 0.114895850471612, 0.1419038827139939, 0.17615835720996276, 0.9776070574903509, 0.9870278872985945, 0.9782142296453961, 0.9815188906369502, 0.9726478995962978, 0.9810846013947053, 0.9848581327508171, 0.9745205547679766, 0.979873464257713, 0.7721545429269793, 0.5135913805956105, 0.7449393424960278, 0.5402737137625893, 0.7314765765680937, 0.729162536842343, 0.7759781419466621, 0.08777656918496979, 0.7798900001700058, 0.16717019684859336, 0.22343862573538797, 0.22499850433666424, 0.19483731600566612, 0.8721858688402557, 0.9054080144589154, 0.19488724447693628, 0.339243258513624, 0.8699151076681313, 0.23965110930631095, 0.17064656830727765, 0.11876106830410116, 0.09772035880381014, 0.20668210068924786, 0.1149815699735911, 0.18956096148487744, 0.20930337172174862, 0.1799512515394749, 0.18813032371839933, 0.18662488251821763, 0.12705484213186502, 0.17689888530749198, 0.18573593583955406, 0.1721604779500835, 0.3614747168743019, 0.13553866346503474, 0.25380229175883773, 0.06900503889590126, 9.999999999998899e-05, 0.05238279545331026, 9.999999999998899e-05, 9.999999999998899e-05, 0.007229900486852792, 0.0077476847377638824, 9.999999999998899e-05, 9.999999999998899e-05, 0.11835194470667898, 0.06865189905026636, 0.1097579735680998, 0.08236514294363784, 0.028830826842044743, 0.06537698288778415, 0.11924237090372769, 0.0538558621441938, 0.04893799580046765, 0.12409425622812653, 0.17040370055769982, 0.13619691914796173, 0.07849241784173044, 0.09373685596682368, 0.08578665908689087, 0.10085491111808731, 0.12662576069407694, 0.0739649399513812, 0.12849485734254507, 0.24743796219293168, 0.11044729036513579, 0.06600257251502806, 0.15086664487766088, 0.08407115356335215, 0.0831179259997138, 0.09845746634831665, 0.08397931258897484, 0.5216525222491175, 0.5188169674230769, 0.5935278555401546, 0.5457998319673816, 0.538250546474508, 0.5230067204463573, 0.542388919795581, 0.5864647434005592, 0.619395805778133, 0.13565430045212234, 0.06441979032222878, 0.10614312628312106, 0.12195437403246856, 0.10307598365112114, 0.11189518754014804, 0.12974713430729823, 0.14162829789192632, 0.15198966510087053, 0.26370136638514974, 0.1795176209511543, 0.36091980118475253, 0.24305663918361164, 0.224622762769903, 0.21680806689641396, 0.32137328262169074, 0.17859921209209517, 0.25523886821730724, 0.1754824748075744, 0.44460761472284804, 0.43580405044195225, 0.4016927032032832, 0.45314383074213527, 0.4644677486674408, 0.32939060416890487, 0.7334859314725986, 0.4965695342893641, 0.283624043201126, 0.2513455542674583, 0.18291775169404778, 0.2681735037896158, 0.2758285150211004, 0.38960924894785054, 0.24548625434431348, 0.267336709907809, 0.2846022480058805, 0.20407169570368755, 0.22184236117121703, 0.20132612937758965, 0.2050250598339458, 0.2184747401854158, 0.20949277882566741, 0.2536482855925618, 0.23953952467279227, 0.19974813857075902, 0.18805968849410282, 0.24916985108259038, 0.2041659600674658, 0.24867204652060426, 0.24850258011589133, 0.8346600357177011, 0.2492868927692966, 0.22313951592922865, 0.24963231307233347, 0.9195381617181632, 0.18724650667347864, 0.1876542606511209, 0.20009522579729133, 0.19905817012684512, 0.8963648675592011, 0.1583239269547999, 0.16953126439092026, 0.9169591964699131, 0.6305127792145244, 0.15608550519776654, 0.07336274947440324, 0.4801191873082419, 0.15466554882432104, 0.41954825919582206, 0.10413337398091171, 0.10458917685521751, 0.16556747660938131, 0.1977800434725665, 0.18724247500576485, 0.2197752788090931, 0.20193235407848764, 0.1976325245387608, 0.21450557597682707, 0.1857273692766518, 0.19519527712456763, 0.215032652405585, 0.13321595671237885, 0.11020230490960825, 0.09820239401921993, 0.09203297379552045, 0.07934496241169886, 0.09411998360895868, 0.08527518460285499, 0.08692339822390382, 0.09101747202327748]}, "mutation_prompt": null}
{"id": "f474604f-c908-4c63-89bd-e20188938b5f", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for diversity\n        self.alpha_cognitive = 0.45  # Balanced cognitive factor\n        self.alpha_social = 0.4  # Adjusted social factor for collaboration\n        self.inertia_start = 0.85  # Adaptive inertia to balance exploration and exploitation\n        self.inertia_end = 0.2\n        self.mutation_prob = 0.25  # Dynamic mutation probability\n        self.crossover_prob = 0.6  # Enhanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with influence of iteration\n        sigma = np.abs(global_best - position) * (1 - iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration and convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50bfdfc8-db42-4efc-a858-c287054712f9", "metadata": {"aucs": [0.8992010265067831, 0.8860404931172434, 0.8994152960669936, 0.895173405818972, 0.8899274668040984, 0.8977947031689227, 0.8934602646076866, 0.8930436331709792, 0.8883530765220917, 0.7912682809245966, 0.7837098810950276, 0.801359701270755, 0.7943346156187638, 0.7915088101401786, 0.7810856480996899, 0.800554428947315, 0.7942415885060128, 0.7224551868902661, 0.1786959903773936, 0.18646573702083058, 0.1541714298238812, 0.15761731476208074, 0.15308857165998813, 0.16038744328956323, 0.15443488324255616, 0.669331724882553, 0.1547023503053564, 0.14375200587422365, 0.1189007286943834, 0.13174046229963698, 0.18000805806663533, 0.13807869127253103, 0.11450683404687534, 0.114895850471612, 0.1419038827139939, 0.17615835720996276, 0.9776070574903509, 0.9870278872985945, 0.9782142296453961, 0.9815188906369502, 0.9726478995962978, 0.9810846013947053, 0.9848581327508171, 0.9745205547679766, 0.979873464257713, 0.7721545429269793, 0.5135913805956105, 0.7449393424960278, 0.5402737137625893, 0.7314765765680937, 0.729162536842343, 0.7759781419466621, 0.08777656918496979, 0.7798900001700058, 0.16717019684859336, 0.22343862573538797, 0.22499850433666424, 0.19483731600566612, 0.8721858688402557, 0.9054080144589154, 0.19488724447693628, 0.339243258513624, 0.8699151076681313, 0.23965110930631095, 0.17064656830727765, 0.11876106830410116, 0.09772035880381014, 0.20668210068924786, 0.1149815699735911, 0.18956096148487744, 0.20930337172174862, 0.1799512515394749, 0.18813032371839933, 0.18662488251821763, 0.12705484213186502, 0.17689888530749198, 0.18573593583955406, 0.1721604779500835, 0.3614747168743019, 0.13553866346503474, 0.25380229175883773, 0.06900503889590126, 9.999999999998899e-05, 0.05238279545331026, 9.999999999998899e-05, 9.999999999998899e-05, 0.007229900486852792, 0.0077476847377638824, 9.999999999998899e-05, 9.999999999998899e-05, 0.11835194470667898, 0.06865189905026636, 0.1097579735680998, 0.08236514294363784, 0.028830826842044743, 0.06537698288778415, 0.11924237090372769, 0.0538558621441938, 0.04893799580046765, 0.12409425622812653, 0.17040370055769982, 0.13619691914796173, 0.07849241784173044, 0.09373685596682368, 0.08578665908689087, 0.10085491111808731, 0.12662576069407694, 0.0739649399513812, 0.12849485734254507, 0.24743796219293168, 0.11044729036513579, 0.06600257251502806, 0.15086664487766088, 0.08407115356335215, 0.0831179259997138, 0.09845746634831665, 0.08397931258897484, 0.5216525222491175, 0.5188169674230769, 0.5935278555401546, 0.5457998319673816, 0.538250546474508, 0.5230067204463573, 0.542388919795581, 0.5864647434005592, 0.619395805778133, 0.13565430045212234, 0.06441979032222878, 0.10614312628312106, 0.12195437403246856, 0.10307598365112114, 0.11189518754014804, 0.12974713430729823, 0.14162829789192632, 0.15198966510087053, 0.26370136638514974, 0.1795176209511543, 0.36091980118475253, 0.24305663918361164, 0.224622762769903, 0.21680806689641396, 0.32137328262169074, 0.17859921209209517, 0.25523886821730724, 0.1754824748075744, 0.44460761472284804, 0.43580405044195225, 0.4016927032032832, 0.45314383074213527, 0.4644677486674408, 0.32939060416890487, 0.7334859314725986, 0.4965695342893641, 0.283624043201126, 0.2513455542674583, 0.18291775169404778, 0.2681735037896158, 0.2758285150211004, 0.38960924894785054, 0.24548625434431348, 0.267336709907809, 0.2846022480058805, 0.20407169570368755, 0.22184236117121703, 0.20132612937758965, 0.2050250598339458, 0.2184747401854158, 0.20949277882566741, 0.2536482855925618, 0.23953952467279227, 0.19974813857075902, 0.18805968849410282, 0.24916985108259038, 0.2041659600674658, 0.24867204652060426, 0.24850258011589133, 0.8346600357177011, 0.2492868927692966, 0.22313951592922865, 0.24963231307233347, 0.9195381617181632, 0.18724650667347864, 0.1876542606511209, 0.20009522579729133, 0.19905817012684512, 0.8963648675592011, 0.1583239269547999, 0.16953126439092026, 0.9169591964699131, 0.6305127792145244, 0.15608550519776654, 0.07336274947440324, 0.4801191873082419, 0.15466554882432104, 0.41954825919582206, 0.10413337398091171, 0.10458917685521751, 0.16556747660938131, 0.1977800434725665, 0.18724247500576485, 0.2197752788090931, 0.20193235407848764, 0.1976325245387608, 0.21450557597682707, 0.1857273692766518, 0.19519527712456763, 0.215032652405585, 0.13321595671237885, 0.11020230490960825, 0.09820239401921993, 0.09203297379552045, 0.07934496241169886, 0.09411998360895868, 0.08527518460285499, 0.08692339822390382, 0.09101747202327748]}, "mutation_prompt": null}
{"id": "b6c0a219-20e2-4383-b679-62d0b5871257", "solution": "import numpy as np\n\nclass QuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30  # Increased swarm size for diversity\n        self.alpha_cognitive = 0.45  # Balanced cognitive factor\n        self.alpha_social = 0.4  # Adjusted social factor for collaboration\n        self.inertia_start = 0.85  # Adaptive inertia to balance exploration and exploitation\n        self.inertia_end = 0.2\n        self.mutation_prob = 0.25  # Dynamic mutation probability\n        self.crossover_prob = 0.6  # Enhanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with influence of iteration\n        sigma = np.abs(global_best - position) * (1 - iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "QuantumSwarmOptimization", "description": "Enhanced Quantum-inspired Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration and convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50bfdfc8-db42-4efc-a858-c287054712f9", "metadata": {"aucs": [0.8992010265067831, 0.8860404931172434, 0.8994152960669936, 0.895173405818972, 0.8899274668040984, 0.8977947031689227, 0.8934602646076866, 0.8930436331709792, 0.8883530765220917, 0.7912682809245966, 0.7837098810950276, 0.801359701270755, 0.7943346156187638, 0.7915088101401786, 0.7810856480996899, 0.800554428947315, 0.7942415885060128, 0.7224551868902661, 0.1786959903773936, 0.18646573702083058, 0.1541714298238812, 0.15761731476208074, 0.15308857165998813, 0.16038744328956323, 0.15443488324255616, 0.669331724882553, 0.1547023503053564, 0.14375200587422365, 0.1189007286943834, 0.13174046229963698, 0.18000805806663533, 0.13807869127253103, 0.11450683404687534, 0.114895850471612, 0.1419038827139939, 0.17615835720996276, 0.9776070574903509, 0.9870278872985945, 0.9782142296453961, 0.9815188906369502, 0.9726478995962978, 0.9810846013947053, 0.9848581327508171, 0.9745205547679766, 0.979873464257713, 0.7721545429269793, 0.5135913805956105, 0.7449393424960278, 0.5402737137625893, 0.7314765765680937, 0.729162536842343, 0.7759781419466621, 0.08777656918496979, 0.7798900001700058, 0.16717019684859336, 0.22343862573538797, 0.22499850433666424, 0.19483731600566612, 0.8721858688402557, 0.9054080144589154, 0.19488724447693628, 0.339243258513624, 0.8699151076681313, 0.23965110930631095, 0.17064656830727765, 0.11876106830410116, 0.09772035880381014, 0.20668210068924786, 0.1149815699735911, 0.18956096148487744, 0.20930337172174862, 0.1799512515394749, 0.18813032371839933, 0.18662488251821763, 0.12705484213186502, 0.17689888530749198, 0.18573593583955406, 0.1721604779500835, 0.3614747168743019, 0.13553866346503474, 0.25380229175883773, 0.06900503889590126, 9.999999999998899e-05, 0.05238279545331026, 9.999999999998899e-05, 9.999999999998899e-05, 0.007229900486852792, 0.0077476847377638824, 9.999999999998899e-05, 9.999999999998899e-05, 0.11835194470667898, 0.06865189905026636, 0.1097579735680998, 0.08236514294363784, 0.028830826842044743, 0.06537698288778415, 0.11924237090372769, 0.0538558621441938, 0.04893799580046765, 0.12409425622812653, 0.17040370055769982, 0.13619691914796173, 0.07849241784173044, 0.09373685596682368, 0.08578665908689087, 0.10085491111808731, 0.12662576069407694, 0.0739649399513812, 0.12849485734254507, 0.24743796219293168, 0.11044729036513579, 0.06600257251502806, 0.15086664487766088, 0.08407115356335215, 0.0831179259997138, 0.09845746634831665, 0.08397931258897484, 0.5216525222491175, 0.5188169674230769, 0.5935278555401546, 0.5457998319673816, 0.538250546474508, 0.5230067204463573, 0.542388919795581, 0.5864647434005592, 0.619395805778133, 0.13565430045212234, 0.06441979032222878, 0.10614312628312106, 0.12195437403246856, 0.10307598365112114, 0.11189518754014804, 0.12974713430729823, 0.14162829789192632, 0.15198966510087053, 0.26370136638514974, 0.1795176209511543, 0.36091980118475253, 0.24305663918361164, 0.224622762769903, 0.21680806689641396, 0.32137328262169074, 0.17859921209209517, 0.25523886821730724, 0.1754824748075744, 0.44460761472284804, 0.43580405044195225, 0.4016927032032832, 0.45314383074213527, 0.4644677486674408, 0.32939060416890487, 0.7334859314725986, 0.4965695342893641, 0.283624043201126, 0.2513455542674583, 0.18291775169404778, 0.2681735037896158, 0.2758285150211004, 0.38960924894785054, 0.24548625434431348, 0.267336709907809, 0.2846022480058805, 0.20407169570368755, 0.22184236117121703, 0.20132612937758965, 0.2050250598339458, 0.2184747401854158, 0.20949277882566741, 0.2536482855925618, 0.23953952467279227, 0.19974813857075902, 0.18805968849410282, 0.24916985108259038, 0.2041659600674658, 0.24867204652060426, 0.24850258011589133, 0.8346600357177011, 0.2492868927692966, 0.22313951592922865, 0.24963231307233347, 0.9195381617181632, 0.18724650667347864, 0.1876542606511209, 0.20009522579729133, 0.19905817012684512, 0.8963648675592011, 0.1583239269547999, 0.16953126439092026, 0.9169591964699131, 0.6305127792145244, 0.15608550519776654, 0.07336274947440324, 0.4801191873082419, 0.15466554882432104, 0.41954825919582206, 0.10413337398091171, 0.10458917685521751, 0.16556747660938131, 0.1977800434725665, 0.18724247500576485, 0.2197752788090931, 0.20193235407848764, 0.1976325245387608, 0.21450557597682707, 0.1857273692766518, 0.19519527712456763, 0.215032652405585, 0.13321595671237885, 0.11020230490960825, 0.09820239401921993, 0.09203297379552045, 0.07934496241169886, 0.09411998360895868, 0.08527518460285499, 0.08692339822390382, 0.09101747202327748]}, "mutation_prompt": null}
{"id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 83, "fitness": 0.34029005384932026, "feedback": "The algorithm HybridQuantumAdaptiveSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "50bfdfc8-db42-4efc-a858-c287054712f9", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "48c7cd3d-29e9-4b21-80b0-734c1a4dd3b8", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "803f00c7-716b-4c96-b494-7d85516f141c", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "a1ad8612-0e16-4b89-a7f7-f7a14a1f7ff2", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "50cc3e5f-7c08-494d-986d-07a944e5873c", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "afc42ac8-374d-46bd-bd81-ef3860b2a2d1", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "8b8a122f-50cf-494d-b15b-22fc5fe1b968", "solution": "import numpy as np\n\nclass EnhancedQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased swarm size for better exploration\n        self.alpha_cognitive = 0.6  # Increased cognitive factor for enhanced personal learning\n        self.alpha_social = 0.3  # Reduced social factor for diversified convergence\n        self.inertia_start = 0.85  # Slightly reduced initial inertia for balanced exploration\n        self.inertia_end = 0.3  # Increased final inertia for smoother transition\n        self.mutation_prob = 0.25  # Increased mutation probability for diversity\n        self.crossover_prob = 0.7  # Higher crossover rate for effective diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Adjusted quantum-inspired update with adaptable exploration-exploitation balance\n        sigma = np.abs(global_best - position) * np.exp(-iteration / max_iterations)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.3, 0.3, (self.swarm_size, self.dim))  # Narrowed velocity range for stability\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedQuantumAdaptiveSwarm", "description": "Enhanced Quantum-Adaptive Swarm with optimized parameters and methods for improved efficiency and search performance.", "configspace": "", "generation": 89, "fitness": 0.32478909674921136, "feedback": "The algorithm EnhancedQuantumAdaptiveSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8586938675040454, 0.8535686455777195, 0.8654140300736672, 0.8598836795728764, 0.857870764067902, 0.8511069989659561, 0.8673949774118367, 0.8540988204099869, 0.8600724846479296, 0.7392616195758857, 0.7507511271221003, 0.720612637644073, 0.7437514601328442, 0.7287057346992143, 0.7401795523295385, 0.7324441123110078, 0.7281356281209115, 0.7333776076849503, 0.6382685751510468, 0.1685051931525482, 0.16511740460467916, 0.15097591602714056, 0.580204971997305, 0.5960742565769086, 0.6062477507008825, 0.5208073130760013, 0.1769236722869162, 0.1502638110258766, 0.14025428221463387, 0.16566972698205917, 0.16627351861695605, 0.11687148633086286, 0.16121186025223633, 0.17497166366336436, 0.14687970743367895, 0.1457326538785363, 0.9677482111800088, 0.9767302427888905, 0.9746725396711567, 0.9564214612053584, 0.9800707587950451, 0.9736257102469668, 0.9686339338202117, 0.971564793299785, 0.9712565024171641, 0.47669370582315473, 0.5826990538865489, 0.7072418646526853, 0.6057088230174298, 0.6365033262164269, 0.4406556430235602, 0.6391808716910845, 0.08762609527690313, 0.7078396947558503, 0.22324324023538544, 0.21403249747422792, 0.3621554692012342, 0.21225733575752015, 0.21218969963603762, 0.2752905268706066, 0.3558547031144941, 0.23041296042486203, 0.35869207990469565, 0.2518521106486321, 0.16058434582343684, 0.17174212290800683, 0.1639421842137928, 0.13039661133340963, 0.1595759166366979, 0.1576662316617885, 0.17114775484856615, 0.1847476933518215, 0.20158907795643377, 0.12462367637174665, 0.16381302642252904, 0.12797048175350245, 0.18896934554281508, 0.15439477093280896, 0.19715281186350564, 0.1954562876782856, 0.19904925035828325, 9.999999999998899e-05, 0.09537663659394768, 9.999999999998899e-05, 9.999999999998899e-05, 0.002456976657287835, 0.046197474504173774, 0.006705769017479324, 0.04212781910427987, 9.999999999998899e-05, 0.0626203242320138, 0.05060616541097662, 0.10843609693340772, 0.09680412742431888, 0.024096603567723696, 0.03476199848613282, 0.11505776174230975, 0.09994029879860278, 0.09921951313273691, 0.07510503251993417, 0.1638595778819657, 0.04657702428550581, 0.07099569165541109, 0.071927777986591, 0.11663825586542353, 0.16117354450028776, 0.20129006687076645, 0.06824445815591695, 0.17001036080958365, 0.10354394021688551, 0.14249636496680307, 0.15045117782181527, 0.12098403173887384, 0.14844780937184443, 0.30295370301308444, 0.05691037977509272, 0.08512785760188157, 0.5647967897343704, 0.4908272960434352, 0.534325113150816, 0.5692234069278315, 0.517079726661466, 0.550901928881536, 0.5487951944409482, 0.52305514048685, 0.5195604865627121, 0.11408223688165231, 0.13473503008054977, 0.09081128072685984, 0.14178327178054773, 0.13990686854687884, 0.1368614067428704, 0.11477206118797911, 0.12482172057319552, 0.11521367612892264, 0.40260415740837274, 0.19493566054968714, 0.27048927299920067, 0.2155143576333286, 0.29101890361757565, 0.21614566054494577, 0.18216472276723183, 0.20845129008463004, 0.1929140161215116, 0.5210633621327925, 0.4793887753284277, 0.2784831054041047, 0.4208256225146241, 0.4140013864904777, 0.6502017999761558, 0.4899413372108582, 0.6551281266769298, 0.5430180987871389, 0.33941416886427767, 0.3233037298518433, 0.3206730742784013, 0.3006954802780408, 0.34215084788143735, 0.29192815267829797, 0.3287127770669489, 0.4218020264661677, 0.28234727249102265, 0.2088572799669981, 0.1980608262184862, 0.21858288785591606, 0.21580095181968129, 0.21649028463940923, 0.21390924110880705, 0.26023684737375485, 0.2381285057714222, 0.2300352837605254, 0.2403280564946063, 0.21869234126461257, 0.6470156158294074, 0.21220267005053517, 0.22797476785391724, 0.24253641756656896, 0.22036285634147357, 0.21535635552160826, 0.21749496293285342, 0.18473633292700675, 0.1831992055377979, 0.16665608157711287, 0.8717977676717041, 0.19747965237286602, 0.1990564563324363, 0.17165831567347412, 0.165469965440582, 0.8674623880741319, 0.45687402440283864, 0.20994922163466867, 0.5862631899098902, 0.21043476144187367, 0.11224388689196108, 0.19033008737949586, 0.20712322203652922, 0.590756787957087, 0.4961295301723774, 0.17193735496327922, 0.19625259234643677, 0.18164871211150635, 0.18280341386022403, 0.18608120780746595, 0.18901208912842438, 0.17621809906109798, 0.19371434073886384, 0.20436107683372096, 0.09568941534866227, 0.090620067098381, 0.08960051525389678, 0.08846001151096572, 0.09185337264403093, 0.09314931082838485, 0.09724723305193761, 0.08470605698299749, 0.0907355996506094]}, "mutation_prompt": null}
{"id": "eba3d63f-e023-4aac-a729-eaee4f668fc3", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "2235efa9-7ca8-4e6a-8dd3-01ea814245d1", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 35  # Slightly increased swarm size for diversity\n        self.alpha_cognitive = 0.5  # Enhanced cognitive factor for better local search\n        self.alpha_social = 0.35  # Reduced social factor to prevent premature convergence\n        self.inertia_start = 0.9  # Higher initial inertia for initial exploration\n        self.inertia_end = 0.25  # Adaptive inertia for smooth transition to exploitation\n        self.mutation_prob = 0.2  # Tuned mutation probability\n        self.crossover_prob = 0.65  # Adjusted crossover rate for effective recombination\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        # Quantum-inspired position update with progressive exploration-exploitation balance\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 2)\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "HybridQuantumAdaptiveSwarm", "description": "Hybrid Quantum Adaptive Swarm with enhanced learning mechanisms for balanced global and local search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8673048667193712, 0.8540162777003385, 0.8636099215023143, 0.854507365421138, 0.8672152721372598, 0.8715217588002154, 0.8530353118534257, 0.861728513199859, 0.8578526401573996, 0.7330418344583078, 0.7465048335965473, 0.7568857461654919, 0.7568373648473317, 0.7445070192708911, 0.7430870817346806, 0.7301040569848432, 0.7490323004341133, 0.7550259933069832, 0.1733281293202137, 0.5977712123833865, 0.6700989757476826, 0.1794813751941674, 0.6182404197762303, 0.6764515774972337, 0.6284000989161604, 0.6216411506544808, 0.6098799982103742, 0.11872798840041798, 0.11319220033800881, 0.1508064727041043, 0.14984866117293827, 0.14938585654476888, 0.14604842571589816, 0.17043154854969778, 0.1776668195303016, 0.12785093066100106, 0.9764563601909872, 0.9790146748535501, 0.9761612943573177, 0.975088750042313, 0.9802435695125122, 0.9748381529486287, 0.9749250359200118, 0.9777583803206454, 0.979386858207924, 0.7165324416828369, 0.6554347334598163, 0.7058049641688173, 0.698687860946269, 0.7183079799549663, 0.15277777370369583, 0.717945845880658, 0.632953464824874, 0.7025720523112744, 0.3715269484261542, 0.22434809951134937, 0.2227822511203159, 0.1928313600199495, 0.8474804112127359, 0.19147241440190832, 0.13689746959081928, 0.2230759695358414, 0.8079593518239183, 0.18561102726650225, 0.11961750049672559, 0.14249800687561853, 0.17425743841133512, 0.12636672079063227, 0.12805616405562792, 0.20436732384580547, 0.3089845247691857, 0.1805116150948599, 0.1599338809661247, 0.18082231411096483, 0.1716766225312062, 0.2093661193763533, 0.13787265062693532, 0.16082449845516877, 0.22654927352770915, 0.17394607550570595, 0.1277145570554279, 0.00047640288949091225, 0.04527807169961129, 0.023073927362768365, 9.999999999998899e-05, 0.0044539047023499645, 0.06730127739382841, 0.0347349167735963, 9.999999999998899e-05, 0.013751018406250815, 0.1272755072969043, 0.03028299151831848, 0.033832985143633976, 0.054487736018751676, 0.08674930661675695, 0.04997425602484762, 0.1712154499132179, 0.060760567574930424, 0.09341447390028457, 0.05341747066318747, 0.07713882554904772, 0.177825996511487, 0.12386796188316218, 0.07500829611899429, 0.09870989453004586, 0.09347783485198669, 0.07001011708389793, 0.10784217054499257, 0.32103714318757337, 0.18586515203982856, 0.2336804155855834, 0.08443365721201668, 0.05113167954622988, 0.1043927564428273, 0.05522903292600023, 0.14685232305233809, 0.08135251678147393, 0.5864500394951275, 0.5024182646957549, 0.5464119700914357, 0.4997851075410591, 0.5567550304067532, 0.5625798617638198, 0.5479627397357181, 0.5154047588189172, 0.5874179109041369, 0.09107511761416975, 0.13632698962859524, 0.10269597247790985, 0.1273586558495866, 0.10225554110693302, 0.1597161563179521, 0.0941187959602936, 0.1541504247850135, 0.14150067856551618, 0.1919838377279245, 0.18448203168062471, 0.23527738025056222, 0.21451134048389353, 0.410994412630846, 0.19003849881939183, 0.21353769974735493, 0.2232528289398007, 0.2758315961884914, 0.3005419534315602, 0.42240060642045774, 0.5018074079159958, 0.26736899852868545, 0.478055822674763, 0.445107820989032, 0.5674833173772571, 0.5873717472310983, 0.5165095767248803, 0.27493556425818133, 0.2965139991599359, 0.19547848179803873, 0.20880336125830878, 0.23748527918083662, 0.28581460756506727, 0.2648739753448096, 0.27516289010686246, 0.25144404152755684, 0.20770466455426084, 0.21337367160506415, 0.20259601110479875, 0.20591669995157713, 0.22480453729055794, 0.22221432029624033, 0.18959587770976238, 0.2270161897106635, 0.21665641053414475, 0.22401051197368105, 0.2078670113975738, 0.221162779871812, 0.4627516819622116, 0.6972440764633734, 0.24755653158680146, 0.23414594585145165, 0.23654119454000688, 0.21966764729127508, 0.1866150165757493, 0.8215226448200763, 0.18354376443742348, 0.8914158989845846, 0.19802482349728778, 0.8827633755785689, 0.14210163702292944, 0.166736486227832, 0.8870635009632857, 0.43829845750614504, 0.2103563654940961, 0.1273550805567485, 0.5136912010248286, 0.16900590857454012, 0.8340097061787284, 0.1048437459252356, 0.16371469197143274, 0.4223264527064743, 0.1800945118416778, 0.1917228957253163, 0.18766453032228347, 0.17964627800465227, 0.19645978454839375, 0.1900234860041361, 0.20941820658566057, 0.19289623027271363, 0.18055870985079725, 0.09074955831123077, 0.0916096156726024, 0.09588840727431813, 0.0857651808746408, 0.0970668017897337, 0.10573573990112017, 0.09565662999592184, 0.0902464775906896, 0.08993415137939154]}, "mutation_prompt": null}
{"id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased for greater search space coverage\n        self.alpha_cognitive = 0.45  # Fine-tuned cognitive factor\n        self.alpha_social = 0.3  # Further reduced to maintain exploration\n        self.inertia_start = 0.85  # Adjusted for balanced initial search\n        self.inertia_end = 0.3  # Modified to control convergence speed\n        self.mutation_prob = 0.15  # Lowered to reduce random disruptions\n        self.crossover_prob = 0.7  # Increased for better genetic diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.5)  # Adjusted for smoother transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedMultiStrategyQuantumSwarm", "description": "Enhanced Multi-strategy Quantum Swarm Optimization with adaptive strategies and dynamic parameter tuning for improved search efficiency.", "configspace": "", "generation": 92, "fitness": 0.36438674408367255, "feedback": "The algorithm EnhancedMultiStrategyQuantumSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "2003619d-3d9d-48ff-baa9-9ae4abadaa6a", "metadata": {"aucs": [0.8651031524060923, 0.8586898886066453, 0.8782423850824451, 0.8615495169670032, 0.8622158434788644, 0.8646810900227323, 0.8626018000833, 0.863744942492755, 0.8676304697455501, 0.7344143648640842, 0.7520792000000968, 0.7477196518434737, 0.7417645428513951, 0.7516573339253145, 0.7436399396901532, 0.7413995644993384, 0.7425913071268975, 0.7411078847771007, 0.603949900376085, 0.15535572924249008, 0.5307403406473663, 0.5865306857194202, 0.7015488504759478, 0.5494251374022913, 0.6805747249391234, 0.6772534428181063, 0.6695523346841328, 0.1538835216359652, 0.6473806189857079, 0.5728678031083448, 0.15016492534575487, 0.11010104225434858, 0.16611539463748248, 0.564280232357122, 0.16605281972875108, 0.16441912173958229, 0.9665322275608317, 0.9773837229854976, 0.9691952786489078, 0.9719585135741903, 0.9698113183188416, 0.9685257117036795, 0.9726871484402297, 0.9696516534626664, 0.9713699603072049, 0.5719789193240526, 0.6485222781883022, 0.6755326279298574, 0.3516281704729818, 0.699518920540666, 0.6353053021317703, 0.6072933067190984, 0.6002694121341388, 0.6054198813540632, 0.8443390997101892, 0.3220885687322228, 0.2257378100560421, 0.8231172327362536, 0.27521600060558193, 0.8195863666030841, 0.8143097423694519, 0.16578771070832676, 0.8220498611747993, 0.16637342476122607, 0.17304744275619777, 0.16661987403157252, 0.15710539729344475, 0.12840269017979777, 0.1792855369577181, 0.15894068202128198, 0.1542408954443243, 0.16321751655236671, 0.143333133767929, 0.1279352715383939, 0.1957613352872104, 0.15163933809077512, 0.1285469644944498, 0.1556988838894462, 0.20538610954186676, 0.19539485146077795, 0.11986957747525917, 0.025616205474838116, 9.999999999998899e-05, 9.999999999998899e-05, 0.04912981045239573, 0.05718190441190396, 9.999999999998899e-05, 0.017167433586923075, 0.014029925573019186, 0.040836815566892226, 0.16766469291051567, 0.044422798753795734, 0.1438329587927406, 0.060433666662900065, 0.04746716305977461, 0.025934865075346925, 0.14149219015107972, 0.13376391816062838, 0.05225698656045519, 0.04629020381020199, 0.11143703497813184, 0.052539153784306514, 0.09675965186601387, 0.07645982626183556, 0.07329956552475014, 0.2102171239883287, 0.06899946196757223, 0.27306361781285016, 0.08439033439711896, 0.13071934052332312, 0.12390111825571426, 0.17314956671186332, 0.07199424854265579, 0.11043709547006098, 0.10818380189318633, 0.04903108784407728, 0.08185824610870163, 0.49506174528730396, 0.5567596283822517, 0.5001665447822057, 0.5603408585472818, 0.6057570798031908, 0.5600689958582875, 0.6354321719041001, 0.5088963227744039, 0.5462420197954315, 0.1308002132304531, 0.13679440497807205, 0.138370634407614, 0.13507586883741296, 0.13203374405298418, 0.13126075039357143, 0.10878813575389357, 0.11075561817830604, 0.11459223494110571, 0.2717383664476506, 0.1880179702024538, 0.17767172716131174, 0.2019258077044267, 0.2855697810857415, 0.19145325557817283, 0.39704780389668826, 0.38214626985989464, 0.3349358380164532, 0.45101904607386656, 0.35277209560201417, 0.5845515662143925, 0.4043789118083274, 0.3755890490004655, 0.3939719078448961, 0.49864899074062297, 0.6973644216402551, 0.6776429131132272, 0.20704387707227612, 0.3556254308250927, 0.26397555101917025, 0.42250461299283704, 0.2308434487292399, 0.34785274041046643, 0.23215769021059918, 0.3763982913067193, 0.2758599763427291, 0.2469321902726923, 0.18668360981416632, 0.20330737522696507, 0.2467006210838787, 0.2123531453870865, 0.2227569450931658, 0.2131391362006908, 0.22024822415545842, 0.20589976222628537, 0.2055107822682778, 0.7163265718779293, 0.6885049155081198, 0.21688326657907586, 0.19463807012852474, 0.24488547534235494, 0.22081021379556265, 0.2457308064329402, 0.20622543363064472, 0.18568851575372558, 0.861714342506424, 0.15237690607696508, 0.8924403624288778, 0.1994569573717826, 0.19942962566437394, 0.8934545118100263, 0.805041914085032, 0.858726942269739, 0.4779447095894641, 0.21016352555037565, 0.8299115314782561, 0.2089713253592802, 0.15433551651322486, 0.16714898915919674, 0.4611401113429555, 0.15111547349807553, 0.4071321155921347, 0.1729818192467838, 0.1850652938910986, 0.20178861996844188, 0.18122541909335121, 0.1955867320197039, 0.18817490893281663, 0.2221258759657454, 0.18983869209996562, 0.18537426645744148, 0.08262579230152844, 0.10127806210826495, 0.08817972007693842, 0.08944900525886657, 0.09655499224141773, 0.1288274050498709, 0.09107232266590559, 0.10213483247956756, 0.09471173680183198]}, "mutation_prompt": null}
{"id": "d37fbe30-1d70-478a-b1ae-6979383c3378", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased for greater search space coverage\n        self.alpha_cognitive = 0.45  # Fine-tuned cognitive factor\n        self.alpha_social = 0.3  # Further reduced to maintain exploration\n        self.inertia_start = 0.85  # Adjusted for balanced initial search\n        self.inertia_end = 0.3  # Modified to control convergence speed\n        self.mutation_prob = 0.15  # Lowered to reduce random disruptions\n        self.crossover_prob = 0.7  # Increased for better genetic diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.5)  # Adjusted for smoother transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedMultiStrategyQuantumSwarm", "description": "Enhanced Multi-strategy Quantum Swarm Optimization with adaptive strategies and dynamic parameter tuning for improved search efficiency.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "metadata": {"aucs": [0.8651031524060923, 0.8586898886066453, 0.8782423850824451, 0.8615495169670032, 0.8622158434788644, 0.8646810900227323, 0.8626018000833, 0.863744942492755, 0.8676304697455501, 0.7344143648640842, 0.7520792000000968, 0.7477196518434737, 0.7417645428513951, 0.7516573339253145, 0.7436399396901532, 0.7413995644993384, 0.7425913071268975, 0.7411078847771007, 0.603949900376085, 0.15535572924249008, 0.5307403406473663, 0.5865306857194202, 0.7015488504759478, 0.5494251374022913, 0.6805747249391234, 0.6772534428181063, 0.6695523346841328, 0.1538835216359652, 0.6473806189857079, 0.5728678031083448, 0.15016492534575487, 0.11010104225434858, 0.16611539463748248, 0.564280232357122, 0.16605281972875108, 0.16441912173958229, 0.9665322275608317, 0.9773837229854976, 0.9691952786489078, 0.9719585135741903, 0.9698113183188416, 0.9685257117036795, 0.9726871484402297, 0.9696516534626664, 0.9713699603072049, 0.5719789193240526, 0.6485222781883022, 0.6755326279298574, 0.3516281704729818, 0.699518920540666, 0.6353053021317703, 0.6072933067190984, 0.6002694121341388, 0.6054198813540632, 0.8443390997101892, 0.3220885687322228, 0.2257378100560421, 0.8231172327362536, 0.27521600060558193, 0.8195863666030841, 0.8143097423694519, 0.16578771070832676, 0.8220498611747993, 0.16637342476122607, 0.17304744275619777, 0.16661987403157252, 0.15710539729344475, 0.12840269017979777, 0.1792855369577181, 0.15894068202128198, 0.1542408954443243, 0.16321751655236671, 0.143333133767929, 0.1279352715383939, 0.1957613352872104, 0.15163933809077512, 0.1285469644944498, 0.1556988838894462, 0.20538610954186676, 0.19539485146077795, 0.11986957747525917, 0.025616205474838116, 9.999999999998899e-05, 9.999999999998899e-05, 0.04912981045239573, 0.05718190441190396, 9.999999999998899e-05, 0.017167433586923075, 0.014029925573019186, 0.040836815566892226, 0.16766469291051567, 0.044422798753795734, 0.1438329587927406, 0.060433666662900065, 0.04746716305977461, 0.025934865075346925, 0.14149219015107972, 0.13376391816062838, 0.05225698656045519, 0.04629020381020199, 0.11143703497813184, 0.052539153784306514, 0.09675965186601387, 0.07645982626183556, 0.07329956552475014, 0.2102171239883287, 0.06899946196757223, 0.27306361781285016, 0.08439033439711896, 0.13071934052332312, 0.12390111825571426, 0.17314956671186332, 0.07199424854265579, 0.11043709547006098, 0.10818380189318633, 0.04903108784407728, 0.08185824610870163, 0.49506174528730396, 0.5567596283822517, 0.5001665447822057, 0.5603408585472818, 0.6057570798031908, 0.5600689958582875, 0.6354321719041001, 0.5088963227744039, 0.5462420197954315, 0.1308002132304531, 0.13679440497807205, 0.138370634407614, 0.13507586883741296, 0.13203374405298418, 0.13126075039357143, 0.10878813575389357, 0.11075561817830604, 0.11459223494110571, 0.2717383664476506, 0.1880179702024538, 0.17767172716131174, 0.2019258077044267, 0.2855697810857415, 0.19145325557817283, 0.39704780389668826, 0.38214626985989464, 0.3349358380164532, 0.45101904607386656, 0.35277209560201417, 0.5845515662143925, 0.4043789118083274, 0.3755890490004655, 0.3939719078448961, 0.49864899074062297, 0.6973644216402551, 0.6776429131132272, 0.20704387707227612, 0.3556254308250927, 0.26397555101917025, 0.42250461299283704, 0.2308434487292399, 0.34785274041046643, 0.23215769021059918, 0.3763982913067193, 0.2758599763427291, 0.2469321902726923, 0.18668360981416632, 0.20330737522696507, 0.2467006210838787, 0.2123531453870865, 0.2227569450931658, 0.2131391362006908, 0.22024822415545842, 0.20589976222628537, 0.2055107822682778, 0.7163265718779293, 0.6885049155081198, 0.21688326657907586, 0.19463807012852474, 0.24488547534235494, 0.22081021379556265, 0.2457308064329402, 0.20622543363064472, 0.18568851575372558, 0.861714342506424, 0.15237690607696508, 0.8924403624288778, 0.1994569573717826, 0.19942962566437394, 0.8934545118100263, 0.805041914085032, 0.858726942269739, 0.4779447095894641, 0.21016352555037565, 0.8299115314782561, 0.2089713253592802, 0.15433551651322486, 0.16714898915919674, 0.4611401113429555, 0.15111547349807553, 0.4071321155921347, 0.1729818192467838, 0.1850652938910986, 0.20178861996844188, 0.18122541909335121, 0.1955867320197039, 0.18817490893281663, 0.2221258759657454, 0.18983869209996562, 0.18537426645744148, 0.08262579230152844, 0.10127806210826495, 0.08817972007693842, 0.08944900525886657, 0.09655499224141773, 0.1288274050498709, 0.09107232266590559, 0.10213483247956756, 0.09471173680183198]}, "mutation_prompt": null}
{"id": "0919d957-4de1-4954-aef6-ebb4546a0fb1", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased for greater search space coverage\n        self.alpha_cognitive = 0.45  # Fine-tuned cognitive factor\n        self.alpha_social = 0.3  # Further reduced to maintain exploration\n        self.inertia_start = 0.85  # Adjusted for balanced initial search\n        self.inertia_end = 0.3  # Modified to control convergence speed\n        self.mutation_prob = 0.15  # Lowered to reduce random disruptions\n        self.crossover_prob = 0.7  # Increased for better genetic diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.5)  # Adjusted for smoother transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedMultiStrategyQuantumSwarm", "description": "Enhanced Multi-strategy Quantum Swarm Optimization with adaptive strategies and dynamic parameter tuning for improved search efficiency.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "metadata": {"aucs": [0.8651031524060923, 0.8586898886066453, 0.8782423850824451, 0.8615495169670032, 0.8622158434788644, 0.8646810900227323, 0.8626018000833, 0.863744942492755, 0.8676304697455501, 0.7344143648640842, 0.7520792000000968, 0.7477196518434737, 0.7417645428513951, 0.7516573339253145, 0.7436399396901532, 0.7413995644993384, 0.7425913071268975, 0.7411078847771007, 0.603949900376085, 0.15535572924249008, 0.5307403406473663, 0.5865306857194202, 0.7015488504759478, 0.5494251374022913, 0.6805747249391234, 0.6772534428181063, 0.6695523346841328, 0.1538835216359652, 0.6473806189857079, 0.5728678031083448, 0.15016492534575487, 0.11010104225434858, 0.16611539463748248, 0.564280232357122, 0.16605281972875108, 0.16441912173958229, 0.9665322275608317, 0.9773837229854976, 0.9691952786489078, 0.9719585135741903, 0.9698113183188416, 0.9685257117036795, 0.9726871484402297, 0.9696516534626664, 0.9713699603072049, 0.5719789193240526, 0.6485222781883022, 0.6755326279298574, 0.3516281704729818, 0.699518920540666, 0.6353053021317703, 0.6072933067190984, 0.6002694121341388, 0.6054198813540632, 0.8443390997101892, 0.3220885687322228, 0.2257378100560421, 0.8231172327362536, 0.27521600060558193, 0.8195863666030841, 0.8143097423694519, 0.16578771070832676, 0.8220498611747993, 0.16637342476122607, 0.17304744275619777, 0.16661987403157252, 0.15710539729344475, 0.12840269017979777, 0.1792855369577181, 0.15894068202128198, 0.1542408954443243, 0.16321751655236671, 0.143333133767929, 0.1279352715383939, 0.1957613352872104, 0.15163933809077512, 0.1285469644944498, 0.1556988838894462, 0.20538610954186676, 0.19539485146077795, 0.11986957747525917, 0.025616205474838116, 9.999999999998899e-05, 9.999999999998899e-05, 0.04912981045239573, 0.05718190441190396, 9.999999999998899e-05, 0.017167433586923075, 0.014029925573019186, 0.040836815566892226, 0.16766469291051567, 0.044422798753795734, 0.1438329587927406, 0.060433666662900065, 0.04746716305977461, 0.025934865075346925, 0.14149219015107972, 0.13376391816062838, 0.05225698656045519, 0.04629020381020199, 0.11143703497813184, 0.052539153784306514, 0.09675965186601387, 0.07645982626183556, 0.07329956552475014, 0.2102171239883287, 0.06899946196757223, 0.27306361781285016, 0.08439033439711896, 0.13071934052332312, 0.12390111825571426, 0.17314956671186332, 0.07199424854265579, 0.11043709547006098, 0.10818380189318633, 0.04903108784407728, 0.08185824610870163, 0.49506174528730396, 0.5567596283822517, 0.5001665447822057, 0.5603408585472818, 0.6057570798031908, 0.5600689958582875, 0.6354321719041001, 0.5088963227744039, 0.5462420197954315, 0.1308002132304531, 0.13679440497807205, 0.138370634407614, 0.13507586883741296, 0.13203374405298418, 0.13126075039357143, 0.10878813575389357, 0.11075561817830604, 0.11459223494110571, 0.2717383664476506, 0.1880179702024538, 0.17767172716131174, 0.2019258077044267, 0.2855697810857415, 0.19145325557817283, 0.39704780389668826, 0.38214626985989464, 0.3349358380164532, 0.45101904607386656, 0.35277209560201417, 0.5845515662143925, 0.4043789118083274, 0.3755890490004655, 0.3939719078448961, 0.49864899074062297, 0.6973644216402551, 0.6776429131132272, 0.20704387707227612, 0.3556254308250927, 0.26397555101917025, 0.42250461299283704, 0.2308434487292399, 0.34785274041046643, 0.23215769021059918, 0.3763982913067193, 0.2758599763427291, 0.2469321902726923, 0.18668360981416632, 0.20330737522696507, 0.2467006210838787, 0.2123531453870865, 0.2227569450931658, 0.2131391362006908, 0.22024822415545842, 0.20589976222628537, 0.2055107822682778, 0.7163265718779293, 0.6885049155081198, 0.21688326657907586, 0.19463807012852474, 0.24488547534235494, 0.22081021379556265, 0.2457308064329402, 0.20622543363064472, 0.18568851575372558, 0.861714342506424, 0.15237690607696508, 0.8924403624288778, 0.1994569573717826, 0.19942962566437394, 0.8934545118100263, 0.805041914085032, 0.858726942269739, 0.4779447095894641, 0.21016352555037565, 0.8299115314782561, 0.2089713253592802, 0.15433551651322486, 0.16714898915919674, 0.4611401113429555, 0.15111547349807553, 0.4071321155921347, 0.1729818192467838, 0.1850652938910986, 0.20178861996844188, 0.18122541909335121, 0.1955867320197039, 0.18817490893281663, 0.2221258759657454, 0.18983869209996562, 0.18537426645744148, 0.08262579230152844, 0.10127806210826495, 0.08817972007693842, 0.08944900525886657, 0.09655499224141773, 0.1288274050498709, 0.09107232266590559, 0.10213483247956756, 0.09471173680183198]}, "mutation_prompt": null}
{"id": "d838bed8-8a1f-45e3-8bc8-4abedb6bb5c3", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased for greater search space coverage\n        self.alpha_cognitive = 0.45  # Fine-tuned cognitive factor\n        self.alpha_social = 0.3  # Further reduced to maintain exploration\n        self.inertia_start = 0.85  # Adjusted for balanced initial search\n        self.inertia_end = 0.3  # Modified to control convergence speed\n        self.mutation_prob = 0.15  # Lowered to reduce random disruptions\n        self.crossover_prob = 0.7  # Increased for better genetic diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.5)  # Adjusted for smoother transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedMultiStrategyQuantumSwarm", "description": "Enhanced Multi-strategy Quantum Swarm Optimization with adaptive strategies and dynamic parameter tuning for improved search efficiency.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "metadata": {"aucs": [0.8651031524060923, 0.8586898886066453, 0.8782423850824451, 0.8615495169670032, 0.8622158434788644, 0.8646810900227323, 0.8626018000833, 0.863744942492755, 0.8676304697455501, 0.7344143648640842, 0.7520792000000968, 0.7477196518434737, 0.7417645428513951, 0.7516573339253145, 0.7436399396901532, 0.7413995644993384, 0.7425913071268975, 0.7411078847771007, 0.603949900376085, 0.15535572924249008, 0.5307403406473663, 0.5865306857194202, 0.7015488504759478, 0.5494251374022913, 0.6805747249391234, 0.6772534428181063, 0.6695523346841328, 0.1538835216359652, 0.6473806189857079, 0.5728678031083448, 0.15016492534575487, 0.11010104225434858, 0.16611539463748248, 0.564280232357122, 0.16605281972875108, 0.16441912173958229, 0.9665322275608317, 0.9773837229854976, 0.9691952786489078, 0.9719585135741903, 0.9698113183188416, 0.9685257117036795, 0.9726871484402297, 0.9696516534626664, 0.9713699603072049, 0.5719789193240526, 0.6485222781883022, 0.6755326279298574, 0.3516281704729818, 0.699518920540666, 0.6353053021317703, 0.6072933067190984, 0.6002694121341388, 0.6054198813540632, 0.8443390997101892, 0.3220885687322228, 0.2257378100560421, 0.8231172327362536, 0.27521600060558193, 0.8195863666030841, 0.8143097423694519, 0.16578771070832676, 0.8220498611747993, 0.16637342476122607, 0.17304744275619777, 0.16661987403157252, 0.15710539729344475, 0.12840269017979777, 0.1792855369577181, 0.15894068202128198, 0.1542408954443243, 0.16321751655236671, 0.143333133767929, 0.1279352715383939, 0.1957613352872104, 0.15163933809077512, 0.1285469644944498, 0.1556988838894462, 0.20538610954186676, 0.19539485146077795, 0.11986957747525917, 0.025616205474838116, 9.999999999998899e-05, 9.999999999998899e-05, 0.04912981045239573, 0.05718190441190396, 9.999999999998899e-05, 0.017167433586923075, 0.014029925573019186, 0.040836815566892226, 0.16766469291051567, 0.044422798753795734, 0.1438329587927406, 0.060433666662900065, 0.04746716305977461, 0.025934865075346925, 0.14149219015107972, 0.13376391816062838, 0.05225698656045519, 0.04629020381020199, 0.11143703497813184, 0.052539153784306514, 0.09675965186601387, 0.07645982626183556, 0.07329956552475014, 0.2102171239883287, 0.06899946196757223, 0.27306361781285016, 0.08439033439711896, 0.13071934052332312, 0.12390111825571426, 0.17314956671186332, 0.07199424854265579, 0.11043709547006098, 0.10818380189318633, 0.04903108784407728, 0.08185824610870163, 0.49506174528730396, 0.5567596283822517, 0.5001665447822057, 0.5603408585472818, 0.6057570798031908, 0.5600689958582875, 0.6354321719041001, 0.5088963227744039, 0.5462420197954315, 0.1308002132304531, 0.13679440497807205, 0.138370634407614, 0.13507586883741296, 0.13203374405298418, 0.13126075039357143, 0.10878813575389357, 0.11075561817830604, 0.11459223494110571, 0.2717383664476506, 0.1880179702024538, 0.17767172716131174, 0.2019258077044267, 0.2855697810857415, 0.19145325557817283, 0.39704780389668826, 0.38214626985989464, 0.3349358380164532, 0.45101904607386656, 0.35277209560201417, 0.5845515662143925, 0.4043789118083274, 0.3755890490004655, 0.3939719078448961, 0.49864899074062297, 0.6973644216402551, 0.6776429131132272, 0.20704387707227612, 0.3556254308250927, 0.26397555101917025, 0.42250461299283704, 0.2308434487292399, 0.34785274041046643, 0.23215769021059918, 0.3763982913067193, 0.2758599763427291, 0.2469321902726923, 0.18668360981416632, 0.20330737522696507, 0.2467006210838787, 0.2123531453870865, 0.2227569450931658, 0.2131391362006908, 0.22024822415545842, 0.20589976222628537, 0.2055107822682778, 0.7163265718779293, 0.6885049155081198, 0.21688326657907586, 0.19463807012852474, 0.24488547534235494, 0.22081021379556265, 0.2457308064329402, 0.20622543363064472, 0.18568851575372558, 0.861714342506424, 0.15237690607696508, 0.8924403624288778, 0.1994569573717826, 0.19942962566437394, 0.8934545118100263, 0.805041914085032, 0.858726942269739, 0.4779447095894641, 0.21016352555037565, 0.8299115314782561, 0.2089713253592802, 0.15433551651322486, 0.16714898915919674, 0.4611401113429555, 0.15111547349807553, 0.4071321155921347, 0.1729818192467838, 0.1850652938910986, 0.20178861996844188, 0.18122541909335121, 0.1955867320197039, 0.18817490893281663, 0.2221258759657454, 0.18983869209996562, 0.18537426645744148, 0.08262579230152844, 0.10127806210826495, 0.08817972007693842, 0.08944900525886657, 0.09655499224141773, 0.1288274050498709, 0.09107232266590559, 0.10213483247956756, 0.09471173680183198]}, "mutation_prompt": null}
{"id": "ce1229b6-a34c-463a-8c01-aaa0ba388c55", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased for greater search space coverage\n        self.alpha_cognitive = 0.45  # Fine-tuned cognitive factor\n        self.alpha_social = 0.3  # Further reduced to maintain exploration\n        self.inertia_start = 0.85  # Adjusted for balanced initial search\n        self.inertia_end = 0.3  # Modified to control convergence speed\n        self.mutation_prob = 0.15  # Lowered to reduce random disruptions\n        self.crossover_prob = 0.7  # Increased for better genetic diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.5)  # Adjusted for smoother transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedMultiStrategyQuantumSwarm", "description": "Enhanced Multi-strategy Quantum Swarm Optimization with adaptive strategies and dynamic parameter tuning for improved search efficiency.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "metadata": {"aucs": [0.8651031524060923, 0.8586898886066453, 0.8782423850824451, 0.8615495169670032, 0.8622158434788644, 0.8646810900227323, 0.8626018000833, 0.863744942492755, 0.8676304697455501, 0.7344143648640842, 0.7520792000000968, 0.7477196518434737, 0.7417645428513951, 0.7516573339253145, 0.7436399396901532, 0.7413995644993384, 0.7425913071268975, 0.7411078847771007, 0.603949900376085, 0.15535572924249008, 0.5307403406473663, 0.5865306857194202, 0.7015488504759478, 0.5494251374022913, 0.6805747249391234, 0.6772534428181063, 0.6695523346841328, 0.1538835216359652, 0.6473806189857079, 0.5728678031083448, 0.15016492534575487, 0.11010104225434858, 0.16611539463748248, 0.564280232357122, 0.16605281972875108, 0.16441912173958229, 0.9665322275608317, 0.9773837229854976, 0.9691952786489078, 0.9719585135741903, 0.9698113183188416, 0.9685257117036795, 0.9726871484402297, 0.9696516534626664, 0.9713699603072049, 0.5719789193240526, 0.6485222781883022, 0.6755326279298574, 0.3516281704729818, 0.699518920540666, 0.6353053021317703, 0.6072933067190984, 0.6002694121341388, 0.6054198813540632, 0.8443390997101892, 0.3220885687322228, 0.2257378100560421, 0.8231172327362536, 0.27521600060558193, 0.8195863666030841, 0.8143097423694519, 0.16578771070832676, 0.8220498611747993, 0.16637342476122607, 0.17304744275619777, 0.16661987403157252, 0.15710539729344475, 0.12840269017979777, 0.1792855369577181, 0.15894068202128198, 0.1542408954443243, 0.16321751655236671, 0.143333133767929, 0.1279352715383939, 0.1957613352872104, 0.15163933809077512, 0.1285469644944498, 0.1556988838894462, 0.20538610954186676, 0.19539485146077795, 0.11986957747525917, 0.025616205474838116, 9.999999999998899e-05, 9.999999999998899e-05, 0.04912981045239573, 0.05718190441190396, 9.999999999998899e-05, 0.017167433586923075, 0.014029925573019186, 0.040836815566892226, 0.16766469291051567, 0.044422798753795734, 0.1438329587927406, 0.060433666662900065, 0.04746716305977461, 0.025934865075346925, 0.14149219015107972, 0.13376391816062838, 0.05225698656045519, 0.04629020381020199, 0.11143703497813184, 0.052539153784306514, 0.09675965186601387, 0.07645982626183556, 0.07329956552475014, 0.2102171239883287, 0.06899946196757223, 0.27306361781285016, 0.08439033439711896, 0.13071934052332312, 0.12390111825571426, 0.17314956671186332, 0.07199424854265579, 0.11043709547006098, 0.10818380189318633, 0.04903108784407728, 0.08185824610870163, 0.49506174528730396, 0.5567596283822517, 0.5001665447822057, 0.5603408585472818, 0.6057570798031908, 0.5600689958582875, 0.6354321719041001, 0.5088963227744039, 0.5462420197954315, 0.1308002132304531, 0.13679440497807205, 0.138370634407614, 0.13507586883741296, 0.13203374405298418, 0.13126075039357143, 0.10878813575389357, 0.11075561817830604, 0.11459223494110571, 0.2717383664476506, 0.1880179702024538, 0.17767172716131174, 0.2019258077044267, 0.2855697810857415, 0.19145325557817283, 0.39704780389668826, 0.38214626985989464, 0.3349358380164532, 0.45101904607386656, 0.35277209560201417, 0.5845515662143925, 0.4043789118083274, 0.3755890490004655, 0.3939719078448961, 0.49864899074062297, 0.6973644216402551, 0.6776429131132272, 0.20704387707227612, 0.3556254308250927, 0.26397555101917025, 0.42250461299283704, 0.2308434487292399, 0.34785274041046643, 0.23215769021059918, 0.3763982913067193, 0.2758599763427291, 0.2469321902726923, 0.18668360981416632, 0.20330737522696507, 0.2467006210838787, 0.2123531453870865, 0.2227569450931658, 0.2131391362006908, 0.22024822415545842, 0.20589976222628537, 0.2055107822682778, 0.7163265718779293, 0.6885049155081198, 0.21688326657907586, 0.19463807012852474, 0.24488547534235494, 0.22081021379556265, 0.2457308064329402, 0.20622543363064472, 0.18568851575372558, 0.861714342506424, 0.15237690607696508, 0.8924403624288778, 0.1994569573717826, 0.19942962566437394, 0.8934545118100263, 0.805041914085032, 0.858726942269739, 0.4779447095894641, 0.21016352555037565, 0.8299115314782561, 0.2089713253592802, 0.15433551651322486, 0.16714898915919674, 0.4611401113429555, 0.15111547349807553, 0.4071321155921347, 0.1729818192467838, 0.1850652938910986, 0.20178861996844188, 0.18122541909335121, 0.1955867320197039, 0.18817490893281663, 0.2221258759657454, 0.18983869209996562, 0.18537426645744148, 0.08262579230152844, 0.10127806210826495, 0.08817972007693842, 0.08944900525886657, 0.09655499224141773, 0.1288274050498709, 0.09107232266590559, 0.10213483247956756, 0.09471173680183198]}, "mutation_prompt": null}
{"id": "d61e55bc-adb8-4693-a915-f79059105c9b", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased for greater search space coverage\n        self.alpha_cognitive = 0.45  # Fine-tuned cognitive factor\n        self.alpha_social = 0.3  # Further reduced to maintain exploration\n        self.inertia_start = 0.85  # Adjusted for balanced initial search\n        self.inertia_end = 0.3  # Modified to control convergence speed\n        self.mutation_prob = 0.15  # Lowered to reduce random disruptions\n        self.crossover_prob = 0.7  # Increased for better genetic diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.5)  # Adjusted for smoother transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedMultiStrategyQuantumSwarm", "description": "Enhanced Multi-strategy Quantum Swarm Optimization with adaptive strategies and dynamic parameter tuning for improved search efficiency.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "metadata": {"aucs": [0.8651031524060923, 0.8586898886066453, 0.8782423850824451, 0.8615495169670032, 0.8622158434788644, 0.8646810900227323, 0.8626018000833, 0.863744942492755, 0.8676304697455501, 0.7344143648640842, 0.7520792000000968, 0.7477196518434737, 0.7417645428513951, 0.7516573339253145, 0.7436399396901532, 0.7413995644993384, 0.7425913071268975, 0.7411078847771007, 0.603949900376085, 0.15535572924249008, 0.5307403406473663, 0.5865306857194202, 0.7015488504759478, 0.5494251374022913, 0.6805747249391234, 0.6772534428181063, 0.6695523346841328, 0.1538835216359652, 0.6473806189857079, 0.5728678031083448, 0.15016492534575487, 0.11010104225434858, 0.16611539463748248, 0.564280232357122, 0.16605281972875108, 0.16441912173958229, 0.9665322275608317, 0.9773837229854976, 0.9691952786489078, 0.9719585135741903, 0.9698113183188416, 0.9685257117036795, 0.9726871484402297, 0.9696516534626664, 0.9713699603072049, 0.5719789193240526, 0.6485222781883022, 0.6755326279298574, 0.3516281704729818, 0.699518920540666, 0.6353053021317703, 0.6072933067190984, 0.6002694121341388, 0.6054198813540632, 0.8443390997101892, 0.3220885687322228, 0.2257378100560421, 0.8231172327362536, 0.27521600060558193, 0.8195863666030841, 0.8143097423694519, 0.16578771070832676, 0.8220498611747993, 0.16637342476122607, 0.17304744275619777, 0.16661987403157252, 0.15710539729344475, 0.12840269017979777, 0.1792855369577181, 0.15894068202128198, 0.1542408954443243, 0.16321751655236671, 0.143333133767929, 0.1279352715383939, 0.1957613352872104, 0.15163933809077512, 0.1285469644944498, 0.1556988838894462, 0.20538610954186676, 0.19539485146077795, 0.11986957747525917, 0.025616205474838116, 9.999999999998899e-05, 9.999999999998899e-05, 0.04912981045239573, 0.05718190441190396, 9.999999999998899e-05, 0.017167433586923075, 0.014029925573019186, 0.040836815566892226, 0.16766469291051567, 0.044422798753795734, 0.1438329587927406, 0.060433666662900065, 0.04746716305977461, 0.025934865075346925, 0.14149219015107972, 0.13376391816062838, 0.05225698656045519, 0.04629020381020199, 0.11143703497813184, 0.052539153784306514, 0.09675965186601387, 0.07645982626183556, 0.07329956552475014, 0.2102171239883287, 0.06899946196757223, 0.27306361781285016, 0.08439033439711896, 0.13071934052332312, 0.12390111825571426, 0.17314956671186332, 0.07199424854265579, 0.11043709547006098, 0.10818380189318633, 0.04903108784407728, 0.08185824610870163, 0.49506174528730396, 0.5567596283822517, 0.5001665447822057, 0.5603408585472818, 0.6057570798031908, 0.5600689958582875, 0.6354321719041001, 0.5088963227744039, 0.5462420197954315, 0.1308002132304531, 0.13679440497807205, 0.138370634407614, 0.13507586883741296, 0.13203374405298418, 0.13126075039357143, 0.10878813575389357, 0.11075561817830604, 0.11459223494110571, 0.2717383664476506, 0.1880179702024538, 0.17767172716131174, 0.2019258077044267, 0.2855697810857415, 0.19145325557817283, 0.39704780389668826, 0.38214626985989464, 0.3349358380164532, 0.45101904607386656, 0.35277209560201417, 0.5845515662143925, 0.4043789118083274, 0.3755890490004655, 0.3939719078448961, 0.49864899074062297, 0.6973644216402551, 0.6776429131132272, 0.20704387707227612, 0.3556254308250927, 0.26397555101917025, 0.42250461299283704, 0.2308434487292399, 0.34785274041046643, 0.23215769021059918, 0.3763982913067193, 0.2758599763427291, 0.2469321902726923, 0.18668360981416632, 0.20330737522696507, 0.2467006210838787, 0.2123531453870865, 0.2227569450931658, 0.2131391362006908, 0.22024822415545842, 0.20589976222628537, 0.2055107822682778, 0.7163265718779293, 0.6885049155081198, 0.21688326657907586, 0.19463807012852474, 0.24488547534235494, 0.22081021379556265, 0.2457308064329402, 0.20622543363064472, 0.18568851575372558, 0.861714342506424, 0.15237690607696508, 0.8924403624288778, 0.1994569573717826, 0.19942962566437394, 0.8934545118100263, 0.805041914085032, 0.858726942269739, 0.4779447095894641, 0.21016352555037565, 0.8299115314782561, 0.2089713253592802, 0.15433551651322486, 0.16714898915919674, 0.4611401113429555, 0.15111547349807553, 0.4071321155921347, 0.1729818192467838, 0.1850652938910986, 0.20178861996844188, 0.18122541909335121, 0.1955867320197039, 0.18817490893281663, 0.2221258759657454, 0.18983869209996562, 0.18537426645744148, 0.08262579230152844, 0.10127806210826495, 0.08817972007693842, 0.08944900525886657, 0.09655499224141773, 0.1288274050498709, 0.09107232266590559, 0.10213483247956756, 0.09471173680183198]}, "mutation_prompt": null}
{"id": "5210c5d6-3167-4941-b9f0-bf0efa355667", "solution": "import numpy as np\n\nclass OptimizedQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Adjusted to increase diversity\n        self.alpha_cognitive = 0.5  # Improved cognitive adjustment\n        self.alpha_social = 0.25  # Refined for precise exploration\n        self.inertia_start = 0.9  # Optimized initial inertia\n        self.inertia_end = 0.35  # Adjusted to control convergence\n        self.mutation_prob = 0.1  # Fine-tuned mutation probability\n        self.crossover_prob = 0.65  # Balanced crossover rate\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.8)  # More gradual transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.4, 0.4, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] = np.clip(particle_positions[i] + particle_velocities[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "OptimizedQuantumSwarm", "description": "Optimized Quantum Swarm with dynamic adaptation of strategies and refined parameters for enhanced convergence.", "configspace": "", "generation": 98, "fitness": 0.3319545416807654, "feedback": "The algorithm OptimizedQuantumSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "metadata": {"aucs": [0.8139722996276744, 0.8085343437303862, 0.8048508390068216, 0.8142323127621783, 0.823253610365595, 0.8075297824078003, 0.8165965865820015, 0.8156039697597901, 0.8175100467140953, 0.6551014544669609, 0.6323750761816208, 0.6730212971949086, 0.6392723808017584, 0.6481984254232855, 0.6458015968889212, 0.6513587051512202, 0.6338635954633245, 0.6587182044220787, 0.14372705221007764, 0.148909934586007, 0.1634389858987979, 0.35268292737745033, 0.4826645848847717, 0.5107216635311855, 0.43046757514639233, 0.5160932090174561, 0.4133846842602825, 0.15172900508884524, 0.24243977531421013, 0.47813991607545014, 0.2915290660984349, 0.1596259200649054, 0.310129757990835, 0.1555491300462556, 0.15625554465635827, 0.15193641485670528, 0.9587815407005577, 0.9658591995652255, 0.9620625827645592, 0.9627743649177777, 0.9683038716412004, 0.9688610682299684, 0.9682472650927363, 0.9704189028685597, 0.9652376493419805, 0.5232906894437857, 0.5001916470386305, 0.485573419317753, 0.5419069974059072, 0.5862068306871333, 0.4967253651412473, 0.6097161594437913, 0.521363682284901, 0.5398024029104616, 0.3424272296450297, 0.7397826524499722, 0.2165707761901886, 0.26667085723896666, 0.20869822108570502, 0.7744215415679165, 0.6524860751943463, 0.658019817964848, 0.17693601739421538, 0.17788442731643483, 0.1658110215981644, 0.1408822778678297, 0.30512758775666526, 0.15944908076596076, 0.1279529806526447, 0.1688198458664001, 0.16661980251794106, 0.17115007898748513, 0.1493897437446059, 0.16433870595355982, 0.21497253062745292, 0.12394815568882533, 0.20857603695688953, 0.1538883791571165, 0.18376692419160945, 0.18756520245001107, 0.14733272267211195, 0.02529558812263344, 0.05164966058893772, 0.04033996382160099, 9.999999999998899e-05, 0.00875908105636003, 9.999999999998899e-05, 9.999999999998899e-05, 0.01583006065779269, 0.06723178813712216, 0.09600387608535221, 0.06554931583449164, 0.08555710298896335, 0.1048572844150173, 0.017880042915642713, 0.09420209514178257, 0.05394070632459447, 0.12079311026799733, 0.08616273120941753, 0.08677306297452014, 0.028562521179394618, 0.11003309548130802, 0.09392381958608709, 0.11064295744613772, 0.06817846072804767, 0.08497363222675158, 0.28967663560520096, 0.12230194898030589, 0.14220683927083888, 0.08682113939154223, 0.09721398529550207, 0.21378028549580608, 0.14542152664283492, 0.11964154678842842, 0.2026726498285295, 0.13165380552081873, 0.07740604001556695, 0.5487019939782363, 0.5259354706277721, 0.5051271684751482, 0.5670489908447303, 0.512054672200404, 0.4994015632461757, 0.5380278226692401, 0.5627644942645997, 0.5471238617226881, 0.12515127094003764, 0.11068868793119402, 0.09595870923403671, 0.1275580506856937, 0.09806820222855528, 0.11923886994551247, 0.12348228023294339, 0.12649658449158885, 0.11230040412028908, 0.26057986846365033, 0.1565547769108847, 0.14892562091764394, 0.19215536267862254, 0.277887658283835, 0.16033061756802358, 0.18985415811854733, 0.23158226415130856, 0.1633123373087788, 0.34716773363032116, 0.39013969880442045, 0.41288564855632603, 0.4567594252499497, 0.39445826285959473, 0.44637338983030517, 0.5334462701934577, 0.5011379815058066, 0.5029434779128965, 0.2691388063355442, 0.27929223212429966, 0.27277241740786407, 0.29497187732106867, 0.17742995305018017, 0.2351329949611447, 0.24381215544681134, 0.4335076274808395, 0.2917496598281375, 0.23039748199920884, 0.19798234102220413, 0.2025379777268288, 0.20746676721115465, 0.20005238915989876, 0.20761381307230398, 0.20818118650516038, 0.21370597727461504, 0.2104200385140892, 0.23193339421500736, 0.22593875421055187, 0.2374203692787591, 0.2179410828626387, 0.5848987371018473, 0.5651596970587381, 0.6395157523955988, 0.6015929731690055, 0.23359557035412193, 0.19465547089900292, 0.17359895901618072, 0.17324384495920808, 0.8310927894846658, 0.7743340113666997, 0.7942312013416661, 0.18171611947808108, 0.8132877322746459, 0.20560824910325515, 0.7247081866398717, 0.20861114167379524, 0.18738781798232174, 0.5170774130050468, 0.16628281823404067, 0.1986542561049921, 0.17403060133797377, 0.3983013201100837, 0.7097008349698732, 0.2101259051392942, 0.17299790095827516, 0.1835264064411839, 0.18100290244628459, 0.184560828949085, 0.19503412645752682, 0.192458164373708, 0.1701479256948627, 0.18631154203837907, 0.08408743101143756, 0.0934460300812956, 0.09672765058459865, 0.09379081324460004, 0.09541373916185936, 0.13663196107607978, 0.0945475844928062, 0.08055465106452553, 0.08423862759803036]}, "mutation_prompt": null}
{"id": "4c87dd40-6d7e-4af7-a4cb-69cdff5d28c1", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40  # Increased for greater search space coverage\n        self.alpha_cognitive = 0.45  # Fine-tuned cognitive factor\n        self.alpha_social = 0.3  # Further reduced to maintain exploration\n        self.inertia_start = 0.85  # Adjusted for balanced initial search\n        self.inertia_end = 0.3  # Modified to control convergence speed\n        self.mutation_prob = 0.15  # Lowered to reduce random disruptions\n        self.crossover_prob = 0.7  # Increased for better genetic diversity\n\n    def quantum_update(self, position, global_best, iteration, max_iterations):\n        sigma = np.abs(global_best - position) * (1 - (iteration / max_iterations) ** 1.5)  # Adjusted for smoother transition\n        return np.random.normal(position, sigma)\n\n    def __call__(self, func):\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        particle_velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_values = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        evaluations = self.swarm_size\n        iteration = 0\n        max_iterations = self.budget // self.swarm_size\n\n        while evaluations < self.budget:\n            inertia_weight = self.inertia_end + (self.inertia_start - self.inertia_end) * ((self.budget - evaluations) / self.budget)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                rand_cognitive = np.random.rand(self.dim)\n                rand_social = np.random.rand(self.dim)\n                particle_velocities[i] = (inertia_weight * particle_velocities[i]\n                                         + self.alpha_cognitive * rand_cognitive * (personal_best_positions[i] - particle_positions[i])\n                                         + self.alpha_social * rand_social * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    particle_positions[i] = self.quantum_update(particle_positions[i], global_best_position, iteration, max_iterations)\n                    particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.crossover_prob:\n                    partner_idx = np.random.choice(self.swarm_size)\n                    rand_crossover = np.random.rand(self.dim) < 0.5\n                    particle_positions[i][rand_crossover] = personal_best_positions[partner_idx][rand_crossover]\n\n                current_value = func(particle_positions[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = np.copy(particle_positions[i])\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = np.copy(particle_positions[i])\n\n            iteration += 1\n\n        return global_best_position, global_best_value", "name": "EnhancedMultiStrategyQuantumSwarm", "description": "Enhanced Multi-strategy Quantum Swarm Optimization with adaptive strategies and dynamic parameter tuning for improved search efficiency.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3662cf65-e2f1-48ef-ab1a-49279f0245c8", "metadata": {"aucs": [0.8651031524060923, 0.8586898886066453, 0.8782423850824451, 0.8615495169670032, 0.8622158434788644, 0.8646810900227323, 0.8626018000833, 0.863744942492755, 0.8676304697455501, 0.7344143648640842, 0.7520792000000968, 0.7477196518434737, 0.7417645428513951, 0.7516573339253145, 0.7436399396901532, 0.7413995644993384, 0.7425913071268975, 0.7411078847771007, 0.603949900376085, 0.15535572924249008, 0.5307403406473663, 0.5865306857194202, 0.7015488504759478, 0.5494251374022913, 0.6805747249391234, 0.6772534428181063, 0.6695523346841328, 0.1538835216359652, 0.6473806189857079, 0.5728678031083448, 0.15016492534575487, 0.11010104225434858, 0.16611539463748248, 0.564280232357122, 0.16605281972875108, 0.16441912173958229, 0.9665322275608317, 0.9773837229854976, 0.9691952786489078, 0.9719585135741903, 0.9698113183188416, 0.9685257117036795, 0.9726871484402297, 0.9696516534626664, 0.9713699603072049, 0.5719789193240526, 0.6485222781883022, 0.6755326279298574, 0.3516281704729818, 0.699518920540666, 0.6353053021317703, 0.6072933067190984, 0.6002694121341388, 0.6054198813540632, 0.8443390997101892, 0.3220885687322228, 0.2257378100560421, 0.8231172327362536, 0.27521600060558193, 0.8195863666030841, 0.8143097423694519, 0.16578771070832676, 0.8220498611747993, 0.16637342476122607, 0.17304744275619777, 0.16661987403157252, 0.15710539729344475, 0.12840269017979777, 0.1792855369577181, 0.15894068202128198, 0.1542408954443243, 0.16321751655236671, 0.143333133767929, 0.1279352715383939, 0.1957613352872104, 0.15163933809077512, 0.1285469644944498, 0.1556988838894462, 0.20538610954186676, 0.19539485146077795, 0.11986957747525917, 0.025616205474838116, 9.999999999998899e-05, 9.999999999998899e-05, 0.04912981045239573, 0.05718190441190396, 9.999999999998899e-05, 0.017167433586923075, 0.014029925573019186, 0.040836815566892226, 0.16766469291051567, 0.044422798753795734, 0.1438329587927406, 0.060433666662900065, 0.04746716305977461, 0.025934865075346925, 0.14149219015107972, 0.13376391816062838, 0.05225698656045519, 0.04629020381020199, 0.11143703497813184, 0.052539153784306514, 0.09675965186601387, 0.07645982626183556, 0.07329956552475014, 0.2102171239883287, 0.06899946196757223, 0.27306361781285016, 0.08439033439711896, 0.13071934052332312, 0.12390111825571426, 0.17314956671186332, 0.07199424854265579, 0.11043709547006098, 0.10818380189318633, 0.04903108784407728, 0.08185824610870163, 0.49506174528730396, 0.5567596283822517, 0.5001665447822057, 0.5603408585472818, 0.6057570798031908, 0.5600689958582875, 0.6354321719041001, 0.5088963227744039, 0.5462420197954315, 0.1308002132304531, 0.13679440497807205, 0.138370634407614, 0.13507586883741296, 0.13203374405298418, 0.13126075039357143, 0.10878813575389357, 0.11075561817830604, 0.11459223494110571, 0.2717383664476506, 0.1880179702024538, 0.17767172716131174, 0.2019258077044267, 0.2855697810857415, 0.19145325557817283, 0.39704780389668826, 0.38214626985989464, 0.3349358380164532, 0.45101904607386656, 0.35277209560201417, 0.5845515662143925, 0.4043789118083274, 0.3755890490004655, 0.3939719078448961, 0.49864899074062297, 0.6973644216402551, 0.6776429131132272, 0.20704387707227612, 0.3556254308250927, 0.26397555101917025, 0.42250461299283704, 0.2308434487292399, 0.34785274041046643, 0.23215769021059918, 0.3763982913067193, 0.2758599763427291, 0.2469321902726923, 0.18668360981416632, 0.20330737522696507, 0.2467006210838787, 0.2123531453870865, 0.2227569450931658, 0.2131391362006908, 0.22024822415545842, 0.20589976222628537, 0.2055107822682778, 0.7163265718779293, 0.6885049155081198, 0.21688326657907586, 0.19463807012852474, 0.24488547534235494, 0.22081021379556265, 0.2457308064329402, 0.20622543363064472, 0.18568851575372558, 0.861714342506424, 0.15237690607696508, 0.8924403624288778, 0.1994569573717826, 0.19942962566437394, 0.8934545118100263, 0.805041914085032, 0.858726942269739, 0.4779447095894641, 0.21016352555037565, 0.8299115314782561, 0.2089713253592802, 0.15433551651322486, 0.16714898915919674, 0.4611401113429555, 0.15111547349807553, 0.4071321155921347, 0.1729818192467838, 0.1850652938910986, 0.20178861996844188, 0.18122541909335121, 0.1955867320197039, 0.18817490893281663, 0.2221258759657454, 0.18983869209996562, 0.18537426645744148, 0.08262579230152844, 0.10127806210826495, 0.08817972007693842, 0.08944900525886657, 0.09655499224141773, 0.1288274050498709, 0.09107232266590559, 0.10213483247956756, 0.09471173680183198]}, "mutation_prompt": null}
