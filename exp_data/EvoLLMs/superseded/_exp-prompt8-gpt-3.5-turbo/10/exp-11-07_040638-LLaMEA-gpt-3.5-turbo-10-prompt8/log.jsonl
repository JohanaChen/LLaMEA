{"id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.09122027967934707, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "c9ab45c7-b803-4bed-8fd2-f096e6f57e74", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n\n        for _ in range(self.max_iter):\n            w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n            c1 = 1.5 - 1.0 * _ / self.max_iter\n            c2 = 1.5 - 1.0 * _ / self.max_iter\n            \n            r = np.random.uniform(0, 1, size=(2, self.dim))\n            for i in range(self.pop_size):\n                # PSO update\n                velocity = w * population[i] + c1 * r[0] * (global_best - population[i]) + c2 * r[1] * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n\n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n\n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n\n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n\n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n\n        return global_best", "name": "ImprovedHybridPSODE", "description": "Improved the efficiency of the loop for iterating over the population by precalculating the update coefficients outside the loop.", "configspace": "", "generation": 1, "fitness": 0.08739130571939889, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.13049331351228977, 0.08782834930333516, 0.09169502728636048, 0.25452940439050264, 0.1553150245917161, 0.07709668639236078, 0.1258304858540812, 0.14159823428623186, 0.14418133792913346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02082920386441145, 0.019291244404634145, 0.0291003137828989, 0.012825530784396189, 0.03289674041557833, 0.028971259477650113, 0.02554022445775228, 0.01783528591585859, 0.014333239486309823, 9.999999999998899e-05, 9.999999999998899e-05, 0.004629286352980322, 0.01959972157639278, 0.010658822193599149, 0.0021594331712352366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9963480688407474, 0.04506831736223316, 0.9660329590315929, 0.09962423250070929, 0.9814592552973355, 0.9950945889614693, 0.9886635610401197, 0.994554197465965, 0.9789666889654184, 9.999999999998899e-05, 0.02832534982298074, 0.024202995816037354, 0.04107092902942766, 0.00031549654350837564, 9.999999999998899e-05, 0.08794682175865232, 0.03593835471846485, 9.999999999998899e-05, 0.10027683525177622, 0.057739746070107345, 0.03467681122497179, 0.08029325340612026, 0.05531549365349531, 0.1007470300454224, 0.08259475748284129, 0.11069425469349248, 0.013469790175970386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009869221652536342, 0.009945040612336142, 0.02325048751611125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04157644358203483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018922863127613376, 0.003865731422215135, 0.0044752570618107335, 0.0038663139756683895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.11751514555838871, 0.15353086179740238, 0.15552406780181705, 0.1609897740815872, 0.14840943258983974, 0.1240568991094797, 0.14719707234052604, 0.14986407869658847, 0.019091129595535494, 0.01882357260646572, 0.021408002647563595, 0.021468299185321116, 0.020979979347674038, 0.022555614739897978, 0.032378078139710276, 0.022168011585355973, 0.0267656688986897, 0.09008470978580918, 0.10120325652786488, 0.08738832108708794, 0.09855305120349966, 0.10852972522114013, 0.07572538028257736, 0.13011597051822987, 0.09914772471520905, 0.07942737663727328, 0.13367179875292023, 0.1309612629579131, 0.10624194695358913, 0.14746620361381813, 0.11061620915449089, 0.14096654051876356, 0.11420206329748472, 0.17377774300845283, 0.12911728485821006, 0.04965495858264424, 0.06161888346550881, 0.053987849887084716, 0.09214023042226382, 0.08353323040509708, 0.09453342938821441, 0.06523486523641298, 0.09386031173166853, 0.05053572927910022, 0.17078408553184887, 0.10227442336627734, 0.14957200401039172, 0.1291200268692967, 0.12796938543122538, 0.13789010862782525, 0.13022065270074, 0.18101507468036826, 0.17098524696699224, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.0004701791517774945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03489111246454535, 9.999999999998899e-05, 0.17388285415412696, 0.13991074757452537, 0.09995458239847033, 0.08145933773525926, 0.13247944389840904, 0.14551121706271386, 0.0882458232501977, 0.12379076592631899, 0.10614242687444331, 0.05344814217627658, 0.08547493336694023, 0.12416116717732817, 0.11712628545878412, 0.06026662035156116, 0.07070332243659849, 0.1676111033704818, 0.08528875254247126, 0.18311669168766742, 0.1709075135817355, 0.19279273255872043, 0.17796963226570972, 0.12649969759224255, 0.14162923072835276, 0.13819619351404966, 0.1730063405902953, 0.14689563009680073, 0.15797424085024958, 0.047833093171239516, 0.017026428190852316, 0.037356335090200976, 0.04071108034243209, 0.03143080986640712, 0.02676525725263379, 0.03264416382323143, 0.023878367829953118, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "f723ad0a-be7d-418c-a389-ec99968c1dd7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "d6901e48-3ecc-44b9-8ec4-f92a50d08617", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "533d46d1-3d00-402a-8f32-4fb2bff0b8e5", "solution": "import numpy as np\n\nclass HybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                if func(mutant) < fitness_i:\n                    population[i] = mutant\n                    fitness_i = func(mutant)\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODEImproved", "description": "Reduced redundant fitness evaluations in the DE mutation step by evaluating the mutant only when it is better than the original individual.", "configspace": "", "generation": 4, "fitness": 0.09103387304445024, "feedback": "The algorithm HybridPSODEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.0814796871269482, 0.07633849719013086, 0.12052682875744036, 0.140495239122298, 0.16229133146174513, 0.11483958508198755, 0.12027507106782231, 0.12492433603801523, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014106546152884425, 0.01827008929714735, 0.014833090529870474, 0.03512322102703491, 0.01888419733311164, 0.031504418507218857, 0.02034283555679972, 0.024069061733710595, 0.017706343707330263, 0.0027460378714566636, 0.004271583044791805, 0.00821631923060473, 0.01959972157639278, 0.006027228414846819, 0.010244109903680299, 9.999999999998899e-05, 0.0058706377930777265, 0.00141887273789143, 0.9973596283182403, 0.9747599072054213, 0.9863089255517625, 0.08168539528186192, 0.9690470983373902, 0.995656036393064, 0.9646541595714501, 0.9949532968694133, 0.9957967344139671, 0.02874813761210626, 0.05761509602336046, 0.0428430124011151, 0.01226652840171627, 0.00031549654350837564, 0.019154234032980777, 0.06295940494968089, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029646426611337318, 0.04260715408183402, 0.08488437603189447, 0.07199883787679284, 0.026279303607937843, 0.13995615920622162, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010013388532876366, 0.010001392423897748, 0.009654084125579221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012033936533268896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993464468238839, 9.999999999998899e-05, 0.025065856660015373, 0.05740567250768014, 0.007915002996308651, 9.999999999998899e-05, 0.022904967237827978, 0.006218035974394298, 0.010493294512655793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12494271495312259, 0.12867199272748897, 0.1705441159679849, 0.14716627130573268, 0.12474592211137281, 0.13808386307052956, 0.1681613813759386, 0.11447982660542588, 0.18956241553975506, 0.03580320412324023, 0.0221129747281118, 9.999999999998899e-05, 0.026104464732335186, 0.029710032441310097, 0.026529873172461693, 0.023387608024193818, 0.029116391861100932, 0.04440395058852098, 0.1060268826844758, 0.09243427697876783, 0.13877763588984848, 0.09855305120349966, 0.13768228676602268, 0.09346093873736627, 0.12621928508905, 0.10510435442505928, 0.08149124984544764, 0.115714426966955, 0.14664840898088827, 0.10783695424755402, 0.13818239949181588, 0.13626923187088014, 0.10881558036936823, 0.14696961293504862, 0.17377774300845283, 0.11722665811358635, 0.046085468024921084, 0.08782371594828386, 0.10017349276200405, 0.0718857308559061, 0.06881123529334732, 0.06423330105760483, 0.09346682014589602, 0.09797105208184198, 0.04445433547824851, 0.14244998032219303, 0.10129547512261361, 0.1359857365230881, 0.11396585358366706, 0.1064026030218358, 0.1489578525852434, 0.1575457716141433, 0.14250262356056542, 0.1507467494080138, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12803597054255877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1071501932312684, 0.12479928197462975, 0.09766953887607999, 0.10562427934735263, 0.1207914665021157, 0.07777593203303135, 0.08664335742637774, 0.09643604708838482, 0.09027280460841214, 0.05344814217627658, 0.1090926133203598, 0.10048932315994408, 0.07018679483137691, 0.06120053711358686, 0.08158857924383334, 0.1641160386382704, 0.12712515627583942, 0.17319196666571846, 0.18671835310074703, 0.14447161942746256, 0.15783672397726423, 0.15110655990840083, 0.15493298337668437, 0.17055451453041637, 0.15597202968441837, 0.1535764362875277, 0.18760960524848758, 0.012101091095267247, 0.024753286435334698, 0.031393493129599714, 0.048568637888220856, 0.02802071355592195, 0.027561656505131427, 0.02580983260067804, 0.04538050158118878, 0.026027540243658387]}, "mutation_prompt": null}
{"id": "1b849548-6bc9-44fe-8c8d-67e398b26068", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "ada5edd5-06ed-4d43-b3b0-133d467caacd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "56cf963c-bfd4-4f81-b563-463d3cff666c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "ba83556d-be42-4047-a99a-64587c9dbf4d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "d435ba46-b769-4d42-96fe-8ee56c33a661", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Improved the loop efficiency by combining the PSO update and DE mutation into a single loop iteration, reducing redundant iterations.", "configspace": "", "generation": 9, "fitness": 0.09122027967934707, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "991d6b83-f36d-417d-a7e7-f45d8891e8a6", "solution": "import numpy as np\n\nclass HybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            w = 0.5 + 0.3 * np.cos(np.pi * 2 * np.arange(self.max_iter) / self.max_iter)\n            c1 = 1.5 - 1.0 * np.arange(self.max_iter) / self.max_iter\n            c2 = 1.5 - 1.0 * np.arange(self.max_iter) / self.max_iter\n\n            r1, r2 = np.random.uniform(0, 1, size=(2, self.pop_size, self.dim))\n            velocity = w[:, None] * population + c1[:, None] * r1.T * (global_best - population) + c2[:, None] * r2.T * (population[best_idx] - population)\n            population += velocity\n            population = np.clip(population, -5.0, 5.0)\n            \n            idx = np.array([np.delete(np.arange(self.pop_size), i, axis=0) for i in range(self.pop_size)])\n            a, b, c = population[np.random.choice(idx, (3, self.pop_size), replace=False)]\n            mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n            \n            fitness_i = func(population)\n            fitness_m = func(mutant)\n            \n            replace_mask = fitness_m < fitness_i\n            population = np.where(replace_mask[:, None], mutant.T, population).T\n            fitness_i = np.where(replace_mask, fitness_m, fitness_i)\n            \n            best_mask = fitness_i < fitness[best_idx]\n            best_idx = np.where(best_mask, np.arange(self.pop_size), best_idx)\n            global_best = np.where(best_mask[:, None], population, global_best)\n        \n        return global_best", "name": "HybridPSODEImproved", "description": "Implemented a vectorized approach for updating the population in both PSO and DE sections to enhance computational efficiency.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (500,1) (20,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (500,1) (20,5) ')", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {}, "mutation_prompt": null}
{"id": "1cc5c2a9-cddd-4c53-9aab-39561ec6d99a", "solution": "import numpy as np\n\nclass HybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                a, b, c = population[np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODEImproved", "description": "Optimized the initialization of the DE mutation indices to reduce unnecessary computations.", "configspace": "", "generation": 11, "fitness": 0.09122027967934707, "feedback": "The algorithm HybridPSODEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "6d96b024-c459-4314-ab7f-cd7e1e362265", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "8f0f7bde-1352-4ce4-aaa4-8b64f659e195", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "31e7e758-c580-4b31-8421-66a83af05c09", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "f3d720b4-5fd7-49c9-b0d6-d1726e08b353", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Improved the loop structure by combining PSO and DE updates within a single loop to reduce redundant iterations and enhance efficiency.", "configspace": "", "generation": 15, "fitness": 0.09122027967934707, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "ffbd14e6-486d-4acb-854f-267a562ebc88", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # PSO update\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                # DE mutation\n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                # Greedy selection\n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "38084a72-b6c4-4ff5-a654-698dace934df", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                w = 0.5 + 0.3 * np.cos(np.pi * 2 * _ / self.max_iter)\n                c1 = 1.5 - 1.0 * _ / self.max_iter\n                c2 = 1.5 - 1.0 * _ / self.max_iter\n                \n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = w * population[i] + c1 * r1 * (global_best - population[i]) + c2 * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i], fitness_i = mutant, fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "EnhancedHybridPSODE", "description": "Optimized the loop structure to reduce unnecessary iterations and increase efficiency.", "configspace": "", "generation": 17, "fitness": 0.09122027967934707, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08159726998572914, 0.07642459704191884, 0.12052972642592996, 0.14058356427608343, 0.16256335081385154, 0.11484000640856706, 0.12035826253197335, 0.12494856225788731, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014129280197662797, 0.018279588039458616, 0.014847814221997768, 0.035134629275814455, 0.018947573077797264, 0.031732129641598106, 0.02041089368146698, 0.02409564300995537, 0.017711394631562905, 0.002780234380839297, 0.004279596398128027, 0.008227789901837257, 0.01959972157639278, 0.006029013366186331, 0.010261527322967812, 9.999999999998899e-05, 0.005896594454588899, 0.0014305368917495453, 0.9973596283182403, 0.9786682236257175, 0.9879897448045801, 0.08169243361372502, 0.9755975042777026, 0.996023787889371, 0.9716344662289972, 0.9954017665991174, 0.9960638939701841, 0.02878572221085085, 0.05762666382223891, 0.042910980823877565, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06322804721759034, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010063350655173608, 0.01005227874418202, 0.009782738574115823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012057401107160581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029887880094252, 9.999999999998899e-05, 0.025676005948820024, 0.05885719889947871, 0.008026835241856323, 9.999999999998899e-05, 0.023949401879094, 0.006251139409495732, 0.010598726208744469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1250528785553885, 0.1287192709805065, 0.1706254170159236, 0.14717158592467094, 0.12474869639917974, 0.1381061515697104, 0.1686467166682123, 0.11449950494264682, 0.18998742119072265, 0.03597369652699778, 0.022122256558309683, 9.999999999998899e-05, 0.026205617438926687, 0.02978313674032884, 0.0265756132735383, 0.02341801474053884, 0.02924521328521057, 0.04440571866006171, 0.1062431612324164, 0.09244193150499158, 0.13906535328739789, 0.09855305120349966, 0.13775872228218378, 0.09349985091913948, 0.12663190219389764, 0.10519677201194377, 0.08149294960985831, 0.11580442881969355, 0.14681469093238486, 0.10784683876385825, 0.13834881764267337, 0.13634552295223656, 0.10882077492889419, 0.14704593229116603, 0.17377774300845283, 0.11727371346151416, 0.04609084682788378, 0.08798868372346336, 0.10080318385271125, 0.0722497026955069, 0.06881806321586481, 0.06425227006210044, 0.09357644739839865, 0.0979869851839743, 0.04448164048478087, 0.14286586850950678, 0.10134183308919342, 0.1360022017878344, 0.1141985204306799, 0.10645090941876056, 0.14909591791701515, 0.15788960866181456, 0.14303058632154986, 0.15150921801105, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.1299167849164764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075514375308898, 0.1248396103868128, 0.09767596752171992, 0.10566305614826255, 0.1207914665021157, 0.07779509703349619, 0.08672083966770971, 0.09643604708838482, 0.09033997832657714, 0.05344814217627658, 0.10916017013677903, 0.10059310781613406, 0.07022027126038288, 0.0613073440236922, 0.08205152247269232, 0.16499197430158563, 0.12726816905320393, 0.17387779048780272, 0.1868730556314786, 0.14449766246772555, 0.15784468048247158, 0.15114714495172576, 0.15496306273322114, 0.17067841733940148, 0.1559869680711754, 0.15361948951476445, 0.18775789914975538, 0.012105265250832442, 0.024793134184342702, 0.031393493129599714, 0.04861889916084439, 0.028086347686208102, 0.027581405539855774, 0.02589023699212123, 0.045880549731324605, 0.02603504439904647]}, "mutation_prompt": null}
{"id": "9ee6f496-2a90-4db7-9521-43048241235b", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 18, "fitness": 0.09132414887842707, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "2f5ab935-c096-4c62-a589-98eebe8d38ee", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "099df06b-f6aa-414e-bc0d-c1999f41a7b1", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "b9f2ad6d-8b59-4d2c-9bc4-5bbcb9114946", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "9866d989-7e95-4996-be0d-edec703f3f74", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "e123eb0e-d1af-4889-8ebd-a03489dd1423", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "dbb99d97-413f-4644-8ed9-99ac2ad53f69", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "5e9002ea-ee06-43da-aca1-b27d41fb18c6", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "166987a3-e9cc-4f0a-8868-9edc8a63a080", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "00a40819-8a4a-422a-9de6-4fc9645a3682", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "f387f71d-b010-4831-ab5f-60fa1f86b65c", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "989bb428-d99b-4ceb-86d7-407567c6c6e7", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "5c652c87-2c95-41d9-a76d-4abda53ef868", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "31ee664f-50bd-489a-8e23-05143453a5f7", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "75c4e31d-4810-4293-8328-9a606df46d8b", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "41085507-90cf-4f70-ba05-99c9434f29d2", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "6ef743d8-b245-4ca9-9294-7e14bfded6a8", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "dbc47700-274b-4003-a5e7-d6a65bbcfb9b", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "79c1c7bf-ee0d-4392-adcb-cf691d9c3f63", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        self.population = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n\n    def __call__(self, func):\n        fitness = np.array([func(individual) for individual in self.population])\n        best_idx = np.argmin(fitness)\n        global_best = self.population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * self.population[i] + self.c[t] * r1 * (global_best - self.population[i]) + self.c[t] * r2 * (self.population[best_idx] - self.population[i])\n                self.population[i] += velocity\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = self.population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(self.population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    self.population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = self.population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Improved the efficiency of population initialization by directly generating the population without a separate function.", "configspace": "", "generation": 35, "fitness": 0.09132414887842707, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "b31870b4-9ff4-433e-813e-c9fba55d46fd", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "19f96bc2-dab4-4137-818e-90dc71cf41d5", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "0635c9ff-703b-410b-8c3f-10eeca49de33", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "c4881dd1-6ed9-4cd5-8695-6b5b6c0da84e", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "37ece936-baa2-4834-9713-bc673f0b4470", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "94d4d69f-e575-4125-b89c-2e3625fa49ce", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "bfa94713-b572-4ab6-8bee-45b3764f9b41", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "96da9d57-c2cf-42a1-8cc1-8447da49cde8", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "811724a1-d14f-48ea-adfa-fec39bce6865", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "9d78b788-04ea-40e9-8d55-0eb28aaaa718", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "7fd8e6a7-3b62-4309-aec7-70a291c12af8", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "a69bd7bd-03bc-4c8a-aa54-83cfb1e4d64b", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "3ee4ab03-6c8e-4db7-9ad3-fc10077f581e", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "f0bd367a-15d5-4254-bc56-685ebcfbfcfd", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "53afa18b-ec6e-4e90-8b59-255ff9e383cc", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "b94bcf72-adfd-4246-9143-d3fa5b4c4fc0", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "6c4a393b-caea-451a-bf0d-5960d03e2c9a", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "209bddbf-7e47-4c80-903c-e7a0f6f2922d", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "c98383e3-dd77-4236-a861-c848550c6a31", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "414d7341-07bb-41a3-9700-5132aeabfd2e", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "061f2e82-d9f7-4561-9bed-29af7fe32bb0", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "84860898-3061-477b-ab99-ed4b81c1bc8a", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "66e7186d-520d-4e90-9d42-612624be771e", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "8f65a859-b025-4067-9182-8c0b69a50fa3", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "e330cb72-d9a3-4910-964d-e5601fb27bd9", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "61eb2037-a4a6-4d55-b99a-fc5482f4082a", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "780e497c-4c39-4fda-b144-f379d1f80943", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "935d41bd-1582-4bfc-81aa-f5e159fd6c7b", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "c50ddd87-45e1-4c43-ae1f-978d6d16123a", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "92b3b176-e96d-4a38-becd-96ce347d43bc", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "042139a5-8ae8-4418-b6a7-3bcbdf978fcb", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "f377a6de-7158-48ba-b002-4d1488d50c84", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "250d4f8b-f82c-4291-b699-b5210e4232f9", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "da528545-c8b5-4db7-93f0-cf0feca5b3cb", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "661fe128-8534-4039-92ea-2cc0e6121017", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "b03a249a-93d2-4dcb-a79c-37291f4d3e48", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "74071bce-926c-4625-a8f6-554f7cd4439e", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "3a4691ba-45ad-4636-97de-9b0c09615db3", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n            for i in range(self.pop_size):\n                vel_term1 = self.w[t] * population[i]\n                vel_term2 = self.c[t] * r1 * (global_best - population[i])\n                vel_term3 = self.c[t] * r2 * (population[best_idx] - population[i])\n                velocity = vel_term1 + vel_term2 + vel_term3\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "OptimizedHybridPSODE", "description": "Simplify the velocity update equation by precalculating common terms outside the loop.", "configspace": "", "generation": 73, "fitness": 0.08720979464433654, "feedback": "The algorithm OptimizedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.17.", "error": "", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.13049331351228977, 0.08782846340726935, 0.09169502728636048, 0.25450185086063914, 0.15531463821143843, 0.07709668639236078, 0.1258291152745713, 0.14159932325026892, 0.14418177269555488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020831448544540554, 0.019291244404634145, 0.0291003417991178, 0.01282225182487795, 0.04893947156603917, 0.031960495501833996, 0.025540218527845382, 0.014802848178919303, 0.014333239486309823, 9.999999999998899e-05, 9.999999999998899e-05, 0.004606929055085862, 0.01959972157639278, 0.01079322811364869, 0.001803045578603446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9963480688407474, 0.04506831736223316, 0.9660329482005401, 0.09962423252859554, 0.9814592627537704, 0.9950945889614693, 0.9886635610476027, 0.994554197465965, 0.9789666745483587, 9.999999999998899e-05, 0.03046741866804603, 0.0243503247721214, 0.04107092902942766, 0.00031549654350837564, 9.999999999998899e-05, 0.08794916999722702, 0.03593817554248946, 9.999999999998899e-05, 0.10027683525177622, 0.057739746070107345, 0.03467681122497179, 0.08235924444298448, 0.05607005635310891, 0.08234776648276543, 0.08259475748284129, 0.11069425469349248, 0.013469790175970386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009870845104137826, 0.014918295226788558, 0.023250097892967614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042772347928207055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01809466959192474, 0.00605867108074476, 0.00450035362843626, 0.0038218011666522056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.11751456240154334, 0.15353085251679766, 0.15552291198556578, 0.1591253703647626, 0.12872940877219918, 0.1319968656192787, 0.16528481762487046, 0.14986408813974994, 0.019091129595535494, 0.018823216643779617, 0.021418315602391158, 0.02146486767156308, 0.033603974159770456, 0.02231206081447923, 0.02669924433599502, 0.022154685028002108, 0.0267656688986897, 0.09180004341833514, 0.10120325652786488, 0.09293554666709825, 0.09855305120349966, 0.10852972522114013, 0.07572538028257736, 0.1302426659734114, 0.1257157985834796, 0.07942737663727328, 0.1480176904150301, 0.13890744596665605, 0.10623582740794957, 0.14806995299931436, 0.11068824031669433, 0.13015520976761397, 0.11420206329748472, 0.17377774300845283, 0.12909141895365317, 0.04965143360520108, 0.06093828852441763, 0.053987849887084716, 0.09214023042226382, 0.0836152216244942, 0.09450632813285686, 0.065219616644827, 0.09386031173166853, 0.05223800567914261, 0.17078408553184887, 0.0947522410730548, 0.13345086981233123, 0.13832248887864118, 0.1199670085639376, 0.1359015949802158, 0.12245976138762271, 0.14608061675876394, 0.1797342699553317, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.0004701791517774945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034914827298849205, 9.999999999998899e-05, 0.17388488609905184, 0.13961476069686563, 0.0999545773575592, 0.08145933773525926, 0.1207914665021157, 0.13793814042624386, 0.0882458274304927, 0.12377484686586782, 0.10614134009505127, 0.05344814217627658, 0.08547493336694023, 0.12414608887487899, 0.11712695110402238, 0.06026662035156116, 0.070731953830513, 0.16761191755667038, 0.08528568212316989, 0.1821056205038205, 0.14561784968556113, 0.19350575670163694, 0.1760601980231159, 0.12649969759224255, 0.14200866408402912, 0.1382019670492307, 0.17293826040858007, 0.14724362150296022, 0.15797424085024958, 0.04785020721920086, 0.018073016156428312, 0.037234839426227295, 0.04071108034243209, 0.029587035984019683, 0.026782890793380476, 0.03257886543278943, 0.022096560204706517, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "367359e1-5ae9-4209-a358-e5545b8ea1c2", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "4f1b9386-c86f-4f2a-90e8-45549aae9898", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "08d6c13a-8c83-4fcb-ba3c-1b7d43f70c36", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "84bd48d8-3dce-4fc5-91c8-20b099a82b2b", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "1490c3c5-87d2-4e55-8770-78cea3ebbcef", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "2e833bbb-8555-4761-9a1f-dede82b1587d", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "9d0f8df3-3a8f-46ce-9ca5-6a348164855e", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "52a9a017-df86-49c5-9c9d-71214d64303f", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "345cadd8-2180-4c37-bedc-1f14717aa587", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "292d13e0-6c17-4222-8ea4-ea5535c455b7", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "972b21d2-d068-4860-b0b9-c37c5524d61f", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "OptimizedHybridPSODE", "description": "Merge the velocity update and DE mutation loops to reduce redundant calculations and improve efficiency.", "configspace": "", "generation": 84, "fitness": 0.09132414887842707, "feedback": "The algorithm OptimizedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "3e277b7c-214f-4310-9d2a-2b560e21dd58", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "d958892e-e7d3-497c-8692-2eb152def06c", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "75e2b3bb-7dbd-4f96-945a-af4583dce5d4", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "b2305f41-507b-4738-82f5-a0447716a86a", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "643f794e-f376-4d0c-8d90-e80c3f1015ef", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "da6fe218-af9a-4774-b126-924eb13a1dde", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "725e3a3d-a313-46d7-a310-440b455551fd", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "d505dce9-782f-4fb7-8c63-b215b63685bf", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "e94d262c-4b63-4322-a7fd-697ea58a1d75", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "d7e6b40d-af2f-4948-85a4-9cba0835d7dd", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "5eb7ca4f-a901-4253-af38-04f18b1c6148", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "f3b8d26b-51d3-45f9-ac7e-0480e807d80e", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "eb83b61b-9725-4236-9c39-f3d34fb4182c", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "80f0d676-9627-40c4-9091-ee685bd58c9a", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
{"id": "b6de594d-ffed-4bf0-b806-414bb3a247c4", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.w = 0.5 + 0.3 * np.cos(np.linspace(0, 2*np.pi, self.max_iter))\n        self.c = 1.5 - np.linspace(0, 1, self.max_iter)\n        \n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        \n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n        \n        population = create_population()\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        \n        for t in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=(2, self.dim))\n                velocity = self.w[t] * population[i] + self.c[t] * r1 * (global_best - population[i]) + self.c[t] * r2 * (population[best_idx] - population[i])\n                population[i] += velocity\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                \n                idx = [j for j in range(self.pop_size) if j != i]\n                a, b, c = population[np.random.choice(idx, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), -5.0, 5.0)\n                \n                fitness_i = func(population[i])\n                fitness_m = func(mutant)\n                \n                if fitness_m < fitness_i:\n                    population[i] = mutant\n                    fitness_i = fitness_m\n                \n                if fitness_i < fitness[best_idx]:\n                    best_idx = i\n                    global_best = population[i]\n        \n        return global_best", "name": "ImprovedHybridPSODE", "description": "Efficiently combine the PSO and DE updates for each individual to reduce redundant calculations.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ee6f496-2a90-4db7-9521-43048241235b", "metadata": {"aucs": [0.08208123102140885, 0.07641093606736227, 0.12052972642592996, 0.14068408715306546, 0.16256194076656105, 0.11483998533769768, 0.12034913248350654, 0.12494444701648977, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01413634289394139, 0.018280469902255958, 0.022368430321830224, 0.035134845113481084, 0.018949877341067567, 0.0310241689026034, 0.018248263482334326, 0.02409564300995537, 0.017715268489175706, 0.0026000981370009058, 0.004279181750661332, 0.008228414940341655, 0.01959972157639278, 0.006029013366186331, 0.010262265940319093, 9.999999999998899e-05, 0.005885606409764099, 9.999999999998899e-05, 0.9973596283182403, 0.9786681598676739, 0.9879897406915027, 0.08169243361372502, 0.975597480498499, 0.996023787889371, 0.9716344599575326, 0.9954017665991174, 0.9960638939701841, 0.028785748807071077, 0.05762666382223891, 0.042911022173926505, 0.01226652840171627, 0.00031549654350837564, 0.019154416192769363, 0.06323348894665382, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.029683161057994956, 0.04267857549053511, 0.0849308279122184, 0.07225986051290278, 0.026279303607937843, 0.14024747020351935, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010053817277241084, 0.010053476621983415, 0.00977501358552213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012071480653468303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043348775556383945, 9.999999999998899e-05, 0.02573541998909734, 0.05616309814143694, 0.008842574997745212, 9.999999999998899e-05, 0.011701934637185496, 0.006251579786360706, 0.010490063389446691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752715217916538, 9.999999999998899e-05, 9.999999999998899e-05, 0.12500026285009336, 0.12871888602658488, 0.17062546928120648, 0.14717158592467094, 0.12474869639917974, 0.13810603501922214, 0.16864751802842837, 0.11472686184114622, 0.18999184971288052, 0.03323332018070835, 0.022122047676580214, 9.999999999998899e-05, 0.026193474789870774, 0.029811785298425098, 0.026567703044136803, 0.023425957116169238, 0.0443629672784156, 0.04440571866006171, 0.10733862914698511, 0.09244193150499158, 0.1395198981244119, 0.10939012495481348, 0.13775854066402193, 0.09358954130616692, 0.1417405248865543, 0.10480607470865266, 0.08149294960985831, 0.11638450505848086, 0.14020571883903155, 0.1078150146616601, 0.13833513652278928, 0.13633957386801698, 0.11459599659846331, 0.14703986763421195, 0.17377774300845283, 0.11730077516435578, 0.05778365741251179, 0.0882111116135591, 0.09908951900479368, 0.058643345461530605, 0.06851216338752764, 0.06424582298585924, 0.09359256940095495, 0.09798124715101675, 0.04447271062319158, 0.12386275039697048, 0.11921706703344681, 0.13345086981233123, 0.12248154036874204, 0.13055189019159208, 0.14797666731849146, 0.12245976138762271, 0.12306145940616042, 0.13321428161857152, 9.999999999998899e-05, 9.999999999998899e-05, 0.15855109602480366, 0.12990198729862312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853289695495046, 0.10666464157741762, 0.1248396103868128, 0.09767596752171992, 0.10566262413558214, 0.1207914665021157, 0.07779480935870542, 0.0867276338779317, 0.09643604708838482, 0.09034522467065031, 0.05344814217627658, 0.10916173857335121, 0.10059217998142644, 0.07022027126038288, 0.05964243766753008, 0.08198314386909222, 0.16498578082718085, 0.12780877395576995, 0.1707535666150758, 0.15752505692385455, 0.16008527384412086, 0.15784468048247158, 0.15108338086773676, 0.15496306273322114, 0.17111786136962637, 0.15646907831759016, 0.15445607986081944, 0.1813863884934771, 0.012105265250832442, 0.025435692808141397, 0.031393493129599714, 0.0486184135664689, 0.02281128503738694, 0.02759288763110268, 0.03459392525161076, 0.03057751442312906, 0.026030898538618064]}, "mutation_prompt": null}
