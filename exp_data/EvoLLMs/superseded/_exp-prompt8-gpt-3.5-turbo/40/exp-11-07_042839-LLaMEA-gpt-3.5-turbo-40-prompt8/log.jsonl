{"id": "e077ef20-1f2f-4fa1-ba37-152255d29662", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory[np.random.randint(0, self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            if evaluate_harmony(new_harmony) < evaluate_harmony(harmony_memory[-1]):\n                harmony_memory[-1] = new_harmony\n                harmony_memory = harmony_memory[np.argsort([evaluate_harmony(h) for h in harmony_memory])]\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by musical improvisation, where potential solutions harmonize toward an optimal solution by adjusting elements based on memory, pitch adjustment, and randomization.", "configspace": "", "generation": 0, "fitness": 0.03897342374952957, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": null, "metadata": {"aucs": [0.07387931739345333, 0.066395873652491, 0.08451914644432468, 0.02086201779695951, 0.05414298001501339, 0.02645967455099618, 0.052625262026709585, 0.05334562452488667, 0.06899235479218857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02621672140905884, 9.999999999998899e-05, 0.0063543162337137415, 0.005184092628619741, 0.0008408386692523306, 0.029126433354100256, 9.999999999998899e-05, 0.001976333712128464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03567930878791736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04683447351673553, 0.03461722095092412, 0.04412602450966896, 0.040525902585373696, 0.04815861769847529, 0.0315317463628455, 0.03447452591683253, 0.05031212273663366, 0.02669685487211626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022650729083663057, 9.999999999998899e-05, 9.999999999998899e-05, 0.012998501880928215, 9.999999999998899e-05, 0.10023674149328321, 0.03778610253771475, 0.006491308320532019, 0.004560432796771208, 9.999999999998899e-05, 9.999999999998899e-05, 0.026268829791731285, 9.999999999998899e-05, 0.00990601666191182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02221538918627286, 0.04044315842455748, 0.06055635856193564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08195569787770507, 0.11023164339415836, 0.15089906033130995, 0.09574207130714951, 0.08265185345167081, 0.0975368874587722, 0.1262354550486734, 0.09917505149012995, 0.1226754742490177, 0.0014375460772269033, 9.999999999998899e-05, 9.999999999998899e-05, 0.0171208049466246, 9.999999999998899e-05, 0.028496559862035475, 0.0014856225365118547, 0.0006167519746098638, 0.04901253889324986, 0.07784164708547492, 0.08907640865286026, 0.06237915760743107, 0.1071887777131798, 0.07778139134743833, 0.06751141249825121, 0.07379766885768935, 0.05475741167605719, 0.08785926550196077, 0.10522582125159574, 0.11322655303791818, 0.11243058995346222, 0.11523280311690798, 0.09168243052358449, 0.096311207131208, 0.13286234776753336, 0.11482579889945099, 0.08446077954517006, 0.04956895742663914, 0.053281195015273286, 0.03941679472178217, 0.06959563223661058, 0.04412223355499756, 0.04377983711721667, 0.06940922260442262, 0.05145631565700881, 0.023501109905847417, 0.1766244129903627, 0.07781858684305576, 0.16225448630658923, 0.1315812681563715, 0.09976637737499261, 0.1500430390890478, 0.13422596807826248, 0.10535388511321309, 0.15358621287215957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048046195383447565, 0.05843908664265762, 0.06192644516916568, 0.07106729801353884, 0.12899395509990208, 0.06702284540463821, 0.06706017990221791, 0.060579105525600974, 0.05629588225280879, 0.04116503369234614, 0.05118396505476486, 0.017347317504193605, 0.021225291753194653, 0.02258320354078136, 0.04993683680337713, 0.020718175860969468, 0.016717615299797206, 0.04993301872259126, 0.1371239725006964, 0.18109536521701253, 0.18335913509928392, 0.16230746678814645, 0.19806625847636228, 0.16752109222968736, 0.15060988064463765, 0.13760911402035259, 0.24143929057914348, 0.024678604821232186, 0.03959154964906941, 0.05799814221023847, 0.01975522554052145, 0.02629978051140025, 0.03763549737818117, 0.01935058745913043, 0.029252011769559938, 0.03230937954244306]}, "mutation_prompt": null}
{"id": "873b5c59-c295-4666-aa6c-1de0361e3078", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 1, "fitness": 0.04085410284530776, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "e077ef20-1f2f-4fa1-ba37-152255d29662", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "cd6a8d2a-9c63-4da9-9250-ef62118ffe6c", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "dbb92068-fc75-44c8-9744-698214140878", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "4597d163-7648-4401-817d-fda64986f4f4", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "9fa3eef2-f3f9-4293-bbaa-461bce3f828e", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n        self.lower_bound, self.upper_bound = -5.0, 5.0\n        self.initialize_harmony_memory = lambda: np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.generate_new_harmony = lambda hm: np.clip(hm[np.random.randint(0, self.harmony_memory_size)] + np.where(np.random.rand(self.dim) < self.pitch_adjustment_rate, np.random.uniform(-self.bandwidth, self.bandwidth), 0), self.lower_bound, self.upper_bound)\n        self.evaluate_harmony = lambda h: func(h)\n        self.harmony_memory, self.harmony_scores = self.initialize_harmony_memory(), np.array([self.evaluate_harmony(h) for h in self.harmony_memory])\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_harmony = self.generate_new_harmony(self.harmony_memory)\n            new_score = self.evaluate_harmony(new_harmony)\n            min_index = np.argmin(self.harmony_scores)\n            if new_score < self.harmony_scores[min_index]:\n                self.harmony_memory[min_index], self.harmony_scores[min_index] = new_harmony, new_score\n        return self.harmony_memory[np.argmin(self.harmony_scores)]", "name": "ImprovedHarmonySearch", "description": "Improved Harmony Search Algorithm with efficient memory management and enhanced exploration-exploitation balance.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedHarmonySearch' object has no attribute 'harmony_memory'\").", "error": "AttributeError(\"'ImprovedHarmonySearch' object has no attribute 'harmony_memory'\")", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {}, "mutation_prompt": null}
{"id": "4c60f3e2-2693-4afd-bd7d-a19e0634a49c", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved Harmony Search Algorithm with enhanced population diversity and adaptive pitch adjustment for better exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.04085410284530776, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "a0d21ac1-7074-4b39-8d00-63ff147e09a7", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def evaluate_harmony_memory(harmony_memory):\n            return [func(h) for h in harmony_memory]\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = evaluate_harmony_memory(harmony_memory)\n        for _ in range(self.budget):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearch", "description": "OptimizedHarmonySearch algorithm variant with improved memory utilization and efficient loop structures.", "configspace": "", "generation": 7, "fitness": 0.04085410284530776, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "92e64bd9-ced1-417d-a3b7-c3149e70ed6e", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "b5253470-ccce-4a4c-9551-0d3db1bc3b18", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "4d0d8df4-4d80-44fd-aa8c-5f55bab04c37", "solution": "import numpy as np\n\nclass EfficientHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_adjustment = np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i] + pitch_adjustment, -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EfficientHarmonySearch", "description": "Reduced memory allocation in loop by pre-allocating arrays and removed redundant array operations for improved efficiency.", "configspace": "", "generation": 10, "fitness": 0.04085410284530776, "feedback": "The algorithm EfficientHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "fea3e819-19f4-4a10-a2b9-2510661505b6", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "6a4ddfcc-5386-49fc-a021-b8932cbd7b89", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = np.copy(harmony_memory[np.random.randint(0, self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved Harmony Search variant with optimized memory usage and enhanced convergence by updating only when the new solution is superior.", "configspace": "", "generation": 12, "fitness": 0.04085410284530776, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "9ca1c94a-8068-4b91-9e4d-ceafe07450cc", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.copy(harmony_memory[random_index])\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([evaluate_harmony(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = evaluate_harmony(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search Algorithm by reducing unnecessary array sorting operations and improving memory access.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.07651605970136366, 0.06854994670733527, 0.08765831184890427, 0.021783388673640047, 0.055176099878092244, 0.02825351408687038, 0.05481858413964125, 0.0553199518682419, 0.07171832059320582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009741875578053172, 0.029511269068756896, 9.999999999998899e-05, 0.009624021013711181, 0.006631460662825495, 0.007109731422665244, 0.032291725612991096, 0.001240270980207625, 0.004935775552111221, 0.0011614942427903285, 9.999999999998899e-05, 9.999999999998899e-05, 0.046143346352210735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04858594029734775, 0.03606742237145244, 0.04632677836958354, 0.04194888481066572, 0.04991650184894203, 0.03310860574133112, 0.0357509414200704, 0.05219163151476136, 0.028089201305531386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010028265910222434, 0.005377609205013512, 9.999999999998899e-05, 9.999999999998899e-05, 0.014540053997870395, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030993613371275153, 0.023375178168935418, 0.053800087512514416, 0.06292284714906982, 9.999999999998899e-05, 0.0031636669823823516, 0.028757190298298152, 0.008508320866996266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08579188442490615, 0.11415980899991696, 0.15339335256607955, 0.09768743625703014, 0.08512680812275264, 0.09985919038568025, 0.12854957227354358, 0.10141888239656927, 0.1258526848147703, 0.006276901766691156, 9.999999999998899e-05, 9.999999999998899e-05, 0.018383958677446022, 0.0006519329722374234, 0.039292816814497034, 0.004729110455906849, 0.0017719942840896952, 0.06158276021452225, 0.07420925815313639, 0.0852826204445335, 0.06281135985861985, 0.10731405611106293, 0.0747989707096951, 0.06382990812297029, 0.07233281604773989, 0.054371171002714824, 0.08711242971349098, 0.10815888388593142, 0.11876353688450547, 0.11537896165714934, 0.12339468103207962, 0.10310445624673015, 0.10607370482271328, 0.1364062914644626, 0.12087642947925359, 0.09116745015949868, 0.05322089385597151, 0.05593106128445635, 0.04611020744253547, 0.07792085733143417, 0.05099311667396067, 0.055410978422656076, 0.06965996957298304, 0.054371005282402574, 0.036005099472323, 0.17328920935697623, 0.07576356238255011, 0.15842649249452623, 0.18092750465569196, 0.10049975988866133, 0.14968075493227806, 0.13273239563085937, 0.10484196480410424, 0.1510104600147526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050803760954944654, 0.060664689901829494, 0.06854239176027954, 0.0750062938674908, 0.1443642427278592, 0.07452545561016866, 0.07163413955192932, 0.06432726829531077, 0.05769010609708458, 0.043149764474360586, 0.06452026427239321, 0.018212207875293984, 0.025045964885568317, 0.024150438515531447, 0.05470788385451031, 0.02313718783141272, 0.017533814395775726, 0.059047142747638115, 0.13707512656210563, 0.17275340586389232, 0.18601555416671667, 0.15150489519180266, 0.18733824670535182, 0.15949706244716266, 0.15154560992849508, 0.1165559938690669, 0.2273152901348866, 0.026730641545110623, 0.04050023271616554, 0.0574428326719999, 0.026150225392575832, 0.03213401082056844, 0.03924313695689452, 0.03743853521657803, 0.03199409344156301, 0.03286446705545698]}, "mutation_prompt": null}
{"id": "95330af4-bc29-41c3-8f0c-695af4108006", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.clip(np.copy(harmony_memory[random_index] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim)), -5.0, 5.0)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearch", "description": "Optimized Harmony Search Algorithm with improved memory utilization and enhanced convergence speed.", "configspace": "", "generation": 14, "fitness": 0.05151107585517408, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "873b5c59-c295-4666-aa6c-1de0361e3078", "metadata": {"aucs": [0.10237836557465396, 0.08918290270765394, 0.11641890664188614, 0.03760654731432622, 0.07836588481433826, 0.03983828989949911, 0.07377604338918464, 0.07618642767209638, 0.09088669184754161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002062617878940909, 0.03198806066011617, 9.999999999998899e-05, 0.01673034804548057, 0.007626322782188222, 0.011830426361447599, 0.03565055605996059, 0.009756190185990832, 0.009105656549151853, 0.002512679020649222, 9.999999999998899e-05, 9.999999999998899e-05, 0.06044414181320956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05979796509442581, 0.04196318261534471, 0.05866328554448996, 0.0510466405713933, 0.057682664528355576, 0.04111303211749495, 0.04381054505679094, 0.06043733190735878, 0.03503946119695589, 0.010609330649439142, 0.0002338884667633101, 9.999999999998899e-05, 0.009532252531202712, 0.02120791902778396, 0.005560919283381427, 0.023879215619217242, 0.031238060630938924, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.007271151100401774, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.03134229813647749, 0.008942551853186709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006527178610008066, 9.999999999998899e-05, 0.0007438732381573887, 0.045595310884254614, 9.999999999998899e-05, 0.00010034824402682663, 0.008825484071231404, 9.999999999998899e-05, 0.003470474769377341, 0.05032366239116037, 9.999999999998899e-05, 0.013306999489488214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0667501831978754, 0.024609048875687045, 0.06362499421238421, 0.06475882837107949, 9.999999999998899e-05, 0.008175645530343001, 0.11986685606257474, 0.01709201745418265, 0.02009212233703095, 9.999999999998899e-05, 0.0026589498222383545, 0.003121848488215284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12088338256523534, 0.14419562343544678, 0.1898882217812069, 0.11231501748185257, 0.1045535387845512, 0.11236537970798344, 0.14867793959132902, 0.11753286857080325, 0.14468622212755577, 0.015168216098470078, 9.999999999998899e-05, 9.999999999998899e-05, 0.023140393859934938, 0.01395897547146796, 0.050645311388860303, 0.018699445966964823, 0.002617575199326927, 0.07236227844785248, 0.07974651417430978, 0.09614473660800193, 0.06391728599317159, 0.13799677817066835, 0.07788516141492541, 0.08066950146135865, 0.08047792672538634, 0.0691009142720812, 0.10577830628783336, 0.11209779684765175, 0.12428867960093015, 0.11698246104806043, 0.13079141354667823, 0.11943764516386779, 0.1232722859658143, 0.13813147713846885, 0.12463302085363848, 0.10185516228047198, 0.059987422403394386, 0.05951535267628605, 0.05426937292646783, 0.08186514443131288, 0.062208048183875375, 0.05916315177723941, 0.07038783016108485, 0.06267366590410661, 0.04711045731428298, 0.17025271761456984, 0.079537758577235, 0.16680964892863281, 0.17207539477841838, 0.07672024002524847, 0.14591326684219563, 0.17110491021877372, 0.0738260029395369, 0.13817495094314558, 0.03362460133193801, 0.021129822997799974, 0.13105396813338488, 9.999999999998899e-05, 0.05955868309934664, 0.11017472205310352, 0.044583803614519635, 0.024386917428681043, 9.999999999998899e-05, 0.08638151024776164, 0.07192774862927132, 0.0939357283934471, 0.11364453034309385, 0.18537354936200268, 0.09039801606785203, 0.09618245084860122, 0.09924140190997555, 0.08692126275015122, 0.06535443481681125, 0.08908749706660168, 0.04293284141299303, 0.07967634338330831, 0.0426985794232414, 0.080960775190276, 0.057654463497625486, 0.026586059028362086, 0.11093774831330461, 0.13511153605047654, 0.182205433373139, 0.18038011278642885, 0.2006538083671352, 0.19059707632962686, 0.1691403937365067, 0.1466915679168076, 0.2200857077215176, 0.22417850304454068, 0.03429895904726454, 0.045377740628398944, 0.06159455062470931, 0.014926430518825917, 0.038503873259709276, 0.04632803021634191, 0.019817419331061292, 0.024455973844821344, 0.0348081281743825]}, "mutation_prompt": null}
{"id": "f9a49c95-d209-43cc-b69e-b6afc6f85725", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.clip(np.copy(harmony_memory[random_index] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim)), -5.0, 5.0)\n            return new_harmony\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-self.pitch_adjustment_rate * iteration / self.budget)\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        for iteration in range(self.budget):\n            self.bandwidth = adjust_bandwidth(iteration)\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicBandwidthHarmonySearch", "description": "Optimized Harmony Search Algorithm with dynamic bandwidth adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.03935369138115083, "feedback": "The algorithm DynamicBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "95330af4-bc29-41c3-8f0c-695af4108006", "metadata": {"aucs": [0.07361191598375683, 0.06635860963636298, 0.08454247826012196, 0.021501034687789966, 0.05480950594446621, 0.026287081763558984, 0.0527058409821799, 0.05330884378479206, 0.06901665460939854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026501197492278306, 9.999999999998899e-05, 0.007431285842950608, 0.005453316094772176, 9.999999999998899e-05, 0.02993459899736406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031447814946402475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04645101223908954, 0.03465592792803507, 0.044271606745525216, 0.0402862396609307, 0.047904104471336195, 0.031446766626591516, 0.03434890018789116, 0.05009907733994445, 0.026616814279071366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002152100378737809, 9.999999999998899e-05, 9.999999999998899e-05, 0.012976205200739055, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023869164335578952, 0.06303598105273722, 0.06429173009333788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08189942196721933, 0.10881047133658761, 0.15076401515886806, 0.09570279155058159, 0.08226966792362478, 0.09740907226382356, 0.12581001337178965, 0.09961105288441596, 0.12260637718544531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014929260653309573, 9.999999999998899e-05, 0.034766270349764095, 9.999999999998899e-05, 9.999999999998899e-05, 0.047800605349340386, 0.08019253452472153, 0.09014966701850424, 0.06395245208454325, 0.12742674459644532, 0.07699382363188612, 0.0697937311108432, 0.07606168100375876, 0.06286557061209408, 0.09004298201448346, 0.10468907443106146, 0.11122174388732597, 0.1113603687326562, 0.11377663736105692, 0.09688591617049003, 0.09423665269542858, 0.13045094906717636, 0.10889785576143096, 0.08708972417355909, 0.049996117856796585, 0.05745265435267466, 0.03863900335584225, 0.07173388473683262, 0.043377484469479866, 0.03907213590910563, 0.0699170705437242, 0.0552178616083836, 0.02366514140924847, 0.17536740364371395, 0.07956088281542784, 0.1681055231264914, 0.18782702527818151, 0.07300161455368759, 0.1360884007868315, 0.132739383557272, 0.07521657687008332, 0.1588119467578143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04882837560937858, 0.057665810196700806, 0.06280124808761611, 0.07070646020667304, 0.1287382713103281, 0.06517342118442881, 0.06842127268345632, 0.0603468089876007, 0.05812538868041939, 0.04085652653979921, 0.050202104978606665, 0.017196299686975558, 0.020448969895184188, 0.022575616951025168, 0.049784256204141286, 0.02046384478715224, 0.016626155515310326, 0.04787681591612669, 0.1616661989078393, 0.1752751710132161, 0.1774260589601856, 0.19337588932759386, 0.20872257711389908, 0.17128659377001954, 0.1526311664942872, 0.15385555707937515, 0.22505978233278245, 0.02165863897436715, 0.035264882325960256, 0.050334355510531115, 0.013428693499942579, 0.024164162578013015, 0.039004119250560465, 0.019649961813567818, 0.02281325456224148, 0.033299333619568605]}, "mutation_prompt": null}
{"id": "9630498b-da25-4432-8823-79d420449a49", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.clip(np.copy(harmony_memory[random_index] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim)), -5.0, 5.0)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearch", "description": "Optimized Harmony Search Algorithm with improved memory utilization and enhanced convergence speed.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95330af4-bc29-41c3-8f0c-695af4108006", "metadata": {"aucs": [0.10237836557465396, 0.08918290270765394, 0.11641890664188614, 0.03760654731432622, 0.07836588481433826, 0.03983828989949911, 0.07377604338918464, 0.07618642767209638, 0.09088669184754161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002062617878940909, 0.03198806066011617, 9.999999999998899e-05, 0.01673034804548057, 0.007626322782188222, 0.011830426361447599, 0.03565055605996059, 0.009756190185990832, 0.009105656549151853, 0.002512679020649222, 9.999999999998899e-05, 9.999999999998899e-05, 0.06044414181320956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05979796509442581, 0.04196318261534471, 0.05866328554448996, 0.0510466405713933, 0.057682664528355576, 0.04111303211749495, 0.04381054505679094, 0.06043733190735878, 0.03503946119695589, 0.010609330649439142, 0.0002338884667633101, 9.999999999998899e-05, 0.009532252531202712, 0.02120791902778396, 0.005560919283381427, 0.023879215619217242, 0.031238060630938924, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.007271151100401774, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.03134229813647749, 0.008942551853186709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006527178610008066, 9.999999999998899e-05, 0.0007438732381573887, 0.045595310884254614, 9.999999999998899e-05, 0.00010034824402682663, 0.008825484071231404, 9.999999999998899e-05, 0.003470474769377341, 0.05032366239116037, 9.999999999998899e-05, 0.013306999489488214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0667501831978754, 0.024609048875687045, 0.06362499421238421, 0.06475882837107949, 9.999999999998899e-05, 0.008175645530343001, 0.11986685606257474, 0.01709201745418265, 0.02009212233703095, 9.999999999998899e-05, 0.0026589498222383545, 0.003121848488215284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12088338256523534, 0.14419562343544678, 0.1898882217812069, 0.11231501748185257, 0.1045535387845512, 0.11236537970798344, 0.14867793959132902, 0.11753286857080325, 0.14468622212755577, 0.015168216098470078, 9.999999999998899e-05, 9.999999999998899e-05, 0.023140393859934938, 0.01395897547146796, 0.050645311388860303, 0.018699445966964823, 0.002617575199326927, 0.07236227844785248, 0.07974651417430978, 0.09614473660800193, 0.06391728599317159, 0.13799677817066835, 0.07788516141492541, 0.08066950146135865, 0.08047792672538634, 0.0691009142720812, 0.10577830628783336, 0.11209779684765175, 0.12428867960093015, 0.11698246104806043, 0.13079141354667823, 0.11943764516386779, 0.1232722859658143, 0.13813147713846885, 0.12463302085363848, 0.10185516228047198, 0.059987422403394386, 0.05951535267628605, 0.05426937292646783, 0.08186514443131288, 0.062208048183875375, 0.05916315177723941, 0.07038783016108485, 0.06267366590410661, 0.04711045731428298, 0.17025271761456984, 0.079537758577235, 0.16680964892863281, 0.17207539477841838, 0.07672024002524847, 0.14591326684219563, 0.17110491021877372, 0.0738260029395369, 0.13817495094314558, 0.03362460133193801, 0.021129822997799974, 0.13105396813338488, 9.999999999998899e-05, 0.05955868309934664, 0.11017472205310352, 0.044583803614519635, 0.024386917428681043, 9.999999999998899e-05, 0.08638151024776164, 0.07192774862927132, 0.0939357283934471, 0.11364453034309385, 0.18537354936200268, 0.09039801606785203, 0.09618245084860122, 0.09924140190997555, 0.08692126275015122, 0.06535443481681125, 0.08908749706660168, 0.04293284141299303, 0.07967634338330831, 0.0426985794232414, 0.080960775190276, 0.057654463497625486, 0.026586059028362086, 0.11093774831330461, 0.13511153605047654, 0.182205433373139, 0.18038011278642885, 0.2006538083671352, 0.19059707632962686, 0.1691403937365067, 0.1466915679168076, 0.2200857077215176, 0.22417850304454068, 0.03429895904726454, 0.045377740628398944, 0.06159455062470931, 0.014926430518825917, 0.038503873259709276, 0.04632803021634191, 0.019817419331061292, 0.024455973844821344, 0.0348081281743825]}, "mutation_prompt": null}
{"id": "14d54cce-7676-480b-8686-978f2a82bf7b", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.clip(harmony_memory[random_index] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "ImprovedHarmonySearch algorithm variant with optimized loop iterations and enhanced memory utilization by updating only when a new harmony is better than the worst harmony in memory.", "configspace": "", "generation": 17, "fitness": 0.05151107585517408, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "95330af4-bc29-41c3-8f0c-695af4108006", "metadata": {"aucs": [0.10237836557465396, 0.08918290270765394, 0.11641890664188614, 0.03760654731432622, 0.07836588481433826, 0.03983828989949911, 0.07377604338918464, 0.07618642767209638, 0.09088669184754161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002062617878940909, 0.03198806066011617, 9.999999999998899e-05, 0.01673034804548057, 0.007626322782188222, 0.011830426361447599, 0.03565055605996059, 0.009756190185990832, 0.009105656549151853, 0.002512679020649222, 9.999999999998899e-05, 9.999999999998899e-05, 0.06044414181320956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05979796509442581, 0.04196318261534471, 0.05866328554448996, 0.0510466405713933, 0.057682664528355576, 0.04111303211749495, 0.04381054505679094, 0.06043733190735878, 0.03503946119695589, 0.010609330649439142, 0.0002338884667633101, 9.999999999998899e-05, 0.009532252531202712, 0.02120791902778396, 0.005560919283381427, 0.023879215619217242, 0.031238060630938924, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.007271151100401774, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.03134229813647749, 0.008942551853186709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006527178610008066, 9.999999999998899e-05, 0.0007438732381573887, 0.045595310884254614, 9.999999999998899e-05, 0.00010034824402682663, 0.008825484071231404, 9.999999999998899e-05, 0.003470474769377341, 0.05032366239116037, 9.999999999998899e-05, 0.013306999489488214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0667501831978754, 0.024609048875687045, 0.06362499421238421, 0.06475882837107949, 9.999999999998899e-05, 0.008175645530343001, 0.11986685606257474, 0.01709201745418265, 0.02009212233703095, 9.999999999998899e-05, 0.0026589498222383545, 0.003121848488215284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12088338256523534, 0.14419562343544678, 0.1898882217812069, 0.11231501748185257, 0.1045535387845512, 0.11236537970798344, 0.14867793959132902, 0.11753286857080325, 0.14468622212755577, 0.015168216098470078, 9.999999999998899e-05, 9.999999999998899e-05, 0.023140393859934938, 0.01395897547146796, 0.050645311388860303, 0.018699445966964823, 0.002617575199326927, 0.07236227844785248, 0.07974651417430978, 0.09614473660800193, 0.06391728599317159, 0.13799677817066835, 0.07788516141492541, 0.08066950146135865, 0.08047792672538634, 0.0691009142720812, 0.10577830628783336, 0.11209779684765175, 0.12428867960093015, 0.11698246104806043, 0.13079141354667823, 0.11943764516386779, 0.1232722859658143, 0.13813147713846885, 0.12463302085363848, 0.10185516228047198, 0.059987422403394386, 0.05951535267628605, 0.05426937292646783, 0.08186514443131288, 0.062208048183875375, 0.05916315177723941, 0.07038783016108485, 0.06267366590410661, 0.04711045731428298, 0.17025271761456984, 0.079537758577235, 0.16680964892863281, 0.17207539477841838, 0.07672024002524847, 0.14591326684219563, 0.17110491021877372, 0.0738260029395369, 0.13817495094314558, 0.03362460133193801, 0.021129822997799974, 0.13105396813338488, 9.999999999998899e-05, 0.05955868309934664, 0.11017472205310352, 0.044583803614519635, 0.024386917428681043, 9.999999999998899e-05, 0.08638151024776164, 0.07192774862927132, 0.0939357283934471, 0.11364453034309385, 0.18537354936200268, 0.09039801606785203, 0.09618245084860122, 0.09924140190997555, 0.08692126275015122, 0.06535443481681125, 0.08908749706660168, 0.04293284141299303, 0.07967634338330831, 0.0426985794232414, 0.080960775190276, 0.057654463497625486, 0.026586059028362086, 0.11093774831330461, 0.13511153605047654, 0.182205433373139, 0.18038011278642885, 0.2006538083671352, 0.19059707632962686, 0.1691403937365067, 0.1466915679168076, 0.2200857077215176, 0.22417850304454068, 0.03429895904726454, 0.045377740628398944, 0.06159455062470931, 0.014926430518825917, 0.038503873259709276, 0.04632803021634191, 0.019817419331061292, 0.024455973844821344, 0.0348081281743825]}, "mutation_prompt": null}
{"id": "dd70fdcc-da71-4222-a6f8-ef1f5d75e32f", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01, elite_percentage=0.1):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth, self.elite_percentage = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth, elite_percentage\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory, elite_count):\n            random_index = np.random.randint(0, self.harmony_memory_size if elite_count == 0 else elite_count)\n            new_harmony = np.clip(np.copy(harmony_memory[random_index] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim)), -5.0, 5.0)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        elite_count = int(self.elite_percentage * self.harmony_memory_size)\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory, elite_count)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                elite_count = int(self.elite_percentage * self.harmony_memory_size)\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicBandwidthHarmonySearch", "description": "Improved variant of Harmony Search with dynamic bandwidth adjustment and elite preservation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 18, "fitness": 0.04543030092523798, "feedback": "The algorithm DynamicBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "95330af4-bc29-41c3-8f0c-695af4108006", "metadata": {"aucs": [0.07181397830146763, 0.06432772651221763, 0.08237988959495246, 0.019583725566517884, 0.05267361210777377, 0.49515004206962454, 0.05140423906395497, 0.05163064099738546, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.44656651973570693, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.27037158764275204, 9.999999999998899e-05, 9.999999999998899e-05, 0.24328985778555057, 9.999999999998899e-05, 9.999999999998899e-05, 0.26032925401253915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03944262542857302, 9.999999999998899e-05, 9.999999999998899e-05, 0.004047395728496328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905679958989108, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587800908059993, 0.02243134195106722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06002808231447965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10286604713578507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07265459352346681, 0.07840071328182474, 0.1070271971752389, 0.14838054695461433, 0.09425923977458062, 0.08051072568095674, 0.09580441870675127, 0.1240568991094797, 0.09716408355800721, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.07845406648472564, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.05497932156064522, 0.04855804829477728, 0.07726393575557644, 0.09606267484187503, 0.0962505644704219, 0.10359778603806002, 0.10847166301008526, 0.08299910073640826, 0.08326325451723493, 0.1391362819828289, 0.1001363042967901, 0.07784834048331069, 0.033318937593247444, 0.030850512655025697, 0.03464785118471059, 0.08312884975790225, 0.0154886331024634, 0.039083051827779824, 0.07085245748455749, 0.038530072755655564, 0.011873768353786729, 0.17066685392528558, 0.06032920214938475, 0.11089882950468877, 0.17610105293726797, 0.06747178230817008, 0.08176222879441697, 0.1879398119307757, 0.06494044806858634, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04385307240429104, 0.056143274529988574, 0.05626128006000852, 0.06718871428537254, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.11383692353507358, 0.053674301379695866, 0.03824121102611444, 0.11128186984948607, 0.016401521055428026, 0.018606112313171663, 0.021600351495484005, 0.045511073114331335, 0.018965050090669178, 0.0158348977852244, 0.04143420019681854, 0.11296213856364379, 0.18633655199692645, 0.14763022729669195, 0.26573910989454075, 0.11745383704428058, 0.22327250880046157, 0.10056325222828677, 0.10862764757569365, 0.14689007985489466, 0.004995141403415393, 0.012204213037243616, 0.031393493129599714, 0.006665634018448552, 0.0058749879062220955, 0.00826091239954263, 0.04517958233359587, 9.999999999998899e-05, 0.0130301213827263]}, "mutation_prompt": null}
{"id": "4cdbbdac-72a8-4a6b-ada3-7925487968c9", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            random_index = np.random.randint(0, self.harmony_memory_size)\n            new_harmony = np.clip(np.copy(harmony_memory[random_index] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim)), -5.0, 5.0)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearch", "description": "Optimized Harmony Search Algorithm with improved memory utilization and enhanced convergence speed.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95330af4-bc29-41c3-8f0c-695af4108006", "metadata": {"aucs": [0.10237836557465396, 0.08918290270765394, 0.11641890664188614, 0.03760654731432622, 0.07836588481433826, 0.03983828989949911, 0.07377604338918464, 0.07618642767209638, 0.09088669184754161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002062617878940909, 0.03198806066011617, 9.999999999998899e-05, 0.01673034804548057, 0.007626322782188222, 0.011830426361447599, 0.03565055605996059, 0.009756190185990832, 0.009105656549151853, 0.002512679020649222, 9.999999999998899e-05, 9.999999999998899e-05, 0.06044414181320956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05979796509442581, 0.04196318261534471, 0.05866328554448996, 0.0510466405713933, 0.057682664528355576, 0.04111303211749495, 0.04381054505679094, 0.06043733190735878, 0.03503946119695589, 0.010609330649439142, 0.0002338884667633101, 9.999999999998899e-05, 0.009532252531202712, 0.02120791902778396, 0.005560919283381427, 0.023879215619217242, 0.031238060630938924, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.007271151100401774, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.03134229813647749, 0.008942551853186709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006527178610008066, 9.999999999998899e-05, 0.0007438732381573887, 0.045595310884254614, 9.999999999998899e-05, 0.00010034824402682663, 0.008825484071231404, 9.999999999998899e-05, 0.003470474769377341, 0.05032366239116037, 9.999999999998899e-05, 0.013306999489488214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0667501831978754, 0.024609048875687045, 0.06362499421238421, 0.06475882837107949, 9.999999999998899e-05, 0.008175645530343001, 0.11986685606257474, 0.01709201745418265, 0.02009212233703095, 9.999999999998899e-05, 0.0026589498222383545, 0.003121848488215284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12088338256523534, 0.14419562343544678, 0.1898882217812069, 0.11231501748185257, 0.1045535387845512, 0.11236537970798344, 0.14867793959132902, 0.11753286857080325, 0.14468622212755577, 0.015168216098470078, 9.999999999998899e-05, 9.999999999998899e-05, 0.023140393859934938, 0.01395897547146796, 0.050645311388860303, 0.018699445966964823, 0.002617575199326927, 0.07236227844785248, 0.07974651417430978, 0.09614473660800193, 0.06391728599317159, 0.13799677817066835, 0.07788516141492541, 0.08066950146135865, 0.08047792672538634, 0.0691009142720812, 0.10577830628783336, 0.11209779684765175, 0.12428867960093015, 0.11698246104806043, 0.13079141354667823, 0.11943764516386779, 0.1232722859658143, 0.13813147713846885, 0.12463302085363848, 0.10185516228047198, 0.059987422403394386, 0.05951535267628605, 0.05426937292646783, 0.08186514443131288, 0.062208048183875375, 0.05916315177723941, 0.07038783016108485, 0.06267366590410661, 0.04711045731428298, 0.17025271761456984, 0.079537758577235, 0.16680964892863281, 0.17207539477841838, 0.07672024002524847, 0.14591326684219563, 0.17110491021877372, 0.0738260029395369, 0.13817495094314558, 0.03362460133193801, 0.021129822997799974, 0.13105396813338488, 9.999999999998899e-05, 0.05955868309934664, 0.11017472205310352, 0.044583803614519635, 0.024386917428681043, 9.999999999998899e-05, 0.08638151024776164, 0.07192774862927132, 0.0939357283934471, 0.11364453034309385, 0.18537354936200268, 0.09039801606785203, 0.09618245084860122, 0.09924140190997555, 0.08692126275015122, 0.06535443481681125, 0.08908749706660168, 0.04293284141299303, 0.07967634338330831, 0.0426985794232414, 0.080960775190276, 0.057654463497625486, 0.026586059028362086, 0.11093774831330461, 0.13511153605047654, 0.182205433373139, 0.18038011278642885, 0.2006538083671352, 0.19059707632962686, 0.1691403937365067, 0.1466915679168076, 0.2200857077215176, 0.22417850304454068, 0.03429895904726454, 0.045377740628398944, 0.06159455062470931, 0.014926430518825917, 0.038503873259709276, 0.04632803021634191, 0.019817419331061292, 0.024455973844821344, 0.0348081281743825]}, "mutation_prompt": null}
{"id": "0f114a88-e5aa-40a2-891f-82b66173ebfc", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchOptimized:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget):\n            new_harmony = np.clip(harmony_memory[np.random.randint(0, self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchOptimized", "description": "ImprovedHarmonySearch algorithm variant with optimized loop structure and enhanced efficiency.", "configspace": "", "generation": 20, "fitness": 0.05151107585517408, "feedback": "The algorithm ImprovedHarmonySearchOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "95330af4-bc29-41c3-8f0c-695af4108006", "metadata": {"aucs": [0.10237836557465396, 0.08918290270765394, 0.11641890664188614, 0.03760654731432622, 0.07836588481433826, 0.03983828989949911, 0.07377604338918464, 0.07618642767209638, 0.09088669184754161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002062617878940909, 0.03198806066011617, 9.999999999998899e-05, 0.01673034804548057, 0.007626322782188222, 0.011830426361447599, 0.03565055605996059, 0.009756190185990832, 0.009105656549151853, 0.002512679020649222, 9.999999999998899e-05, 9.999999999998899e-05, 0.06044414181320956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05979796509442581, 0.04196318261534471, 0.05866328554448996, 0.0510466405713933, 0.057682664528355576, 0.04111303211749495, 0.04381054505679094, 0.06043733190735878, 0.03503946119695589, 0.010609330649439142, 0.0002338884667633101, 9.999999999998899e-05, 0.009532252531202712, 0.02120791902778396, 0.005560919283381427, 0.023879215619217242, 0.031238060630938924, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.007271151100401774, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.03134229813647749, 0.008942551853186709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006527178610008066, 9.999999999998899e-05, 0.0007438732381573887, 0.045595310884254614, 9.999999999998899e-05, 0.00010034824402682663, 0.008825484071231404, 9.999999999998899e-05, 0.003470474769377341, 0.05032366239116037, 9.999999999998899e-05, 0.013306999489488214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0667501831978754, 0.024609048875687045, 0.06362499421238421, 0.06475882837107949, 9.999999999998899e-05, 0.008175645530343001, 0.11986685606257474, 0.01709201745418265, 0.02009212233703095, 9.999999999998899e-05, 0.0026589498222383545, 0.003121848488215284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12088338256523534, 0.14419562343544678, 0.1898882217812069, 0.11231501748185257, 0.1045535387845512, 0.11236537970798344, 0.14867793959132902, 0.11753286857080325, 0.14468622212755577, 0.015168216098470078, 9.999999999998899e-05, 9.999999999998899e-05, 0.023140393859934938, 0.01395897547146796, 0.050645311388860303, 0.018699445966964823, 0.002617575199326927, 0.07236227844785248, 0.07974651417430978, 0.09614473660800193, 0.06391728599317159, 0.13799677817066835, 0.07788516141492541, 0.08066950146135865, 0.08047792672538634, 0.0691009142720812, 0.10577830628783336, 0.11209779684765175, 0.12428867960093015, 0.11698246104806043, 0.13079141354667823, 0.11943764516386779, 0.1232722859658143, 0.13813147713846885, 0.12463302085363848, 0.10185516228047198, 0.059987422403394386, 0.05951535267628605, 0.05426937292646783, 0.08186514443131288, 0.062208048183875375, 0.05916315177723941, 0.07038783016108485, 0.06267366590410661, 0.04711045731428298, 0.17025271761456984, 0.079537758577235, 0.16680964892863281, 0.17207539477841838, 0.07672024002524847, 0.14591326684219563, 0.17110491021877372, 0.0738260029395369, 0.13817495094314558, 0.03362460133193801, 0.021129822997799974, 0.13105396813338488, 9.999999999998899e-05, 0.05955868309934664, 0.11017472205310352, 0.044583803614519635, 0.024386917428681043, 9.999999999998899e-05, 0.08638151024776164, 0.07192774862927132, 0.0939357283934471, 0.11364453034309385, 0.18537354936200268, 0.09039801606785203, 0.09618245084860122, 0.09924140190997555, 0.08692126275015122, 0.06535443481681125, 0.08908749706660168, 0.04293284141299303, 0.07967634338330831, 0.0426985794232414, 0.080960775190276, 0.057654463497625486, 0.026586059028362086, 0.11093774831330461, 0.13511153605047654, 0.182205433373139, 0.18038011278642885, 0.2006538083671352, 0.19059707632962686, 0.1691403937365067, 0.1466915679168076, 0.2200857077215176, 0.22417850304454068, 0.03429895904726454, 0.045377740628398944, 0.06159455062470931, 0.014926430518825917, 0.038503873259709276, 0.04632803021634191, 0.019817419331061292, 0.024455973844821344, 0.0348081281743825]}, "mutation_prompt": null}
{"id": "dabdc360-50bb-492f-9845-8071315c1b90", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 21, "fitness": 0.14680137107395425, "feedback": "The algorithm ImprovedHarmonySearchEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "95330af4-bc29-41c3-8f0c-695af4108006", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "44bfd612-2dc6-48f5-94c4-f5dad3657fcb", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "50b69ee3-b356-4505-b35a-deb251f4eccf", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "abfb86bb-7620-4f9c-b93b-ba00a3bfd650", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "8c7857ec-1583-48aa-8fd7-c84432dbd67d", "solution": "import numpy as np\n\nclass VectorizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            harmony_memory[min_index], harmony_scores[min_index] = (new_harmony, new_score) if new_score < harmony_scores[min_index] else (harmony_memory[min_index], harmony_scores[min_index])\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "VectorizedHarmonySearch", "description": "Improved efficiency by vectorizing the harmony memory update process and eliminating unnecessary array indexing.", "configspace": "", "generation": 25, "fitness": 0.14680137107395425, "feedback": "The algorithm VectorizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "3b28a4fd-21c2-4b51-a7e7-4416ec4e9d3d", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "5da54c11-7504-4291-a48e-5a59c0879d16", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "87e0e98a-1660-420f-bdaf-27d4e9dba371", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "163d9a0b-11b9-4e6a-bb40-59a092298b3e", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "b1a457b6-04ce-4d21-9c63-29f23509e887", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "adf852d2-2a24-42f7-8956-5626f31a5b9b", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (1, self.dim)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            better_indices = harmony_scores > new_score\n            harmony_memory[better_indices] = new_harmony\n            harmony_scores[better_indices] = new_score\n            \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved the harmony memory update process by utilizing numpy vectorized operations for efficiency.", "configspace": "", "generation": 31, "fitness": 0.14680107137999102, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008213951474895786, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "2c7d37f9-4fee-463b-9f7e-757dc32e89f4", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "2650e54a-5bd4-4108-b356-fbe24f9494bf", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved the convergence check condition by directly updating the best harmony without unnecessary comparison in each iteration.", "configspace": "", "generation": 33, "fitness": 0.14680137107395425, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "81cbe5a5-7bc9-40da-a68e-3fb882a799b0", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "6d9938da-1b2c-4628-a2b2-492f1db29046", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "c4ad6ab1-1e2d-41ef-98fe-3b72ac733f76", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "67c9a8d9-a562-4479-a699-907c1fc15246", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "62b718be-6f2d-4f89-969f-7b5c49e3e3ca", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "2a47f666-9c37-42be-ba53-4123550fc3f6", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "OptimizedHarmonySearch", "description": "Optimized the convergence check by updating only when the new harmony is better, reducing unnecessary comparisons and assignments.", "configspace": "", "generation": 39, "fitness": 0.14680137107395425, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "acc6acb2-27f1-4faf-9a62-a6de8aa8173e", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "e2be9402-8f76-479b-917b-647c812a98ff", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "c3365e23-8be3-4f4d-8a61-9aa629509d28", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "dbb964c7-e253-4614-859a-0faf91898377", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "0c93449c-91f1-457c-a291-15876f4ebe65", "solution": "import numpy as np\n\nclass EfficientHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        min_index = np.argmin(harmony_scores)\n        \n        for _ in range(1, self.budget):  # Start from 1 for direct update of the initial harmony\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[min_index], -5.0, 5.0)\n            new_score = func(new_harmony)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                min_index = np.argmin(harmony_scores)  # Update min_index directly\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EfficientHarmonySearch", "description": "Implemented a more efficient convergence check by directly updating the harmony memory without unnecessary comparisons. Also, optimized the loop structure for better performance.", "configspace": "", "generation": 44, "fitness": 0.14680137107395425, "feedback": "The algorithm EfficientHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "c7ca4096-d7f0-4bd1-af9e-a769e699ece8", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        min_index = np.argmin(harmony_scores)\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[min_index], -5.0, 5.0)\n            new_score = func(new_harmony)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[min_index]", "name": "EnhancedHarmonySearch", "description": "ImprovedHarmonySearchEnhanced with enhanced memory utilization and adaptive bandwidth adjustment for better exploration and exploitation balance.", "configspace": "", "generation": 45, "fitness": 0.14680137107395425, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "d0382705-f68a-4d94-9a48-116d1d8ad5c5", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "c913ecf7-a9eb-4f4c-a1f0-d4eb6eae91ad", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n        self.bandwidth_adjustments = np.random.uniform(-self.bandwidth, self.bandwidth, (self.budget, self.dim))\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        min_index = np.argmin(harmony_scores)\n        for i in range(self.budget):\n            new_harmony = np.clip(self.bandwidth_adjustments[i] + harmony_memory[min_index], -5.0, 5.0)\n            new_score = func(new_harmony)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[min_index]", "name": "EnhancedHarmonySearch", "description": "Improved the loop efficiency by pre-calculating the random adjustments outside the loop and directly updating the harmony memory without repeated function evaluations.", "configspace": "", "generation": 47, "fitness": 0.14399584709580113, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6798429788139504, 0.6468860859094323, 0.603994840197379, 0.6164758768120576, 0.5492460236517351, 0.5177441837871628, 0.622609087557021, 0.5931644996160952, 0.6739515105068294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04326209376852075, 0.0006462348782444449, 9.999999999998899e-05, 0.010968743618536836, 9.999999999998899e-05, 0.029213672251456768, 0.004340553040727335, 0.02030149578768503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017007838755976667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017399042233238293, 0.11280709304538628, 0.10239542580390004, 0.1878761991031498, 0.06878688204841032, 0.0640344573774162, 0.10771733821393503, 0.08302619464036742, 0.08668676266911934, 0.1010824022143072, 0.3591897935035937, 0.4043260572440728, 0.29099241171389445, 0.2435583293011473, 0.3859292349424792, 0.3653386451696621, 0.3920160632151687, 0.23771136324092246, 0.13915594189165859, 0.06300889882858596, 0.01229547300006184, 0.03799447456734939, 9.999999999998899e-05, 0.01788765639996237, 0.0005042441679846688, 0.04872789527076582, 0.03531726386056233, 9.999999999998899e-05, 0.21268329660261498, 0.22614636615139283, 0.14026685887837864, 0.1723787727530116, 0.25802321977299714, 0.2533479426762908, 0.21126407766082922, 0.1149082425774477, 0.16214429886240034, 0.2506600837952109, 0.13094452208516372, 0.22225861081265608, 0.13283860956748994, 0.13136319661386164, 0.2189361450274454, 0.24338484810913652, 0.23216850321377502, 0.19607604414100732, 0.002180732011323183, 9.999999999998899e-05, 0.042720821142599896, 0.08711726824102839, 0.010555897378576318, 0.014636601119558001, 9.999999999998899e-05, 0.09884836055799029, 0.06898679260393292, 0.0766476632012949, 0.14230737058400356, 0.06457411596499096, 0.04816354289893465, 0.03918007327822037, 0.014763349473115306, 0.06462814320827204, 0.01583810536062813, 0.0600208451943568, 0.06967558398329943, 0.04330620754683423, 0.11216620579720782, 0.19024528120577766, 0.1329010541254798, 0.07507234562291965, 0.11910524079477769, 0.09291486143068073, 0.08934751614689773, 0.025242330412268754, 0.19272480859260754, 0.07379297257020079, 0.04273826840710537, 0.18395075963444463, 0.05301136718285582, 0.0753609173287787, 0.07840985198868278, 0.1886636570126271, 0.486033055404551, 0.5356183468202723, 0.4968519825744504, 0.4876567624296627, 0.5018812586507446, 0.5166510254817857, 0.4657586171625717, 0.5213064774993115, 0.4611119429638415, 9.999999999998899e-05, 0.03590721848254397, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629367936614967, 0.04214561875462064, 0.006818753707565128, 0.01808089185096129, 0.05218377595407908, 0.11428889469936243, 0.04279810653545624, 0.05902784018638507, 0.06662526434515981, 0.08065938021958896, 0.11020249866076937, 0.0852610877080009, 0.05134005820807774, 0.06020664376135443, 0.12419213407210195, 0.16471158930254082, 0.11219417030448964, 0.12173211577849485, 0.12061795564499533, 0.14246783917638173, 0.09704270753494748, 0.1264034066448052, 0.14697088633226363, 0.056997899265239016, 0.0957587640822869, 0.04649724846749337, 0.06230174630462515, 0.07427824475788725, 0.07306431905282329, 0.04463637774517959, 0.06721485497635382, 0.08678606317164361, 0.15986939663796051, 0.1930761653802019, 0.0872100240276188, 0.1030505643284747, 0.12306371270798666, 0.12223681744163983, 0.20115831470227852, 0.25932185687006837, 0.11315035652127792, 0.16260057111642967, 0.148644748213964, 0.16679636310187196, 0.16038797611955413, 0.1616488681698156, 0.17773168821263374, 0.16296964469776776, 0.16910640708468494, 0.19560968686822722, 0.11162989460851935, 0.8451162170949084, 0.12888073827393942, 0.11256456964532169, 0.16477155130121524, 0.152637656050835, 0.10941926210930464, 0.20167775325762416, 0.14940761836480576, 0.10546301368431754, 0.10182287977993942, 0.09431776713988316, 0.1399683034103154, 0.08315881693117755, 0.21096079971065096, 0.08769064822736727, 0.072375760536883, 0.1253474454502007, 0.19280696322713897, 0.23417387521395372, 0.2177093811399462, 0.17026133579648595, 0.180883823534862, 0.19711497987809024, 0.2321689758303882, 0.27451865785226626, 0.25671607986818645, 0.0433951038974798, 0.026329888185278483, 0.009786170733761201, 0.08860824869049433, 0.05457144656395607, 0.03125163826076083, 0.04297552444931496, 0.06897295630233602, 0.03982274752356785]}, "mutation_prompt": null}
{"id": "c0c3876a-f498-4d8b-bb3f-eb380ebb8e10", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "af2aabe2-8c3b-439b-b083-94b7701b423d", "solution": "import numpy as np\n\nclass AdvancedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n\n        for _ in range(self.budget):\n            pitch_adjustments = np.abs(harmony_memory - np.mean(harmony_memory, axis=0)) * self.pitch_adjustment_rate\n            new_harmony = np.clip(np.random.normal(np.mean(harmony_memory, axis=0), pitch_adjustments), -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "AdvancedHarmonySearchEnhanced", "description": "Implemented a more sophisticated pitch adjustment strategy based on the function landscape to improve exploration and convergence.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {}, "mutation_prompt": null}
{"id": "16eaa6d1-de14-4d4d-8823-ad10f6719de7", "solution": "import numpy as np\n\nclass AdaptiveBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, initial_bandwidth=0.01, bandwidth_decay=0.95, bandwidth_min=0.001):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate = budget, dim, harmony_memory_size, pitch_adjustment_rate\n        self.bandwidth, self.bandwidth_decay, self.bandwidth_min = initial_bandwidth, bandwidth_decay, bandwidth_min\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            self.bandwidth = max(self.bandwidth * self.bandwidth_decay, self.bandwidth_min)\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "AdaptiveBandwidthHarmonySearch", "description": "Introduce adaptive bandwidth adjustment to dynamically update the bandwidth based on the convergence behavior, aiming to balance exploration and exploitation efficiently.", "configspace": "", "generation": 50, "fitness": 0.05187999739547333, "feedback": "The algorithm AdaptiveBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.10276979291987332, 0.0913986489073888, 0.11742099828236174, 0.03489870779856574, 0.07645729482892327, 0.040727231263126495, 0.07476796327374591, 0.07425804879453612, 0.095648768502957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002244111922602876, 0.03272721106863141, 9.999999999998899e-05, 0.01931208637750592, 0.007751798779119468, 0.012167653834697867, 0.0364822884556254, 0.010896385724052049, 0.00939670608056098, 0.0026237726193104605, 9.999999999998899e-05, 9.999999999998899e-05, 0.06163855966152787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06046016005628663, 0.041941394387781994, 0.059394006950573175, 0.05229272321977407, 0.05876243239555479, 0.04231170113721294, 0.044574346436775936, 0.061759726837396944, 0.036149933405005275, 0.011195953762107136, 0.0002812900918710559, 9.999999999998899e-05, 0.012515151210573672, 0.022586856082635, 0.007069884521151981, 0.020523889051362265, 0.03070095033685616, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.01971652117832523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009823742861299611, 9.999999999998899e-05, 0.0032173425609515194, 0.04313664236009995, 9.999999999998899e-05, 0.0008001483940801579, 0.011689476266364962, 9.999999999998899e-05, 0.009017738525765706, 0.05384916670305906, 9.999999999998899e-05, 0.02609319373842578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06776823726559633, 0.025422126857796656, 0.0660400980803566, 0.06643021944021399, 9.999999999998899e-05, 0.009885865636799052, 0.12732626774683453, 0.01781738602439531, 0.022889823837800916, 9.999999999998899e-05, 0.009770931224351243, 0.010580939090515495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12582582499159978, 0.1452611177798333, 0.197838869969022, 0.11392837157955549, 0.10986301043492464, 0.1123369875442386, 0.1517441051377697, 0.11826871641068903, 0.14704919705265507, 0.014421085941573208, 9.999999999998899e-05, 9.999999999998899e-05, 0.02356822314949114, 0.014868148673585546, 0.05069485569525678, 0.017836017959188544, 0.002748299046221425, 0.07312287779668625, 0.07394302544252374, 0.08961820894557915, 0.06282532437073263, 0.11678723077661124, 0.07890509345430308, 0.06706289288914014, 0.0715760798729318, 0.05760811323299131, 0.09149157657515883, 0.11234064151355272, 0.12686061348099575, 0.11729685547057311, 0.13137115935703392, 0.11677508427432626, 0.12621884755516788, 0.13894213645572928, 0.12541963052732208, 0.10183203557934706, 0.06034582884862827, 0.05993097757999899, 0.05496538041897969, 0.08251018504471197, 0.06435708046145372, 0.057910515553486364, 0.07086592912629275, 0.06326692778230714, 0.04759078959998386, 0.18581980280063504, 0.08004364700936839, 0.1692742680941003, 0.14102519339745845, 0.10369690268452525, 0.10011666225349758, 0.1595327979399611, 0.10977101714316928, 0.15941652412987728, 0.03424942971797229, 0.012654813131804277, 0.12986998306329445, 0.002775148162473262, 0.062136433778102074, 0.11957475550214569, 0.04797263523811213, 0.01347451945232514, 0.0003955727218794003, 0.08748592270971367, 0.07205007463401503, 0.09478057386732286, 0.1217018093292952, 0.18514784911873794, 0.0919766264230164, 0.0965461956147774, 0.10030423256595333, 0.08812389567045431, 0.06793132819790659, 0.09196249566539882, 0.0520317637950104, 0.08031676583992797, 0.041984605068784764, 0.08598828146414594, 0.06265943663153262, 0.028338169920259726, 0.11911341619926696, 0.14174878302297567, 0.1447739015231817, 0.19304506897234297, 0.17353963322930355, 0.17451605261751701, 0.1954536308214906, 0.154120274064249, 0.17801359609539325, 0.26632243738346384, 0.03344436002799067, 0.046985992403969945, 0.06381325458100506, 0.015357552451114365, 0.0418929354256774, 0.015704958940857217, 0.04488573443965049, 0.0381599727953531, 0.03750933586312799]}, "mutation_prompt": null}
{"id": "f54730b1-5309-4b17-82ca-183b867f2dbe", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            worst_index = np.argmax(harmony_scores)\n            new_harmony = np.clip(harmony_memory[worst_index] + np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)), -5.0, 5.0)\n            new_score = func(new_harmony)\n            if new_score < harmony_scores[worst_index]:\n                harmony_memory[worst_index], harmony_scores[worst_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved the efficiency of harmony memory update process by directly selecting the worst harmony for replacement and avoiding unnecessary comparisons.", "configspace": "", "generation": 51, "fitness": 0.03206334028669854, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.04.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.07318648085541568, 0.06432772651221763, 0.08240222375605699, 0.020832833680525797, 0.05267361210777377, 0.025458005998005184, 0.05140423906395497, 0.05163064099738546, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032088598834665305, 0.0009374371504347057, 9.999999999998899e-05, 0.009005733240970426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07840071328182474, 0.1070271971752389, 0.14838054695461433, 0.09425923977458062, 0.08051072568095674, 0.09580441870675127, 0.1240568991094797, 0.09751665929240771, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.05468846648487902, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.05497932156064522, 0.04855804829477728, 0.07726393575557644, 0.09606267484187503, 0.0962505644704219, 0.10359778603806002, 0.10847166301008526, 0.08299910073640826, 0.08326325451723493, 0.11420206329748472, 0.1001363042967901, 0.07784834048331069, 0.033318937593247444, 0.030850512655025697, 0.03464785118471059, 0.044650675553987496, 0.0154886331024634, 0.037140780888393565, 0.05648699256316181, 0.038530072755655564, 0.011873768353786729, 0.0916346253723066, 0.06032920214938475, 0.11089882950468877, 0.10289055837941885, 0.06747178230817008, 0.08176222879441697, 0.12245976138762271, 0.06494044806858634, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04385307240429104, 0.056143274529988574, 0.05626128006000852, 0.06718871428537254, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.056615725614002965, 0.06576945475708307, 0.03824121102611444, 0.03967402848431323, 0.01699094071278673, 0.018606112313171663, 0.022574685119514326, 0.045511073114331335, 0.018965050090669178, 0.016804649217635026, 0.04159229998446934, 0.12426657002070174, 0.15683291303608526, 0.14763022729669195, 0.14129743862975042, 0.17604983607064517, 0.14640069960606306, 0.13630339850268625, 0.13797995962882947, 0.14689007985489466, 9.999999999998899e-05, 0.012204213037243616, 0.031393493129599714, 9.999999999998899e-05, 0.0058749879062220955, 0.00826091239954263, 0.00378771705097114, 9.999999999998899e-05, 0.007003257745281877]}, "mutation_prompt": null}
{"id": "5ea9651e-c674-46c0-81ac-abdaa623371e", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "a13c4858-0d99-4240-b456-bfb9a807f474", "solution": "import numpy as np\n\nclass DynamicBandwidthImprovedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, initial_bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate = budget, dim, harmony_memory_size, pitch_adjustment_rate\n        self.initial_bandwidth = initial_bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        bandwidth = self.initial_bandwidth\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-bandwidth, bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n            bandwidth = self.initial_bandwidth / (1 + i)  # Dynamic bandwidth adjustment\n        \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicBandwidthImprovedHarmonySearch", "description": "Implemented a dynamic bandwidth adjustment strategy based on the iteration count to adapt search behavior over time efficiently.", "configspace": "", "generation": 53, "fitness": 0.03524896729544721, "feedback": "The algorithm DynamicBandwidthImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.0723088686094292, 0.06463002413646934, 0.08294363806014204, 0.019916386960425414, 0.05305811593228538, 0.025718667954281793, 0.05179553469734832, 0.052008564303756444, 0.06739696096590164, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008754298278015, 9.999999999998899e-05, 0.0013963810665013066, 0.0022946675909002456, 9.999999999998899e-05, 0.023042069529261022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022886641269350028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04554926871653808, 0.03390660778219623, 0.043183940917463914, 0.03943484179032908, 0.04716942997613027, 0.03086999018744807, 0.033605332849412695, 0.04930476987841781, 0.026113556012457906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000695276284783497, 9.999999999998899e-05, 9.999999999998899e-05, 0.011639577939927204, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023668346171352606, 9.999999999998899e-05, 0.06152425524236638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07908539147284643, 0.10759663893830207, 0.1488853917059283, 0.09457982106422036, 0.08098306709690184, 0.09640050311959114, 0.12437720040171263, 0.09763598579759813, 0.12137641148363032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008522178310762296, 9.999999999998899e-05, 0.018832334967182174, 9.999999999998899e-05, 9.999999999998899e-05, 0.03106160888779963, 0.07369088685005665, 0.07808600333756144, 0.06091721862836763, 0.10677678147430014, 0.07526447993396157, 0.060304255311462995, 0.05929446399698668, 0.050847900199780804, 0.08130071510550241, 0.09890933086638565, 0.10140199380494519, 0.10732270355033358, 0.11120448796944549, 0.08515942986919067, 0.08756529805581614, 0.12102822369734334, 0.1035040606386799, 0.07962872885739158, 0.039264277452094376, 0.03898743992774378, 0.03640042937482579, 0.05508609898562877, 0.023416329560249638, 0.04288053174068973, 0.06925332478710566, 0.04171776281526196, 0.013991048662924332, 0.18364378890445798, 0.08047700365694033, 0.16995644308798963, 0.12648693413871892, 0.10419629957113741, 0.10058632150862545, 0.13111200744572982, 0.10982656353444964, 0.15769381545105188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04478218241585963, 0.056532834328118065, 0.05810627073070773, 0.0681858072788678, 0.12229011409152257, 0.06325040440430185, 0.06215134159253555, 0.05751994680700134, 0.054315726746551496, 0.038795898189277644, 0.043014335606238685, 0.016604236084219015, 0.019107061174771678, 0.021782180663165285, 0.046560807281928684, 0.019391727966231564, 0.01603459204103097, 0.044005149970496316, 0.11168660572623446, 0.14693553629676803, 0.1714898740325128, 0.12745374233525109, 0.1571304593872892, 0.14723484312226065, 0.145559205603066, 0.11936917505027012, 0.186355094507189, 0.009731571098278491, 0.02506306332858732, 0.049542065421716686, 0.008139198809057224, 0.017075462063867786, 0.013392021372229612, 0.012028897480819034, 0.016688443415651677, 0.018631641881315053]}, "mutation_prompt": null}
{"id": "5042643b-2786-4b6d-bf1b-fb52fc1c3299", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "c1b321d0-4980-4eaf-bd3a-c669890d46b8", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "7f862408-a167-4b33-ac0c-b53f0acea4ad", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "b66d6ee5-e77c-47b1-b166-3c6485d40da0", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, initial_bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate = budget, dim, harmony_memory_size, pitch_adjustment_rate\n        self.bandwidth = initial_bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                improvement_rate = (harmony_scores[min_index] - new_score) / harmony_scores[min_index]\n                self.bandwidth *= 1.1 if improvement_rate > 0.8 else 0.9  # Dynamic bandwidth adjustment\n\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicBandwidthHarmonySearch", "description": "Improved the algorithm by incorporating a dynamic bandwidth adjustment mechanism based on the fitness improvement rate of the harmonies, leading to more efficient exploration-exploitation balance.", "configspace": "", "generation": 57, "fitness": 0.0395052717945569, "feedback": "The algorithm DynamicBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.07289248389205549, 0.06533244931386994, 0.08357257784229821, 0.020296760106054745, 0.05346350402253197, 0.02591416422202042, 0.052194186451832825, 0.052410307117302324, 0.06801867645538873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022072162944768436, 9.999999999998899e-05, 0.0041179822446180125, 0.004217481847426985, 9.999999999998899e-05, 0.026136832204098237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026124155627740175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04581838183219622, 0.03421469029547575, 0.043449583904188294, 0.03983934857247717, 0.04760377063198373, 0.031195538500003228, 0.03400633124705277, 0.04975129117443999, 0.026341224893173032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00136660064687244, 9.999999999998899e-05, 9.999999999998899e-05, 0.012203552948408247, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02374281700647185, 9.999999999998899e-05, 0.06499860910735389, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08007786886883328, 0.10856887875210364, 0.14965279844478296, 0.09489551678854857, 0.08161548861967693, 0.09674904625714353, 0.12480136537829933, 0.0982232915626764, 0.1220278858842796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011874267972097008, 9.999999999998899e-05, 0.021587645213703266, 9.999999999998899e-05, 9.999999999998899e-05, 0.03740405253809098, 0.08409030484177582, 0.08894518855057576, 0.07206719978055065, 0.12928108807034555, 0.07969270763429614, 0.07194699054426257, 0.07373610119788243, 0.05901863055838763, 0.0926134415108365, 0.10260390135912112, 0.1085833962990882, 0.1086859391524928, 0.112722779817517, 0.08669586931547857, 0.09019123945880803, 0.13012002640958287, 0.1078085754696596, 0.08172784157280288, 0.04375858009834155, 0.047841923794167074, 0.037420632504732376, 0.05981946744673261, 0.03508238827624577, 0.048425770601906115, 0.07025684940838606, 0.045935550901560984, 0.018855507109957426, 0.18286891290818674, 0.07896152201180939, 0.16695776887626435, 0.1412655542830309, 0.1034059075809064, 0.09917789388768905, 0.1622275386466565, 0.10938776520286064, 0.16075830753161757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0454798933933831, 0.05718832541741936, 0.059662378940746774, 0.06915210963851859, 0.12479157978422262, 0.06450937613839358, 0.06360710255948143, 0.05889293119348327, 0.05518796614573307, 0.03961043075196613, 0.04489944215666053, 0.0169445770113823, 0.019419706007819726, 0.0221479820364906, 0.047441591930688976, 0.019749772482511974, 0.016245605245042705, 0.04636076120627164, 0.18533746144869356, 0.19892240175955922, 0.2178907575845178, 0.2183085149035785, 0.22711529578984513, 0.212317612961322, 0.15134347420503802, 0.1873876734574289, 0.2667849129315205, 0.020737953218973204, 0.030869345535379344, 0.058441025220532516, 0.01318228097706764, 0.02527328002138929, 0.015711905252986824, 0.027781076729256893, 0.024921903098143794, 0.030846210618920344]}, "mutation_prompt": null}
{"id": "c5c85aad-1e97-43a1-91d1-0a5b12d388ba", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "c59dd5c4-a44c-4cd0-a671-ec149e40d7a0", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "e561b41c-98a7-4dbd-91e5-498fb054824e", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "cf2ede6d-d6f9-428b-a523-2ea081411321", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "6be49b66-9f54-4750-88aa-b01d7c8203c9", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "29386b76-2c14-4e1f-9cb5-260f25ade82f", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "de895d0f-30b3-421c-a790-1223465e00d5", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "45382c2a-f27e-42c0-822c-5ae8e1d50ff4", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "aa7f8d11-bbe9-4c96-b233-a46bcfeedbde", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "77caf6dd-72fb-494c-abdd-b25e75bbad26", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "3d42405b-ccb9-4066-b6cf-7cc661106449", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "7b862b4e-a5b0-4f80-a726-fbb158722b27", "solution": "import numpy as np\n\nclass VectorizedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            better_mask = new_score < harmony_scores\n            harmony_memory[min_index], harmony_scores[min_index] = np.where(better_mask, new_harmony, harmony_memory[min_index]), np.where(better_mask, new_score, harmony_scores[min_index])\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "VectorizedHarmonySearch", "description": "Improved the handling of random numbers generation and harmony memory update process by vectorizing operations for efficiency.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (5,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (5,) (5,) ')", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {}, "mutation_prompt": null}
{"id": "b828b35e-c7c7-4bc3-bb72-4f81153ac9f8", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01, max_unchanged_iter=50):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth, self.max_unchanged_iter = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth, max_unchanged_iter\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        unchanged_counter = 0\n        best_index = np.argmin(harmony_scores)\n        best_score = harmony_scores[best_index]\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[best_index], -5.0, 5.0)\n            new_score = func(new_harmony)\n            \n            if new_score < best_score:\n                harmony_memory[best_index], harmony_scores[best_index] = new_harmony, new_score\n                unchanged_counter = 0\n                best_index = np.argmin(harmony_scores)\n                best_score = harmony_scores[best_index]\n            else:\n                unchanged_counter += 1\n            \n            if unchanged_counter >= self.max_unchanged_iter:\n                break\n                \n        return harmony_memory[best_index]", "name": "EnhancedHarmonySearch", "description": "Improved convergence criteria by introducing a stopping criterion based on a maximum number of unchanged iterations. Removed unnecessary variable assignments for efficiency.", "configspace": "", "generation": 70, "fitness": 0.12786154530750288, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.14.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.5808425860234367, 0.5401871423602638, 0.5745950915823211, 0.47202694074171525, 0.5499831088574041, 0.45505073305441934, 0.5336206951487346, 0.5144423334140893, 0.5610038734787988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0023862343401271913, 0.03276342254161502, 0.0, 0.02103788810836993, 0.007744867508655107, 0.013031326001296528, 0.03581142531795778, 0.013540916209618281, 0.00980866562088345, 0.004232284549382848, 0.0, 0.0, 0.06352562308039655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11354916057560949, 0.08282401406850892, 0.17091411241319654, 0.10423084620865808, 0.0891257612886186, 0.08128948852687667, 0.08111590655560996, 0.09487790757480108, 0.06569763505471182, 0.3216197819372968, 0.3424191647613467, 0.1775004162585112, 0.35599026768424524, 0.3347143671590924, 0.33888502497581097, 0.38715480292994964, 0.3111663745691512, 0.2668821339889188, 0.1001868586914183, 0.03765971698870685, 0.006388112346703334, 0.004462664352365198, 0.0, 0.0, 0.026181922062048946, 0.0, 0.009809447265860194, 0.14603973539437232, 0.13871506022627067, 0.16264193170204455, 0.14968037696149583, 0.13067162742746696, 0.14793885779390292, 0.19791885622102945, 0.17141745328094316, 0.18023656103764463, 0.19714895529425036, 0.0766292285147201, 0.12060207377121346, 0.17819264822753955, 0.16809566690730704, 0.2062899471870695, 0.21044744343307398, 0.08095934604990818, 0.1922008521207903, 0.0, 0.0, 0.0, 0.0, 0.0381391091707719, 0.0, 0.0, 0.0, 0.0, 0.07002157769122896, 0.023651264311729703, 0.06461004728579922, 0.06463401381342304, 0.0, 0.009684658798474466, 0.1395930018291749, 0.018363553117149656, 0.035082770680370245, 0.046075907072536726, 0.05334296306565922, 0.05195723436868305, 0.07336403413538028, 0.05811194779991269, 0.052717451187178965, 0.03652783057391984, 0.07047811425765016, 0.031664300654110744, 0.07227974762658229, 0.06276122606055867, 0.07242740204766884, 0.097916081291197, 0.006330714175907581, 0.1568089269191031, 0.06061643561094787, 0.06697736736199822, 0.07188804491248413, 0.4157784919367734, 0.44006560338593337, 0.43485599142040576, 0.40297443926865795, 0.43604978843662334, 0.37377468642921396, 0.4121740501003732, 0.3915425293340302, 0.40606351464944623, 0.016638135859879055, 0.0, 0.0, 0.0237832057545051, 0.01358790569795143, 0.05214410854881202, 0.019289670468289333, 0.0028583201113410173, 0.0742319749476894, 0.08272046763493979, 0.0910223892471238, 0.06782380383828279, 0.13189381598197636, 0.07566480763251804, 0.07021817861924251, 0.07191701888131696, 0.06735140171720211, 0.11009890763824459, 0.11260552889860664, 0.12665135310854692, 0.11740624154980073, 0.1321847148899855, 0.12178298483276717, 0.1284660933573497, 0.1390182570224291, 0.12591849571717662, 0.10319195718187835, 0.06082770571672225, 0.059987685429237714, 0.056128128361763396, 0.08302317317691743, 0.06550121853624791, 0.05806384988174118, 0.06994689678306198, 0.06397071006064292, 0.04951153216278248, 0.16491645502527008, 0.07336925911175751, 0.15226549053893756, 0.12189134794549805, 0.09553356796769752, 0.09616419055766112, 0.16132020413024672, 0.10840386781945854, 0.15441698484926725, 0.16913456782172487, 0.15719875710129494, 0.18444184106966877, 0.17853582393635448, 0.17708523101690643, 0.19260273956977925, 0.16532421689529653, 0.17215267674686252, 0.13262579737547608, 0.11685801812512542, 0.07615003224182004, 0.13201096437022863, 0.16893536367283446, 0.201201345462648, 0.10785741137894056, 0.1471398000009132, 0.11374794130743471, 0.10249851096824936, 0.08187800824603442, 0.11115605974609533, 0.43970824196969804, 0.621518344719288, 0.05760413243671414, 0.1994005474974635, 0.15679509618547405, 0.0699307241302014, 0.39675874473514194, 0.17280643624961778, 0.17170933192464022, 0.1950998372568188, 0.18776146917709657, 0.1922716813401425, 0.1823905909267075, 0.13452258033643316, 0.17168946465819168, 0.20897332271530378, 0.0333989131391057, 0.04647357921429485, 0.06312763950376643, 0.013324868593732053, 0.04128696084060646, 0.015233459689151463, 0.04377196861587196, 0.03748575267167198, 0.037390495137428315]}, "mutation_prompt": null}
{"id": "834a88ba-807c-4a8c-bdb0-c7675dcc16b5", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "5e0c4dc1-1b2b-4c2d-8225-1953a8495919", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, initial_bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.initial_bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, initial_bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        bandwidth = self.initial_bandwidth\n        \n        for t in range(1, self.budget + 1):\n            new_harmony = np.clip(np.random.uniform(-bandwidth, bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n            bandwidth = self.initial_bandwidth * np.exp(-self.pitch_adjustment_rate * t / self.budget)\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicBandwidthHarmonySearch", "description": "Improved convergence speed by adjusting the bandwidth dynamically based on the iteration count.", "configspace": "", "generation": 72, "fitness": 0.14660393454678852, "feedback": "The algorithm DynamicBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6078377985973239, 0.6016456410528075, 0.6375911821200805, 0.5040651262817799, 0.5923752634056999, 0.5040741930355308, 0.5762591504841799, 0.5757333037417959, 0.60103668488957, 0.04747915226926247, 0.023075584752543676, 0.0031939306986467075, 0.09079828729994022, 9.999999999998899e-05, 9.999999999998899e-05, 0.02576821631391446, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497710969952993, 0.03300037358114527, 9.999999999998899e-05, 0.021274818917999427, 0.007860978516593287, 0.013223568501186445, 0.036787690251181115, 0.013648925827830283, 0.009910884717562074, 0.004345522503620858, 9.999999999998899e-05, 9.999999999998899e-05, 0.06372113755281139, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12647174432877384, 0.08085939191819325, 0.3644415167776357, 0.1084605572685341, 0.0887347923642896, 0.08031405742746789, 0.08094658014766987, 0.09686761697342738, 0.06539059225271249, 0.3839191657701607, 0.3805431107374344, 0.1844328197973364, 0.39433045401498334, 0.4293997610272511, 0.38291965006367534, 0.43417425053298586, 0.3686186842196658, 0.3015658356905274, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14717305719763518, 0.1587985145607621, 0.19833938374070714, 0.17576155614780342, 0.1546680774142455, 0.17991953870472388, 0.23453824428438053, 0.2032461623641355, 0.24138725216859935, 0.2767597026337536, 0.07643125695168507, 0.12102697767304693, 0.2395628085171747, 0.18858642917997415, 0.23515741553049074, 0.2622353777286377, 0.08231929551282136, 0.2366158613584608, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005968173610162442, 0.04327054056359625, 0.05529635687530132, 0.04259778363512012, 0.003910793563971171, 9.999999999998899e-05, 9.999999999998899e-05, 0.07815358065537803, 0.02947822325010696, 0.07379274787907197, 0.06889325111737765, 0.00015699542041203163, 0.014910344373066486, 0.1575596592641445, 0.022442440050593038, 0.04003842470673957, 0.07060609365184178, 0.07389790415880304, 0.13612573795558602, 0.10476729285121222, 0.09020250413774755, 0.07525185131729706, 0.06558083047002672, 0.100143566197059, 0.06224561608754142, 0.0738503337047055, 0.06488062395713567, 0.07367247046027081, 0.10392161442755676, 0.012000794784079893, 0.17906785980277728, 0.06202307659497042, 0.06781989542659572, 0.07219151270626278, 0.5041109770207528, 0.5043849604987581, 0.5578370028659893, 0.48819321021227846, 0.48700119203414605, 0.4374472897593312, 0.5054400116200655, 0.4573285296036249, 0.5085023615687143, 0.016763882621248394, 9.999999999998899e-05, 9.999999999998899e-05, 0.023893435503297256, 0.013692217153738806, 0.052311628800780996, 0.0193969782561082, 0.0029738216149862717, 0.0744359736385688, 0.08610423147657187, 0.10053732807600113, 0.0781012806339264, 0.14101340452641487, 0.08051313064198784, 0.07312782592821254, 0.10706217450247746, 0.0718788726213283, 0.11364560301793303, 0.11270722861403193, 0.12821014972492395, 0.11750541816476401, 0.1322858570201737, 0.1218724677142693, 0.12858076975705846, 0.1391365133831417, 0.1260182997127347, 0.10328554849143023, 0.06095718004677875, 0.06011522799322411, 0.05626448216673996, 0.08312885489577715, 0.06569332099589942, 0.05817831835935028, 0.07085276973534727, 0.06411488565736112, 0.04961690631651183, 0.1680369458907799, 0.08002736079854966, 0.1638366744593175, 0.13936240562042135, 0.10236753236574547, 0.09963750423846962, 0.18630751384645305, 0.1101886689798075, 0.16045081144428164, 0.16917375163157555, 0.16399853769311923, 0.18453337301453687, 0.17961970263247262, 0.17911013672673037, 0.1933085222857983, 0.16538975779707032, 0.16561054439705658, 0.14167320843962683, 0.11693638540797424, 0.07624203840681565, 0.13205364360683614, 0.16900086278897453, 0.2012826006434164, 0.10791915604821456, 0.14717970108045753, 0.1138339345755327, 0.10258484161013748, 0.0819656353268543, 0.11126188169325901, 0.6519290465469028, 0.7595977758240143, 0.057692913830615034, 0.19938384691736089, 0.15679798548992097, 0.07000965196601339, 0.5456114422912202, 0.18919519806580087, 0.1871019128161613, 0.20987071359325993, 0.2680834659215179, 0.25530763192846584, 0.22897607811869536, 0.1557386706024927, 0.17950307826656475, 0.2448567467122441, 0.03366443715127787, 0.04716203241501149, 0.06373217180849933, 0.015347436091948885, 0.04247615494719137, 0.015679244938938464, 0.04518026788287299, 0.038241082139718996, 0.03756410684741296]}, "mutation_prompt": null}
{"id": "f9ed977d-2df4-4769-a6e9-5eb539018b4d", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "c5be3530-ba96-49ec-b77b-b4ce08b21b8c", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "6ab79d60-8de8-46d5-a135-177825486f0b", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "204c6c34-945e-4fcb-8ead-aa0dc54efa24", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n        self.random_offsets = np.random.uniform(-self.bandwidth, self.bandwidth, (self.budget, self.dim))\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for i in range(self.budget):\n            min_index = np.argmin(harmony_scores)\n            new_harmony = np.clip(self.random_offsets[i] + harmony_memory[min_index], -5.0, 5.0)\n            new_score = func(new_harmony)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved efficiency by precomputing random values and minimizing function evaluations inside the loop.", "configspace": "", "generation": 76, "fitness": 0.14399584709580113, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6798429788139504, 0.6468860859094323, 0.603994840197379, 0.6164758768120576, 0.5492460236517351, 0.5177441837871628, 0.622609087557021, 0.5931644996160952, 0.6739515105068294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04326209376852075, 0.0006462348782444449, 9.999999999998899e-05, 0.010968743618536836, 9.999999999998899e-05, 0.029213672251456768, 0.004340553040727335, 0.02030149578768503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017007838755976667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017399042233238293, 0.11280709304538628, 0.10239542580390004, 0.1878761991031498, 0.06878688204841032, 0.0640344573774162, 0.10771733821393503, 0.08302619464036742, 0.08668676266911934, 0.1010824022143072, 0.3591897935035937, 0.4043260572440728, 0.29099241171389445, 0.2435583293011473, 0.3859292349424792, 0.3653386451696621, 0.3920160632151687, 0.23771136324092246, 0.13915594189165859, 0.06300889882858596, 0.01229547300006184, 0.03799447456734939, 9.999999999998899e-05, 0.01788765639996237, 0.0005042441679846688, 0.04872789527076582, 0.03531726386056233, 9.999999999998899e-05, 0.21268329660261498, 0.22614636615139283, 0.14026685887837864, 0.1723787727530116, 0.25802321977299714, 0.2533479426762908, 0.21126407766082922, 0.1149082425774477, 0.16214429886240034, 0.2506600837952109, 0.13094452208516372, 0.22225861081265608, 0.13283860956748994, 0.13136319661386164, 0.2189361450274454, 0.24338484810913652, 0.23216850321377502, 0.19607604414100732, 0.002180732011323183, 9.999999999998899e-05, 0.042720821142599896, 0.08711726824102839, 0.010555897378576318, 0.014636601119558001, 9.999999999998899e-05, 0.09884836055799029, 0.06898679260393292, 0.0766476632012949, 0.14230737058400356, 0.06457411596499096, 0.04816354289893465, 0.03918007327822037, 0.014763349473115306, 0.06462814320827204, 0.01583810536062813, 0.0600208451943568, 0.06967558398329943, 0.04330620754683423, 0.11216620579720782, 0.19024528120577766, 0.1329010541254798, 0.07507234562291965, 0.11910524079477769, 0.09291486143068073, 0.08934751614689773, 0.025242330412268754, 0.19272480859260754, 0.07379297257020079, 0.04273826840710537, 0.18395075963444463, 0.05301136718285582, 0.0753609173287787, 0.07840985198868278, 0.1886636570126271, 0.486033055404551, 0.5356183468202723, 0.4968519825744504, 0.4876567624296627, 0.5018812586507446, 0.5166510254817857, 0.4657586171625717, 0.5213064774993115, 0.4611119429638415, 9.999999999998899e-05, 0.03590721848254397, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629367936614967, 0.04214561875462064, 0.006818753707565128, 0.01808089185096129, 0.05218377595407908, 0.11428889469936243, 0.04279810653545624, 0.05902784018638507, 0.06662526434515981, 0.08065938021958896, 0.11020249866076937, 0.0852610877080009, 0.05134005820807774, 0.06020664376135443, 0.12419213407210195, 0.16471158930254082, 0.11219417030448964, 0.12173211577849485, 0.12061795564499533, 0.14246783917638173, 0.09704270753494748, 0.1264034066448052, 0.14697088633226363, 0.056997899265239016, 0.0957587640822869, 0.04649724846749337, 0.06230174630462515, 0.07427824475788725, 0.07306431905282329, 0.04463637774517959, 0.06721485497635382, 0.08678606317164361, 0.15986939663796051, 0.1930761653802019, 0.0872100240276188, 0.1030505643284747, 0.12306371270798666, 0.12223681744163983, 0.20115831470227852, 0.25932185687006837, 0.11315035652127792, 0.16260057111642967, 0.148644748213964, 0.16679636310187196, 0.16038797611955413, 0.1616488681698156, 0.17773168821263374, 0.16296964469776776, 0.16910640708468494, 0.19560968686822722, 0.11162989460851935, 0.8451162170949084, 0.12888073827393942, 0.11256456964532169, 0.16477155130121524, 0.152637656050835, 0.10941926210930464, 0.20167775325762416, 0.14940761836480576, 0.10546301368431754, 0.10182287977993942, 0.09431776713988316, 0.1399683034103154, 0.08315881693117755, 0.21096079971065096, 0.08769064822736727, 0.072375760536883, 0.1253474454502007, 0.19280696322713897, 0.23417387521395372, 0.2177093811399462, 0.17026133579648595, 0.180883823534862, 0.19711497987809024, 0.2321689758303882, 0.27451865785226626, 0.25671607986818645, 0.0433951038974798, 0.026329888185278483, 0.009786170733761201, 0.08860824869049433, 0.05457144656395607, 0.03125163826076083, 0.04297552444931496, 0.06897295630233602, 0.03982274752356785]}, "mutation_prompt": null}
{"id": "430d91d0-ac88-4ca6-932c-7159623ef288", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "6a45c2c2-51b0-4011-82ac-aa972f6b2ffc", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved the convergence check by only updating the memory when the new harmony has a better score, reducing unnecessary comparisons.", "configspace": "", "generation": 78, "fitness": 0.14680137107395425, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "9ba87a2d-9ee3-4ebb-96a3-2864fb10d311", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedHarmonySearch", "description": "Improved convergence criteria by updating only if the new harmony has a better score.", "configspace": "", "generation": 79, "fitness": 0.14680137107395425, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "75b31544-7708-4443-ad83-f00ca028caa5", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "5099a3b2-d934-4245-8530-78c94cf0b563", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchEnhanced:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-self.bandwidth, self.bandwidth, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index], harmony_scores[min_index] = new_harmony, new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "ImprovedHarmonySearchEnhanced", "description": "Simplified the convergence check and update process by directly updating the best harmony in each iteration without unnecessary comparison.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.6131453749626781, 0.6104240498707416, 0.6331679845527292, 0.5184010977595752, 0.5821565590113913, 0.49515004206962454, 0.5984548682283846, 0.5760450874028513, 0.6026296482651003, 0.07638923854788593, 0.024969572193232703, 0.003800610452403763, 0.09271917155635834, 9.999999999998899e-05, 9.999999999998899e-05, 0.02778493746213495, 9.999999999998899e-05, 9.999999999998899e-05, 0.002497623261797033, 0.03300138866452196, 9.999999999998899e-05, 0.021275577006993784, 0.007860920815997319, 0.013222965914227669, 0.036788815903731065, 0.01365078101291095, 0.009911283905413959, 0.004347054324478461, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371715864716188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14893626141227034, 0.08302614498861438, 0.39029298821371416, 0.11224378873388874, 0.08974956443851789, 0.08128948852687667, 0.08216623643164511, 0.09818033345135613, 0.06605405051314805, 0.3675117312371693, 0.3617663000232567, 0.19292410120988823, 0.37397003483119284, 0.44656651973570693, 0.38371996235409955, 0.4307282371112714, 0.3609829815682344, 0.2943819552364475, 0.10027683525177622, 0.03775594762470191, 0.008278685370951777, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.14645903465111954, 0.16492531965503443, 0.19901907923001894, 0.1776979931115551, 0.15690170231600764, 0.17846475277756924, 0.24505686190429854, 0.20028208572995732, 0.23584580295126556, 0.27037158764275204, 0.08120377244841892, 0.1212725489038281, 0.24328985778555057, 0.19620342265961588, 0.23586485313455596, 0.26032925401253915, 0.08743833581149374, 0.23688482145533563, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002778652098146539, 0.03944262542857302, 0.05257379935042317, 0.04315999955683436, 0.004047395728496328, 9.999999999998899e-05, 0.0002208763770544797, 0.07812017510687619, 0.029679487506664715, 0.07312665012467245, 0.06905679958989108, 0.00023058854578872356, 0.01574862319211001, 0.1587800908059993, 0.02243134195106722, 0.03991449144194703, 0.08043925642242289, 0.07747603203780673, 0.12270639743129463, 0.11335029404520502, 0.09707466329054293, 0.07101029596912178, 0.06611672854407757, 0.1017813630262755, 0.06002808231447965, 0.07409597473026786, 0.06438650104389321, 0.07395518632875264, 0.10286604713578507, 0.012697868519237598, 0.18536401980435513, 0.06167568635714282, 0.0695571469393873, 0.07265459352346681, 0.4922019129652916, 0.5001091928255296, 0.5298769511993884, 0.47997831934217405, 0.48459263967216326, 0.4546633614812937, 0.4954988957283937, 0.4456808235348815, 0.4967923984951853, 0.01676235708867313, 9.999999999998899e-05, 9.999999999998899e-05, 0.023892663994355412, 0.01369442310377822, 0.052311674895300864, 0.019399514009651675, 0.002974475915135333, 0.07443516076494439, 0.08562784339883422, 0.10088594807836238, 0.07845406648472564, 0.14081126109062736, 0.07956436829026803, 0.07317955989524949, 0.10740226807109887, 0.07107232849325062, 0.11478054619406375, 0.112707341510761, 0.12820173645588728, 0.11750541325555819, 0.13228572945167183, 0.12187154735071248, 0.12857993647344224, 0.1391362819828289, 0.12601829063284808, 0.10328551567299094, 0.06095556028449245, 0.060114922991243325, 0.056278094940007906, 0.08312884975790225, 0.06569270772876734, 0.05817814117387987, 0.07085245748455749, 0.06411423460001131, 0.04961739593097625, 0.17066685392528558, 0.07845026738659633, 0.1651195986394094, 0.14074290789968524, 0.10235788587656336, 0.09946610216895746, 0.1879398119307757, 0.10929680042879186, 0.1606891371090694, 0.16923105844031672, 0.15907049022220932, 0.18453997238512487, 0.17957145674347852, 0.1790406525547381, 0.19329955312152913, 0.16542478252324477, 0.1722676505570787, 0.14281950844080715, 0.1169465381537379, 0.07624298209012048, 0.13210276697081857, 0.16901928745279804, 0.2012856786950209, 0.10795358913613506, 0.14723106112021578, 0.11383692353507358, 0.10258842342357444, 0.08197027716598038, 0.11128186984948607, 0.6440915068223954, 0.7665843759866904, 0.05769850783686359, 0.19948094518473003, 0.15687996902842116, 0.0700240947850489, 0.5499889384754143, 0.17655874919830583, 0.18633655199692645, 0.2093565951755949, 0.26573910989454075, 0.26492030996063254, 0.22327250880046157, 0.15568071717429144, 0.17937852399889886, 0.24383530470259762, 0.033661821678338866, 0.047161474733007025, 0.0637163917696324, 0.015346377210914808, 0.04247718965004188, 0.01567861969609019, 0.04517958233359587, 0.03824194869831676, 0.03756305525124537]}, "mutation_prompt": null}
{"id": "4ecacdf3-7651-4d5f-b136-b022c44b3cbc", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for i in range(self.budget):\n            pitch_adjustment_rate = self.initial_pitch_adjustment_rate * (1 - i / self.budget)  # Dynamic pitch adjustment rate\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate, pitch_adjustment_rate, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicPitchHarmonySearch", "description": "Improved efficiency by implementing a dynamic pitch adjustment rate based on iteration progress and removing unnecessary array creation for harmony memory update.", "configspace": "", "generation": 82, "fitness": 0.1859762291610505, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "dabdc360-50bb-492f-9845-8071315c1b90", "metadata": {"aucs": [0.5628306394880144, 0.5657482992410228, 0.5751981559735286, 0.5473063539012564, 0.5892501773930711, 0.5826326887997554, 0.5747772792913789, 0.5721138420127961, 0.5677510660494014, 0.05615104271845994, 0.03014266160168222, 0.008893159761985903, 0.07548505312749842, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498184233895685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261123396759835, 9.999999999998899e-05, 0.02111541292360375, 0.00774445756416442, 0.015059815288102074, 0.0363302269061071, 0.013523284787665624, 0.009833507130796004, 0.002819877922769054, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335433061948881, 9.999999999998899e-05, 9.999999999998899e-05, 0.02561104837171002, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904917739984128, 0.7451515307225924, 0.9204732310003234, 0.8779473396258948, 0.742729299450281, 0.8016971546760092, 0.7358046148461281, 0.8632600733829424, 0.7282919146437776, 0.41433428748369827, 0.4265938929107155, 0.40227346744333436, 0.4178164711852944, 0.4201497102447024, 0.42557828157728395, 0.4131843427914388, 0.43836852084631384, 0.42443561139028485, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154242079377035, 0.1332650062745614, 0.22279779884231932, 0.22953025328054055, 0.23326536462577852, 0.2397860868687578, 0.246630022948775, 0.24261069112780975, 0.23164215371268293, 0.2537493389335691, 0.18377307975373036, 0.13706210398757268, 0.2521915073552624, 0.24236602467896218, 0.23356559095162277, 0.24662431952644126, 0.1952910596528581, 0.2194097038269054, 9.999999999998899e-05, 0.007852673492765305, 0.00010030186458243051, 0.08188531981056946, 0.06384922832656392, 0.018407403763186614, 0.002598591202371048, 9.999999999998899e-05, 0.007336487972021688, 0.09635255385782293, 0.04149968957838268, 0.0826162380546257, 0.07227561272991168, 0.005953272559808265, 0.02309691047888318, 0.1666343431013555, 0.03465242285892056, 0.04526519290229991, 0.015428221950918308, 0.02977787366790563, 0.027880488200420217, 0.031868972749602875, 0.03169855797270671, 0.021221934033874512, 0.02095805760066738, 0.0628548678055757, 0.022788703324813975, 0.10788528049977908, 0.09890892826519726, 0.11481546298471568, 0.15502374097581562, 0.07518733612042527, 0.15715765584031471, 0.10046436361943467, 0.08869596783364286, 0.11958446505766696, 0.5030836283180017, 0.5149001927654608, 0.5097157421146645, 0.5442338577233639, 0.498281834203672, 0.5070556986225638, 0.5158366691887758, 0.5318798696449415, 0.49244974511936657, 0.017237983600703943, 9.999999999998899e-05, 9.999999999998899e-05, 0.0237768102526148, 0.006697877045465095, 0.056599031150968204, 0.01941753445607952, 0.0028138550062200007, 0.08467142325173149, 0.16568209815948598, 0.19959379867813565, 0.16594493573663915, 0.25522356105916744, 0.14526397503224886, 0.2058723352226587, 0.12319170844369287, 0.10127997732484706, 0.1355041930462123, 0.11265718458322194, 0.1280156599388922, 0.11746607332099279, 0.1322570694094649, 0.11986948989595891, 0.1287568671121695, 0.1450621120118749, 0.12602368717823098, 0.10342415615082534, 0.060882150582828753, 0.06235073028254379, 0.05654102157890062, 0.08213743639868976, 0.06344543405829539, 0.0589736722915859, 0.07490067667567946, 0.06377832820719997, 0.04970112183063269, 0.1728216873372581, 0.0873295442332026, 0.16363285745793876, 0.140926711175958, 0.09724672463660389, 0.10413426262693248, 0.19730180066324043, 0.12070466596808471, 0.16314708328500294, 0.18800688865582604, 0.18959110078348906, 0.1900616213906443, 0.16188256995424744, 0.19973586616393735, 0.1999756596783442, 0.17133885233759905, 0.18105778989225596, 0.16467725203978678, 0.11996094130337154, 0.07666971665502076, 0.13705303093563215, 0.17379866111635345, 0.20286280871626083, 0.10993791717303736, 0.15404380651219585, 0.11527083597549559, 0.1040354164555225, 0.08345522994972676, 0.11346079676343857, 0.8020684297889105, 0.8420820729833899, 0.059238831899331434, 0.21371542058368553, 0.16943227570585617, 0.0734392526155152, 0.6866525739038194, 0.2005455965595273, 0.20418023938525276, 0.1958868522287034, 0.20413552543376845, 0.19984422017330095, 0.20577301995209962, 0.19513031343458465, 0.18997982054717344, 0.20006226269614913, 0.03797280171286088, 0.042661908555989836, 0.061608504240736495, 0.014219028547030055, 0.03547083368948356, 0.016862439334063506, 0.04353524875117676, 0.03674576009902175, 0.03695523000607459]}, "mutation_prompt": null}
{"id": "4e16b56f-65c5-4ff6-b869-049ae2b7cc67", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for i in range(self.budget):\n            pitch_adjustment_rate = self.initial_pitch_adjustment_rate * (1 - i / self.budget)  # Dynamic pitch adjustment rate\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate, pitch_adjustment_rate, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicPitchHarmonySearch", "description": "Improved efficiency by implementing a dynamic pitch adjustment rate based on iteration progress and removing unnecessary array creation for harmony memory update.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4ecacdf3-7651-4d5f-b136-b022c44b3cbc", "metadata": {"aucs": [0.5628306394880144, 0.5657482992410228, 0.5751981559735286, 0.5473063539012564, 0.5892501773930711, 0.5826326887997554, 0.5747772792913789, 0.5721138420127961, 0.5677510660494014, 0.05615104271845994, 0.03014266160168222, 0.008893159761985903, 0.07548505312749842, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498184233895685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261123396759835, 9.999999999998899e-05, 0.02111541292360375, 0.00774445756416442, 0.015059815288102074, 0.0363302269061071, 0.013523284787665624, 0.009833507130796004, 0.002819877922769054, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335433061948881, 9.999999999998899e-05, 9.999999999998899e-05, 0.02561104837171002, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904917739984128, 0.7451515307225924, 0.9204732310003234, 0.8779473396258948, 0.742729299450281, 0.8016971546760092, 0.7358046148461281, 0.8632600733829424, 0.7282919146437776, 0.41433428748369827, 0.4265938929107155, 0.40227346744333436, 0.4178164711852944, 0.4201497102447024, 0.42557828157728395, 0.4131843427914388, 0.43836852084631384, 0.42443561139028485, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154242079377035, 0.1332650062745614, 0.22279779884231932, 0.22953025328054055, 0.23326536462577852, 0.2397860868687578, 0.246630022948775, 0.24261069112780975, 0.23164215371268293, 0.2537493389335691, 0.18377307975373036, 0.13706210398757268, 0.2521915073552624, 0.24236602467896218, 0.23356559095162277, 0.24662431952644126, 0.1952910596528581, 0.2194097038269054, 9.999999999998899e-05, 0.007852673492765305, 0.00010030186458243051, 0.08188531981056946, 0.06384922832656392, 0.018407403763186614, 0.002598591202371048, 9.999999999998899e-05, 0.007336487972021688, 0.09635255385782293, 0.04149968957838268, 0.0826162380546257, 0.07227561272991168, 0.005953272559808265, 0.02309691047888318, 0.1666343431013555, 0.03465242285892056, 0.04526519290229991, 0.015428221950918308, 0.02977787366790563, 0.027880488200420217, 0.031868972749602875, 0.03169855797270671, 0.021221934033874512, 0.02095805760066738, 0.0628548678055757, 0.022788703324813975, 0.10788528049977908, 0.09890892826519726, 0.11481546298471568, 0.15502374097581562, 0.07518733612042527, 0.15715765584031471, 0.10046436361943467, 0.08869596783364286, 0.11958446505766696, 0.5030836283180017, 0.5149001927654608, 0.5097157421146645, 0.5442338577233639, 0.498281834203672, 0.5070556986225638, 0.5158366691887758, 0.5318798696449415, 0.49244974511936657, 0.017237983600703943, 9.999999999998899e-05, 9.999999999998899e-05, 0.0237768102526148, 0.006697877045465095, 0.056599031150968204, 0.01941753445607952, 0.0028138550062200007, 0.08467142325173149, 0.16568209815948598, 0.19959379867813565, 0.16594493573663915, 0.25522356105916744, 0.14526397503224886, 0.2058723352226587, 0.12319170844369287, 0.10127997732484706, 0.1355041930462123, 0.11265718458322194, 0.1280156599388922, 0.11746607332099279, 0.1322570694094649, 0.11986948989595891, 0.1287568671121695, 0.1450621120118749, 0.12602368717823098, 0.10342415615082534, 0.060882150582828753, 0.06235073028254379, 0.05654102157890062, 0.08213743639868976, 0.06344543405829539, 0.0589736722915859, 0.07490067667567946, 0.06377832820719997, 0.04970112183063269, 0.1728216873372581, 0.0873295442332026, 0.16363285745793876, 0.140926711175958, 0.09724672463660389, 0.10413426262693248, 0.19730180066324043, 0.12070466596808471, 0.16314708328500294, 0.18800688865582604, 0.18959110078348906, 0.1900616213906443, 0.16188256995424744, 0.19973586616393735, 0.1999756596783442, 0.17133885233759905, 0.18105778989225596, 0.16467725203978678, 0.11996094130337154, 0.07666971665502076, 0.13705303093563215, 0.17379866111635345, 0.20286280871626083, 0.10993791717303736, 0.15404380651219585, 0.11527083597549559, 0.1040354164555225, 0.08345522994972676, 0.11346079676343857, 0.8020684297889105, 0.8420820729833899, 0.059238831899331434, 0.21371542058368553, 0.16943227570585617, 0.0734392526155152, 0.6866525739038194, 0.2005455965595273, 0.20418023938525276, 0.1958868522287034, 0.20413552543376845, 0.19984422017330095, 0.20577301995209962, 0.19513031343458465, 0.18997982054717344, 0.20006226269614913, 0.03797280171286088, 0.042661908555989836, 0.061608504240736495, 0.014219028547030055, 0.03547083368948356, 0.016862439334063506, 0.04353524875117676, 0.03674576009902175, 0.03695523000607459]}, "mutation_prompt": null}
{"id": "590a0a97-c9b0-40d2-82f8-240b74bda85f", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for i in range(self.budget):\n            pitch_adjustment_rate = self.initial_pitch_adjustment_rate * (1 - i / self.budget)  # Dynamic pitch adjustment rate\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate, pitch_adjustment_rate, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicPitchHarmonySearch", "description": "Improved efficiency by implementing a dynamic pitch adjustment rate based on iteration progress and removing unnecessary array creation for harmony memory update.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4ecacdf3-7651-4d5f-b136-b022c44b3cbc", "metadata": {"aucs": [0.5628306394880144, 0.5657482992410228, 0.5751981559735286, 0.5473063539012564, 0.5892501773930711, 0.5826326887997554, 0.5747772792913789, 0.5721138420127961, 0.5677510660494014, 0.05615104271845994, 0.03014266160168222, 0.008893159761985903, 0.07548505312749842, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498184233895685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261123396759835, 9.999999999998899e-05, 0.02111541292360375, 0.00774445756416442, 0.015059815288102074, 0.0363302269061071, 0.013523284787665624, 0.009833507130796004, 0.002819877922769054, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335433061948881, 9.999999999998899e-05, 9.999999999998899e-05, 0.02561104837171002, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904917739984128, 0.7451515307225924, 0.9204732310003234, 0.8779473396258948, 0.742729299450281, 0.8016971546760092, 0.7358046148461281, 0.8632600733829424, 0.7282919146437776, 0.41433428748369827, 0.4265938929107155, 0.40227346744333436, 0.4178164711852944, 0.4201497102447024, 0.42557828157728395, 0.4131843427914388, 0.43836852084631384, 0.42443561139028485, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154242079377035, 0.1332650062745614, 0.22279779884231932, 0.22953025328054055, 0.23326536462577852, 0.2397860868687578, 0.246630022948775, 0.24261069112780975, 0.23164215371268293, 0.2537493389335691, 0.18377307975373036, 0.13706210398757268, 0.2521915073552624, 0.24236602467896218, 0.23356559095162277, 0.24662431952644126, 0.1952910596528581, 0.2194097038269054, 9.999999999998899e-05, 0.007852673492765305, 0.00010030186458243051, 0.08188531981056946, 0.06384922832656392, 0.018407403763186614, 0.002598591202371048, 9.999999999998899e-05, 0.007336487972021688, 0.09635255385782293, 0.04149968957838268, 0.0826162380546257, 0.07227561272991168, 0.005953272559808265, 0.02309691047888318, 0.1666343431013555, 0.03465242285892056, 0.04526519290229991, 0.015428221950918308, 0.02977787366790563, 0.027880488200420217, 0.031868972749602875, 0.03169855797270671, 0.021221934033874512, 0.02095805760066738, 0.0628548678055757, 0.022788703324813975, 0.10788528049977908, 0.09890892826519726, 0.11481546298471568, 0.15502374097581562, 0.07518733612042527, 0.15715765584031471, 0.10046436361943467, 0.08869596783364286, 0.11958446505766696, 0.5030836283180017, 0.5149001927654608, 0.5097157421146645, 0.5442338577233639, 0.498281834203672, 0.5070556986225638, 0.5158366691887758, 0.5318798696449415, 0.49244974511936657, 0.017237983600703943, 9.999999999998899e-05, 9.999999999998899e-05, 0.0237768102526148, 0.006697877045465095, 0.056599031150968204, 0.01941753445607952, 0.0028138550062200007, 0.08467142325173149, 0.16568209815948598, 0.19959379867813565, 0.16594493573663915, 0.25522356105916744, 0.14526397503224886, 0.2058723352226587, 0.12319170844369287, 0.10127997732484706, 0.1355041930462123, 0.11265718458322194, 0.1280156599388922, 0.11746607332099279, 0.1322570694094649, 0.11986948989595891, 0.1287568671121695, 0.1450621120118749, 0.12602368717823098, 0.10342415615082534, 0.060882150582828753, 0.06235073028254379, 0.05654102157890062, 0.08213743639868976, 0.06344543405829539, 0.0589736722915859, 0.07490067667567946, 0.06377832820719997, 0.04970112183063269, 0.1728216873372581, 0.0873295442332026, 0.16363285745793876, 0.140926711175958, 0.09724672463660389, 0.10413426262693248, 0.19730180066324043, 0.12070466596808471, 0.16314708328500294, 0.18800688865582604, 0.18959110078348906, 0.1900616213906443, 0.16188256995424744, 0.19973586616393735, 0.1999756596783442, 0.17133885233759905, 0.18105778989225596, 0.16467725203978678, 0.11996094130337154, 0.07666971665502076, 0.13705303093563215, 0.17379866111635345, 0.20286280871626083, 0.10993791717303736, 0.15404380651219585, 0.11527083597549559, 0.1040354164555225, 0.08345522994972676, 0.11346079676343857, 0.8020684297889105, 0.8420820729833899, 0.059238831899331434, 0.21371542058368553, 0.16943227570585617, 0.0734392526155152, 0.6866525739038194, 0.2005455965595273, 0.20418023938525276, 0.1958868522287034, 0.20413552543376845, 0.19984422017330095, 0.20577301995209962, 0.19513031343458465, 0.18997982054717344, 0.20006226269614913, 0.03797280171286088, 0.042661908555989836, 0.061608504240736495, 0.014219028547030055, 0.03547083368948356, 0.016862439334063506, 0.04353524875117676, 0.03674576009902175, 0.03695523000607459]}, "mutation_prompt": null}
{"id": "56462c49-6fa9-488a-aac5-17bd3b4c7208", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for i in range(self.budget):\n            pitch_adjustment_rate = self.initial_pitch_adjustment_rate * (1 - i / self.budget)  # Dynamic pitch adjustment rate\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate, pitch_adjustment_rate, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicPitchHarmonySearch", "description": "Improved efficiency by implementing a dynamic pitch adjustment rate based on iteration progress and removing unnecessary array creation for harmony memory update.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4ecacdf3-7651-4d5f-b136-b022c44b3cbc", "metadata": {"aucs": [0.5628306394880144, 0.5657482992410228, 0.5751981559735286, 0.5473063539012564, 0.5892501773930711, 0.5826326887997554, 0.5747772792913789, 0.5721138420127961, 0.5677510660494014, 0.05615104271845994, 0.03014266160168222, 0.008893159761985903, 0.07548505312749842, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498184233895685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261123396759835, 9.999999999998899e-05, 0.02111541292360375, 0.00774445756416442, 0.015059815288102074, 0.0363302269061071, 0.013523284787665624, 0.009833507130796004, 0.002819877922769054, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335433061948881, 9.999999999998899e-05, 9.999999999998899e-05, 0.02561104837171002, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904917739984128, 0.7451515307225924, 0.9204732310003234, 0.8779473396258948, 0.742729299450281, 0.8016971546760092, 0.7358046148461281, 0.8632600733829424, 0.7282919146437776, 0.41433428748369827, 0.4265938929107155, 0.40227346744333436, 0.4178164711852944, 0.4201497102447024, 0.42557828157728395, 0.4131843427914388, 0.43836852084631384, 0.42443561139028485, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154242079377035, 0.1332650062745614, 0.22279779884231932, 0.22953025328054055, 0.23326536462577852, 0.2397860868687578, 0.246630022948775, 0.24261069112780975, 0.23164215371268293, 0.2537493389335691, 0.18377307975373036, 0.13706210398757268, 0.2521915073552624, 0.24236602467896218, 0.23356559095162277, 0.24662431952644126, 0.1952910596528581, 0.2194097038269054, 9.999999999998899e-05, 0.007852673492765305, 0.00010030186458243051, 0.08188531981056946, 0.06384922832656392, 0.018407403763186614, 0.002598591202371048, 9.999999999998899e-05, 0.007336487972021688, 0.09635255385782293, 0.04149968957838268, 0.0826162380546257, 0.07227561272991168, 0.005953272559808265, 0.02309691047888318, 0.1666343431013555, 0.03465242285892056, 0.04526519290229991, 0.015428221950918308, 0.02977787366790563, 0.027880488200420217, 0.031868972749602875, 0.03169855797270671, 0.021221934033874512, 0.02095805760066738, 0.0628548678055757, 0.022788703324813975, 0.10788528049977908, 0.09890892826519726, 0.11481546298471568, 0.15502374097581562, 0.07518733612042527, 0.15715765584031471, 0.10046436361943467, 0.08869596783364286, 0.11958446505766696, 0.5030836283180017, 0.5149001927654608, 0.5097157421146645, 0.5442338577233639, 0.498281834203672, 0.5070556986225638, 0.5158366691887758, 0.5318798696449415, 0.49244974511936657, 0.017237983600703943, 9.999999999998899e-05, 9.999999999998899e-05, 0.0237768102526148, 0.006697877045465095, 0.056599031150968204, 0.01941753445607952, 0.0028138550062200007, 0.08467142325173149, 0.16568209815948598, 0.19959379867813565, 0.16594493573663915, 0.25522356105916744, 0.14526397503224886, 0.2058723352226587, 0.12319170844369287, 0.10127997732484706, 0.1355041930462123, 0.11265718458322194, 0.1280156599388922, 0.11746607332099279, 0.1322570694094649, 0.11986948989595891, 0.1287568671121695, 0.1450621120118749, 0.12602368717823098, 0.10342415615082534, 0.060882150582828753, 0.06235073028254379, 0.05654102157890062, 0.08213743639868976, 0.06344543405829539, 0.0589736722915859, 0.07490067667567946, 0.06377832820719997, 0.04970112183063269, 0.1728216873372581, 0.0873295442332026, 0.16363285745793876, 0.140926711175958, 0.09724672463660389, 0.10413426262693248, 0.19730180066324043, 0.12070466596808471, 0.16314708328500294, 0.18800688865582604, 0.18959110078348906, 0.1900616213906443, 0.16188256995424744, 0.19973586616393735, 0.1999756596783442, 0.17133885233759905, 0.18105778989225596, 0.16467725203978678, 0.11996094130337154, 0.07666971665502076, 0.13705303093563215, 0.17379866111635345, 0.20286280871626083, 0.10993791717303736, 0.15404380651219585, 0.11527083597549559, 0.1040354164555225, 0.08345522994972676, 0.11346079676343857, 0.8020684297889105, 0.8420820729833899, 0.059238831899331434, 0.21371542058368553, 0.16943227570585617, 0.0734392526155152, 0.6866525739038194, 0.2005455965595273, 0.20418023938525276, 0.1958868522287034, 0.20413552543376845, 0.19984422017330095, 0.20577301995209962, 0.19513031343458465, 0.18997982054717344, 0.20006226269614913, 0.03797280171286088, 0.042661908555989836, 0.061608504240736495, 0.014219028547030055, 0.03547083368948356, 0.016862439334063506, 0.04353524875117676, 0.03674576009902175, 0.03695523000607459]}, "mutation_prompt": null}
{"id": "d7a02d90-b78f-49a2-bc6c-6356aedebf90", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        for i in range(self.budget):\n            pitch_adjustment_rate = self.initial_pitch_adjustment_rate * (1 - i / self.budget)  # Dynamic pitch adjustment rate\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate, pitch_adjustment_rate, (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "DynamicPitchHarmonySearch", "description": "Improved efficiency by implementing a dynamic pitch adjustment rate based on iteration progress and removing unnecessary array creation for harmony memory update.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4ecacdf3-7651-4d5f-b136-b022c44b3cbc", "metadata": {"aucs": [0.5628306394880144, 0.5657482992410228, 0.5751981559735286, 0.5473063539012564, 0.5892501773930711, 0.5826326887997554, 0.5747772792913789, 0.5721138420127961, 0.5677510660494014, 0.05615104271845994, 0.03014266160168222, 0.008893159761985903, 0.07548505312749842, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498184233895685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261123396759835, 9.999999999998899e-05, 0.02111541292360375, 0.00774445756416442, 0.015059815288102074, 0.0363302269061071, 0.013523284787665624, 0.009833507130796004, 0.002819877922769054, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335433061948881, 9.999999999998899e-05, 9.999999999998899e-05, 0.02561104837171002, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904917739984128, 0.7451515307225924, 0.9204732310003234, 0.8779473396258948, 0.742729299450281, 0.8016971546760092, 0.7358046148461281, 0.8632600733829424, 0.7282919146437776, 0.41433428748369827, 0.4265938929107155, 0.40227346744333436, 0.4178164711852944, 0.4201497102447024, 0.42557828157728395, 0.4131843427914388, 0.43836852084631384, 0.42443561139028485, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154242079377035, 0.1332650062745614, 0.22279779884231932, 0.22953025328054055, 0.23326536462577852, 0.2397860868687578, 0.246630022948775, 0.24261069112780975, 0.23164215371268293, 0.2537493389335691, 0.18377307975373036, 0.13706210398757268, 0.2521915073552624, 0.24236602467896218, 0.23356559095162277, 0.24662431952644126, 0.1952910596528581, 0.2194097038269054, 9.999999999998899e-05, 0.007852673492765305, 0.00010030186458243051, 0.08188531981056946, 0.06384922832656392, 0.018407403763186614, 0.002598591202371048, 9.999999999998899e-05, 0.007336487972021688, 0.09635255385782293, 0.04149968957838268, 0.0826162380546257, 0.07227561272991168, 0.005953272559808265, 0.02309691047888318, 0.1666343431013555, 0.03465242285892056, 0.04526519290229991, 0.015428221950918308, 0.02977787366790563, 0.027880488200420217, 0.031868972749602875, 0.03169855797270671, 0.021221934033874512, 0.02095805760066738, 0.0628548678055757, 0.022788703324813975, 0.10788528049977908, 0.09890892826519726, 0.11481546298471568, 0.15502374097581562, 0.07518733612042527, 0.15715765584031471, 0.10046436361943467, 0.08869596783364286, 0.11958446505766696, 0.5030836283180017, 0.5149001927654608, 0.5097157421146645, 0.5442338577233639, 0.498281834203672, 0.5070556986225638, 0.5158366691887758, 0.5318798696449415, 0.49244974511936657, 0.017237983600703943, 9.999999999998899e-05, 9.999999999998899e-05, 0.0237768102526148, 0.006697877045465095, 0.056599031150968204, 0.01941753445607952, 0.0028138550062200007, 0.08467142325173149, 0.16568209815948598, 0.19959379867813565, 0.16594493573663915, 0.25522356105916744, 0.14526397503224886, 0.2058723352226587, 0.12319170844369287, 0.10127997732484706, 0.1355041930462123, 0.11265718458322194, 0.1280156599388922, 0.11746607332099279, 0.1322570694094649, 0.11986948989595891, 0.1287568671121695, 0.1450621120118749, 0.12602368717823098, 0.10342415615082534, 0.060882150582828753, 0.06235073028254379, 0.05654102157890062, 0.08213743639868976, 0.06344543405829539, 0.0589736722915859, 0.07490067667567946, 0.06377832820719997, 0.04970112183063269, 0.1728216873372581, 0.0873295442332026, 0.16363285745793876, 0.140926711175958, 0.09724672463660389, 0.10413426262693248, 0.19730180066324043, 0.12070466596808471, 0.16314708328500294, 0.18800688865582604, 0.18959110078348906, 0.1900616213906443, 0.16188256995424744, 0.19973586616393735, 0.1999756596783442, 0.17133885233759905, 0.18105778989225596, 0.16467725203978678, 0.11996094130337154, 0.07666971665502076, 0.13705303093563215, 0.17379866111635345, 0.20286280871626083, 0.10993791717303736, 0.15404380651219585, 0.11527083597549559, 0.1040354164555225, 0.08345522994972676, 0.11346079676343857, 0.8020684297889105, 0.8420820729833899, 0.059238831899331434, 0.21371542058368553, 0.16943227570585617, 0.0734392526155152, 0.6866525739038194, 0.2005455965595273, 0.20418023938525276, 0.1958868522287034, 0.20413552543376845, 0.19984422017330095, 0.20577301995209962, 0.19513031343458465, 0.18997982054717344, 0.20006226269614913, 0.03797280171286088, 0.042661908555989836, 0.061608504240736495, 0.014219028547030055, 0.03547083368948356, 0.016862439334063506, 0.04353524875117676, 0.03674576009902175, 0.03695523000607459]}, "mutation_prompt": null}
{"id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 87, "fitness": 0.18601988509362563, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "4ecacdf3-7651-4d5f-b136-b022c44b3cbc", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "f0edebf4-1488-4df3-b3b1-694f145e0e0d", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "ff988ff0-6c35-4515-8e66-570d5051fd25", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "b2717f7d-e363-48b5-8ce5-500d016398b6", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n\n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n\n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            if new_score < harmony_scores.min():\n                min_index = np.argmin(harmony_scores)\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n\n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improved efficiency by optimizing memory usage and updating only when necessary.", "configspace": "", "generation": 90, "fitness": 0.18601988509362563, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "3d84e69c-b0fc-4d2b-bd8f-3dc5808da5b6", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "b9b2291a-5231-423b-b300-c48fc8b2d96f", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n        \n        # Introduce elitism to preserve best solutions found\n        best_index = np.argmin(harmony_scores)\n        best_solution = harmony_memory[best_index]\n        best_score = harmony_scores[best_index]\n\n        return best_solution", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improved efficiency by introducing elitism to preserve the best solutions found during optimization and reduce unnecessary function evaluations.", "configspace": "", "generation": 92, "fitness": 0.18601988509362563, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "49f2fba2-b537-4c2c-830c-5c4ecc674609", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "86c499bc-3abc-4757-ad6f-d0c19e3e0ae7", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "76da2ad9-aea8-4b90-a29b-a8a4bd66a70a", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        min_index = np.argmin(harmony_scores)  # Move outside the loop for efficiency\n        \n        for i in range(self.budget):\n            adjustment = np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,))\n            new_harmony = np.clip(adjustment + harmony_memory[min_index], -5.0, 5.0)\n            new_score = func(new_harmony)\n            \n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improved efficiency by incorporating a dynamic adjustment of pitch rate during the search process to balance exploration and exploitation effectively.", "configspace": "", "generation": 95, "fitness": 0.18601988509362563, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "12942f30-c973-4b4d-85e1-44d3d82377da", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "46414f61-3c98-4b88-87ac-fad20cc10abb", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "d5a69d19-052b-448f-8abc-a7438d2490b4", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
{"id": "e126063f-f49f-4968-8f74-4c742f9af6a0", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget, self.dim, self.harmony_memory_size, self.initial_pitch_adjustment_rate, self.bandwidth = budget, dim, harmony_memory_size, initial_pitch_adjustment_rate, bandwidth\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        \n        pitch_adjustment_rate = np.linspace(self.initial_pitch_adjustment_rate, 0, self.budget)  # Pre-calculate pitch adjustment rates\n        \n        for i in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(-pitch_adjustment_rate[i], pitch_adjustment_rate[i], (self.dim,)) + harmony_memory[np.argmin(harmony_scores)], -5.0, 5.0)\n            new_score = func(new_harmony)\n            min_index = np.argmin(harmony_scores)\n            if new_score < harmony_scores[min_index]:\n                harmony_memory[min_index] = new_harmony\n                harmony_scores[min_index] = new_score\n                \n        return harmony_memory[np.argmin(harmony_scores)]", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improved efficiency by reducing unnecessary array operations and optimizing loop structure for enhanced performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0101491d-9b61-4581-94e5-f7ee9c46911c", "metadata": {"aucs": [0.5628622819725579, 0.5657735146203222, 0.5752410068212978, 0.5473180412577623, 0.5892729174441926, 0.5826622490131476, 0.5748320278817667, 0.5721535669414003, 0.5677974191035944, 0.05614951849591576, 0.030142615276882334, 0.00889374867848114, 0.07548444994758008, 9.999999999998899e-05, 9.999999999998899e-05, 0.03498116989130573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261125600767867, 9.999999999998899e-05, 0.02111542091959362, 0.007744469539530785, 0.015059818930906244, 0.03633025072048646, 0.013523307695203601, 0.00983351524093612, 0.002819889037771639, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335438260192894, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256110649326885, 9.999999999998899e-05, 9.999999999998899e-05, 0.8904916326186931, 0.7451496588107016, 0.9204731651476201, 0.8779472388232561, 0.7427283241113631, 0.8016969157301996, 0.735803604558545, 0.8632598582478042, 0.7282853235420028, 0.41435593439470497, 0.42445163231777705, 0.4025734006464532, 0.41847662386973405, 0.4201005407131815, 0.4254716663201219, 0.4131174068107223, 0.43809251908664515, 0.42428549774664337, 0.15861091290463936, 0.04990924062377777, 0.03952816373533552, 0.004615324638563512, 9.999999999998899e-05, 0.004136228610725046, 0.04005876930790897, 9.999999999998899e-05, 0.00990846602666351, 0.16154260233920725, 0.1332648235203291, 0.22278614468368874, 0.22952577945783204, 0.2332633494020624, 0.23977921606392927, 0.2466258153529518, 0.2426073061180991, 0.23163697620317802, 0.2537443901530433, 0.1837408113327439, 0.13706214148105667, 0.25218915704308087, 0.2423616748526286, 0.23356279404988312, 0.24662098698145707, 0.19524307288695242, 0.2194049751249516, 9.999999999998899e-05, 0.0078516887622182, 9.999999999998899e-05, 0.08188099394945636, 0.06384703042913475, 0.018401135145644898, 0.0025983542242500324, 9.999999999998899e-05, 0.0073354034672844515, 0.0963516113632159, 0.041498549126083306, 0.0826146865072318, 0.0722746308570209, 0.005952420882374465, 0.02309594849979657, 0.16663042714195886, 0.0346515145968902, 0.045264396038519616, 0.015435554985368971, 0.029781223220507802, 0.027887888272603245, 0.031886377859341675, 0.0317161320371786, 0.021226645169188152, 0.020972840240281454, 0.06289234114366227, 0.022789124413467476, 0.10788460981441983, 0.09890976808562335, 0.11481645554863662, 0.15502445642366924, 0.07518545135940202, 0.1571537454994153, 0.10046465618176459, 0.08869599021681429, 0.11958490591655735, 0.5030827069682164, 0.5149621461083582, 0.5097132407404548, 0.5443353796480463, 0.49832293508464054, 0.5145992917713119, 0.5158353808641484, 0.5313343569998585, 0.4924685028179637, 0.01723799431956974, 9.999999999998899e-05, 9.999999999998899e-05, 0.023776820435761903, 0.00669788025322271, 0.056599058063403374, 0.019417548138152774, 0.0028138698602145906, 0.08467150293458547, 0.16567151516793988, 0.19961982514786258, 0.16595311456450967, 0.2552245789986419, 0.1452768960249563, 0.20589079168256197, 0.12687953423354814, 0.10128522307821153, 0.13550202458741423, 0.11265718898116572, 0.12801565455629715, 0.11746607873586723, 0.13225707606286852, 0.11986949239068256, 0.12875686995920566, 0.14506082123014508, 0.1260236895710758, 0.10342415625353352, 0.060882160580454925, 0.06235075830995063, 0.056541021264559954, 0.08213743976581622, 0.06344544454935896, 0.058973688153936776, 0.07490011513931549, 0.06377833847523184, 0.049701126261514905, 0.1727992793955203, 0.08737355058964313, 0.16364849309082297, 0.14090802527677915, 0.0972374019915031, 0.10419852594719736, 0.19724565391735926, 0.1207032025632454, 0.16317323935565797, 0.1880068987416741, 0.18959120832713316, 0.190061649386417, 0.1618826663473084, 0.1997359692852747, 0.19997576198618638, 0.1713388793484939, 0.1810579089042088, 0.16467731306955358, 0.11996094268248636, 0.07666971681566759, 0.13705303196239782, 0.17379866124623566, 0.20286281034094378, 0.10993791615493265, 0.15404380718795907, 0.11527083640335445, 0.10403541694100382, 0.08345523039112068, 0.11346079630884287, 0.8021118318771371, 0.8420744808497719, 0.059238831987409535, 0.21371542265869425, 0.16943227595446753, 0.07343925291445086, 0.6865927792773281, 0.20055767283497739, 0.20413035514721678, 0.1958919533995268, 0.20414649655319683, 0.19984351799463207, 0.205789332872527, 0.19513120270984774, 0.19000006431617156, 0.20007246368756892, 0.03797296810375761, 0.04266170212905618, 0.06161005225803018, 0.014219138208650062, 0.03547100224982658, 0.016862650384667166, 0.0435354079365865, 0.03674589804074713, 0.03695546644065639]}, "mutation_prompt": null}
