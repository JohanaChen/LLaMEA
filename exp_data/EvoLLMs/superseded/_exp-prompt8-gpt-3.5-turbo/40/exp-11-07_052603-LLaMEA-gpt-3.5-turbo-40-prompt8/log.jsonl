{"id": "f5a2e39e-5c6d-4113-be0f-e51f90e358c2", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "186b7656-9adb-45dd-9631-9e7d324bac79", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        # Initialize population\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        for _ in range(max_iter):\n            # Update velocities\n            w, c1, c2 = 0.5, 1.49445, 1.49445\n            r1, r2 = np.random.rand(pop_size, self.dim), np.random.rand(pop_size, self.dim)\n            velocities = w * velocities + c1 * r1 * (pbest - swarm) + c2 * r2 * (gbest - swarm)\n\n            # Update positions\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            # Update personal best\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            # Update global best\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "HybridPSODE", "description": "Introducing a hybrid algorithm that combines Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.2684486400413925, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "f5a2e39e-5c6d-4113-be0f-e51f90e358c2", "metadata": {"aucs": [0.9536090640019778, 0.9505286592922109, 0.9546701187020217, 0.956768289949062, 0.957850738825725, 0.9483862081278758, 0.9563818036287398, 0.9404517603095897, 0.9535700528760942, 0.3364808138697747, 0.044149009717587284, 9.999999999998899e-05, 0.8774343445278435, 0.04980244958672242, 0.20111631888822046, 0.8860432420681577, 0.8914286415662388, 0.39690327643461065, 0.1955282945329071, 0.08100216188748222, 0.11749234695239796, 0.10245725298571928, 0.07581624141333287, 0.1639874234279718, 0.12582202340869353, 0.07587223839897739, 0.11135074290263147, 0.122885771092761, 0.12703516446411345, 0.09710138810360136, 0.09808853399692763, 0.08346257996463613, 0.1181880620897553, 0.11936384407293776, 0.08689681818308637, 0.1029063293271576, 0.9910761895608654, 0.9853829838163981, 0.9943608975948213, 0.9811620745191798, 0.9889827543165198, 0.9892510749746735, 0.9852483166224563, 0.9892476191548925, 0.9904945026975508, 0.192903535522561, 0.8257072883429785, 0.6409166256372953, 0.21851470114987848, 0.1553548963122221, 0.1550811589131459, 0.12802613096564086, 0.08840969906622576, 0.20054616773669942, 0.16008252037100756, 0.1711107070693021, 0.2154148422843284, 0.28376660305528056, 0.20510058634028183, 0.9707340811837984, 0.093366248808057, 0.1398822417805653, 0.22385657371244894, 0.19447968481447642, 0.13666049215951248, 0.19000184000023568, 0.17141597211619575, 0.07378835047644794, 9.999999999998899e-05, 0.37859822781911434, 0.18382015429755827, 0.18074547018999088, 0.286322330270419, 0.13355810551155833, 0.47616018547256367, 0.1501675622563533, 0.27984195277310375, 0.14194193890216378, 0.14682388900581866, 9.999999999998899e-05, 0.12778369914259202, 0.003362901158649012, 9.999999999998899e-05, 0.058453477698516165, 0.034869061125443634, 9.999999999998899e-05, 0.028400265776887812, 0.012244128349867656, 9.999999999998899e-05, 0.2733581003984047, 0.0315414300036293, 0.03396251278771201, 0.062196521144732064, 0.08362382681372926, 0.008910433681620256, 0.02651958222344364, 0.12676495196545434, 0.0447511945636232, 0.06237643267441251, 0.05436699866115979, 0.03902850661396429, 0.1813696574184579, 0.08593259671488618, 0.12997749286328508, 0.08505372926673971, 0.33315340507530544, 0.11358870821113054, 0.08010727374389115, 0.08614808273847407, 0.04431238450353214, 0.12445851584335599, 0.0069145743778888935, 0.3497928402300706, 0.006895893289887822, 0.08604631055044687, 0.37208683581462687, 0.08757871880204926, 0.596069639117453, 0.5652197193961586, 0.5675470641000535, 0.6528071290271573, 0.5374041504496123, 0.6163729842393979, 0.5965903399230688, 0.5677107971983786, 0.634755657705274, 0.09393774660284127, 0.1017993028333043, 0.06474714933261771, 0.11698829308662084, 0.10797268746620392, 0.1438837156876389, 0.1655414454053331, 0.09355526355194321, 0.08157443126779562, 0.28945980363772916, 0.20450195276707295, 0.1413429055943941, 0.20493829424032617, 0.30654976382558985, 0.14488666411746887, 0.2058776406475077, 0.12898475321491387, 0.20985742261059803, 0.3142404416698118, 0.2758033814975991, 0.1729908474022792, 0.3813504307686625, 0.2593096726667561, 0.2835992172737605, 0.27279263490794015, 0.34853096923437166, 0.17972714459684047, 0.27944849264487237, 0.3585299752395069, 0.1573826360405174, 0.3033665756196501, 0.23365141322084326, 0.1143619259897658, 0.19469330304154941, 0.2875694893099434, 0.11232552446691935, 0.22810520243823174, 0.21146364638380033, 0.190782839967651, 0.21509867418706474, 0.2160241746672339, 0.20804695470631385, 0.19034642450376704, 0.22560850612341887, 0.26292206959810294, 0.19116142160568184, 0.18659047623886815, 0.19367097764541907, 0.19070640973813557, 0.2248503666472519, 0.18822616227083855, 0.20150713561264655, 0.2112267847180287, 0.25787977145888374, 0.10569066930386894, 0.1714093643604545, 0.15504170437110154, 0.17341006290205807, 0.20233094081188308, 0.1704805947531759, 0.10020882339905546, 0.17048739792073264, 0.15439569942811737, 0.08345583825476421, 0.18060236147184183, 0.07352262920079189, 0.5080487801225, 0.17028527774712188, 0.2141048302778148, 0.10435067084995076, 0.9543340617050264, 0.28936399315683536, 0.19142778538277394, 0.21563983326616976, 0.2075584059467125, 0.24079946764327576, 0.193668572424193, 0.23992101911446007, 0.2610961407747402, 0.2417265434815865, 0.274692369589974, 0.09840856709237755, 0.09319598590070344, 0.07962515701932149, 0.11727910664797181, 0.07208983475671138, 0.0793666920385716, 0.11278347029422242, 0.08850370016406683, 0.09516087483648139]}, "mutation_prompt": null}
{"id": "387d146d-6a61-402c-9f5e-6cbe79599598", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ParallelHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        # Initialize population\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = Parallel(n_jobs=-1)(delayed(objective_function)(p) for p in pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        for _ in range(max_iter):\n            w, c1, c2 = 0.5, 1.49445, 1.49445\n            r1, r2 = np.random.rand(pop_size, self.dim), np.random.rand(pop_size, self.dim)\n            velocities = w * velocities + c1 * r1 * (pbest - swarm) + c2 * r2 * (gbest - swarm)\n\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = Parallel(n_jobs=-1)(delayed(objective_function)(p) for p in swarm)\n            update_idx = np.less(scores, pbest_scores)\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores = np.where(update_idx, scores, pbest_scores)\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ParallelHybridPSODE", "description": "Improved variant by parallelizing the computation of objective values to utilize multiple cores efficiently.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "186b7656-9adb-45dd-9631-9e7d324bac79", "metadata": {}, "mutation_prompt": null}
{"id": "9488182d-a19b-4c53-88d7-3b261ad4e955", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        w, c1, c2 = 0.5, 1.49445, 1.49445\n        r1, r2 = np.random.rand(pop_size, self.dim), np.random.rand(pop_size, self.dim)\n\n        for _ in range(max_iter):\n            velocities = w * velocities + c1 * r1 * (pbest - swarm) + c2 * r2 * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx], pbest_scores[update_idx] = swarm[update_idx], scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest, gbest_score = pbest[gbest_idx].copy(), pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedHybridPSODE", "description": "Improved HybridPSODE algorithm by optimizing loop iterations and removing redundant calculations to enhance performance.", "configspace": "", "generation": 3, "fitness": 0.21296972940255443, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.24.", "error": "", "parent_id": "186b7656-9adb-45dd-9631-9e7d324bac79", "metadata": {"aucs": [0.9448038865107353, 0.960821937607348, 0.9626929754788309, 0.9621883682050913, 0.9602143435486059, 0.9660655911757392, 0.9599486595497164, 0.6815543846940622, 0.9608541693107201, 9.999999999998899e-05, 0.051430142595312645, 0.16403297706910458, 0.02614749291436369, 0.0706416532263594, 0.3419879454706828, 9.999999999998899e-05, 0.09644579498284456, 0.04537611719353829, 0.09759157593433287, 0.11248846388690348, 0.07212435681701412, 0.10761275804097459, 0.0863997299549879, 0.10788961094127314, 0.1140240556950326, 0.09570962998779908, 0.09684495084309819, 0.03738158843896655, 0.06487550669567277, 0.0870620560585521, 0.08611878208664825, 0.08109017560852572, 0.07313555353284629, 0.1137360463066267, 0.07213979547595517, 0.08461717689076009, 0.987260130600845, 0.10443376005102778, 0.9919420216648634, 0.9784542490697418, 0.9840249998277827, 0.9811820576921826, 0.9837159282155572, 0.9787459960500049, 0.9809960608601195, 0.15149301894836043, 0.06410730552205146, 0.11610708213201781, 0.15726073291132014, 0.15698892710571544, 0.35150677604040426, 0.25226487518506313, 0.08851905348822764, 0.11503825231153442, 0.23064423910158416, 0.0953435107991647, 0.14146208280671768, 0.17854742917723465, 0.1568654289825221, 0.19487395763867765, 0.13161171357838064, 0.11271084381982277, 0.3422067096498186, 0.2213012430677782, 0.1463334722414389, 0.1536194335142067, 0.15071278470844973, 0.14591592066948755, 0.17109346987651675, 0.15196778100680675, 0.2140012863829418, 0.1593863437875691, 0.1711782112922503, 9.999999999998899e-05, 0.1134644731900365, 0.13087147468242255, 0.20405626942396626, 0.14795050076716465, 0.13384856180568783, 9.999999999998899e-05, 0.1284251096749669, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20920400675023132, 0.05306116820843487, 0.03022330556863073, 0.0657956826768834, 0.05272766729633027, 0.003323082850624215, 0.01242208957455082, 0.17268717619710527, 0.09941240469313217, 0.07751829150866985, 0.20864544483700243, 0.039694866030713594, 0.11673348618160506, 0.10263807688714499, 0.14004140318667124, 0.10627578858615994, 0.3368401312820456, 0.1104817367058678, 0.08036016044814642, 0.015642468419653, 0.05661454870879856, 0.18028083442432985, 0.015075372097239415, 0.02966202552863928, 0.053653323400431496, 0.11221437017476743, 0.050841842611171306, 0.10125545615322429, 0.4109274229333386, 0.5186370179539153, 0.4967094962217533, 0.48530886195198886, 0.46297882219443487, 0.456800416079851, 0.4847156236474579, 0.345428198715621, 0.5118193198148601, 0.04918876295431729, 0.07743305871156159, 0.04717534852833505, 0.09816632305757389, 0.0873654720004724, 0.08822062520515395, 0.06605617369693695, 0.09818426492673826, 0.08467823203850544, 0.17127275988347335, 0.09665054886685609, 0.14653295471297134, 0.14368270864423283, 0.35078945867386957, 0.1464090993439755, 0.17874554307710655, 0.1169770671017697, 0.1853384641184933, 0.19171459063700735, 0.2533479442526525, 0.1721780336414982, 0.36481977304738733, 0.23350034839679534, 0.22468298501074258, 0.1880721477043733, 0.2898614528883633, 0.1496750336306788, 0.11346858042253805, 0.19333977457242224, 0.15510534300371404, 0.14854011935761313, 0.14945197713559788, 0.14987610063703527, 0.11305051520451437, 0.16560200266995306, 0.0940546202321495, 0.2994052772099257, 0.22160046166804237, 0.17482621395487763, 0.19519913414398193, 0.22339414692642345, 0.16539214982620576, 0.18530078141520545, 0.17743132710517218, 0.2008299627872363, 0.21146758035440139, 0.1739669463258422, 0.2299558139436484, 0.22916119855888806, 0.23225277024929758, 0.19588036810345644, 0.20629230546432697, 0.20656134602151643, 0.18535197259644898, 0.556956449432113, 0.12494238574617011, 0.13866165679172537, 0.17379020804319167, 0.20216150760831153, 0.17372178894442392, 0.10015945407850413, 0.1703938049250182, 0.13615788651946292, 0.08345224813508889, 0.21201818265858619, 0.07348282528435046, 0.10527128843389422, 0.16974080266252078, 0.21479778989081755, 0.10517503472997891, 0.3394365390260736, 0.21638459130298793, 0.1484815269430264, 0.1911203251152621, 0.20371780805502826, 0.17579171550710415, 0.19209290428714754, 0.20680038533106715, 0.1759915969627951, 0.16703405903231283, 0.2006145073625396, 0.06840905055504831, 0.058925240071122986, 0.08116493382448176, 0.07961372297545799, 0.055077053413586374, 0.07662148695379123, 0.08416557409814573, 0.06588722468924024, 0.0694369043662244]}, "mutation_prompt": null}
{"id": "fa12339d-bbac-4442-9c74-6f01e4d86b40", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        w, c1, c2 = 0.5, 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedHybridPSODE", "description": "Improved HybridPSODE algorithm by optimizing loop operations and enhancing convergence speed.", "configspace": "", "generation": 4, "fitness": 0.271145089309833, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "186b7656-9adb-45dd-9631-9e7d324bac79", "metadata": {"aucs": [0.9485943568266696, 0.9564125613759216, 0.9563965955994299, 0.18362166950433423, 0.9566443909011322, 0.9523678204347644, 0.9548422080455328, 0.9495391029332787, 0.9540722072233612, 0.22677364891362584, 0.3663356732001847, 0.908461724529868, 9.999999999998899e-05, 9.999999999998899e-05, 0.892146483216369, 0.2607508557144269, 0.8972212712919342, 0.3401882225157755, 0.11830077345638146, 0.11362389811082685, 0.11981639427277546, 0.06661555140678665, 0.09377395622200124, 0.08363498379107204, 0.11883318879684956, 0.07334836222634422, 0.14888481707208157, 0.12686895535638998, 0.11254595395601685, 0.10182247350631446, 0.10254971764835408, 0.1199751904211005, 0.1074010317275017, 0.09586829052260526, 0.16598053292891668, 0.10288264630000399, 0.9893995170194209, 0.9847938396219391, 0.9920980091899092, 0.9851117025006455, 0.9838257210080139, 0.9822379598331078, 0.9943779019008298, 0.9903409423520657, 0.9925038285487825, 0.8603430756437295, 0.05973196320401419, 0.6735915638113616, 0.5016381890106454, 0.15491077299568623, 0.47601643426225915, 0.08380445407782933, 0.08961723983086345, 0.08884408949045286, 0.25727242448991094, 0.12903254752465076, 0.16286076999424126, 0.19586892364606723, 0.22324733293628374, 0.1626044178039845, 0.17845129442733687, 0.17936778598060266, 0.16836360488844415, 0.14461062101112765, 0.16363251848103433, 0.14394532836301532, 0.1310319222147851, 0.13358651472322913, 0.18817769630874337, 0.12537562700255023, 0.40889591681550663, 0.1748301903714895, 0.16950646665037528, 0.14516532497395607, 0.24082803990918988, 0.187659475122261, 0.23413469152774002, 0.13610544425865778, 0.1312304749575962, 0.030868694346626757, 0.13615005285141302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013728905674024183, 9.999999999998899e-05, 9.999999999998899e-05, 0.051026317370969854, 0.03010596204468563, 0.06994212462460914, 0.04586969264738949, 0.004119912957360805, 0.046523308192303214, 0.08112427503284159, 0.05771554723321082, 0.06036216570801156, 0.054481463240379835, 0.10695736877511808, 0.24757754047503688, 0.25552268128477407, 0.2217015204383802, 0.1142388100696673, 0.10930984692368406, 0.21197794447769414, 0.08011026997424942, 0.021286831831660136, 9.999999999998899e-05, 0.08136308223209543, 9.999999999998899e-05, 0.02391859286288689, 0.006878845979118475, 0.19420108170302852, 0.049928825654797726, 0.08602455420889332, 0.545152375680635, 0.6187294212209744, 0.6011968064555513, 0.5578090880668937, 0.5901184973316275, 0.610029455285718, 0.5768279838653761, 0.6102367547886925, 0.6170005120613855, 0.06921088457709013, 0.07325438816391239, 0.1192584011000195, 0.1661877671477776, 0.04976337217751403, 0.10746823667182215, 0.07409604168782702, 0.11735893334256486, 0.07878023624746566, 0.269981717673655, 0.23269854643770782, 0.24158970926228562, 0.24921454581894353, 0.3326764433513164, 0.16451680353839415, 0.23546388567958065, 0.15882656414370744, 0.19115311542014302, 0.42437653013755094, 0.24288410689632223, 0.20105070042914108, 0.201340593942252, 0.19608248643992376, 0.30506360441090297, 0.26894576781883295, 0.38975605102151256, 0.20634290075009365, 0.22972162223489434, 0.2757780416930231, 0.1537038680216194, 0.2066235763718447, 0.17835564806334858, 0.16940732306851447, 0.21074076495921756, 0.21808460146932207, 0.08311002312901361, 0.27225708063207577, 0.2194540865232042, 0.2343287123057195, 0.25747755139292783, 0.2208473957349384, 0.16842431861406315, 0.22766201421119037, 0.22154434528768074, 0.25712501988636915, 0.2041533192625311, 0.20122444858276856, 0.22864355902469413, 0.21377985441176162, 0.22902878308052488, 0.2141251128950773, 0.19055205733416747, 0.23056639944601653, 0.18561081190466344, 0.9590316350561049, 0.12687380998057018, 0.15356009019162153, 0.96577957796436, 0.2019952137502109, 0.9604281671627215, 0.10002350338520938, 0.17047679673707095, 0.16354406433453172, 0.07925598414075863, 0.16674177673009616, 0.3895288481568375, 0.21340391827524818, 0.17007033797161109, 0.2136122608154506, 0.4076050361356899, 0.8915789370909482, 0.5569961269841621, 0.22961413498077377, 0.19580271543713923, 0.18567104062524176, 0.21207961202813141, 0.2172373899808433, 0.2235547794781083, 0.23249124388659204, 0.1977905998863857, 0.19632216862271668, 0.06642565314433702, 0.09183860871221527, 0.09573956823111462, 0.07763027273393763, 0.10131663057490481, 0.14382439799753188, 0.06813106870470087, 0.08008522592591305, 0.10657625418230254]}, "mutation_prompt": null}
{"id": "89e5d08a-dbfe-4c4b-a7d3-4c88d0975957", "solution": "import numpy as np\n\nclass ImprovedHybridPSODEEnhanced:\n    def __init__(self, budget, dim):\n        self.budget, self.dim = budget, dim\n        self.lb, self.ub = -5.0 * np.ones(dim), 5.0 * np.ones(dim)\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.swarm = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.velocities = np.zeros_like(self.swarm)\n        self.pbest = self.swarm.copy()\n        self.pbest_scores = np.array([func(x) for x in self.pbest])\n        self.gbest_idx = np.argmin(self.pbest_scores)\n        self.gbest = self.pbest[self.gbest_idx].copy()\n        self.gbest_score = self.pbest_scores[self.gbest_idx]\n        self.w, self.c1, self.c2 = 0.5, 1.49445, 1.49445\n        self.r1, self.r2 = np.random.rand(self.max_iter, self.pop_size, dim), np.random.rand(self.max_iter, self.pop_size, dim)\n\n        for _ in range(self.max_iter):\n            self.velocities = self.w * self.velocities + self.c1 * self.r1[_] * (self.pbest - self.swarm) + self.c2 * self.r2[_] * (self.gbest - self.swarm)\n            self.swarm += self.velocities\n            self.swarm = np.clip(self.swarm, self.lb, self.ub)\n            scores = np.array([func(x) for x in self.swarm])\n            update_idx = scores < self.pbest_scores\n            self.pbest[update_idx] = self.swarm[update_idx]\n            self.pbest_scores[update_idx] = scores[update_idx]\n            self.gbest_idx = np.argmin(self.pbest_scores)\n            if self.pbest_scores[self.gbest_idx] < self.gbest_score:\n                self.gbest = self.pbest[self.gbest_idx].copy()\n                self.gbest_score = self.pbest_scores[self.gbest_idx]\n\n        return self.gbest", "name": "ImprovedHybridPSODEEnhanced", "description": "ImprovedHybridPSODE-Enhanced: Enhanced version with optimized initialization and adaptive parameter tuning for improved convergence.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "fa12339d-bbac-4442-9c74-6f01e4d86b40", "metadata": {}, "mutation_prompt": null}
{"id": "d670172c-5517-4985-a46f-2d19015bf975", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        w, c1, c2 = 0.5, 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedHybridPSODE", "description": "Improved HybridPSODE algorithm by optimizing loop operations and enhancing convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa12339d-bbac-4442-9c74-6f01e4d86b40", "metadata": {"aucs": [0.9485943568266696, 0.9564125613759216, 0.9563965955994299, 0.18362166950433423, 0.9566443909011322, 0.9523678204347644, 0.9548422080455328, 0.9495391029332787, 0.9540722072233612, 0.22677364891362584, 0.3663356732001847, 0.908461724529868, 9.999999999998899e-05, 9.999999999998899e-05, 0.892146483216369, 0.2607508557144269, 0.8972212712919342, 0.3401882225157755, 0.11830077345638146, 0.11362389811082685, 0.11981639427277546, 0.06661555140678665, 0.09377395622200124, 0.08363498379107204, 0.11883318879684956, 0.07334836222634422, 0.14888481707208157, 0.12686895535638998, 0.11254595395601685, 0.10182247350631446, 0.10254971764835408, 0.1199751904211005, 0.1074010317275017, 0.09586829052260526, 0.16598053292891668, 0.10288264630000399, 0.9893995170194209, 0.9847938396219391, 0.9920980091899092, 0.9851117025006455, 0.9838257210080139, 0.9822379598331078, 0.9943779019008298, 0.9903409423520657, 0.9925038285487825, 0.8603430756437295, 0.05973196320401419, 0.6735915638113616, 0.5016381890106454, 0.15491077299568623, 0.47601643426225915, 0.08380445407782933, 0.08961723983086345, 0.08884408949045286, 0.25727242448991094, 0.12903254752465076, 0.16286076999424126, 0.19586892364606723, 0.22324733293628374, 0.1626044178039845, 0.17845129442733687, 0.17936778598060266, 0.16836360488844415, 0.14461062101112765, 0.16363251848103433, 0.14394532836301532, 0.1310319222147851, 0.13358651472322913, 0.18817769630874337, 0.12537562700255023, 0.40889591681550663, 0.1748301903714895, 0.16950646665037528, 0.14516532497395607, 0.24082803990918988, 0.187659475122261, 0.23413469152774002, 0.13610544425865778, 0.1312304749575962, 0.030868694346626757, 0.13615005285141302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013728905674024183, 9.999999999998899e-05, 9.999999999998899e-05, 0.051026317370969854, 0.03010596204468563, 0.06994212462460914, 0.04586969264738949, 0.004119912957360805, 0.046523308192303214, 0.08112427503284159, 0.05771554723321082, 0.06036216570801156, 0.054481463240379835, 0.10695736877511808, 0.24757754047503688, 0.25552268128477407, 0.2217015204383802, 0.1142388100696673, 0.10930984692368406, 0.21197794447769414, 0.08011026997424942, 0.021286831831660136, 9.999999999998899e-05, 0.08136308223209543, 9.999999999998899e-05, 0.02391859286288689, 0.006878845979118475, 0.19420108170302852, 0.049928825654797726, 0.08602455420889332, 0.545152375680635, 0.6187294212209744, 0.6011968064555513, 0.5578090880668937, 0.5901184973316275, 0.610029455285718, 0.5768279838653761, 0.6102367547886925, 0.6170005120613855, 0.06921088457709013, 0.07325438816391239, 0.1192584011000195, 0.1661877671477776, 0.04976337217751403, 0.10746823667182215, 0.07409604168782702, 0.11735893334256486, 0.07878023624746566, 0.269981717673655, 0.23269854643770782, 0.24158970926228562, 0.24921454581894353, 0.3326764433513164, 0.16451680353839415, 0.23546388567958065, 0.15882656414370744, 0.19115311542014302, 0.42437653013755094, 0.24288410689632223, 0.20105070042914108, 0.201340593942252, 0.19608248643992376, 0.30506360441090297, 0.26894576781883295, 0.38975605102151256, 0.20634290075009365, 0.22972162223489434, 0.2757780416930231, 0.1537038680216194, 0.2066235763718447, 0.17835564806334858, 0.16940732306851447, 0.21074076495921756, 0.21808460146932207, 0.08311002312901361, 0.27225708063207577, 0.2194540865232042, 0.2343287123057195, 0.25747755139292783, 0.2208473957349384, 0.16842431861406315, 0.22766201421119037, 0.22154434528768074, 0.25712501988636915, 0.2041533192625311, 0.20122444858276856, 0.22864355902469413, 0.21377985441176162, 0.22902878308052488, 0.2141251128950773, 0.19055205733416747, 0.23056639944601653, 0.18561081190466344, 0.9590316350561049, 0.12687380998057018, 0.15356009019162153, 0.96577957796436, 0.2019952137502109, 0.9604281671627215, 0.10002350338520938, 0.17047679673707095, 0.16354406433453172, 0.07925598414075863, 0.16674177673009616, 0.3895288481568375, 0.21340391827524818, 0.17007033797161109, 0.2136122608154506, 0.4076050361356899, 0.8915789370909482, 0.5569961269841621, 0.22961413498077377, 0.19580271543713923, 0.18567104062524176, 0.21207961202813141, 0.2172373899808433, 0.2235547794781083, 0.23249124388659204, 0.1977905998863857, 0.19632216862271668, 0.06642565314433702, 0.09183860871221527, 0.09573956823111462, 0.07763027273393763, 0.10131663057490481, 0.14382439799753188, 0.06813106870470087, 0.08008522592591305, 0.10657625418230254]}, "mutation_prompt": null}
{"id": "76fbca64-9b65-4c2b-a0ad-c1432fa62d4d", "solution": "import numpy as np\n\nclass DynamicImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        w_min, w_max = 0.4, 0.9\n        c_min, c_max = 1.2, 2.2\n\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = w_max - (w_max - w_min) * t / max_iter\n            c1 = c_max - (c_max - c_min) * t / max_iter\n            c2 = c_max - (c_max - c_min) * t / max_iter\n\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "DynamicImprovedHybridPSODE", "description": "Enhanced convergence and exploration by introducing dynamic inertia weight and adaptive acceleration coefficients.", "configspace": "", "generation": 7, "fitness": 0.21266291654365174, "feedback": "The algorithm DynamicImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "fa12339d-bbac-4442-9c74-6f01e4d86b40", "metadata": {"aucs": [0.6612838816991938, 0.6816576570751703, 0.6618195518865879, 0.6926908302105694, 0.1893478576351043, 0.16123256515338347, 0.6781112127166016, 0.6970655007252959, 0.14348898646042252, 9.999999999998899e-05, 0.02898191609274947, 9.999999999998899e-05, 0.5028483310130951, 0.47411960117130914, 0.045958179237479246, 9.999999999998899e-05, 9.999999999998899e-05, 0.47697578827151954, 0.06347158009796416, 0.03875823191502081, 0.0647184698285651, 0.13419838238411408, 0.07018818471484123, 0.06952387762726975, 0.13252400899004502, 0.05181615045940258, 0.1468371144904197, 0.12195748376152005, 0.11624014565750185, 0.10633560524397234, 0.10789311115478017, 0.11930063363079912, 0.10542876874799256, 0.11617229091264147, 0.08917395554387297, 0.11439509683360682, 0.9944487732310088, 0.9885421056715354, 0.9960186510088744, 0.9909490247936977, 0.9939164595862409, 0.9902423500725006, 0.995449628825779, 0.9958644570438513, 0.9930972429946595, 0.4713027087589675, 0.05458007212845917, 0.5406363222318988, 0.1396527532884071, 0.4707106010282571, 0.5234317022879922, 0.08298328946093392, 0.08839677529503043, 0.08520359011629774, 0.13729079689684875, 0.15764394582962937, 0.19888555503565797, 0.19360101986423928, 0.19528020015573433, 0.1603376740483472, 0.06750462958611081, 0.12460141613166376, 0.14014314102987335, 0.17114401378762178, 0.14454646072265986, 0.1346247440068573, 0.14562542540199752, 0.1061420392817527, 0.07738007608040187, 0.14662758393909758, 0.1621920554849241, 0.18720175328347255, 0.11013076053446169, 0.01631008818308799, 0.009941614323887404, 0.15197404797709368, 0.13445304978562722, 0.10614157129663926, 0.1730066786350688, 0.08081492923722822, 0.13857686286404602, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03091347688866919, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05200383337186154, 0.04387985943759576, 0.037747598468200194, 0.07484971002814711, 0.045856714685539535, 9.999999999998899e-05, 9.999999999998899e-05, 0.0317628355332763, 0.036412389334396944, 0.035623887919174924, 0.032529000343896275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06328297275805728, 9.999999999998899e-05, 0.07168934174616148, 0.06991670104663095, 0.11194226253907003, 0.03245215726184558, 9.999999999998899e-05, 0.08997460389699552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060515163293007546, 0.08106154179923675, 0.07308923501084352, 0.4423280885249756, 0.45583428006806015, 0.46618762263693014, 0.18228811736004202, 0.4235644044850878, 0.4530705009228434, 0.4639469604808638, 0.4563479238503927, 0.4612268050134579, 0.06087246198013274, 0.07162999503685186, 0.11551054933893179, 0.10032024203183065, 0.08900242396750402, 0.08557633710092416, 0.06663800939513953, 0.09403716000201856, 0.11233912724340422, 0.23143260542717536, 0.26856805378282167, 0.13865107805856147, 0.254776979732907, 0.1939515463582514, 0.12433114950412183, 0.19810200560841285, 0.15409412612568485, 0.17327917005016558, 0.23584989211913876, 0.18169522756806822, 0.3993634103813942, 0.41351153291347, 0.19075177393167686, 0.40803615515353164, 0.3548103097636581, 0.40963198172144355, 0.32995100304617486, 0.15526757356661092, 0.15646142195196844, 0.16424955041637657, 0.2301195341646095, 0.17995687066124466, 0.16073786262333378, 0.14270944678224728, 0.2317636864240289, 0.12954641680831502, 0.20265267678790455, 0.21418814948543263, 0.18643547887410783, 0.20777877954480672, 0.18730368006039044, 0.20542499309613027, 0.19554025729899782, 0.18046969085228504, 0.2349795965849134, 0.20041151793608303, 0.18617376589172063, 0.2252381517323092, 0.18581043991328872, 0.21489307886952536, 0.18799152143752795, 0.19180415424014463, 0.5344851852525035, 0.19645002909115128, 0.25957752018337554, 0.1631518480097529, 0.12468829610090193, 0.175856549312417, 0.18788435993804153, 0.722063810998508, 0.09876869830506552, 0.16946883905824417, 0.4269740948962726, 0.06681471197932665, 0.10878025517378898, 0.3552296262643314, 0.38946836619176106, 0.2161583305668895, 0.3712896667092578, 0.18503638338918016, 0.5911659164290103, 0.19765040837602232, 0.2067985833621988, 0.21869761794113618, 0.19097896487484955, 0.19914821611386646, 0.18792602043290707, 0.17207460788284734, 0.18425647279358204, 0.1875812474567924, 0.19396915083107835, 0.07758415249029949, 0.08810907812621716, 0.08736824494091855, 0.08064123617863606, 0.07847896917189379, 0.0748316369725287, 0.07088941499123136, 0.08253578910413506, 0.08327348891366237]}, "mutation_prompt": null}
{"id": "98ca4c39-3d82-4d87-bf17-c90c7e5375cc", "solution": "import numpy as np\n\nclass ImprovedHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        w, c1, c2 = 0.5, 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            np.clip(swarm, lb, ub, out=swarm)  # Direct update of swarm array\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedHybridPSODEImproved", "description": "Reduced redundant array creation by directly updating swarm and pbest arrays during iterations instead of creating separate arrays for updates.", "configspace": "", "generation": 8, "fitness": 0.271145089309833, "feedback": "The algorithm ImprovedHybridPSODEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "fa12339d-bbac-4442-9c74-6f01e4d86b40", "metadata": {"aucs": [0.9485943568266696, 0.9564125613759216, 0.9563965955994299, 0.18362166950433423, 0.9566443909011322, 0.9523678204347644, 0.9548422080455328, 0.9495391029332787, 0.9540722072233612, 0.22677364891362584, 0.3663356732001847, 0.908461724529868, 9.999999999998899e-05, 9.999999999998899e-05, 0.892146483216369, 0.2607508557144269, 0.8972212712919342, 0.3401882225157755, 0.11830077345638146, 0.11362389811082685, 0.11981639427277546, 0.06661555140678665, 0.09377395622200124, 0.08363498379107204, 0.11883318879684956, 0.07334836222634422, 0.14888481707208157, 0.12686895535638998, 0.11254595395601685, 0.10182247350631446, 0.10254971764835408, 0.1199751904211005, 0.1074010317275017, 0.09586829052260526, 0.16598053292891668, 0.10288264630000399, 0.9893995170194209, 0.9847938396219391, 0.9920980091899092, 0.9851117025006455, 0.9838257210080139, 0.9822379598331078, 0.9943779019008298, 0.9903409423520657, 0.9925038285487825, 0.8603430756437295, 0.05973196320401419, 0.6735915638113616, 0.5016381890106454, 0.15491077299568623, 0.47601643426225915, 0.08380445407782933, 0.08961723983086345, 0.08884408949045286, 0.25727242448991094, 0.12903254752465076, 0.16286076999424126, 0.19586892364606723, 0.22324733293628374, 0.1626044178039845, 0.17845129442733687, 0.17936778598060266, 0.16836360488844415, 0.14461062101112765, 0.16363251848103433, 0.14394532836301532, 0.1310319222147851, 0.13358651472322913, 0.18817769630874337, 0.12537562700255023, 0.40889591681550663, 0.1748301903714895, 0.16950646665037528, 0.14516532497395607, 0.24082803990918988, 0.187659475122261, 0.23413469152774002, 0.13610544425865778, 0.1312304749575962, 0.030868694346626757, 0.13615005285141302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013728905674024183, 9.999999999998899e-05, 9.999999999998899e-05, 0.051026317370969854, 0.03010596204468563, 0.06994212462460914, 0.04586969264738949, 0.004119912957360805, 0.046523308192303214, 0.08112427503284159, 0.05771554723321082, 0.06036216570801156, 0.054481463240379835, 0.10695736877511808, 0.24757754047503688, 0.25552268128477407, 0.2217015204383802, 0.1142388100696673, 0.10930984692368406, 0.21197794447769414, 0.08011026997424942, 0.021286831831660136, 9.999999999998899e-05, 0.08136308223209543, 9.999999999998899e-05, 0.02391859286288689, 0.006878845979118475, 0.19420108170302852, 0.049928825654797726, 0.08602455420889332, 0.545152375680635, 0.6187294212209744, 0.6011968064555513, 0.5578090880668937, 0.5901184973316275, 0.610029455285718, 0.5768279838653761, 0.6102367547886925, 0.6170005120613855, 0.06921088457709013, 0.07325438816391239, 0.1192584011000195, 0.1661877671477776, 0.04976337217751403, 0.10746823667182215, 0.07409604168782702, 0.11735893334256486, 0.07878023624746566, 0.269981717673655, 0.23269854643770782, 0.24158970926228562, 0.24921454581894353, 0.3326764433513164, 0.16451680353839415, 0.23546388567958065, 0.15882656414370744, 0.19115311542014302, 0.42437653013755094, 0.24288410689632223, 0.20105070042914108, 0.201340593942252, 0.19608248643992376, 0.30506360441090297, 0.26894576781883295, 0.38975605102151256, 0.20634290075009365, 0.22972162223489434, 0.2757780416930231, 0.1537038680216194, 0.2066235763718447, 0.17835564806334858, 0.16940732306851447, 0.21074076495921756, 0.21808460146932207, 0.08311002312901361, 0.27225708063207577, 0.2194540865232042, 0.2343287123057195, 0.25747755139292783, 0.2208473957349384, 0.16842431861406315, 0.22766201421119037, 0.22154434528768074, 0.25712501988636915, 0.2041533192625311, 0.20122444858276856, 0.22864355902469413, 0.21377985441176162, 0.22902878308052488, 0.2141251128950773, 0.19055205733416747, 0.23056639944601653, 0.18561081190466344, 0.9590316350561049, 0.12687380998057018, 0.15356009019162153, 0.96577957796436, 0.2019952137502109, 0.9604281671627215, 0.10002350338520938, 0.17047679673707095, 0.16354406433453172, 0.07925598414075863, 0.16674177673009616, 0.3895288481568375, 0.21340391827524818, 0.17007033797161109, 0.2136122608154506, 0.4076050361356899, 0.8915789370909482, 0.5569961269841621, 0.22961413498077377, 0.19580271543713923, 0.18567104062524176, 0.21207961202813141, 0.2172373899808433, 0.2235547794781083, 0.23249124388659204, 0.1977905998863857, 0.19632216862271668, 0.06642565314433702, 0.09183860871221527, 0.09573956823111462, 0.07763027273393763, 0.10131663057490481, 0.14382439799753188, 0.06813106870470087, 0.08008522592591305, 0.10657625418230254]}, "mutation_prompt": null}
{"id": "4b814b23-3777-4e11-86cf-a7fb2b20dc6f", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ImprovedHybridPSODEParallel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array(Parallel(n_jobs=-1)(delayed(objective_function)(p) for p in pbest))\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        w, c1, c2 = 0.5, 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array(Parallel(n_jobs=-1)(delayed(objective_function)(p) for p in swarm))\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedHybridPSODEParallel", "description": "Implemented parallel processing using joblib library to enhance computation speed and efficiency.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "fa12339d-bbac-4442-9c74-6f01e4d86b40", "metadata": {}, "mutation_prompt": null}
{"id": "a4baf713-7327-4048-a211-f1b950e10070", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * _ / max_iter)  # Adaptive inertia weight\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedAdaptiveHybridPSODE", "description": "Improved the convergence speed and exploration-exploitation balance by introducing adaptive weight factor.", "configspace": "", "generation": 10, "fitness": 0.27235349163104033, "feedback": "The algorithm ImprovedAdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "fa12339d-bbac-4442-9c74-6f01e4d86b40", "metadata": {"aucs": [0.855409927236346, 0.859456886103984, 0.8508085415005913, 0.18347828813655498, 0.8573138858296192, 0.19051240508545964, 0.8521378084330948, 0.8552977243179672, 0.8593871039756152, 0.07633674797216461, 0.6633925466821535, 9.999999999998899e-05, 0.043833926909835785, 0.14565649573807982, 0.6559930043504968, 0.04978585583110906, 0.6914953109503523, 0.6555336047330773, 0.1382429309054647, 0.16797140073830685, 0.1679019805621832, 0.16090514680050183, 0.07595515052485102, 0.16562029559040403, 0.17694908663630615, 0.1418641313889315, 0.5721891246319069, 0.10825490947535599, 0.13982424880170308, 0.1181759818697512, 0.16750510879713076, 0.12351946559190652, 0.1396130902308672, 0.1558460524079055, 0.12960176371228738, 0.1323634039003886, 0.9927817759342441, 0.988739987269474, 0.9941830099548422, 0.9891101635988538, 0.9922135120130436, 0.9858676566477376, 0.9940617029374147, 0.9925125864866421, 0.9936816138011391, 0.4233036168523807, 0.6736488901511661, 0.6629688639309927, 0.1534408957707758, 0.1537522932712041, 0.6610084857582064, 0.08389709133442225, 0.5246680620357153, 0.6480083508272443, 0.22981051618401893, 0.16787905268473913, 0.22493512072610233, 0.1950497767399041, 0.2789500835460088, 0.16270022942137563, 0.23266941507844008, 0.17304803607029884, 0.11605575469818064, 0.11984313952832615, 0.260431623817886, 0.21526854824284258, 0.2044374045567786, 0.1899114414516896, 0.2028876805993024, 0.2260901014411566, 0.20891705515876213, 0.19951902133402366, 0.1995548210580137, 0.10856757394546823, 0.18828637409142923, 0.23927885781416314, 0.23317134587162636, 0.20093413211526157, 0.23852447415548272, 0.13771038018448523, 0.19172944745107834, 9.999999999998899e-05, 0.0454290151369765, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077529752156068055, 0.028959521463732152, 0.08262680541553324, 9.999999999998899e-05, 0.01296546522155928, 0.12516097167318585, 0.03076417436460155, 0.05840213474708322, 0.08079264046526657, 0.007567699737791034, 0.017767180544960848, 0.1156071377974558, 0.05250263778200437, 0.020693238524448154, 0.04730024033930802, 0.1297937686916807, 0.13138049956561826, 0.14756116457122082, 0.1355672209819564, 0.07712305133178543, 0.09741991575954712, 0.18091787914638802, 0.06916333024484755, 0.0429660341991801, 9.999999999998899e-05, 0.17393528104318579, 0.006904213679876148, 0.0638096206052009, 0.0064145190816700115, 0.11230424310221043, 0.0518994252466457, 0.08299005901792533, 0.5508981045466605, 0.5223887739784665, 0.5745191267241004, 0.5281375157334285, 0.5453940887733228, 0.2093795623893545, 0.5777840605728757, 0.5519951522931845, 0.5417909560236425, 0.08356126095530458, 0.09444317357952137, 0.07975793529490804, 0.17955886761199413, 0.1660878908643575, 0.14269061424627794, 0.07910603414620476, 0.09687362020079981, 0.11779668164716972, 0.2355237422605273, 0.255618144766233, 0.18153924692638346, 0.2271304473075959, 0.2684706680150166, 0.20012511358106122, 0.2828098163728362, 0.20395678352419233, 0.27594161859316524, 0.28909617260810405, 0.20795252730541913, 0.3147018912938051, 0.23908651914402135, 0.468765926304896, 0.4599005682761709, 0.5264558049438939, 0.5013109155718805, 0.4576364099866985, 0.2488228036552088, 0.17226981923582574, 0.1707296364900962, 0.26046926640340684, 0.19708326624660033, 0.25455696161929897, 0.19675796675876822, 0.17435418070563025, 0.093558572331086, 0.2271847292447784, 0.21499452462019109, 0.19470713059375644, 0.22524722582432755, 0.16500509433466815, 0.180916384752835, 0.20708132221293074, 0.21422782774715465, 0.2145458990696617, 0.24016907296420975, 0.23665147025387612, 0.2480986905716116, 0.5723390068402721, 0.20046210230235306, 0.23594784833440352, 0.21742615877914562, 0.2305701544633021, 0.20563693247390424, 0.912267552961418, 0.1710968761120717, 0.124011140091276, 0.8890718862529827, 0.20117452238334, 0.8864185984845381, 0.09995702889395874, 0.17003560360919823, 0.16190178886171958, 0.07921830508580019, 0.21106951153831255, 0.17692490633143299, 0.2134449196233038, 0.1693800161615875, 0.21172511233844282, 0.10546238793881291, 0.6998780791845085, 0.659139164201678, 0.1959980782108104, 0.2115487344010838, 0.1923168425190107, 0.1973518265473806, 0.2003404378197835, 0.197795162616198, 0.21448244762111313, 0.21627042375502648, 0.19471004045929385, 0.06688498267088538, 0.08882766162006261, 0.09634185804413775, 0.060154568764575145, 0.09740416178456379, 0.13550930944077666, 0.07931879652992879, 0.07924693038833908, 0.09648937627112464]}, "mutation_prompt": null}
{"id": "7e7efba1-c260-4578-a96b-935dd76b159a", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * _ / max_iter)  # Adaptive inertia weight\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest = np.where(update_idx[:, None], swarm, pbest)\n            pbest_scores = np.where(update_idx, scores, pbest_scores)\n            \n            gbest_idx = np.argmin(pbest_scores)\n            gbest = np.where(pbest_scores[gbest_idx] < gbest_score, pbest[gbest_idx], gbest)\n            gbest_score = np.where(pbest_scores[gbest_idx] < gbest_score, pbest_scores[gbest_idx], gbest_score)\n\n        return gbest", "name": "ImprovedAdaptiveHybridPSODE", "description": "Optimized the update mechanism to use vectorized operations for efficiency.", "configspace": "", "generation": 11, "fitness": 0.27235349163104033, "feedback": "The algorithm ImprovedAdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "a4baf713-7327-4048-a211-f1b950e10070", "metadata": {"aucs": [0.855409927236346, 0.859456886103984, 0.8508085415005913, 0.18347828813655498, 0.8573138858296192, 0.19051240508545964, 0.8521378084330948, 0.8552977243179672, 0.8593871039756152, 0.07633674797216461, 0.6633925466821535, 9.999999999998899e-05, 0.043833926909835785, 0.14565649573807982, 0.6559930043504968, 0.04978585583110906, 0.6914953109503523, 0.6555336047330773, 0.1382429309054647, 0.16797140073830685, 0.1679019805621832, 0.16090514680050183, 0.07595515052485102, 0.16562029559040403, 0.17694908663630615, 0.1418641313889315, 0.5721891246319069, 0.10825490947535599, 0.13982424880170308, 0.1181759818697512, 0.16750510879713076, 0.12351946559190652, 0.1396130902308672, 0.1558460524079055, 0.12960176371228738, 0.1323634039003886, 0.9927817759342441, 0.988739987269474, 0.9941830099548422, 0.9891101635988538, 0.9922135120130436, 0.9858676566477376, 0.9940617029374147, 0.9925125864866421, 0.9936816138011391, 0.4233036168523807, 0.6736488901511661, 0.6629688639309927, 0.1534408957707758, 0.1537522932712041, 0.6610084857582064, 0.08389709133442225, 0.5246680620357153, 0.6480083508272443, 0.22981051618401893, 0.16787905268473913, 0.22493512072610233, 0.1950497767399041, 0.2789500835460088, 0.16270022942137563, 0.23266941507844008, 0.17304803607029884, 0.11605575469818064, 0.11984313952832615, 0.260431623817886, 0.21526854824284258, 0.2044374045567786, 0.1899114414516896, 0.2028876805993024, 0.2260901014411566, 0.20891705515876213, 0.19951902133402366, 0.1995548210580137, 0.10856757394546823, 0.18828637409142923, 0.23927885781416314, 0.23317134587162636, 0.20093413211526157, 0.23852447415548272, 0.13771038018448523, 0.19172944745107834, 9.999999999998899e-05, 0.0454290151369765, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077529752156068055, 0.028959521463732152, 0.08262680541553324, 9.999999999998899e-05, 0.01296546522155928, 0.12516097167318585, 0.03076417436460155, 0.05840213474708322, 0.08079264046526657, 0.007567699737791034, 0.017767180544960848, 0.1156071377974558, 0.05250263778200437, 0.020693238524448154, 0.04730024033930802, 0.1297937686916807, 0.13138049956561826, 0.14756116457122082, 0.1355672209819564, 0.07712305133178543, 0.09741991575954712, 0.18091787914638802, 0.06916333024484755, 0.0429660341991801, 9.999999999998899e-05, 0.17393528104318579, 0.006904213679876148, 0.0638096206052009, 0.0064145190816700115, 0.11230424310221043, 0.0518994252466457, 0.08299005901792533, 0.5508981045466605, 0.5223887739784665, 0.5745191267241004, 0.5281375157334285, 0.5453940887733228, 0.2093795623893545, 0.5777840605728757, 0.5519951522931845, 0.5417909560236425, 0.08356126095530458, 0.09444317357952137, 0.07975793529490804, 0.17955886761199413, 0.1660878908643575, 0.14269061424627794, 0.07910603414620476, 0.09687362020079981, 0.11779668164716972, 0.2355237422605273, 0.255618144766233, 0.18153924692638346, 0.2271304473075959, 0.2684706680150166, 0.20012511358106122, 0.2828098163728362, 0.20395678352419233, 0.27594161859316524, 0.28909617260810405, 0.20795252730541913, 0.3147018912938051, 0.23908651914402135, 0.468765926304896, 0.4599005682761709, 0.5264558049438939, 0.5013109155718805, 0.4576364099866985, 0.2488228036552088, 0.17226981923582574, 0.1707296364900962, 0.26046926640340684, 0.19708326624660033, 0.25455696161929897, 0.19675796675876822, 0.17435418070563025, 0.093558572331086, 0.2271847292447784, 0.21499452462019109, 0.19470713059375644, 0.22524722582432755, 0.16500509433466815, 0.180916384752835, 0.20708132221293074, 0.21422782774715465, 0.2145458990696617, 0.24016907296420975, 0.23665147025387612, 0.2480986905716116, 0.5723390068402721, 0.20046210230235306, 0.23594784833440352, 0.21742615877914562, 0.2305701544633021, 0.20563693247390424, 0.912267552961418, 0.1710968761120717, 0.124011140091276, 0.8890718862529827, 0.20117452238334, 0.8864185984845381, 0.09995702889395874, 0.17003560360919823, 0.16190178886171958, 0.07921830508580019, 0.21106951153831255, 0.17692490633143299, 0.2134449196233038, 0.1693800161615875, 0.21172511233844282, 0.10546238793881291, 0.6998780791845085, 0.659139164201678, 0.1959980782108104, 0.2115487344010838, 0.1923168425190107, 0.1973518265473806, 0.2003404378197835, 0.197795162616198, 0.21448244762111313, 0.21627042375502648, 0.19471004045929385, 0.06688498267088538, 0.08882766162006261, 0.09634185804413775, 0.060154568764575145, 0.09740416178456379, 0.13550930944077666, 0.07931879652992879, 0.07924693038833908, 0.09648937627112464]}, "mutation_prompt": null}
{"id": "6ba99218-2507-48fe-9561-d8c37d6941f6", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * _ / max_iter)  # Adaptive inertia weight\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedAdaptiveHybridPSODE", "description": "Improved the convergence speed and exploration-exploitation balance by introducing adaptive weight factor.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a4baf713-7327-4048-a211-f1b950e10070", "metadata": {"aucs": [0.855409927236346, 0.859456886103984, 0.8508085415005913, 0.18347828813655498, 0.8573138858296192, 0.19051240508545964, 0.8521378084330948, 0.8552977243179672, 0.8593871039756152, 0.07633674797216461, 0.6633925466821535, 9.999999999998899e-05, 0.043833926909835785, 0.14565649573807982, 0.6559930043504968, 0.04978585583110906, 0.6914953109503523, 0.6555336047330773, 0.1382429309054647, 0.16797140073830685, 0.1679019805621832, 0.16090514680050183, 0.07595515052485102, 0.16562029559040403, 0.17694908663630615, 0.1418641313889315, 0.5721891246319069, 0.10825490947535599, 0.13982424880170308, 0.1181759818697512, 0.16750510879713076, 0.12351946559190652, 0.1396130902308672, 0.1558460524079055, 0.12960176371228738, 0.1323634039003886, 0.9927817759342441, 0.988739987269474, 0.9941830099548422, 0.9891101635988538, 0.9922135120130436, 0.9858676566477376, 0.9940617029374147, 0.9925125864866421, 0.9936816138011391, 0.4233036168523807, 0.6736488901511661, 0.6629688639309927, 0.1534408957707758, 0.1537522932712041, 0.6610084857582064, 0.08389709133442225, 0.5246680620357153, 0.6480083508272443, 0.22981051618401893, 0.16787905268473913, 0.22493512072610233, 0.1950497767399041, 0.2789500835460088, 0.16270022942137563, 0.23266941507844008, 0.17304803607029884, 0.11605575469818064, 0.11984313952832615, 0.260431623817886, 0.21526854824284258, 0.2044374045567786, 0.1899114414516896, 0.2028876805993024, 0.2260901014411566, 0.20891705515876213, 0.19951902133402366, 0.1995548210580137, 0.10856757394546823, 0.18828637409142923, 0.23927885781416314, 0.23317134587162636, 0.20093413211526157, 0.23852447415548272, 0.13771038018448523, 0.19172944745107834, 9.999999999998899e-05, 0.0454290151369765, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077529752156068055, 0.028959521463732152, 0.08262680541553324, 9.999999999998899e-05, 0.01296546522155928, 0.12516097167318585, 0.03076417436460155, 0.05840213474708322, 0.08079264046526657, 0.007567699737791034, 0.017767180544960848, 0.1156071377974558, 0.05250263778200437, 0.020693238524448154, 0.04730024033930802, 0.1297937686916807, 0.13138049956561826, 0.14756116457122082, 0.1355672209819564, 0.07712305133178543, 0.09741991575954712, 0.18091787914638802, 0.06916333024484755, 0.0429660341991801, 9.999999999998899e-05, 0.17393528104318579, 0.006904213679876148, 0.0638096206052009, 0.0064145190816700115, 0.11230424310221043, 0.0518994252466457, 0.08299005901792533, 0.5508981045466605, 0.5223887739784665, 0.5745191267241004, 0.5281375157334285, 0.5453940887733228, 0.2093795623893545, 0.5777840605728757, 0.5519951522931845, 0.5417909560236425, 0.08356126095530458, 0.09444317357952137, 0.07975793529490804, 0.17955886761199413, 0.1660878908643575, 0.14269061424627794, 0.07910603414620476, 0.09687362020079981, 0.11779668164716972, 0.2355237422605273, 0.255618144766233, 0.18153924692638346, 0.2271304473075959, 0.2684706680150166, 0.20012511358106122, 0.2828098163728362, 0.20395678352419233, 0.27594161859316524, 0.28909617260810405, 0.20795252730541913, 0.3147018912938051, 0.23908651914402135, 0.468765926304896, 0.4599005682761709, 0.5264558049438939, 0.5013109155718805, 0.4576364099866985, 0.2488228036552088, 0.17226981923582574, 0.1707296364900962, 0.26046926640340684, 0.19708326624660033, 0.25455696161929897, 0.19675796675876822, 0.17435418070563025, 0.093558572331086, 0.2271847292447784, 0.21499452462019109, 0.19470713059375644, 0.22524722582432755, 0.16500509433466815, 0.180916384752835, 0.20708132221293074, 0.21422782774715465, 0.2145458990696617, 0.24016907296420975, 0.23665147025387612, 0.2480986905716116, 0.5723390068402721, 0.20046210230235306, 0.23594784833440352, 0.21742615877914562, 0.2305701544633021, 0.20563693247390424, 0.912267552961418, 0.1710968761120717, 0.124011140091276, 0.8890718862529827, 0.20117452238334, 0.8864185984845381, 0.09995702889395874, 0.17003560360919823, 0.16190178886171958, 0.07921830508580019, 0.21106951153831255, 0.17692490633143299, 0.2134449196233038, 0.1693800161615875, 0.21172511233844282, 0.10546238793881291, 0.6998780791845085, 0.659139164201678, 0.1959980782108104, 0.2115487344010838, 0.1923168425190107, 0.1973518265473806, 0.2003404378197835, 0.197795162616198, 0.21448244762111313, 0.21627042375502648, 0.19471004045929385, 0.06688498267088538, 0.08882766162006261, 0.09634185804413775, 0.060154568764575145, 0.09740416178456379, 0.13550930944077666, 0.07931879652992879, 0.07924693038833908, 0.09648937627112464]}, "mutation_prompt": null}
{"id": "f9eb7b5b-1e8d-4689-9589-5db83e3c96f9", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * _ / max_iter)  # Adaptive inertia weight\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            new_gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[new_gbest_idx] < gbest_score:\n                gbest = pbest[new_gbest_idx].copy()\n                gbest_score = pbest_scores[new_gbest_idx]\n                gbest_idx = new_gbest_idx\n\n        return gbest", "name": "ImprovedAdaptiveHybridPSODE", "description": "Optimized the convergence criteria by updating the global best only when it improves.", "configspace": "", "generation": 13, "fitness": 0.27235349163104033, "feedback": "The algorithm ImprovedAdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "a4baf713-7327-4048-a211-f1b950e10070", "metadata": {"aucs": [0.855409927236346, 0.859456886103984, 0.8508085415005913, 0.18347828813655498, 0.8573138858296192, 0.19051240508545964, 0.8521378084330948, 0.8552977243179672, 0.8593871039756152, 0.07633674797216461, 0.6633925466821535, 9.999999999998899e-05, 0.043833926909835785, 0.14565649573807982, 0.6559930043504968, 0.04978585583110906, 0.6914953109503523, 0.6555336047330773, 0.1382429309054647, 0.16797140073830685, 0.1679019805621832, 0.16090514680050183, 0.07595515052485102, 0.16562029559040403, 0.17694908663630615, 0.1418641313889315, 0.5721891246319069, 0.10825490947535599, 0.13982424880170308, 0.1181759818697512, 0.16750510879713076, 0.12351946559190652, 0.1396130902308672, 0.1558460524079055, 0.12960176371228738, 0.1323634039003886, 0.9927817759342441, 0.988739987269474, 0.9941830099548422, 0.9891101635988538, 0.9922135120130436, 0.9858676566477376, 0.9940617029374147, 0.9925125864866421, 0.9936816138011391, 0.4233036168523807, 0.6736488901511661, 0.6629688639309927, 0.1534408957707758, 0.1537522932712041, 0.6610084857582064, 0.08389709133442225, 0.5246680620357153, 0.6480083508272443, 0.22981051618401893, 0.16787905268473913, 0.22493512072610233, 0.1950497767399041, 0.2789500835460088, 0.16270022942137563, 0.23266941507844008, 0.17304803607029884, 0.11605575469818064, 0.11984313952832615, 0.260431623817886, 0.21526854824284258, 0.2044374045567786, 0.1899114414516896, 0.2028876805993024, 0.2260901014411566, 0.20891705515876213, 0.19951902133402366, 0.1995548210580137, 0.10856757394546823, 0.18828637409142923, 0.23927885781416314, 0.23317134587162636, 0.20093413211526157, 0.23852447415548272, 0.13771038018448523, 0.19172944745107834, 9.999999999998899e-05, 0.0454290151369765, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077529752156068055, 0.028959521463732152, 0.08262680541553324, 9.999999999998899e-05, 0.01296546522155928, 0.12516097167318585, 0.03076417436460155, 0.05840213474708322, 0.08079264046526657, 0.007567699737791034, 0.017767180544960848, 0.1156071377974558, 0.05250263778200437, 0.020693238524448154, 0.04730024033930802, 0.1297937686916807, 0.13138049956561826, 0.14756116457122082, 0.1355672209819564, 0.07712305133178543, 0.09741991575954712, 0.18091787914638802, 0.06916333024484755, 0.0429660341991801, 9.999999999998899e-05, 0.17393528104318579, 0.006904213679876148, 0.0638096206052009, 0.0064145190816700115, 0.11230424310221043, 0.0518994252466457, 0.08299005901792533, 0.5508981045466605, 0.5223887739784665, 0.5745191267241004, 0.5281375157334285, 0.5453940887733228, 0.2093795623893545, 0.5777840605728757, 0.5519951522931845, 0.5417909560236425, 0.08356126095530458, 0.09444317357952137, 0.07975793529490804, 0.17955886761199413, 0.1660878908643575, 0.14269061424627794, 0.07910603414620476, 0.09687362020079981, 0.11779668164716972, 0.2355237422605273, 0.255618144766233, 0.18153924692638346, 0.2271304473075959, 0.2684706680150166, 0.20012511358106122, 0.2828098163728362, 0.20395678352419233, 0.27594161859316524, 0.28909617260810405, 0.20795252730541913, 0.3147018912938051, 0.23908651914402135, 0.468765926304896, 0.4599005682761709, 0.5264558049438939, 0.5013109155718805, 0.4576364099866985, 0.2488228036552088, 0.17226981923582574, 0.1707296364900962, 0.26046926640340684, 0.19708326624660033, 0.25455696161929897, 0.19675796675876822, 0.17435418070563025, 0.093558572331086, 0.2271847292447784, 0.21499452462019109, 0.19470713059375644, 0.22524722582432755, 0.16500509433466815, 0.180916384752835, 0.20708132221293074, 0.21422782774715465, 0.2145458990696617, 0.24016907296420975, 0.23665147025387612, 0.2480986905716116, 0.5723390068402721, 0.20046210230235306, 0.23594784833440352, 0.21742615877914562, 0.2305701544633021, 0.20563693247390424, 0.912267552961418, 0.1710968761120717, 0.124011140091276, 0.8890718862529827, 0.20117452238334, 0.8864185984845381, 0.09995702889395874, 0.17003560360919823, 0.16190178886171958, 0.07921830508580019, 0.21106951153831255, 0.17692490633143299, 0.2134449196233038, 0.1693800161615875, 0.21172511233844282, 0.10546238793881291, 0.6998780791845085, 0.659139164201678, 0.1959980782108104, 0.2115487344010838, 0.1923168425190107, 0.1973518265473806, 0.2003404378197835, 0.197795162616198, 0.21448244762111313, 0.21627042375502648, 0.19471004045929385, 0.06688498267088538, 0.08882766162006261, 0.09634185804413775, 0.060154568764575145, 0.09740416178456379, 0.13550930944077666, 0.07931879652992879, 0.07924693038833908, 0.09648937627112464]}, "mutation_prompt": null}
{"id": "892e55a5-a1b0-4ad8-90fa-3fb693f23660", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * _ / max_iter)\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            np.clip(swarm, lb, ub, out=swarm)  # Vectorized clipping operation\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedHybridPSODE", "description": "Optimized the velocity update computation by vectorizing the calculation to improve efficiency.", "configspace": "", "generation": 14, "fitness": 0.27235349163104033, "feedback": "The algorithm OptimizedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "a4baf713-7327-4048-a211-f1b950e10070", "metadata": {"aucs": [0.855409927236346, 0.859456886103984, 0.8508085415005913, 0.18347828813655498, 0.8573138858296192, 0.19051240508545964, 0.8521378084330948, 0.8552977243179672, 0.8593871039756152, 0.07633674797216461, 0.6633925466821535, 9.999999999998899e-05, 0.043833926909835785, 0.14565649573807982, 0.6559930043504968, 0.04978585583110906, 0.6914953109503523, 0.6555336047330773, 0.1382429309054647, 0.16797140073830685, 0.1679019805621832, 0.16090514680050183, 0.07595515052485102, 0.16562029559040403, 0.17694908663630615, 0.1418641313889315, 0.5721891246319069, 0.10825490947535599, 0.13982424880170308, 0.1181759818697512, 0.16750510879713076, 0.12351946559190652, 0.1396130902308672, 0.1558460524079055, 0.12960176371228738, 0.1323634039003886, 0.9927817759342441, 0.988739987269474, 0.9941830099548422, 0.9891101635988538, 0.9922135120130436, 0.9858676566477376, 0.9940617029374147, 0.9925125864866421, 0.9936816138011391, 0.4233036168523807, 0.6736488901511661, 0.6629688639309927, 0.1534408957707758, 0.1537522932712041, 0.6610084857582064, 0.08389709133442225, 0.5246680620357153, 0.6480083508272443, 0.22981051618401893, 0.16787905268473913, 0.22493512072610233, 0.1950497767399041, 0.2789500835460088, 0.16270022942137563, 0.23266941507844008, 0.17304803607029884, 0.11605575469818064, 0.11984313952832615, 0.260431623817886, 0.21526854824284258, 0.2044374045567786, 0.1899114414516896, 0.2028876805993024, 0.2260901014411566, 0.20891705515876213, 0.19951902133402366, 0.1995548210580137, 0.10856757394546823, 0.18828637409142923, 0.23927885781416314, 0.23317134587162636, 0.20093413211526157, 0.23852447415548272, 0.13771038018448523, 0.19172944745107834, 9.999999999998899e-05, 0.0454290151369765, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077529752156068055, 0.028959521463732152, 0.08262680541553324, 9.999999999998899e-05, 0.01296546522155928, 0.12516097167318585, 0.03076417436460155, 0.05840213474708322, 0.08079264046526657, 0.007567699737791034, 0.017767180544960848, 0.1156071377974558, 0.05250263778200437, 0.020693238524448154, 0.04730024033930802, 0.1297937686916807, 0.13138049956561826, 0.14756116457122082, 0.1355672209819564, 0.07712305133178543, 0.09741991575954712, 0.18091787914638802, 0.06916333024484755, 0.0429660341991801, 9.999999999998899e-05, 0.17393528104318579, 0.006904213679876148, 0.0638096206052009, 0.0064145190816700115, 0.11230424310221043, 0.0518994252466457, 0.08299005901792533, 0.5508981045466605, 0.5223887739784665, 0.5745191267241004, 0.5281375157334285, 0.5453940887733228, 0.2093795623893545, 0.5777840605728757, 0.5519951522931845, 0.5417909560236425, 0.08356126095530458, 0.09444317357952137, 0.07975793529490804, 0.17955886761199413, 0.1660878908643575, 0.14269061424627794, 0.07910603414620476, 0.09687362020079981, 0.11779668164716972, 0.2355237422605273, 0.255618144766233, 0.18153924692638346, 0.2271304473075959, 0.2684706680150166, 0.20012511358106122, 0.2828098163728362, 0.20395678352419233, 0.27594161859316524, 0.28909617260810405, 0.20795252730541913, 0.3147018912938051, 0.23908651914402135, 0.468765926304896, 0.4599005682761709, 0.5264558049438939, 0.5013109155718805, 0.4576364099866985, 0.2488228036552088, 0.17226981923582574, 0.1707296364900962, 0.26046926640340684, 0.19708326624660033, 0.25455696161929897, 0.19675796675876822, 0.17435418070563025, 0.093558572331086, 0.2271847292447784, 0.21499452462019109, 0.19470713059375644, 0.22524722582432755, 0.16500509433466815, 0.180916384752835, 0.20708132221293074, 0.21422782774715465, 0.2145458990696617, 0.24016907296420975, 0.23665147025387612, 0.2480986905716116, 0.5723390068402721, 0.20046210230235306, 0.23594784833440352, 0.21742615877914562, 0.2305701544633021, 0.20563693247390424, 0.912267552961418, 0.1710968761120717, 0.124011140091276, 0.8890718862529827, 0.20117452238334, 0.8864185984845381, 0.09995702889395874, 0.17003560360919823, 0.16190178886171958, 0.07921830508580019, 0.21106951153831255, 0.17692490633143299, 0.2134449196233038, 0.1693800161615875, 0.21172511233844282, 0.10546238793881291, 0.6998780791845085, 0.659139164201678, 0.1959980782108104, 0.2115487344010838, 0.1923168425190107, 0.1973518265473806, 0.2003404378197835, 0.197795162616198, 0.21448244762111313, 0.21627042375502648, 0.19471004045929385, 0.06688498267088538, 0.08882766162006261, 0.09634185804413775, 0.060154568764575145, 0.09740416178456379, 0.13550930944077666, 0.07931879652992879, 0.07924693038833908, 0.09648937627112464]}, "mutation_prompt": null}
{"id": "55811854-d091-4f76-ac6e-9694b60a814f", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for _ in range(max_iter):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * _ / max_iter)  # Adaptive inertia weight\n            velocities = w * velocities + c1 * r1[_] * (pbest - swarm) + c2 * r2[_] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedAdaptiveHybridPSODE", "description": "Improved the convergence speed and exploration-exploitation balance by introducing adaptive weight factor.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a4baf713-7327-4048-a211-f1b950e10070", "metadata": {"aucs": [0.855409927236346, 0.859456886103984, 0.8508085415005913, 0.18347828813655498, 0.8573138858296192, 0.19051240508545964, 0.8521378084330948, 0.8552977243179672, 0.8593871039756152, 0.07633674797216461, 0.6633925466821535, 9.999999999998899e-05, 0.043833926909835785, 0.14565649573807982, 0.6559930043504968, 0.04978585583110906, 0.6914953109503523, 0.6555336047330773, 0.1382429309054647, 0.16797140073830685, 0.1679019805621832, 0.16090514680050183, 0.07595515052485102, 0.16562029559040403, 0.17694908663630615, 0.1418641313889315, 0.5721891246319069, 0.10825490947535599, 0.13982424880170308, 0.1181759818697512, 0.16750510879713076, 0.12351946559190652, 0.1396130902308672, 0.1558460524079055, 0.12960176371228738, 0.1323634039003886, 0.9927817759342441, 0.988739987269474, 0.9941830099548422, 0.9891101635988538, 0.9922135120130436, 0.9858676566477376, 0.9940617029374147, 0.9925125864866421, 0.9936816138011391, 0.4233036168523807, 0.6736488901511661, 0.6629688639309927, 0.1534408957707758, 0.1537522932712041, 0.6610084857582064, 0.08389709133442225, 0.5246680620357153, 0.6480083508272443, 0.22981051618401893, 0.16787905268473913, 0.22493512072610233, 0.1950497767399041, 0.2789500835460088, 0.16270022942137563, 0.23266941507844008, 0.17304803607029884, 0.11605575469818064, 0.11984313952832615, 0.260431623817886, 0.21526854824284258, 0.2044374045567786, 0.1899114414516896, 0.2028876805993024, 0.2260901014411566, 0.20891705515876213, 0.19951902133402366, 0.1995548210580137, 0.10856757394546823, 0.18828637409142923, 0.23927885781416314, 0.23317134587162636, 0.20093413211526157, 0.23852447415548272, 0.13771038018448523, 0.19172944745107834, 9.999999999998899e-05, 0.0454290151369765, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077529752156068055, 0.028959521463732152, 0.08262680541553324, 9.999999999998899e-05, 0.01296546522155928, 0.12516097167318585, 0.03076417436460155, 0.05840213474708322, 0.08079264046526657, 0.007567699737791034, 0.017767180544960848, 0.1156071377974558, 0.05250263778200437, 0.020693238524448154, 0.04730024033930802, 0.1297937686916807, 0.13138049956561826, 0.14756116457122082, 0.1355672209819564, 0.07712305133178543, 0.09741991575954712, 0.18091787914638802, 0.06916333024484755, 0.0429660341991801, 9.999999999998899e-05, 0.17393528104318579, 0.006904213679876148, 0.0638096206052009, 0.0064145190816700115, 0.11230424310221043, 0.0518994252466457, 0.08299005901792533, 0.5508981045466605, 0.5223887739784665, 0.5745191267241004, 0.5281375157334285, 0.5453940887733228, 0.2093795623893545, 0.5777840605728757, 0.5519951522931845, 0.5417909560236425, 0.08356126095530458, 0.09444317357952137, 0.07975793529490804, 0.17955886761199413, 0.1660878908643575, 0.14269061424627794, 0.07910603414620476, 0.09687362020079981, 0.11779668164716972, 0.2355237422605273, 0.255618144766233, 0.18153924692638346, 0.2271304473075959, 0.2684706680150166, 0.20012511358106122, 0.2828098163728362, 0.20395678352419233, 0.27594161859316524, 0.28909617260810405, 0.20795252730541913, 0.3147018912938051, 0.23908651914402135, 0.468765926304896, 0.4599005682761709, 0.5264558049438939, 0.5013109155718805, 0.4576364099866985, 0.2488228036552088, 0.17226981923582574, 0.1707296364900962, 0.26046926640340684, 0.19708326624660033, 0.25455696161929897, 0.19675796675876822, 0.17435418070563025, 0.093558572331086, 0.2271847292447784, 0.21499452462019109, 0.19470713059375644, 0.22524722582432755, 0.16500509433466815, 0.180916384752835, 0.20708132221293074, 0.21422782774715465, 0.2145458990696617, 0.24016907296420975, 0.23665147025387612, 0.2480986905716116, 0.5723390068402721, 0.20046210230235306, 0.23594784833440352, 0.21742615877914562, 0.2305701544633021, 0.20563693247390424, 0.912267552961418, 0.1710968761120717, 0.124011140091276, 0.8890718862529827, 0.20117452238334, 0.8864185984845381, 0.09995702889395874, 0.17003560360919823, 0.16190178886171958, 0.07921830508580019, 0.21106951153831255, 0.17692490633143299, 0.2134449196233038, 0.1693800161615875, 0.21172511233844282, 0.10546238793881291, 0.6998780791845085, 0.659139164201678, 0.1959980782108104, 0.2115487344010838, 0.1923168425190107, 0.1973518265473806, 0.2003404378197835, 0.197795162616198, 0.21448244762111313, 0.21627042375502648, 0.19471004045929385, 0.06688498267088538, 0.08882766162006261, 0.09634185804413775, 0.060154568764575145, 0.09740416178456379, 0.13550930944077666, 0.07931879652992879, 0.07924693038833908, 0.09648937627112464]}, "mutation_prompt": null}
{"id": "4025a103-f206-413c-bcc6-343fc5978f5f", "solution": "import numpy as np\n\nclass DynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "DynamicPopulationPSO", "description": "Introduced a dynamic population size adjustment mechanism to adapt the swarm size during runtime based on the optimization progress.", "configspace": "", "generation": 16, "fitness": 0.2739346690913881, "feedback": "The algorithm DynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "a4baf713-7327-4048-a211-f1b950e10070", "metadata": {"aucs": [0.8509454540193984, 0.8571652602971992, 0.8712343552473029, 0.1834741535812121, 0.8484283262188274, 0.19051244442238313, 0.8489902066838676, 0.8584720396503656, 0.857275652321501, 0.07631961373739105, 0.661577841891738, 9.999999999998899e-05, 0.043760916716134135, 0.03699835413511643, 0.6459165797644681, 0.6475157471531777, 0.7094932624298149, 9.999999999998899e-05, 0.1700669606668005, 0.12678391451520843, 0.17455037233821946, 0.40693733448804437, 0.0745164901408325, 0.1760890493274514, 0.15622826070473872, 0.36127334009532164, 0.5621192787011855, 0.11923353177200957, 0.13902793713676542, 0.11444334016613888, 0.14737776612585163, 0.12908737903194523, 0.13577893746659797, 0.16928929489521727, 0.12726321269189012, 0.10107029124204836, 0.9927817564289403, 0.9887399858489845, 0.9941830093032121, 0.9891101616489235, 0.9922135081557534, 0.9858676541106022, 0.9940617036946622, 0.9925125802033373, 0.9936816111538747, 0.6017782376336385, 0.6374445587834152, 0.6967566767516359, 0.15351939178561425, 0.15376288321750275, 0.6702294531669728, 0.08389590751120102, 0.5757157106195434, 0.6687310823881434, 0.22981051618401893, 0.16787905268473913, 0.22492873991036821, 0.1950497767399041, 0.278924177687908, 0.16270022942137563, 0.8371514238504656, 0.1502128370135568, 0.11632129226252108, 0.11983677687253769, 0.25912854840484556, 0.20908652001411643, 0.20353327696247903, 0.19736009742618943, 0.1970045638848149, 0.22691610362413606, 0.22592299162786444, 0.20768621807284382, 0.20519475340501103, 0.10851191881538835, 0.19312148819110664, 0.23270110577510783, 0.2508457607437754, 0.20287312867664242, 0.24103896030570693, 0.1377196033593424, 0.19122179928558258, 9.999999999998899e-05, 0.05039010489813078, 9.999999999998899e-05, 9.999999999998899e-05, 0.006776361000910169, 0.029668868650170932, 0.08339081062698372, 9.999999999998899e-05, 0.009857606201344238, 0.07271738104914438, 0.04063445413575739, 0.05552155952327398, 0.09615450159959382, 0.007458323809909073, 0.015141258071873609, 0.06633219571728222, 0.050476410713948816, 0.020316204802740878, 0.04693183733800488, 0.12513054614827435, 0.1285894412518772, 0.1583604700225869, 0.13498966032595217, 0.07570179545989575, 0.09934870234933513, 0.17770030743681187, 0.06840153149299366, 0.0429034457184142, 9.999999999998899e-05, 0.1745693390433204, 0.006915920765060979, 0.06374648554473639, 0.006429948416964759, 0.11245309275782167, 0.05183934892784525, 0.08323913273578931, 0.5292569406134455, 0.5382873356348032, 0.5802089975105034, 0.5613766367019937, 0.5564536438534028, 0.20937947554523273, 0.5581368107906374, 0.5268644618156251, 0.6428041413569929, 0.08354488334065135, 0.09423511131306728, 0.0678411065472766, 0.1818396009472517, 0.1750436300805599, 0.14259363387175505, 0.0790142234381761, 0.080717911743317, 0.11770322386114007, 0.2611270654671619, 0.22460161116247168, 0.2469472229154338, 0.24169169499351106, 0.25803599946127365, 0.19468554327514853, 0.2671043331313645, 0.20663842144239408, 0.30259821029477507, 0.30811006687126485, 0.20870330523138203, 0.4210934108534976, 0.2402968942644813, 0.4393154522329874, 0.36468903145447207, 0.35581737712740436, 0.37032220155425144, 0.27559571989050946, 0.22037442475427882, 0.17767044242065344, 0.16535591899016522, 0.2697316836663104, 0.1976820917198584, 0.22110421900086452, 0.22503332941284193, 0.27174445547243187, 0.09288467757730123, 0.2119762749895775, 0.19829126125698038, 0.2044423533409968, 0.2165937235879073, 0.15263081954390068, 0.18406257723833697, 0.20911097808396484, 0.19775699401843339, 0.21524146564155777, 0.24006663885535995, 0.24175649296338475, 0.24799595484995207, 0.2209274780710404, 0.19546902920036446, 0.21680257413970294, 0.20627901310603858, 0.2241771893103086, 0.20303824678963522, 0.908939096015702, 0.17106024097690153, 0.12401065068740813, 0.9068307471069245, 0.2011757029170319, 0.8906250189920537, 0.0999570396180367, 0.17003564125955506, 0.16190201922905656, 0.07921826833772261, 0.21105191052530292, 0.1824720970311794, 0.21344481635970158, 0.16938029441003333, 0.21171781040126703, 0.10546416171821349, 0.7114790961916069, 0.5748405226825157, 0.21147972299717044, 0.18703958273675814, 0.20473512794375914, 0.19717974587076093, 0.20281928611816646, 0.2464716625795652, 0.22185794428722017, 0.1928767481036754, 0.19473045319958981, 0.06939858780364827, 0.08275692077667185, 0.1008442435994018, 0.05903359923249807, 0.09627860304672764, 0.13232166569312254, 0.08534945212453515, 0.0751381319864236, 0.09542479266693649]}, "mutation_prompt": null}
{"id": "bf24e1d1-47cd-4ff8-ba93-f782ccf9cd44", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_mask = pbest_scores < gbest_score\n            gbest = np.where(gbest_mask[:, np.newaxis], pbest, gbest)\n            gbest_score = np.where(gbest_mask, pbest_scores, gbest_score)\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved the algorithm by vectorizing the particle update process and removing redundant indexing operations.", "configspace": "", "generation": 17, "fitness": 0.1323432679675054, "feedback": "The algorithm ImprovedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.15735974910555428, 0.15881627173106738, 0.18720203533494695, 0.1665510473328521, 0.17222175761998537, 0.16333077773897098, 0.165485995934594, 0.18180901548193895, 0.14462580280024762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05729341292314871, 0.06614261301933622, 0.02227337209179736, 0.05535942990541298, 0.05108276844606097, 0.058619684043438425, 0.05768188268938357, 0.047329412220616596, 0.08116533998387254, 0.03782005554478041, 0.04696337271926643, 0.040320104679825275, 0.07303429065032363, 0.05671058426809772, 0.030434542300626033, 0.004586621270212143, 0.055818564098687795, 0.05194378235191943, 0.9914133072859324, 0.9859589935662224, 0.9941564721874613, 0.1370416560861053, 0.9875856058695461, 0.1168528070834094, 0.9857625136094736, 0.9922614495001593, 0.9919626041332726, 0.049896528132716056, 0.028006930773150307, 0.05686986997152432, 0.10800071026139069, 0.07948539266954668, 0.06695865584359084, 0.13685850653879095, 0.0834115892751719, 0.04417924881639468, 0.18351307184997545, 0.09115903045705032, 0.08936374609857778, 0.16097677472046656, 0.1330772842274731, 0.14584755640218627, 0.09670297970237807, 0.1201502678293418, 0.0847867209708425, 9.999999999998899e-05, 9.999999999998899e-05, 0.054367287496080996, 0.04644431012565087, 0.11134894622904534, 0.02380443659972753, 0.058777269862424375, 9.999999999998899e-05, 0.12152361626656183, 0.05536238187966103, 9.999999999998899e-05, 0.03543076258240485, 0.05540754018625971, 9.999999999998899e-05, 0.0718779050789099, 0.11396554583718732, 0.032084440123430924, 0.08133609863618263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07844108499074065, 0.042018244150809014, 0.11102669874469662, 0.07803262731616956, 0.009535176924175714, 0.0019436506753448546, 0.19895535030974254, 0.080383377709068, 0.046157222793460684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009167401519619811, 9.999999999998899e-05, 0.024115270207579087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0478043911586703, 0.010056227003601648, 0.05771464577520402, 0.17612513136453367, 0.2347998013701338, 0.29280151013286315, 0.28920955853762587, 0.16779011950603218, 0.16039222786885043, 0.1748627056109059, 0.15261618321917447, 0.19987332243778144, 0.04849551268806207, 0.06564665141518367, 0.02446114187320869, 0.0980586168085743, 0.05501418800278357, 0.08437137892513524, 0.06183706489367791, 0.06304545017378127, 0.09388421907917088, 0.21732702831874973, 0.1629983203704478, 0.15161136150624477, 0.2130945411865507, 0.18019081793347191, 0.1583371759139216, 0.270731656097023, 0.1813540109483882, 0.19333747253725664, 0.164344774285072, 0.17188012318395007, 0.15904059107382762, 0.1502017049803004, 0.1754231785534328, 0.22673296352072503, 0.17965963665890816, 0.2552409155119907, 0.13445994961205343, 0.08718064541674941, 0.08164771685465932, 0.10659008198867126, 0.11281547532612513, 0.14361069457224385, 0.13962833348182435, 0.14695904445155228, 0.194041392036838, 0.06544791570903108, 0.20715260708057226, 0.20191300312380966, 0.181357079519176, 0.21218598843122694, 0.18281709799041135, 0.20548650265326363, 0.20917043494298282, 0.17797473831214083, 0.22129509762918975, 0.1274141128279167, 0.06831885285872563, 0.16919517629132919, 0.18655642222963853, 0.1590354319659416, 0.17517886118878434, 0.15618645873186254, 0.15339658858154037, 0.1701266068895979, 0.21376044483109202, 0.16595571439428258, 0.11981987864851451, 0.22935303819457453, 0.18076123768978491, 0.2534159307493168, 0.09758166042847582, 0.16779726747898716, 0.13770605658469381, 0.07711559478965502, 0.14538837701739793, 0.1627553138350617, 0.17296100616276666, 0.20940897413807924, 0.17643064205016867, 0.1031399691395325, 0.2711115417636639, 0.19008511739283107, 0.20861096902934773, 0.21482912355966677, 0.20115037416494574, 0.22067671048549997, 0.20885788922952753, 0.2121204839413695, 0.21183878083447816, 0.2348591880513674, 0.18546442554713782, 0.051142722106112926, 0.06360522114963951, 0.07841537996979919, 0.0628407316147448, 0.07397667049334855, 0.07279158980910727, 0.0609819146115167, 0.04297032747202956, 0.07962777610552252]}, "mutation_prompt": null}
{"id": "a727af3e-fc4b-486f-8c84-45849fe7152c", "solution": "import numpy as np\n\nclass DynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "DynamicPopulationPSO", "description": "Introduced a dynamic population size adjustment mechanism to adapt the swarm size during runtime based on the optimization progress.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.8509454540193984, 0.8571652602971992, 0.8712343552473029, 0.1834741535812121, 0.8484283262188274, 0.19051244442238313, 0.8489902066838676, 0.8584720396503656, 0.857275652321501, 0.07631961373739105, 0.661577841891738, 9.999999999998899e-05, 0.043760916716134135, 0.03699835413511643, 0.6459165797644681, 0.6475157471531777, 0.7094932624298149, 9.999999999998899e-05, 0.1700669606668005, 0.12678391451520843, 0.17455037233821946, 0.40693733448804437, 0.0745164901408325, 0.1760890493274514, 0.15622826070473872, 0.36127334009532164, 0.5621192787011855, 0.11923353177200957, 0.13902793713676542, 0.11444334016613888, 0.14737776612585163, 0.12908737903194523, 0.13577893746659797, 0.16928929489521727, 0.12726321269189012, 0.10107029124204836, 0.9927817564289403, 0.9887399858489845, 0.9941830093032121, 0.9891101616489235, 0.9922135081557534, 0.9858676541106022, 0.9940617036946622, 0.9925125802033373, 0.9936816111538747, 0.6017782376336385, 0.6374445587834152, 0.6967566767516359, 0.15351939178561425, 0.15376288321750275, 0.6702294531669728, 0.08389590751120102, 0.5757157106195434, 0.6687310823881434, 0.22981051618401893, 0.16787905268473913, 0.22492873991036821, 0.1950497767399041, 0.278924177687908, 0.16270022942137563, 0.8371514238504656, 0.1502128370135568, 0.11632129226252108, 0.11983677687253769, 0.25912854840484556, 0.20908652001411643, 0.20353327696247903, 0.19736009742618943, 0.1970045638848149, 0.22691610362413606, 0.22592299162786444, 0.20768621807284382, 0.20519475340501103, 0.10851191881538835, 0.19312148819110664, 0.23270110577510783, 0.2508457607437754, 0.20287312867664242, 0.24103896030570693, 0.1377196033593424, 0.19122179928558258, 9.999999999998899e-05, 0.05039010489813078, 9.999999999998899e-05, 9.999999999998899e-05, 0.006776361000910169, 0.029668868650170932, 0.08339081062698372, 9.999999999998899e-05, 0.009857606201344238, 0.07271738104914438, 0.04063445413575739, 0.05552155952327398, 0.09615450159959382, 0.007458323809909073, 0.015141258071873609, 0.06633219571728222, 0.050476410713948816, 0.020316204802740878, 0.04693183733800488, 0.12513054614827435, 0.1285894412518772, 0.1583604700225869, 0.13498966032595217, 0.07570179545989575, 0.09934870234933513, 0.17770030743681187, 0.06840153149299366, 0.0429034457184142, 9.999999999998899e-05, 0.1745693390433204, 0.006915920765060979, 0.06374648554473639, 0.006429948416964759, 0.11245309275782167, 0.05183934892784525, 0.08323913273578931, 0.5292569406134455, 0.5382873356348032, 0.5802089975105034, 0.5613766367019937, 0.5564536438534028, 0.20937947554523273, 0.5581368107906374, 0.5268644618156251, 0.6428041413569929, 0.08354488334065135, 0.09423511131306728, 0.0678411065472766, 0.1818396009472517, 0.1750436300805599, 0.14259363387175505, 0.0790142234381761, 0.080717911743317, 0.11770322386114007, 0.2611270654671619, 0.22460161116247168, 0.2469472229154338, 0.24169169499351106, 0.25803599946127365, 0.19468554327514853, 0.2671043331313645, 0.20663842144239408, 0.30259821029477507, 0.30811006687126485, 0.20870330523138203, 0.4210934108534976, 0.2402968942644813, 0.4393154522329874, 0.36468903145447207, 0.35581737712740436, 0.37032220155425144, 0.27559571989050946, 0.22037442475427882, 0.17767044242065344, 0.16535591899016522, 0.2697316836663104, 0.1976820917198584, 0.22110421900086452, 0.22503332941284193, 0.27174445547243187, 0.09288467757730123, 0.2119762749895775, 0.19829126125698038, 0.2044423533409968, 0.2165937235879073, 0.15263081954390068, 0.18406257723833697, 0.20911097808396484, 0.19775699401843339, 0.21524146564155777, 0.24006663885535995, 0.24175649296338475, 0.24799595484995207, 0.2209274780710404, 0.19546902920036446, 0.21680257413970294, 0.20627901310603858, 0.2241771893103086, 0.20303824678963522, 0.908939096015702, 0.17106024097690153, 0.12401065068740813, 0.9068307471069245, 0.2011757029170319, 0.8906250189920537, 0.0999570396180367, 0.17003564125955506, 0.16190201922905656, 0.07921826833772261, 0.21105191052530292, 0.1824720970311794, 0.21344481635970158, 0.16938029441003333, 0.21171781040126703, 0.10546416171821349, 0.7114790961916069, 0.5748405226825157, 0.21147972299717044, 0.18703958273675814, 0.20473512794375914, 0.19717974587076093, 0.20281928611816646, 0.2464716625795652, 0.22185794428722017, 0.1928767481036754, 0.19473045319958981, 0.06939858780364827, 0.08275692077667185, 0.1008442435994018, 0.05903359923249807, 0.09627860304672764, 0.13232166569312254, 0.08534945212453515, 0.0751381319864236, 0.09542479266693649]}, "mutation_prompt": null}
{"id": "ed3b0b6d-e8de-4425-9c79-1b67e8f6b9ab", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            np.clip(swarm, lb, ub, out=swarm)  # Directly update swarm with clipping\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest[:] = pbest[gbest_idx]  # Directly update gbest\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Streamlined the population update process by directly using numpy operations for efficiency.", "configspace": "", "generation": 19, "fitness": 0.2739346690913881, "feedback": "The algorithm ImprovedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.8509454540193984, 0.8571652602971992, 0.8712343552473029, 0.1834741535812121, 0.8484283262188274, 0.19051244442238313, 0.8489902066838676, 0.8584720396503656, 0.857275652321501, 0.07631961373739105, 0.661577841891738, 9.999999999998899e-05, 0.043760916716134135, 0.03699835413511643, 0.6459165797644681, 0.6475157471531777, 0.7094932624298149, 9.999999999998899e-05, 0.1700669606668005, 0.12678391451520843, 0.17455037233821946, 0.40693733448804437, 0.0745164901408325, 0.1760890493274514, 0.15622826070473872, 0.36127334009532164, 0.5621192787011855, 0.11923353177200957, 0.13902793713676542, 0.11444334016613888, 0.14737776612585163, 0.12908737903194523, 0.13577893746659797, 0.16928929489521727, 0.12726321269189012, 0.10107029124204836, 0.9927817564289403, 0.9887399858489845, 0.9941830093032121, 0.9891101616489235, 0.9922135081557534, 0.9858676541106022, 0.9940617036946622, 0.9925125802033373, 0.9936816111538747, 0.6017782376336385, 0.6374445587834152, 0.6967566767516359, 0.15351939178561425, 0.15376288321750275, 0.6702294531669728, 0.08389590751120102, 0.5757157106195434, 0.6687310823881434, 0.22981051618401893, 0.16787905268473913, 0.22492873991036821, 0.1950497767399041, 0.278924177687908, 0.16270022942137563, 0.8371514238504656, 0.1502128370135568, 0.11632129226252108, 0.11983677687253769, 0.25912854840484556, 0.20908652001411643, 0.20353327696247903, 0.19736009742618943, 0.1970045638848149, 0.22691610362413606, 0.22592299162786444, 0.20768621807284382, 0.20519475340501103, 0.10851191881538835, 0.19312148819110664, 0.23270110577510783, 0.2508457607437754, 0.20287312867664242, 0.24103896030570693, 0.1377196033593424, 0.19122179928558258, 9.999999999998899e-05, 0.05039010489813078, 9.999999999998899e-05, 9.999999999998899e-05, 0.006776361000910169, 0.029668868650170932, 0.08339081062698372, 9.999999999998899e-05, 0.009857606201344238, 0.07271738104914438, 0.04063445413575739, 0.05552155952327398, 0.09615450159959382, 0.007458323809909073, 0.015141258071873609, 0.06633219571728222, 0.050476410713948816, 0.020316204802740878, 0.04693183733800488, 0.12513054614827435, 0.1285894412518772, 0.1583604700225869, 0.13498966032595217, 0.07570179545989575, 0.09934870234933513, 0.17770030743681187, 0.06840153149299366, 0.0429034457184142, 9.999999999998899e-05, 0.1745693390433204, 0.006915920765060979, 0.06374648554473639, 0.006429948416964759, 0.11245309275782167, 0.05183934892784525, 0.08323913273578931, 0.5292569406134455, 0.5382873356348032, 0.5802089975105034, 0.5613766367019937, 0.5564536438534028, 0.20937947554523273, 0.5581368107906374, 0.5268644618156251, 0.6428041413569929, 0.08354488334065135, 0.09423511131306728, 0.0678411065472766, 0.1818396009472517, 0.1750436300805599, 0.14259363387175505, 0.0790142234381761, 0.080717911743317, 0.11770322386114007, 0.2611270654671619, 0.22460161116247168, 0.2469472229154338, 0.24169169499351106, 0.25803599946127365, 0.19468554327514853, 0.2671043331313645, 0.20663842144239408, 0.30259821029477507, 0.30811006687126485, 0.20870330523138203, 0.4210934108534976, 0.2402968942644813, 0.4393154522329874, 0.36468903145447207, 0.35581737712740436, 0.37032220155425144, 0.27559571989050946, 0.22037442475427882, 0.17767044242065344, 0.16535591899016522, 0.2697316836663104, 0.1976820917198584, 0.22110421900086452, 0.22503332941284193, 0.27174445547243187, 0.09288467757730123, 0.2119762749895775, 0.19829126125698038, 0.2044423533409968, 0.2165937235879073, 0.15263081954390068, 0.18406257723833697, 0.20911097808396484, 0.19775699401843339, 0.21524146564155777, 0.24006663885535995, 0.24175649296338475, 0.24799595484995207, 0.2209274780710404, 0.19546902920036446, 0.21680257413970294, 0.20627901310603858, 0.2241771893103086, 0.20303824678963522, 0.908939096015702, 0.17106024097690153, 0.12401065068740813, 0.9068307471069245, 0.2011757029170319, 0.8906250189920537, 0.0999570396180367, 0.17003564125955506, 0.16190201922905656, 0.07921826833772261, 0.21105191052530292, 0.1824720970311794, 0.21344481635970158, 0.16938029441003333, 0.21171781040126703, 0.10546416171821349, 0.7114790961916069, 0.5748405226825157, 0.21147972299717044, 0.18703958273675814, 0.20473512794375914, 0.19717974587076093, 0.20281928611816646, 0.2464716625795652, 0.22185794428722017, 0.1928767481036754, 0.19473045319958981, 0.06939858780364827, 0.08275692077667185, 0.1008442435994018, 0.05903359923249807, 0.09627860304672764, 0.13232166569312254, 0.08534945212453515, 0.0751381319864236, 0.09542479266693649]}, "mutation_prompt": null}
{"id": "c75a55c7-bb32-45ca-b7da-09320ecf1e4d", "solution": "import numpy as np\n\nclass DynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "DynamicPopulationPSO", "description": "Introduced a dynamic population size adjustment mechanism to adapt the swarm size during runtime based on the optimization progress.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.8509454540193984, 0.8571652602971992, 0.8712343552473029, 0.1834741535812121, 0.8484283262188274, 0.19051244442238313, 0.8489902066838676, 0.8584720396503656, 0.857275652321501, 0.07631961373739105, 0.661577841891738, 9.999999999998899e-05, 0.043760916716134135, 0.03699835413511643, 0.6459165797644681, 0.6475157471531777, 0.7094932624298149, 9.999999999998899e-05, 0.1700669606668005, 0.12678391451520843, 0.17455037233821946, 0.40693733448804437, 0.0745164901408325, 0.1760890493274514, 0.15622826070473872, 0.36127334009532164, 0.5621192787011855, 0.11923353177200957, 0.13902793713676542, 0.11444334016613888, 0.14737776612585163, 0.12908737903194523, 0.13577893746659797, 0.16928929489521727, 0.12726321269189012, 0.10107029124204836, 0.9927817564289403, 0.9887399858489845, 0.9941830093032121, 0.9891101616489235, 0.9922135081557534, 0.9858676541106022, 0.9940617036946622, 0.9925125802033373, 0.9936816111538747, 0.6017782376336385, 0.6374445587834152, 0.6967566767516359, 0.15351939178561425, 0.15376288321750275, 0.6702294531669728, 0.08389590751120102, 0.5757157106195434, 0.6687310823881434, 0.22981051618401893, 0.16787905268473913, 0.22492873991036821, 0.1950497767399041, 0.278924177687908, 0.16270022942137563, 0.8371514238504656, 0.1502128370135568, 0.11632129226252108, 0.11983677687253769, 0.25912854840484556, 0.20908652001411643, 0.20353327696247903, 0.19736009742618943, 0.1970045638848149, 0.22691610362413606, 0.22592299162786444, 0.20768621807284382, 0.20519475340501103, 0.10851191881538835, 0.19312148819110664, 0.23270110577510783, 0.2508457607437754, 0.20287312867664242, 0.24103896030570693, 0.1377196033593424, 0.19122179928558258, 9.999999999998899e-05, 0.05039010489813078, 9.999999999998899e-05, 9.999999999998899e-05, 0.006776361000910169, 0.029668868650170932, 0.08339081062698372, 9.999999999998899e-05, 0.009857606201344238, 0.07271738104914438, 0.04063445413575739, 0.05552155952327398, 0.09615450159959382, 0.007458323809909073, 0.015141258071873609, 0.06633219571728222, 0.050476410713948816, 0.020316204802740878, 0.04693183733800488, 0.12513054614827435, 0.1285894412518772, 0.1583604700225869, 0.13498966032595217, 0.07570179545989575, 0.09934870234933513, 0.17770030743681187, 0.06840153149299366, 0.0429034457184142, 9.999999999998899e-05, 0.1745693390433204, 0.006915920765060979, 0.06374648554473639, 0.006429948416964759, 0.11245309275782167, 0.05183934892784525, 0.08323913273578931, 0.5292569406134455, 0.5382873356348032, 0.5802089975105034, 0.5613766367019937, 0.5564536438534028, 0.20937947554523273, 0.5581368107906374, 0.5268644618156251, 0.6428041413569929, 0.08354488334065135, 0.09423511131306728, 0.0678411065472766, 0.1818396009472517, 0.1750436300805599, 0.14259363387175505, 0.0790142234381761, 0.080717911743317, 0.11770322386114007, 0.2611270654671619, 0.22460161116247168, 0.2469472229154338, 0.24169169499351106, 0.25803599946127365, 0.19468554327514853, 0.2671043331313645, 0.20663842144239408, 0.30259821029477507, 0.30811006687126485, 0.20870330523138203, 0.4210934108534976, 0.2402968942644813, 0.4393154522329874, 0.36468903145447207, 0.35581737712740436, 0.37032220155425144, 0.27559571989050946, 0.22037442475427882, 0.17767044242065344, 0.16535591899016522, 0.2697316836663104, 0.1976820917198584, 0.22110421900086452, 0.22503332941284193, 0.27174445547243187, 0.09288467757730123, 0.2119762749895775, 0.19829126125698038, 0.2044423533409968, 0.2165937235879073, 0.15263081954390068, 0.18406257723833697, 0.20911097808396484, 0.19775699401843339, 0.21524146564155777, 0.24006663885535995, 0.24175649296338475, 0.24799595484995207, 0.2209274780710404, 0.19546902920036446, 0.21680257413970294, 0.20627901310603858, 0.2241771893103086, 0.20303824678963522, 0.908939096015702, 0.17106024097690153, 0.12401065068740813, 0.9068307471069245, 0.2011757029170319, 0.8906250189920537, 0.0999570396180367, 0.17003564125955506, 0.16190201922905656, 0.07921826833772261, 0.21105191052530292, 0.1824720970311794, 0.21344481635970158, 0.16938029441003333, 0.21171781040126703, 0.10546416171821349, 0.7114790961916069, 0.5748405226825157, 0.21147972299717044, 0.18703958273675814, 0.20473512794375914, 0.19717974587076093, 0.20281928611816646, 0.2464716625795652, 0.22185794428722017, 0.1928767481036754, 0.19473045319958981, 0.06939858780364827, 0.08275692077667185, 0.1008442435994018, 0.05903359923249807, 0.09627860304672764, 0.13232166569312254, 0.08534945212453515, 0.0751381319864236, 0.09542479266693649]}, "mutation_prompt": null}
{"id": "3726dd76-4131-404e-979f-d7de5aee7aaf", "solution": "import numpy as np\n\nclass DynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "DynamicPopulationPSO", "description": "Introduced a dynamic population size adjustment mechanism to adapt the swarm size during runtime based on the optimization progress.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.8509454540193984, 0.8571652602971992, 0.8712343552473029, 0.1834741535812121, 0.8484283262188274, 0.19051244442238313, 0.8489902066838676, 0.8584720396503656, 0.857275652321501, 0.07631961373739105, 0.661577841891738, 9.999999999998899e-05, 0.043760916716134135, 0.03699835413511643, 0.6459165797644681, 0.6475157471531777, 0.7094932624298149, 9.999999999998899e-05, 0.1700669606668005, 0.12678391451520843, 0.17455037233821946, 0.40693733448804437, 0.0745164901408325, 0.1760890493274514, 0.15622826070473872, 0.36127334009532164, 0.5621192787011855, 0.11923353177200957, 0.13902793713676542, 0.11444334016613888, 0.14737776612585163, 0.12908737903194523, 0.13577893746659797, 0.16928929489521727, 0.12726321269189012, 0.10107029124204836, 0.9927817564289403, 0.9887399858489845, 0.9941830093032121, 0.9891101616489235, 0.9922135081557534, 0.9858676541106022, 0.9940617036946622, 0.9925125802033373, 0.9936816111538747, 0.6017782376336385, 0.6374445587834152, 0.6967566767516359, 0.15351939178561425, 0.15376288321750275, 0.6702294531669728, 0.08389590751120102, 0.5757157106195434, 0.6687310823881434, 0.22981051618401893, 0.16787905268473913, 0.22492873991036821, 0.1950497767399041, 0.278924177687908, 0.16270022942137563, 0.8371514238504656, 0.1502128370135568, 0.11632129226252108, 0.11983677687253769, 0.25912854840484556, 0.20908652001411643, 0.20353327696247903, 0.19736009742618943, 0.1970045638848149, 0.22691610362413606, 0.22592299162786444, 0.20768621807284382, 0.20519475340501103, 0.10851191881538835, 0.19312148819110664, 0.23270110577510783, 0.2508457607437754, 0.20287312867664242, 0.24103896030570693, 0.1377196033593424, 0.19122179928558258, 9.999999999998899e-05, 0.05039010489813078, 9.999999999998899e-05, 9.999999999998899e-05, 0.006776361000910169, 0.029668868650170932, 0.08339081062698372, 9.999999999998899e-05, 0.009857606201344238, 0.07271738104914438, 0.04063445413575739, 0.05552155952327398, 0.09615450159959382, 0.007458323809909073, 0.015141258071873609, 0.06633219571728222, 0.050476410713948816, 0.020316204802740878, 0.04693183733800488, 0.12513054614827435, 0.1285894412518772, 0.1583604700225869, 0.13498966032595217, 0.07570179545989575, 0.09934870234933513, 0.17770030743681187, 0.06840153149299366, 0.0429034457184142, 9.999999999998899e-05, 0.1745693390433204, 0.006915920765060979, 0.06374648554473639, 0.006429948416964759, 0.11245309275782167, 0.05183934892784525, 0.08323913273578931, 0.5292569406134455, 0.5382873356348032, 0.5802089975105034, 0.5613766367019937, 0.5564536438534028, 0.20937947554523273, 0.5581368107906374, 0.5268644618156251, 0.6428041413569929, 0.08354488334065135, 0.09423511131306728, 0.0678411065472766, 0.1818396009472517, 0.1750436300805599, 0.14259363387175505, 0.0790142234381761, 0.080717911743317, 0.11770322386114007, 0.2611270654671619, 0.22460161116247168, 0.2469472229154338, 0.24169169499351106, 0.25803599946127365, 0.19468554327514853, 0.2671043331313645, 0.20663842144239408, 0.30259821029477507, 0.30811006687126485, 0.20870330523138203, 0.4210934108534976, 0.2402968942644813, 0.4393154522329874, 0.36468903145447207, 0.35581737712740436, 0.37032220155425144, 0.27559571989050946, 0.22037442475427882, 0.17767044242065344, 0.16535591899016522, 0.2697316836663104, 0.1976820917198584, 0.22110421900086452, 0.22503332941284193, 0.27174445547243187, 0.09288467757730123, 0.2119762749895775, 0.19829126125698038, 0.2044423533409968, 0.2165937235879073, 0.15263081954390068, 0.18406257723833697, 0.20911097808396484, 0.19775699401843339, 0.21524146564155777, 0.24006663885535995, 0.24175649296338475, 0.24799595484995207, 0.2209274780710404, 0.19546902920036446, 0.21680257413970294, 0.20627901310603858, 0.2241771893103086, 0.20303824678963522, 0.908939096015702, 0.17106024097690153, 0.12401065068740813, 0.9068307471069245, 0.2011757029170319, 0.8906250189920537, 0.0999570396180367, 0.17003564125955506, 0.16190201922905656, 0.07921826833772261, 0.21105191052530292, 0.1824720970311794, 0.21344481635970158, 0.16938029441003333, 0.21171781040126703, 0.10546416171821349, 0.7114790961916069, 0.5748405226825157, 0.21147972299717044, 0.18703958273675814, 0.20473512794375914, 0.19717974587076093, 0.20281928611816646, 0.2464716625795652, 0.22185794428722017, 0.1928767481036754, 0.19473045319958981, 0.06939858780364827, 0.08275692077667185, 0.1008442435994018, 0.05903359923249807, 0.09627860304672764, 0.13232166569312254, 0.08534945212453515, 0.0751381319864236, 0.09542479266693649]}, "mutation_prompt": null}
{"id": "433969f2-7da3-4228-8fe3-35af9a6e54d6", "solution": "import numpy as np\n\nclass DynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "DynamicPopulationPSO", "description": "Introduced a dynamic population size adjustment mechanism to adapt the swarm size during runtime based on the optimization progress.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.8509454540193984, 0.8571652602971992, 0.8712343552473029, 0.1834741535812121, 0.8484283262188274, 0.19051244442238313, 0.8489902066838676, 0.8584720396503656, 0.857275652321501, 0.07631961373739105, 0.661577841891738, 9.999999999998899e-05, 0.043760916716134135, 0.03699835413511643, 0.6459165797644681, 0.6475157471531777, 0.7094932624298149, 9.999999999998899e-05, 0.1700669606668005, 0.12678391451520843, 0.17455037233821946, 0.40693733448804437, 0.0745164901408325, 0.1760890493274514, 0.15622826070473872, 0.36127334009532164, 0.5621192787011855, 0.11923353177200957, 0.13902793713676542, 0.11444334016613888, 0.14737776612585163, 0.12908737903194523, 0.13577893746659797, 0.16928929489521727, 0.12726321269189012, 0.10107029124204836, 0.9927817564289403, 0.9887399858489845, 0.9941830093032121, 0.9891101616489235, 0.9922135081557534, 0.9858676541106022, 0.9940617036946622, 0.9925125802033373, 0.9936816111538747, 0.6017782376336385, 0.6374445587834152, 0.6967566767516359, 0.15351939178561425, 0.15376288321750275, 0.6702294531669728, 0.08389590751120102, 0.5757157106195434, 0.6687310823881434, 0.22981051618401893, 0.16787905268473913, 0.22492873991036821, 0.1950497767399041, 0.278924177687908, 0.16270022942137563, 0.8371514238504656, 0.1502128370135568, 0.11632129226252108, 0.11983677687253769, 0.25912854840484556, 0.20908652001411643, 0.20353327696247903, 0.19736009742618943, 0.1970045638848149, 0.22691610362413606, 0.22592299162786444, 0.20768621807284382, 0.20519475340501103, 0.10851191881538835, 0.19312148819110664, 0.23270110577510783, 0.2508457607437754, 0.20287312867664242, 0.24103896030570693, 0.1377196033593424, 0.19122179928558258, 9.999999999998899e-05, 0.05039010489813078, 9.999999999998899e-05, 9.999999999998899e-05, 0.006776361000910169, 0.029668868650170932, 0.08339081062698372, 9.999999999998899e-05, 0.009857606201344238, 0.07271738104914438, 0.04063445413575739, 0.05552155952327398, 0.09615450159959382, 0.007458323809909073, 0.015141258071873609, 0.06633219571728222, 0.050476410713948816, 0.020316204802740878, 0.04693183733800488, 0.12513054614827435, 0.1285894412518772, 0.1583604700225869, 0.13498966032595217, 0.07570179545989575, 0.09934870234933513, 0.17770030743681187, 0.06840153149299366, 0.0429034457184142, 9.999999999998899e-05, 0.1745693390433204, 0.006915920765060979, 0.06374648554473639, 0.006429948416964759, 0.11245309275782167, 0.05183934892784525, 0.08323913273578931, 0.5292569406134455, 0.5382873356348032, 0.5802089975105034, 0.5613766367019937, 0.5564536438534028, 0.20937947554523273, 0.5581368107906374, 0.5268644618156251, 0.6428041413569929, 0.08354488334065135, 0.09423511131306728, 0.0678411065472766, 0.1818396009472517, 0.1750436300805599, 0.14259363387175505, 0.0790142234381761, 0.080717911743317, 0.11770322386114007, 0.2611270654671619, 0.22460161116247168, 0.2469472229154338, 0.24169169499351106, 0.25803599946127365, 0.19468554327514853, 0.2671043331313645, 0.20663842144239408, 0.30259821029477507, 0.30811006687126485, 0.20870330523138203, 0.4210934108534976, 0.2402968942644813, 0.4393154522329874, 0.36468903145447207, 0.35581737712740436, 0.37032220155425144, 0.27559571989050946, 0.22037442475427882, 0.17767044242065344, 0.16535591899016522, 0.2697316836663104, 0.1976820917198584, 0.22110421900086452, 0.22503332941284193, 0.27174445547243187, 0.09288467757730123, 0.2119762749895775, 0.19829126125698038, 0.2044423533409968, 0.2165937235879073, 0.15263081954390068, 0.18406257723833697, 0.20911097808396484, 0.19775699401843339, 0.21524146564155777, 0.24006663885535995, 0.24175649296338475, 0.24799595484995207, 0.2209274780710404, 0.19546902920036446, 0.21680257413970294, 0.20627901310603858, 0.2241771893103086, 0.20303824678963522, 0.908939096015702, 0.17106024097690153, 0.12401065068740813, 0.9068307471069245, 0.2011757029170319, 0.8906250189920537, 0.0999570396180367, 0.17003564125955506, 0.16190201922905656, 0.07921826833772261, 0.21105191052530292, 0.1824720970311794, 0.21344481635970158, 0.16938029441003333, 0.21171781040126703, 0.10546416171821349, 0.7114790961916069, 0.5748405226825157, 0.21147972299717044, 0.18703958273675814, 0.20473512794375914, 0.19717974587076093, 0.20281928611816646, 0.2464716625795652, 0.22185794428722017, 0.1928767481036754, 0.19473045319958981, 0.06939858780364827, 0.08275692077667185, 0.1008442435994018, 0.05903359923249807, 0.09627860304672764, 0.13232166569312254, 0.08534945212453515, 0.0751381319864236, 0.09542479266693649]}, "mutation_prompt": null}
{"id": "0c64e847-aa33-44de-8d15-7dbb7f51e9f1", "solution": "import numpy as np\n\nclass DynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0 * np.ones(self.dim), 5.0 * np.ones(self.dim)\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        r1, r2 = np.random.rand(max_iter, initial_pop_size, self.dim), np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(1, max_iter + 1):\n            w = 0.4 + 0.4 * np.cos(0.5 * np.pi * t / max_iter)  # Adaptive inertia weight\n            pop_size = initial_pop_size + 5 * np.sin(0.1 * np.pi * t)  # Dynamic population size adjustment\n            velocities = w * velocities + c1 * r1[t-1] * (pbest - swarm) + c2 * r2[t-1] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "DynamicPopulationPSO", "description": "Introduced a dynamic population size adjustment mechanism to adapt the swarm size during runtime based on the optimization progress.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.8509454540193984, 0.8571652602971992, 0.8712343552473029, 0.1834741535812121, 0.8484283262188274, 0.19051244442238313, 0.8489902066838676, 0.8584720396503656, 0.857275652321501, 0.07631961373739105, 0.661577841891738, 9.999999999998899e-05, 0.043760916716134135, 0.03699835413511643, 0.6459165797644681, 0.6475157471531777, 0.7094932624298149, 9.999999999998899e-05, 0.1700669606668005, 0.12678391451520843, 0.17455037233821946, 0.40693733448804437, 0.0745164901408325, 0.1760890493274514, 0.15622826070473872, 0.36127334009532164, 0.5621192787011855, 0.11923353177200957, 0.13902793713676542, 0.11444334016613888, 0.14737776612585163, 0.12908737903194523, 0.13577893746659797, 0.16928929489521727, 0.12726321269189012, 0.10107029124204836, 0.9927817564289403, 0.9887399858489845, 0.9941830093032121, 0.9891101616489235, 0.9922135081557534, 0.9858676541106022, 0.9940617036946622, 0.9925125802033373, 0.9936816111538747, 0.6017782376336385, 0.6374445587834152, 0.6967566767516359, 0.15351939178561425, 0.15376288321750275, 0.6702294531669728, 0.08389590751120102, 0.5757157106195434, 0.6687310823881434, 0.22981051618401893, 0.16787905268473913, 0.22492873991036821, 0.1950497767399041, 0.278924177687908, 0.16270022942137563, 0.8371514238504656, 0.1502128370135568, 0.11632129226252108, 0.11983677687253769, 0.25912854840484556, 0.20908652001411643, 0.20353327696247903, 0.19736009742618943, 0.1970045638848149, 0.22691610362413606, 0.22592299162786444, 0.20768621807284382, 0.20519475340501103, 0.10851191881538835, 0.19312148819110664, 0.23270110577510783, 0.2508457607437754, 0.20287312867664242, 0.24103896030570693, 0.1377196033593424, 0.19122179928558258, 9.999999999998899e-05, 0.05039010489813078, 9.999999999998899e-05, 9.999999999998899e-05, 0.006776361000910169, 0.029668868650170932, 0.08339081062698372, 9.999999999998899e-05, 0.009857606201344238, 0.07271738104914438, 0.04063445413575739, 0.05552155952327398, 0.09615450159959382, 0.007458323809909073, 0.015141258071873609, 0.06633219571728222, 0.050476410713948816, 0.020316204802740878, 0.04693183733800488, 0.12513054614827435, 0.1285894412518772, 0.1583604700225869, 0.13498966032595217, 0.07570179545989575, 0.09934870234933513, 0.17770030743681187, 0.06840153149299366, 0.0429034457184142, 9.999999999998899e-05, 0.1745693390433204, 0.006915920765060979, 0.06374648554473639, 0.006429948416964759, 0.11245309275782167, 0.05183934892784525, 0.08323913273578931, 0.5292569406134455, 0.5382873356348032, 0.5802089975105034, 0.5613766367019937, 0.5564536438534028, 0.20937947554523273, 0.5581368107906374, 0.5268644618156251, 0.6428041413569929, 0.08354488334065135, 0.09423511131306728, 0.0678411065472766, 0.1818396009472517, 0.1750436300805599, 0.14259363387175505, 0.0790142234381761, 0.080717911743317, 0.11770322386114007, 0.2611270654671619, 0.22460161116247168, 0.2469472229154338, 0.24169169499351106, 0.25803599946127365, 0.19468554327514853, 0.2671043331313645, 0.20663842144239408, 0.30259821029477507, 0.30811006687126485, 0.20870330523138203, 0.4210934108534976, 0.2402968942644813, 0.4393154522329874, 0.36468903145447207, 0.35581737712740436, 0.37032220155425144, 0.27559571989050946, 0.22037442475427882, 0.17767044242065344, 0.16535591899016522, 0.2697316836663104, 0.1976820917198584, 0.22110421900086452, 0.22503332941284193, 0.27174445547243187, 0.09288467757730123, 0.2119762749895775, 0.19829126125698038, 0.2044423533409968, 0.2165937235879073, 0.15263081954390068, 0.18406257723833697, 0.20911097808396484, 0.19775699401843339, 0.21524146564155777, 0.24006663885535995, 0.24175649296338475, 0.24799595484995207, 0.2209274780710404, 0.19546902920036446, 0.21680257413970294, 0.20627901310603858, 0.2241771893103086, 0.20303824678963522, 0.908939096015702, 0.17106024097690153, 0.12401065068740813, 0.9068307471069245, 0.2011757029170319, 0.8906250189920537, 0.0999570396180367, 0.17003564125955506, 0.16190201922905656, 0.07921826833772261, 0.21105191052530292, 0.1824720970311794, 0.21344481635970158, 0.16938029441003333, 0.21171781040126703, 0.10546416171821349, 0.7114790961916069, 0.5748405226825157, 0.21147972299717044, 0.18703958273675814, 0.20473512794375914, 0.19717974587076093, 0.20281928611816646, 0.2464716625795652, 0.22185794428722017, 0.1928767481036754, 0.19473045319958981, 0.06939858780364827, 0.08275692077667185, 0.1008442435994018, 0.05903359923249807, 0.09627860304672764, 0.13232166569312254, 0.08534945212453515, 0.0751381319864236, 0.09542479266693649]}, "mutation_prompt": null}
{"id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 24, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "4025a103-f206-413c-bcc6-343fc5978f5f", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "c0be64c5-bd34-47c8-a864-de19718d3439", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "bcaca8ec-de42-4803-90ba-ee7ce09411fd", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "0e8d2dae-f406-43d6-afbd-dd6e90c79633", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "c0f8875f-c6ce-4626-9345-842396612686", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "97f39068-8dc8-441a-be55-9a55449aa15d", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "eae7c103-2656-46f4-aab3-661311a4ddf8", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "d57e817f-49a8-4c06-9828-79c3488ea9c8", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO_Optimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO_Optimized", "description": "Optimized the velocity update calculation by vectorizing the computation for improved efficiency.", "configspace": "", "generation": 31, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSO_Optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "02d8ee69-f262-4ee4-a36c-f51d43b5b0c5", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "49914d46-87b1-43ec-a6dc-24b425976714", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "d32ca527-aa2b-411b-93fa-458029747802", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "3d986629-95c1-4ed9-b858-42871f571e3f", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest_scores = np.array([objective_function(p) for p in swarm])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = swarm[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (swarm - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = swarm[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "EnhancedDynamicPopulationPSO", "description": "Optimized ImprovedDynamicPopulationPSO algorithm with enhanced efficiency by reducing unnecessary array copies and improved convergence control.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'pbest' is not defined\").", "error": "NameError(\"name 'pbest' is not defined\")", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {}, "mutation_prompt": null}
{"id": "09098908-873b-46cb-944d-e6edafee8987", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "d1405495-145e-4669-94eb-1caeff655c2d", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "327a713e-4893-46d4-bbc9-50a25703bf64", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n            # Dynamic adjustment of parameters\n            if t % 5 == 0:  # Adjust inertia weight and population size every 5 iterations\n                w = 0.4 + 0.4 * cos_vals[t]  # Adjust inertia weight\n                pop_size = initial_pop_size + sin_vals[t]  # Adjust population size\n\n        return gbest", "name": "EnhancedDynamicPopulationPSO", "description": "ImprovedDynamicPopulationPSO with enhanced convergence control by dynamically adjusting inertia weight and population size based on performance.", "configspace": "", "generation": 38, "fitness": 0.3077141212125538, "feedback": "The algorithm EnhancedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "27c673dc-4f23-4e4c-ba09-a08cec2f11fe", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            np.clip(swarm, lb, ub, out=swarm)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest[:] = pbest[gbest_idx]\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "EnhancedDynamicPopulationPSO", "description": "Optimized the velocity and position update calculations by vectorizing operations and reducing unnecessary variable creation.", "configspace": "", "generation": 39, "fitness": 0.3077141212125538, "feedback": "The algorithm EnhancedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "0b9423a9-78d5-4516-8b3e-6d6c91a92d5c", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "ba9996fc-9e28-4418-899a-0c6858ca54ed", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "bf61b1d1-0b87-4777-89a7-5f747cce8264", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO_Improved", "description": "Simplified velocity update calculation by eliminating unnecessary array operations and utilizing element-wise operations directly.", "configspace": "", "generation": 42, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSO_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "ec7b6a4a-5fbb-4b77-a009-6db27cf27bd7", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros((pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest = pbest[pbest_scores.argmin()].copy()\n        gbest_score = pbest_scores.min()\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, pop_size, self.dim)\n        r2 = np.random.rand(max_iter, pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            np.clip(swarm, lb, ub, out=swarm)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = pbest_scores.argmin()\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO_Improved", "description": "Reduced redundant array calculations and optimized convergence control.", "configspace": "", "generation": 43, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSO_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "58ccc480-16f6-4a2b-801d-d490d145ee9f", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "3f4bcb38-c28c-4fd0-8226-1cdbc2451165", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        pop_size = 20\n        max_iter = self.budget // pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocities = np.zeros((pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        \n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            velocities = w * velocities + c1 * np.random.rand() * (pbest - swarm) + c2 * np.random.rand() * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "EnhancedDynamicPopulationPSO", "description": "Reduced unnecessary array operations and optimized loop iterations for improved efficiency.", "configspace": "", "generation": 45, "fitness": 0.18900438072219852, "feedback": "The algorithm EnhancedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9496438314986119, 0.38075161126025825, 0.6515937807771057, 0.18357721158180906, 0.20585155656305665, 0.1412128536855316, 0.3549965065568671, 0.31001806460254, 0.40631781888379426, 0.07483438896466088, 9.999999999998899e-05, 9.999999999998899e-05, 0.00873095548189462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07026331491318638, 0.11314737614516834, 0.04045581722551672, 0.08767840570925, 0.15767685255640151, 0.09268287188231117, 0.08483358146249353, 0.10713864868848633, 0.07152366733067794, 0.07267144053385488, 0.07940992855656259, 0.040328857348816416, 0.0711608789139424, 0.0859782861695707, 0.024495181866958537, 0.06088539700750639, 0.059698686969892, 0.015522591715762202, 0.9909388253939853, 0.9836304303922097, 0.9916690935788234, 0.18689311056725766, 0.9873794648071614, 0.9820515166735688, 0.9906076733279336, 0.9873519293836929, 0.9906255894586655, 0.09133442098415567, 0.057690047919702, 0.08996441299979319, 0.13295136848496913, 0.4033595825837605, 0.14439549977184252, 0.08395958714515528, 0.0700731483776793, 0.43139249852427974, 0.21129984754581366, 0.09691277776470963, 0.12162581462200761, 0.19561539813389206, 0.1949992612107727, 0.1389085812033436, 0.10396039976787086, 0.15208522910619504, 0.1193426984402427, 0.1877447792847644, 0.1168203119182819, 9.999999999998899e-05, 0.18783949689720525, 0.1644621331599263, 0.1329031210604782, 0.16635361640094237, 0.1274764702494765, 0.13795620599171465, 0.19537405364527416, 0.0011275694332673059, 0.12933591988498816, 0.12955924963181753, 0.3185687664086685, 0.15581016473680243, 0.2871238876530994, 9.999999999998899e-05, 0.10827165832416197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05336212562495091, 0.026210634505340002, 0.07091037411090861, 0.06606278696567802, 0.033861924564979606, 9.999999999998899e-05, 0.08943469014797978, 0.06753524305057035, 0.024965145358038954, 0.20530899435136807, 0.1433347244862011, 0.08624327291784373, 0.08529501284260788, 9.999999999998899e-05, 9.999999999998899e-05, 0.13816598848922423, 0.2323598040932261, 9.999999999998899e-05, 0.054282170949153774, 0.09191707867211207, 0.18466539373528745, 0.0031674856848415978, 0.14256626318454857, 9.999999999998899e-05, 0.1575275738787677, 0.06179022322424188, 0.07878936082732724, 0.4825085776010942, 0.4016668894269281, 0.5409661734727751, 0.29403311346476224, 0.4936164898160982, 0.47335597641329574, 0.4433347711910669, 0.6547563390232232, 0.34829305011690315, 0.0545304709945571, 0.07334716665316487, 0.01613786038881826, 0.09364365860563006, 0.09636357602883838, 0.06935446982649063, 0.05358067774961761, 0.10574986843003098, 0.06538331889447746, 0.16119480957927101, 0.2194538652806708, 0.21333631265657538, 0.23302528104343234, 0.18855270871382057, 0.21876389561219067, 0.15896797087582815, 0.2807312474785001, 0.16013280379930162, 0.20509614856507774, 0.2935136336656424, 0.14701540731798446, 0.18019932617609624, 0.20721425658562154, 0.18590935958937238, 0.16631570410665664, 0.2552435616845816, 0.14102999400520566, 0.27105675560608056, 0.23796497475339484, 0.17803772901820158, 0.2048698743819879, 0.16252258482208182, 0.13180380594928842, 0.20304647392584052, 0.21921889337433442, 0.06899705874048978, 0.2521088891223785, 0.22562953482825665, 0.19416757402047746, 0.18983639601630886, 0.24238233519043462, 0.18736812727020802, 0.21654300448009045, 0.19033499072543603, 0.19429596067865373, 0.17000415999892737, 0.16910838500330305, 0.1993139457243488, 0.17570212075170444, 0.1944297375620584, 0.19257090898270757, 0.1761124619705282, 0.17186523713244695, 0.17350363038767247, 0.3017185443702649, 0.1886007877625444, 0.11308901955849182, 0.1736304133516664, 0.20078717910472244, 0.45863585962267794, 0.09051868161728216, 0.16952534729538382, 0.13459072719015808, 0.43524284430093363, 0.2028219755807259, 0.2255037391853667, 0.21281118454990278, 0.17003282730994707, 0.21001149174411715, 0.28384049333649164, 0.2521766155995142, 0.16218925307043264, 0.2284938846291138, 0.20645621312254314, 0.1805869819330599, 0.2246325472129096, 0.21392110176688617, 0.20103570123931558, 0.21014127008740136, 0.20910643535726348, 0.2519635294255268, 0.1059558691914888, 0.11681721136076506, 0.08226553168720907, 0.09518381082742378, 0.08787988912091294, 0.07988842195628398, 0.06066958234836706, 0.059963777456835454, 0.07426095810167133]}, "mutation_prompt": null}
{"id": "fd1f7dab-e69d-46b3-b011-a4e06f176338", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "dc0b024d-9acf-43b0-9155-9858270902f8", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "7233107a-77a9-4190-a0bb-a1c1e8120ad8", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "308e38f7-23de-4326-bf27-dfceccce249b", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest, pbest_scores = np.where(update_idx, (swarm, scores), (pbest, pbest_scores))\n            \n            gbest_idx = np.argmin(pbest_scores)\n            gbest, gbest_score = np.where(pbest_scores[gbest_idx] < gbest_score, (pbest[gbest_idx].copy(), pbest_scores[gbest_idx]), (gbest, gbest_score))\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "ImprovedDynamicPopulationPSO variant with optimized loop iterations and streamlined convergence control for enhanced efficiency.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (2, 20) + inhomogeneous part.').", "error": "ValueError('setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (2, 20) + inhomogeneous part.')", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {}, "mutation_prompt": null}
{"id": "40337c77-5b3d-474f-9972-b321ba23181d", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "3889d099-0271-4095-80af-07c429c88d33", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "898ea0b5-b544-4d9a-a854-a5ea4a28cedc", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(objective_function, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.apply_along_axis(objective_function, 1, swarm)\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "Optimized the main loop by vectorizing operations to improve computational efficiency.", "configspace": "", "generation": 52, "fitness": 0.3077141212125538, "feedback": "The algorithm OptimizedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "74ee729f-395e-4e13-ad06-b4cc5124ea4d", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "98fa4886-a1dd-4cf7-b9dd-51b78602294f", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSOVariant:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.lb, self.ub = budget, dim, -5.0, 5.0\n\n    def __call__(self, func):\n        def obj_func(x):\n            return func(x)\n\n        pop_size, max_iter = 20, self.budget // 20\n        swarm = np.random.uniform(self.lb, self.ub, (pop_size, self.dim))\n        velocities, pbest = np.zeros((pop_size, self.dim)), swarm.copy()\n        pbest_scores = np.array([obj_func(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest, gbest_score = pbest[gbest_idx].copy(), pbest_scores[gbest_idx]\n        c1, c2 = 1.49445, 1.49445\n        cos_vals, sin_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter), 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1, r2 = np.random.rand(max_iter, pop_size, self.dim), np.random.rand(max_iter, pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm = np.clip(swarm + velocities, self.lb, self.ub)\n            \n            scores = np.array([obj_func(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx], pbest_scores[update_idx] = swarm[update_idx], scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest, gbest_score = pbest[gbest_idx].copy(), pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSOVariant", "description": "ImprovedDynamicPopulationPSO variant with optimized loop iterations, compacted variable calculations, and reduction of redundant operations.", "configspace": "", "generation": 54, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSOVariant got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "17a7b33c-c093-4cd6-b3b8-51978954c92c", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "f56a6d75-fa84-43f9-9e05-b849c91dbd46", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "a3bdc9f6-43e0-4b48-9dcc-1da5ba82f51c", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            if np.any(update_idx):\n                gbest_idx = np.argmin(pbest_scores)\n                if pbest_scores[gbest_idx] < gbest_score:\n                    gbest = pbest[gbest_idx].copy()\n                    gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSOImproved", "description": "Reducing redundant calculations by updating the global best only when necessary based on the local best improvement.", "configspace": "", "generation": 57, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "6118e7d2-9e03-4949-8806-9441355f5016", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "094ea275-f9c3-4efc-9469-137acb1ae8c7", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "2465042b-8f22-4b74-9cb6-1f83ec8deb72", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "92c51292-3d9b-454a-8986-e2a487fad64a", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "e1a46904-927c-4fde-8800-01830850311e", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "20f72d58-32f9-40ec-8863-cae41aa2adc8", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            velocities = np.clip(velocities, -0.5 * (ub - lb), 0.5 * (ub - lb))\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            better_indices = np.where(pbest_scores < gbest_score)[0]\n            if len(better_indices) > 0:\n                gbest_idx = better_indices[0]\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "Efficiently handle population updates by directly updating the positions and velocities using vectorized operations, eliminating the need for additional loops and redundant calculations.", "configspace": "", "generation": 63, "fitness": 0.25192703420192003, "feedback": "The algorithm OptimizedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9385977594575885, 0.938804881515189, 0.9367220062263995, 0.9322363881341125, 0.5537087687415047, 0.9297005505785566, 0.9306363838879453, 0.43703807628055613, 0.9299165758579749, 0.276487878179445, 0.043755861887094016, 0.8629471211125523, 0.8647486695313746, 0.04909729533181506, 0.13361894262645257, 0.03545708750846677, 0.15575344739120733, 0.04570303792105823, 0.18998545202430883, 0.1264776040875999, 0.10246921874360126, 0.10846170579905479, 0.1601805351126464, 0.09720697183005267, 0.11807369530804368, 0.11276851140498023, 0.16491824907650643, 0.16265610955142362, 0.13420529016573124, 0.11116136690104428, 0.0827067375921009, 0.16280110079898336, 0.15057848593413725, 0.11043277231478965, 0.08316103335265757, 0.09795120523282663, 0.850566430199247, 0.8019622005228186, 0.8777974108950314, 0.9775922251965723, 0.7009524538219243, 0.46770956788419926, 0.8859593370514945, 0.9835981388321429, 0.693086966753133, 0.059160305442837346, 0.5241555319527431, 0.3600030721786639, 0.6513274650951779, 0.15407326240956887, 0.23469990892884618, 0.1281992171730848, 0.08892354908356903, 0.08072242692590004, 0.23060260853579895, 0.22862456400299103, 0.359312701045965, 0.21544690676730838, 0.2812042244554285, 0.2210574007987326, 0.12566950234085783, 0.12530964926341348, 0.10040385707209731, 0.10035511043171663, 0.18690870842297158, 0.16752737395851947, 0.1320186555608931, 0.15451547089498197, 0.15683145776679996, 0.16878022309406204, 0.16713641995136042, 0.1629581492617601, 0.20159609804319578, 0.19319942272089563, 0.21828628685561513, 0.20847838049800638, 0.21776884690488874, 0.19774168884020538, 0.1666394058035766, 0.1430428438460567, 0.12787155066556988, 0.01110624128658455, 0.047246223510521324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001245229763473854, 9.999999999998899e-05, 9.999999999998899e-05, 0.1136736554437543, 0.08936188007360868, 0.03813611432084585, 0.08363941419690124, 0.07010847720284652, 0.02811110167222286, 0.046528305802284065, 0.11048893207817634, 0.08585159605448422, 0.05846048385304459, 0.10334256691270327, 0.06119157122848551, 0.20817298094380243, 0.14755785175746428, 0.09759039374629341, 0.2713626613501188, 0.10704265315232164, 0.12605568896913866, 0.07847037898425113, 0.044491461152564304, 0.21724490875878966, 0.11601789401385465, 9.999999999998899e-05, 0.07187479948003694, 0.0055872722717406065, 0.08745524688255935, 0.05012601643253989, 0.08551387139677769, 0.5040681132048463, 0.528971885992567, 0.5610259018367107, 0.29166499096572285, 0.5668087516801004, 0.20723490844183545, 0.5525095275814966, 0.5758855139065215, 0.5569992948248184, 0.06898555784678917, 0.07060594177038182, 0.1125264102342548, 0.1359672254018236, 0.0959629763646681, 0.16051540168175926, 0.15303354966001548, 0.08226726479067825, 0.0902306646538622, 0.2816872198535041, 0.2919673993380095, 0.43493240942114086, 0.35210825647274446, 0.2441172360342646, 0.22070317568718956, 0.265135571830457, 0.2788130483316382, 0.2303197501356905, 0.34839774096938925, 0.25992142075011393, 0.26624048155852875, 0.29794422151711564, 0.23533003893477866, 0.18847496037410416, 0.24080258955834266, 0.3108140964419879, 0.16774111564058092, 0.23224293482175573, 0.2993442817566022, 0.1661998647524089, 0.202997319254691, 0.22046706605932087, 0.17060762675013208, 0.20976902362593108, 0.2778534046351562, 0.09320743678128962, 0.2365983263796051, 0.27304740452517184, 0.21205433895684156, 0.2743841453150664, 0.2814179948321396, 0.2619705730933669, 0.2248283685851401, 0.2606051818029951, 0.24059113061712412, 0.18515990152675454, 0.19874292690057105, 0.19776279542740427, 0.21432235794243282, 0.22643974348513762, 0.19444025409101917, 0.22285318224234585, 0.22961529193782193, 0.19921346826454478, 0.792982893850847, 0.12734088814830846, 0.1546069930369982, 0.9650974268056247, 0.20136543632659742, 0.9412961048534317, 0.10000513051110616, 0.17064568719388917, 0.1686451726771847, 0.08315925818292491, 0.21361051451579183, 0.39559712483772547, 0.21236623059554127, 0.16990006906720356, 0.2130234656389548, 0.2043181494096068, 0.5522627162255065, 0.2774750363525065, 0.2112346873816061, 0.21067864682816118, 0.18808505939828613, 0.1975799571823742, 0.2035881325737141, 0.21887827253174597, 0.23640487054562398, 0.2660489870513404, 0.21379060124771154, 0.09422442801986586, 0.07234147434702431, 0.08379499034136628, 0.08771321065886517, 0.11494172199599129, 0.12272970837098396, 0.10263530351157646, 0.09119388093332514, 0.10466657017161651]}, "mutation_prompt": null}
{"id": "6fa7d72d-9db9-4741-9eca-2d27dc7198d4", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "94e997fa-48fa-4ac2-8a3a-ab1c104325be", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "Optimized the velocity update calculation by vectorizing the computation and precomputing constant values to reduce redundant calculations.", "configspace": "", "generation": 65, "fitness": 0.3077141212125538, "feedback": "The algorithm OptimizedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "9b584621-4332-48e1-ba8e-d8e962b25ed2", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "2906d7f3-1fc7-4560-8c91-9a0538de48b9", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "495c957e-139a-4534-9d10-20f50300ed1b", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "4588cb22-a424-4c74-ae27-4388657358cf", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "3d1c97cc-943c-4d40-8f8c-9dc4fa5e15c5", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        \n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([func(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            np.clip(swarm, lb, ub, out=swarm)\n            \n            scores = np.array([func(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSOImproved", "description": "Optimized the computation of objective_function calls and eliminated unnecessary array copying operations to improve efficiency.", "configspace": "", "generation": 70, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "9318ff0c-360f-48d4-a7cb-0295ecc6b514", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "1ed6983e-1fa6-46ae-9337-d24243848b1b", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.rand(initial_pop_size, self.dim) * (ub - lb) + lb\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "Optimized the initialization of random values to reduce redundant calculations and improve efficiency.", "configspace": "", "generation": 72, "fitness": 0.30329416863664166, "feedback": "The algorithm OptimizedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9292765477886676, 0.9392697308466084, 0.9474421125740701, 0.18356943019203653, 0.9407739853868232, 0.9340051081220359, 0.9391059152210655, 0.942055106274896, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8505786259559346, 0.0982058743555474, 0.11397778084906007, 0.09907622980935571, 0.0571691820960053, 0.07584106778273414, 0.12320699073298513, 0.16082018163477174, 0.7728463899579263, 0.19254275390562536, 0.10299414503309945, 0.08350320648870935, 0.13367572750041523, 0.11224053226312392, 0.10938474420626443, 0.13493142548771297, 0.16228418274278233, 0.11273660515163286, 0.11702466674449952, 0.9909817836408151, 0.9868155212704747, 0.9926891978610977, 0.9872662560994107, 0.9884782060508664, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.8705484913301441, 0.8565165499084761, 0.397011993781586, 0.15370522151155563, 0.15480585321616058, 0.833588582276644, 0.862021690998017, 0.8092424072583333, 0.8334902818914139, 0.2285688102479453, 0.13178593777857828, 0.2109628250994946, 0.20538275818747376, 0.19490823339576824, 0.22207799967196296, 0.09420811435411247, 0.12695412206861634, 0.23600768675875128, 0.15010016190738118, 0.1353444820098313, 0.13320441543517136, 0.1356830815404303, 0.12200352681755389, 0.23051141846936452, 0.18978420234591575, 0.2343927355506824, 0.21615798614736836, 0.22076435708467756, 0.01681329907546336, 0.2644911349139739, 0.2061934947944828, 0.18041933208019878, 0.22133338627713728, 0.27643691013596394, 0.14232572954241673, 0.11675050225192918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03433568234294848, 9.999999999998899e-05, 9.999999999998899e-05, 0.00891020247980745, 9.999999999998899e-05, 0.10155600475364113, 0.08009231157128105, 0.02682888955569085, 0.061161770212772026, 0.10118984825189747, 0.0005759372641190863, 0.019401624667190087, 0.09712234058681513, 0.07862406565971358, 0.028727317293593124, 0.05351394700711043, 0.09944959684223831, 0.10148046145247369, 0.10034825393554037, 0.3801086386568455, 0.08436961014572986, 0.10731835558725722, 0.10823539451862596, 0.07837740233014212, 0.044609879796442486, 9.999999999998899e-05, 0.09630672478281666, 9.999999999998899e-05, 0.0068258841641989365, 0.006797809725570869, 0.25083735391497297, 0.08683130896208091, 0.08580472946744921, 0.5755840035320685, 0.5488226059862789, 0.550813703997147, 0.5615293533891392, 0.5921874515230598, 0.5559688182217699, 0.5967158608543353, 0.6208001462556851, 0.6228882015991934, 0.10401462685695528, 0.0935076609693879, 0.11707946113942924, 0.11949133353370767, 0.10170852208850811, 0.14516378070310043, 0.08420346585449279, 0.12412842408453784, 0.11756975303180806, 0.2455155811779247, 0.25706690503936336, 0.18368893384959528, 0.3579800156867352, 0.27872282259247927, 0.16984296162196866, 0.365754116228743, 0.2659232376799697, 0.22807004398778374, 0.2613404690224226, 0.2665489314735291, 0.21913927134899425, 0.4609627463622573, 0.20508512297267767, 0.28019406208930486, 0.21652222244084673, 0.43367333552217846, 0.17893532768785803, 0.26575016473678204, 0.20429090424041918, 0.18401336533673907, 0.28227967030597656, 0.21168259129959055, 0.20278229931823555, 0.21912557989290282, 0.37842650044904647, 0.2853546476503258, 0.216020768450773, 0.21544340265569117, 0.17965114195063703, 0.18965772573641904, 0.24745108059423548, 0.2557429878167402, 0.19667797009582766, 0.17262354829512605, 0.23992751419220892, 0.19669240048051173, 0.191447898700848, 0.2277313235078533, 0.22820547966730975, 0.1897377089543737, 0.23065648901987856, 0.18292982177027073, 0.1891342057466533, 0.19871197478479974, 0.9508001873582244, 0.12706628935220887, 0.11498942979364168, 0.9426797843912009, 0.20142556847159965, 0.9639678918771302, 0.0905234443941465, 0.17044507907699513, 0.1632148663202494, 0.07902808279941909, 0.16656112706872606, 0.07334719758896846, 0.21352993043202073, 0.16985703425309218, 0.2137669238463965, 0.10550289991290684, 0.9350617422487931, 0.8483569835320143, 0.2099666013771151, 0.20598119436386386, 0.20614993130320014, 0.22876065154502878, 0.1934136698025294, 0.20220766203895646, 0.2572354806981978, 0.2626780406347762, 0.20639871293644863, 0.1000046968260494, 0.08249152835203677, 0.09485366872994505, 0.09187115360046938, 0.11060001865572155, 0.11446247940538012, 0.07295577348667082, 0.11590362625705475, 0.09687908858417327]}, "mutation_prompt": null}
{"id": "1ac29177-bf59-4155-8eeb-4256f855cfe2", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "bb1d38b4-a64d-403c-a258-7b41dcac0c6d", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "888ae9f2-eac7-40de-9df3-c25cf9196b80", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "cd73396e-0724-4f2d-a91d-e814c4178cab", "solution": "import numpy as np\n\nclass FastDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "FastDynamicPopulationPSO", "description": "Enhance the velocity update calculation by vectorizing operations and reducing redundant calculations.", "configspace": "", "generation": 76, "fitness": 0.3077141212125538, "feedback": "The algorithm FastDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "0d4ea58d-2f96-4ed3-830b-70573a684d1d", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[update_idx].min() < gbest_score:\n                gbest_idx = np.argmin(pbest_scores)\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Reduced redundant calculations by updating the personal best scores only for the particles with improved positions.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('zero-size array to reduction operation minimum which has no identity').", "error": "ValueError('zero-size array to reduction operation minimum which has no identity')", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {}, "mutation_prompt": null}
{"id": "0fc8fb71-a828-4a78-bd4e-edb938195ead", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "ea1e8296-2d77-4946-a2ca-a2355a846303", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "18be0511-359d-49fd-8484-061552cc62a8", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "2555c72e-ddf1-475f-8560-a3fd6911757c", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "Optimized the velocity update calculation by vectorizing the computation and removing unnecessary loop operations.", "configspace": "", "generation": 81, "fitness": 0.3077141212125538, "feedback": "The algorithm OptimizedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "a26bec94-1933-4b83-991a-fcfa65c48e54", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO_Optimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        w = 0.4 + 0.4 * cos_vals\n        pop_size = initial_pop_size + sin_vals\n\n        for t in range(max_iter):\n            velocities = w[t] * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO_Optimized", "description": "Optimized the loop structure by replacing the loop over time steps with a more efficient vectorized approach, reducing redundant calculations.", "configspace": "", "generation": 82, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSO_Optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "2c01aa34-e656-4514-b0c3-a031a6c18ca0", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "3a707976-7b92-484e-8703-9eb4bcf37244", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "a7dc5ed6-8a17-40ac-9655-34916561e527", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "86858abf-9a2b-4ef0-999d-734c8ebbf78d", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "7ec60627-a304-49bd-8b03-e23247a3bb20", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm = np.clip(swarm + velocities, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSOImproved", "description": "Reduced redundant array calculations by directly updating the swarm based on conditions without intermediate assignments.", "configspace": "", "generation": 87, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "725f0776-5b0f-493e-9690-79161cf6dbfd", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "63afb3c6-b8f4-49f9-aad1-bc5ddbd01dba", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "ea63e277-fa4d-4a9d-98a2-c4deb0c3ea82", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "d05e0b47-de12-4974-a931-64e7498f938d", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "Reduced redundant calculations by updating only necessary particles and scores during iterations, resulting in performance improvement.", "configspace": "", "generation": 91, "fitness": 0.3077141212125538, "feedback": "The algorithm OptimizedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "e1c7f3a9-0da5-48c3-8917-d4cd1cf64c03", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "c2c4ce5f-e399-4143-b03c-8e30fc8b8b52", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "e0423155-34a4-463f-a765-bdbb2bf6da70", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO_Variant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO_Variant", "description": "Optimized the initialization of random values for velocities and positions using vectorized operations to reduce computation time.", "configspace": "", "generation": 94, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSO_Variant got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "9e426e94-19cd-458c-a989-c0168a0c269b", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            r1 = np.random.rand(initial_pop_size, self.dim)\n            r2 = np.random.rand(initial_pop_size, self.dim)\n\n            velocities = w * velocities + np.dot(c1 * r1, (pbest - swarm)) + np.dot(c2 * r2, (gbest - swarm))\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n\n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSOImproved", "description": "ImprovedDynamicPopulationPSO with optimized loop structure and reduced redundant calculations", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'c1' is not defined\").", "error": "NameError(\"name 'c1' is not defined\")", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {}, "mutation_prompt": null}
{"id": "c7d1c8c6-b079-4d6c-bc6c-ae12b90e24a3", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO_Improved", "description": "Restructured velocity and position update calculations for better efficiency.", "configspace": "", "generation": 96, "fitness": 0.3077141212125538, "feedback": "The algorithm ImprovedDynamicPopulationPSO_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "f199cf7a-5619-4b44-b239-7d88d1adb4c5", "solution": "import numpy as np\n\nclass OptimizedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            velocities = w * velocities + 1.49445 * r1[t] * (pbest - swarm) + 1.49445 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "OptimizedDynamicPopulationPSO", "description": "Simplifying convergence control by removing redundant calculations and optimizing velocity update calculations.", "configspace": "", "generation": 97, "fitness": 0.3077141212125538, "feedback": "The algorithm OptimizedDynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "d7a2ac20-569e-4ede-a05e-02d2e57969b4", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
{"id": "4a04b341-a624-424a-8f0b-c5404cfa5fa6", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        initial_pop_size = 20\n        max_iter = self.budget // initial_pop_size\n        lb, ub = -5.0, 5.0\n\n        swarm = np.random.uniform(lb, ub, (initial_pop_size, self.dim))\n        velocities = np.zeros((initial_pop_size, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([objective_function(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        gbest_score = pbest_scores[gbest_idx]\n        \n        c1, c2 = 1.49445, 1.49445\n        cos_vals = 0.5 * np.cos(0.5 * np.pi * np.arange(1, max_iter + 1) / max_iter)\n        sin_vals = 5 * np.sin(0.1 * np.pi * np.arange(1, max_iter + 1))\n        r1 = np.random.rand(max_iter, initial_pop_size, self.dim)\n        r2 = np.random.rand(max_iter, initial_pop_size, self.dim)\n\n        for t in range(max_iter):\n            w = 0.4 + 0.4 * cos_vals[t]\n            pop_size = initial_pop_size + sin_vals[t]\n            velocities = w * velocities + c1 * r1[t] * (pbest - swarm) + c2 * r2[t] * (gbest - swarm)\n            swarm += velocities\n            swarm = np.clip(swarm, lb, ub)\n            \n            scores = np.array([objective_function(p) for p in swarm])\n            update_idx = scores < pbest_scores\n            pbest[update_idx] = swarm[update_idx]\n            pbest_scores[update_idx] = scores[update_idx]\n\n            gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[gbest_idx] < gbest_score:\n                gbest = pbest[gbest_idx].copy()\n                gbest_score = pbest_scores[gbest_idx]\n\n        return gbest", "name": "ImprovedDynamicPopulationPSO", "description": "Improved algorithm by optimizing array operations, reducing redundant calculations, and simplifying convergence control.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b06be3-d989-40bb-81c6-b4a517a96ead", "metadata": {"aucs": [0.9285733051939667, 0.9422393731523809, 0.9474421125740701, 0.18356943019203653, 0.9404255097558983, 0.9340051081220359, 0.9389915038997289, 0.9428584069032764, 0.9411606631087791, 0.8319319791166294, 0.8070249872902392, 0.8671833220025469, 9.999999999998899e-05, 0.865884506742426, 0.8550756133446983, 0.7876169421463672, 0.8605709339026407, 0.8381246744135388, 0.1187366971169096, 0.11397778084906007, 0.118537087892853, 0.09650107567867305, 0.11290325195870388, 0.12389627490958388, 0.8685463888780791, 0.1461893328662891, 0.19254275390562536, 0.12177302125520506, 0.12589250577115363, 0.11815837695179054, 0.11751978075057046, 0.10938474420626443, 0.13493138848508257, 0.16228418274278233, 0.12428702499954669, 0.1347218282500089, 0.9909817836408151, 0.9874590069624047, 0.9926891978610977, 0.9872662560994107, 0.9873885474534547, 0.9853725597123749, 0.9930127172624239, 0.9920124932119876, 0.9925545442317216, 0.867666232567212, 0.8565165499084761, 0.397011993781586, 0.15365988299372002, 0.154575774503516, 0.833588582276644, 0.8476420769015258, 0.8092424072583333, 0.8456763984284883, 0.23043562606198187, 0.33901553524091044, 0.1940776278014703, 0.1956911518755382, 0.19490823339576824, 0.22210096411646374, 0.23708989281230197, 0.12695412206861634, 0.23600768675875128, 0.10864738195170653, 0.13097061405636268, 0.13309455934872605, 0.10678341698457694, 0.12200352681755389, 0.23337981489253357, 0.22255223374021527, 0.33690308103393685, 0.21615798614736836, 0.2534668595757106, 0.05483924928593098, 0.4040485957866671, 0.2061934947944828, 0.248322673242919, 0.22133338627713728, 0.2903817889972925, 0.07689605867480453, 0.12346401571828924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009127675882936503, 0.09939970735118708, 0.07985083230220968, 0.04482802784946138, 0.11161135390623933, 0.09243146356183607, 0.004413551382809078, 0.021585440777889042, 0.11026921823595259, 0.06558946578865887, 0.02962377272742156, 0.05337167706532231, 0.1065029726083001, 0.10148046145247369, 0.10034825393554037, 0.2103297112930239, 0.08302551920333023, 0.10731835558725722, 0.10882591336512137, 0.07911553313272035, 0.04459583899854114, 9.999999999998899e-05, 0.07428651970944589, 9.999999999998899e-05, 0.006827357602403716, 0.00671063226715074, 0.25083735391497297, 0.21080475820360767, 0.08580472946744921, 0.6662227290271114, 0.5677561295766372, 0.550813703997147, 0.5519374685051752, 0.5921874515230598, 0.5602395162836273, 0.6075797531851433, 0.5958052471065547, 0.5984379840094218, 0.09197791145663503, 0.08447260711877203, 0.11680260516463337, 0.11947698185689992, 0.0803100738308874, 0.14516378070310043, 0.07530482589529841, 0.09753161462575644, 0.11756975303180806, 0.25650946324551105, 0.2068140963324907, 0.1696808965471418, 0.24105665645459673, 0.24779070704306472, 0.1921874108807078, 0.24107877680958567, 0.2764240336015804, 0.231993953535093, 0.36318302278879433, 0.34834032104479007, 0.21586738341141265, 0.4874461439861446, 0.22722104255813014, 0.3212683748358526, 0.41239338831467853, 0.33656944514764553, 0.2896830586357988, 0.36414142282053297, 0.22330992740090627, 0.17984369718915294, 0.25053374277715923, 0.2246992657911825, 0.21826808674303988, 0.21912958105627145, 0.38831875356936807, 0.21404638339692905, 0.216020768450773, 0.23698121174642306, 0.20378905234541, 0.18965772573641904, 0.24745108059423548, 0.2582654721487293, 0.19667797009582766, 0.2013025378887624, 0.22481490831822892, 0.2265818025297608, 0.19144298842413654, 0.2277313235078533, 0.22820547966730975, 0.19714767301855252, 0.2306411693356979, 0.17785031668983697, 0.21324976345300872, 0.19070093249232234, 0.10544689581802669, 0.12704040858936827, 0.15382238926565228, 0.9539430198706309, 0.20153503484019852, 0.9600176827879515, 0.09225946451932865, 0.1705186224357229, 0.16342700658327047, 0.12744223605510852, 0.21304116755610858, 0.6271012991738879, 0.21363314005149103, 0.1698930319530063, 0.21377219262116454, 0.10549545554741058, 0.9117453238840779, 0.840059912815198, 0.24910076739408882, 0.20661975396835786, 0.217684287828525, 0.21841376763920517, 0.19815755746095687, 0.1838474768334919, 0.2568850590698586, 0.22058043172775466, 0.2017751177237853, 0.1000046968260494, 0.1095960197281054, 0.1025259642889087, 0.07533730428250363, 0.09979692623591141, 0.09080637539965752, 0.08405637421239576, 0.08610790784725653, 0.09544421040277662]}, "mutation_prompt": null}
