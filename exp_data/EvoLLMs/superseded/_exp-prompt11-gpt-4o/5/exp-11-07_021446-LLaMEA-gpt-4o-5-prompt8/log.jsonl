{"id": "d7e859e6-2901-475e-a691-92d9fd2b862c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5  # Differential weight\n        self.Cr_initial = 0.9  # Initial crossover rate\n        self.Cr_decay = 0.99  # Decay rate for crossover\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                a, b, c = self.select_random_indices(i)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n                \n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n                \n            self.Cr_initial *= self.Cr_decay  # Update crossover rate\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def select_random_indices(self, current_idx):\n        indices = list(range(self.pop_size))\n        indices.remove(current_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return a, b, c\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic differential evolution algorithm with adaptive crossover rates and selective elitism for robust global optimization.", "configspace": "", "generation": 0, "fitness": 0.2807891684846526, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8040658089969592, 0.7933341692423056, 0.8144147588420548, 0.8027968089082274, 0.8114913706254672, 0.807799148864961, 0.8354442422395602, 0.8041551451607181, 0.80711827946033, 0.6445915031498441, 0.6442889899056141, 0.6671009247931139, 0.654647973896298, 0.6282906475337355, 0.6474042441272323, 0.6537716582452342, 0.6549011322781892, 0.6383726764820703, 0.3637005858943707, 0.3447519389281001, 0.3301925783395486, 0.3913180744443834, 0.36928779559075897, 0.37548402949533755, 0.3696272830612114, 0.3075536225490425, 0.34844251654316327, 0.3245907057730364, 0.2883202630530167, 0.34401442935720683, 0.31166472562974046, 0.27525429174137916, 0.31125162724857736, 0.2823400534971767, 0.34489022928971613, 0.25246849132682725, 0.9021953439881168, 0.9378477952187502, 0.9465972734569094, 0.8956612593580479, 0.9333743343379508, 0.9140394719428087, 0.919536417382288, 0.9026149533322021, 0.9210983505479223, 0.2964605901894688, 0.2707362407775099, 0.3134825098965863, 0.3449836952063634, 0.34326990591015305, 0.306181248033208, 0.2974218676188908, 0.2812393207753636, 0.3009037177975481, 0.3057854670275988, 0.3128578373812282, 0.2869102820479187, 0.3079658315802498, 0.3223581879243195, 0.3250482152892631, 0.33180695016791617, 0.35167496701024503, 0.6578793527894846, 0.14896287768336702, 0.15681213439632158, 0.17045395268022057, 0.18082072117339554, 0.15844942335198087, 0.16059750415301677, 0.1612513272199, 0.15401175672343814, 0.15594219281751887, 0.16050467458978168, 0.14098196014537867, 0.16999269449480892, 0.14018838584451898, 0.1318010754320723, 0.1332446534283156, 0.1508834455368726, 0.1441447820039442, 0.15735960794957082, 0.0017687763176600368, 0.030448871841622704, 0.000474732668682587, 9.999999999998899e-05, 9.999999999998899e-05, 0.03693336633110189, 9.999999999998899e-05, 0.00869416385384325, 9.999999999998899e-05, 0.12049090890550362, 0.08609198128415896, 0.10650071964365893, 0.10253842872421137, 0.12820332981537452, 0.06765642913078007, 0.1623282396254253, 0.13986211777131863, 0.13410879438075585, 9.999999999998899e-05, 0.007102781764950494, 0.003940422645322905, 0.012871040815654267, 0.00420374638042087, 0.004540094647244919, 0.02083075971868953, 0.06378947744641517, 0.00910261818940672, 0.12531125093406337, 0.11983437726476553, 0.12012052955863495, 0.13487828508694888, 0.16065935551104626, 0.13929260157980372, 0.1075787441103001, 0.10550345949190654, 0.11362970576354614, 0.45402541730272605, 0.5022052920526456, 0.4699409959146911, 0.48290918771017277, 0.4773778443062764, 0.47118483956167, 0.4986837630076887, 0.5027973099723435, 0.48398199726875524, 0.1283300640211833, 0.10721629993003612, 0.1153642146798518, 0.10992413947902024, 0.09808344974981942, 0.11123463613910478, 0.11444210511356012, 0.09462393216209242, 0.09777711023731805, 0.1616144293517171, 0.13979302769877922, 0.17081082439940842, 0.1449646439436969, 0.15323379849152785, 0.13716409961960596, 0.15085810458956472, 0.13980463955674827, 0.1391362318572006, 0.3385316905147462, 0.29084438777070976, 0.3127232648119057, 0.3246025156268405, 0.32458096144925475, 0.3304186080334294, 0.3234582135734231, 0.35633344781619136, 0.35444084886518945, 0.23397205157207868, 0.19654441493096353, 0.20744328777581056, 0.2111697297980505, 0.1986341215946088, 0.21381857116154535, 0.22563933595775532, 0.2529995872127413, 0.24305288648506462, 0.2182615822962276, 0.18746711594316545, 0.20168671351877854, 0.18714518030271488, 0.1871454565550562, 0.1934896321031918, 0.21159648928969366, 0.22244835208412295, 0.19379321003222771, 0.21325509048619673, 0.21436743519269208, 0.23523941176828478, 0.22140519866240493, 0.21843921052620885, 0.21639664491786192, 0.304936192882472, 0.23283292091991825, 0.20965341066401766, 0.30042643963228177, 0.1689134542084001, 0.16401932943858955, 0.2527686262500607, 0.3305160256725771, 0.38232079592878987, 0.2409292249503192, 0.29108025998300147, 0.30187965356823065, 0.24947509402645018, 0.2013538936867898, 0.2668024998622358, 0.20335727644059076, 0.2020443800899716, 0.19241527764741495, 0.2133898176733009, 0.1987912682665055, 0.20992545226365122, 0.17487381745876318, 0.1757042776790797, 0.175343979583802, 0.18375893425928236, 0.19235566896416745, 0.18849518084969152, 0.1859992805320292, 0.18503147880371784, 0.1884338760245894, 0.08602475833394052, 0.07838263807543244, 0.07640372730954237, 0.07796431277982885, 0.0847324685728752, 0.08697619610215801, 0.08011655123508621, 0.07918556612006866, 0.07875194686852682]}, "mutation_prompt": null}
{"id": "f86a6a15-e340-47cb-990c-4f37047bde9b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5  # Differential weight\n        self.Cr_initial = 0.9  # Initial crossover rate\n        self.Cr_decay = 0.99  # Decay rate for crossover\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                a, b, c = self.select_random_indices(i)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n                \n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n                \n            self.Cr_initial *= self.Cr_decay  # Update crossover rate\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def select_random_indices(self, current_idx):\n        indices = list(range(self.pop_size))\n        indices.remove(current_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return a, b, c\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic differential evolution algorithm with adaptive crossover rates and selective elitism for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7e859e6-2901-475e-a691-92d9fd2b862c", "metadata": {"aucs": [0.8040658089969592, 0.7933341692423056, 0.8144147588420548, 0.8027968089082274, 0.8114913706254672, 0.807799148864961, 0.8354442422395602, 0.8041551451607181, 0.80711827946033, 0.6445915031498441, 0.6442889899056141, 0.6671009247931139, 0.654647973896298, 0.6282906475337355, 0.6474042441272323, 0.6537716582452342, 0.6549011322781892, 0.6383726764820703, 0.3637005858943707, 0.3447519389281001, 0.3301925783395486, 0.3913180744443834, 0.36928779559075897, 0.37548402949533755, 0.3696272830612114, 0.3075536225490425, 0.34844251654316327, 0.3245907057730364, 0.2883202630530167, 0.34401442935720683, 0.31166472562974046, 0.27525429174137916, 0.31125162724857736, 0.2823400534971767, 0.34489022928971613, 0.25246849132682725, 0.9021953439881168, 0.9378477952187502, 0.9465972734569094, 0.8956612593580479, 0.9333743343379508, 0.9140394719428087, 0.919536417382288, 0.9026149533322021, 0.9210983505479223, 0.2964605901894688, 0.2707362407775099, 0.3134825098965863, 0.3449836952063634, 0.34326990591015305, 0.306181248033208, 0.2974218676188908, 0.2812393207753636, 0.3009037177975481, 0.3057854670275988, 0.3128578373812282, 0.2869102820479187, 0.3079658315802498, 0.3223581879243195, 0.3250482152892631, 0.33180695016791617, 0.35167496701024503, 0.6578793527894846, 0.14896287768336702, 0.15681213439632158, 0.17045395268022057, 0.18082072117339554, 0.15844942335198087, 0.16059750415301677, 0.1612513272199, 0.15401175672343814, 0.15594219281751887, 0.16050467458978168, 0.14098196014537867, 0.16999269449480892, 0.14018838584451898, 0.1318010754320723, 0.1332446534283156, 0.1508834455368726, 0.1441447820039442, 0.15735960794957082, 0.0017687763176600368, 0.030448871841622704, 0.000474732668682587, 9.999999999998899e-05, 9.999999999998899e-05, 0.03693336633110189, 9.999999999998899e-05, 0.00869416385384325, 9.999999999998899e-05, 0.12049090890550362, 0.08609198128415896, 0.10650071964365893, 0.10253842872421137, 0.12820332981537452, 0.06765642913078007, 0.1623282396254253, 0.13986211777131863, 0.13410879438075585, 9.999999999998899e-05, 0.007102781764950494, 0.003940422645322905, 0.012871040815654267, 0.00420374638042087, 0.004540094647244919, 0.02083075971868953, 0.06378947744641517, 0.00910261818940672, 0.12531125093406337, 0.11983437726476553, 0.12012052955863495, 0.13487828508694888, 0.16065935551104626, 0.13929260157980372, 0.1075787441103001, 0.10550345949190654, 0.11362970576354614, 0.45402541730272605, 0.5022052920526456, 0.4699409959146911, 0.48290918771017277, 0.4773778443062764, 0.47118483956167, 0.4986837630076887, 0.5027973099723435, 0.48398199726875524, 0.1283300640211833, 0.10721629993003612, 0.1153642146798518, 0.10992413947902024, 0.09808344974981942, 0.11123463613910478, 0.11444210511356012, 0.09462393216209242, 0.09777711023731805, 0.1616144293517171, 0.13979302769877922, 0.17081082439940842, 0.1449646439436969, 0.15323379849152785, 0.13716409961960596, 0.15085810458956472, 0.13980463955674827, 0.1391362318572006, 0.3385316905147462, 0.29084438777070976, 0.3127232648119057, 0.3246025156268405, 0.32458096144925475, 0.3304186080334294, 0.3234582135734231, 0.35633344781619136, 0.35444084886518945, 0.23397205157207868, 0.19654441493096353, 0.20744328777581056, 0.2111697297980505, 0.1986341215946088, 0.21381857116154535, 0.22563933595775532, 0.2529995872127413, 0.24305288648506462, 0.2182615822962276, 0.18746711594316545, 0.20168671351877854, 0.18714518030271488, 0.1871454565550562, 0.1934896321031918, 0.21159648928969366, 0.22244835208412295, 0.19379321003222771, 0.21325509048619673, 0.21436743519269208, 0.23523941176828478, 0.22140519866240493, 0.21843921052620885, 0.21639664491786192, 0.304936192882472, 0.23283292091991825, 0.20965341066401766, 0.30042643963228177, 0.1689134542084001, 0.16401932943858955, 0.2527686262500607, 0.3305160256725771, 0.38232079592878987, 0.2409292249503192, 0.29108025998300147, 0.30187965356823065, 0.24947509402645018, 0.2013538936867898, 0.2668024998622358, 0.20335727644059076, 0.2020443800899716, 0.19241527764741495, 0.2133898176733009, 0.1987912682665055, 0.20992545226365122, 0.17487381745876318, 0.1757042776790797, 0.175343979583802, 0.18375893425928236, 0.19235566896416745, 0.18849518084969152, 0.1859992805320292, 0.18503147880371784, 0.1884338760245894, 0.08602475833394052, 0.07838263807543244, 0.07640372730954237, 0.07796431277982885, 0.0847324685728752, 0.08697619610215801, 0.08011655123508621, 0.07918556612006866, 0.07875194686852682]}, "mutation_prompt": null}
{"id": "ba65a3dc-037f-444e-9b09-89ce8fdbd1d5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5  # Differential weight\n        self.Cr_initial = 0.9  # Initial crossover rate\n        self.Cr_decay = 0.99  # Decay rate for crossover\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                a, b, c = self.select_random_indices(i)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n                \n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n                \n            self.Cr_initial *= self.Cr_decay  # Update crossover rate\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def select_random_indices(self, current_idx):\n        indices = list(range(self.pop_size))\n        indices.remove(current_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return a, b, c\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic differential evolution algorithm with adaptive crossover rates and selective elitism for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7e859e6-2901-475e-a691-92d9fd2b862c", "metadata": {"aucs": [0.8040658089969592, 0.7933341692423056, 0.8144147588420548, 0.8027968089082274, 0.8114913706254672, 0.807799148864961, 0.8354442422395602, 0.8041551451607181, 0.80711827946033, 0.6445915031498441, 0.6442889899056141, 0.6671009247931139, 0.654647973896298, 0.6282906475337355, 0.6474042441272323, 0.6537716582452342, 0.6549011322781892, 0.6383726764820703, 0.3637005858943707, 0.3447519389281001, 0.3301925783395486, 0.3913180744443834, 0.36928779559075897, 0.37548402949533755, 0.3696272830612114, 0.3075536225490425, 0.34844251654316327, 0.3245907057730364, 0.2883202630530167, 0.34401442935720683, 0.31166472562974046, 0.27525429174137916, 0.31125162724857736, 0.2823400534971767, 0.34489022928971613, 0.25246849132682725, 0.9021953439881168, 0.9378477952187502, 0.9465972734569094, 0.8956612593580479, 0.9333743343379508, 0.9140394719428087, 0.919536417382288, 0.9026149533322021, 0.9210983505479223, 0.2964605901894688, 0.2707362407775099, 0.3134825098965863, 0.3449836952063634, 0.34326990591015305, 0.306181248033208, 0.2974218676188908, 0.2812393207753636, 0.3009037177975481, 0.3057854670275988, 0.3128578373812282, 0.2869102820479187, 0.3079658315802498, 0.3223581879243195, 0.3250482152892631, 0.33180695016791617, 0.35167496701024503, 0.6578793527894846, 0.14896287768336702, 0.15681213439632158, 0.17045395268022057, 0.18082072117339554, 0.15844942335198087, 0.16059750415301677, 0.1612513272199, 0.15401175672343814, 0.15594219281751887, 0.16050467458978168, 0.14098196014537867, 0.16999269449480892, 0.14018838584451898, 0.1318010754320723, 0.1332446534283156, 0.1508834455368726, 0.1441447820039442, 0.15735960794957082, 0.0017687763176600368, 0.030448871841622704, 0.000474732668682587, 9.999999999998899e-05, 9.999999999998899e-05, 0.03693336633110189, 9.999999999998899e-05, 0.00869416385384325, 9.999999999998899e-05, 0.12049090890550362, 0.08609198128415896, 0.10650071964365893, 0.10253842872421137, 0.12820332981537452, 0.06765642913078007, 0.1623282396254253, 0.13986211777131863, 0.13410879438075585, 9.999999999998899e-05, 0.007102781764950494, 0.003940422645322905, 0.012871040815654267, 0.00420374638042087, 0.004540094647244919, 0.02083075971868953, 0.06378947744641517, 0.00910261818940672, 0.12531125093406337, 0.11983437726476553, 0.12012052955863495, 0.13487828508694888, 0.16065935551104626, 0.13929260157980372, 0.1075787441103001, 0.10550345949190654, 0.11362970576354614, 0.45402541730272605, 0.5022052920526456, 0.4699409959146911, 0.48290918771017277, 0.4773778443062764, 0.47118483956167, 0.4986837630076887, 0.5027973099723435, 0.48398199726875524, 0.1283300640211833, 0.10721629993003612, 0.1153642146798518, 0.10992413947902024, 0.09808344974981942, 0.11123463613910478, 0.11444210511356012, 0.09462393216209242, 0.09777711023731805, 0.1616144293517171, 0.13979302769877922, 0.17081082439940842, 0.1449646439436969, 0.15323379849152785, 0.13716409961960596, 0.15085810458956472, 0.13980463955674827, 0.1391362318572006, 0.3385316905147462, 0.29084438777070976, 0.3127232648119057, 0.3246025156268405, 0.32458096144925475, 0.3304186080334294, 0.3234582135734231, 0.35633344781619136, 0.35444084886518945, 0.23397205157207868, 0.19654441493096353, 0.20744328777581056, 0.2111697297980505, 0.1986341215946088, 0.21381857116154535, 0.22563933595775532, 0.2529995872127413, 0.24305288648506462, 0.2182615822962276, 0.18746711594316545, 0.20168671351877854, 0.18714518030271488, 0.1871454565550562, 0.1934896321031918, 0.21159648928969366, 0.22244835208412295, 0.19379321003222771, 0.21325509048619673, 0.21436743519269208, 0.23523941176828478, 0.22140519866240493, 0.21843921052620885, 0.21639664491786192, 0.304936192882472, 0.23283292091991825, 0.20965341066401766, 0.30042643963228177, 0.1689134542084001, 0.16401932943858955, 0.2527686262500607, 0.3305160256725771, 0.38232079592878987, 0.2409292249503192, 0.29108025998300147, 0.30187965356823065, 0.24947509402645018, 0.2013538936867898, 0.2668024998622358, 0.20335727644059076, 0.2020443800899716, 0.19241527764741495, 0.2133898176733009, 0.1987912682665055, 0.20992545226365122, 0.17487381745876318, 0.1757042776790797, 0.175343979583802, 0.18375893425928236, 0.19235566896416745, 0.18849518084969152, 0.1859992805320292, 0.18503147880371784, 0.1884338760245894, 0.08602475833394052, 0.07838263807543244, 0.07640372730954237, 0.07796431277982885, 0.0847324685728752, 0.08697619610215801, 0.08011655123508621, 0.07918556612006866, 0.07875194686852682]}, "mutation_prompt": null}
{"id": "a177893e-6c85-460f-92f8-6f11408d3091", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 3, "fitness": 0.2839674946074667, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "d7e859e6-2901-475e-a691-92d9fd2b862c", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "7ac0a4b3-6216-433c-88f2-e06bc41bb77a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "e4cb2a94-e8ec-4868-bab9-00d1bb09c0c3", "solution": "import numpy as np\n\nclass OptimizedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(0, self.pop_size, 3):  # iterate in chunks for better cache utilization\n                if self.evaluations >= self.budget:\n                    break\n\n                if i + 2 < self.pop_size:\n                    parents = indices[i:i+3]\n                else:\n                    continue  # skip if we don't have a complete set\n\n                a, b, c = parents\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        fitness_scores = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.pop_size\n        self.fitness = fitness_scores\n        min_index = np.argmin(fitness_scores)\n        self.best_solution = self.population[min_index]\n        self.best_fitness = fitness_scores[min_index]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "OptimizedDifferentialEvolution", "description": "Optimized Differential Evolution with reduced redundant operations and enhanced vectorized computations for better efficiency.", "configspace": "", "generation": 5, "fitness": 0.19758030776672134, "feedback": "The algorithm OptimizedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.4107488146204813, 0.42017268678195197, 0.4093103910747926, 0.36690286316604304, 0.3912884898534301, 0.3706858293358759, 0.39387827477247517, 0.41498673411093223, 0.4089734267383869, 0.05146619888884996, 0.08252358063322884, 0.04589049243207932, 0.0528702343239269, 0.11695710863122222, 0.10421992838578775, 0.13909052602695415, 0.07378656216962887, 0.13331059278444213, 0.15399484337670744, 0.15685624511313123, 0.1533188587792873, 0.16379449931465662, 0.15468612689135375, 0.14300535264011738, 0.15163895429654117, 0.17336068263769389, 0.1604371729936458, 0.14149190982951476, 0.12952376175893676, 0.13288233659253745, 0.14201794621935182, 0.13988954072288362, 0.1302255024249238, 0.13133263784570148, 0.1730955529734307, 0.13643351311148566, 0.9750540111045836, 0.9551397856214228, 0.9620054498003398, 0.9509186665710887, 0.9731088492681785, 0.9700903513502587, 0.9672806521575361, 0.9727257364272419, 0.9825670245543563, 0.15744704885316774, 0.1435048855231038, 0.1501117536482539, 0.19059826047371398, 0.2043275360361375, 0.18428527996019495, 0.1673418186165221, 0.1475056742845573, 0.13968840627427204, 0.20032186353466463, 0.19147564733916878, 0.16120724455512458, 0.2470701515643987, 0.2281495383380051, 0.24454469469567852, 0.1845285821680357, 0.20791163022811066, 0.21355400489494292, 0.14112221671449465, 0.11511962261598996, 0.1354223648826841, 0.16080408271973212, 0.13472335601419638, 0.09990804265576247, 0.12866199684836432, 0.1183337486531928, 0.13292283855117315, 0.09343403644050596, 0.10816943221907782, 0.13207629552570965, 0.13941267333381935, 0.1452626873467343, 0.1379635997571046, 0.11331128907289889, 0.09809848645320185, 0.10942058983509395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025434692193881392, 9.999999999998899e-05, 9.999999999998899e-05, 0.08708117466278342, 0.0939631728840874, 0.07642409456660626, 0.05336109482214546, 0.04889110501700866, 0.06630737645742824, 0.0860731151421722, 0.06381366981121506, 0.06528022238321263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09278047640065601, 0.04815422305475148, 0.04221374216000806, 0.03783677006786146, 0.058988155561340294, 0.05938158698397544, 0.05065911129008205, 0.06441952636802728, 0.07842258648368838, 0.38046761365998805, 0.3505035243538809, 0.37819699268489915, 0.35284257694507437, 0.33180306116441705, 0.35767576785453814, 0.3430032639611328, 0.32930125889227024, 0.34420706911168486, 0.0817881062632756, 0.08420971157859058, 0.10263674457390592, 0.07703346957615964, 0.07744837386398651, 0.08750104177356965, 0.09071364604273402, 0.076181241675921, 0.07911526677067382, 0.15542879341304738, 0.14974348565133733, 0.16830550678142553, 0.15610916791975993, 0.1861234783964678, 0.14459633116067783, 0.16026675410207225, 0.14397290999257872, 0.1662572036721227, 0.24164939131854912, 0.23266672460849636, 0.23542918006910007, 0.24861403531046988, 0.22442881746051457, 0.24128711555082927, 0.2229538185588782, 0.2533950114424123, 0.22111935874956423, 0.16239814085549842, 0.1666366395364104, 0.17845972494518392, 0.18976993322714608, 0.18630147772915806, 0.15763443457042536, 0.16597638376551271, 0.16439742859681594, 0.16006562630129084, 0.1866607350436048, 0.1871957237045886, 0.18017733498914223, 0.1939094781075571, 0.19792711771515537, 0.19656306122021316, 0.20758587033312048, 0.1762429510604392, 0.17878582277965382, 0.22258880879871346, 0.2128694638645241, 0.23401013084896527, 0.19970295883458677, 0.200485581536325, 0.1985027918862483, 0.21698134365691757, 0.19502358666496844, 0.1983871760426409, 0.17774523711615564, 0.3399719234846853, 0.26263383836478094, 0.3460939063458701, 0.36462905730338435, 0.39499607438128537, 0.3539055485558885, 0.350391443789294, 0.34087391912543885, 0.4079928385151891, 0.25480148975264394, 0.17978194037751294, 0.27971750019670494, 0.16766655538151776, 0.19019977371895203, 0.21104111607426024, 0.277874902586834, 0.29222261184684806, 0.1840168191986079, 0.1830911634043524, 0.1843212962050058, 0.18145475075055018, 0.18496474265462715, 0.18644821323496907, 0.18057069003869963, 0.18429061169819738, 0.1746446725703037, 0.07207685507340411, 0.07201051324686647, 0.07352557466201903, 0.08421316525432865, 0.07815168264463102, 0.075820738406157, 0.07238279902628852, 0.07655958599802504, 0.07118140906159387]}, "mutation_prompt": null}
{"id": "07ec6905-8505-4aae-98d3-aeffad4b2058", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "295b2b51-e2ec-46ab-88b1-1a08d263ba5e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b8cf4346-c2eb-43ff-ae52-f8a0b8db7edd", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "d2f07817-ad7c-4d4a-870f-99506a4ccbbf", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "6b24b3ce-7542-4b63-be53-c2a73c3989f2", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "8fea6d9e-5949-47af-af9f-e1d7dc92260c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "373afff1-2db8-4823-bdab-67a75e5e5563", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "d8419f62-0c27-45d0-8551-ca43f2114820", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "cbc57767-d777-47aa-9b17-67b2ffd90f99", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "a538dbdf-5144-4965-9869-dbbd6a2b09e2", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "fdd23d50-e7e2-4433-9e00-d348f6554648", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "64041350-735c-4e69-b7cf-9202621f8013", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "6ad74a8a-dc91-41d0-9748-d8f01ed2128b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "4cc381f4-96a3-440d-91be-f979a3f524b0", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "d5e04435-cbde-43c0-889f-f8f158081cd4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "6641476f-25d3-4350-bc9d-660aee416f67", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "ce1b1b2a-bd3f-4bc6-8b84-5d391752536a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "39576fb7-369b-4e9a-939f-1703ca2f1178", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "a565528c-baff-4f92-8dd2-98fc0295c571", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "c8ea575e-df1f-46a7-bbf1-b02714900948", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "7de5f256-a80c-42ad-8481-3a062771543c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "722851fe-ec1a-4491-9e7d-59afb5cb7a3c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "fd7c453f-0d48-47f8-b197-a459dedf6463", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "f0016569-0be0-4558-8294-6ebd396483de", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "5c0409e9-83bb-4c18-b577-7a83c0ec0ff7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b95e340a-7e5f-4f43-8bee-e0b2a9b47407", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "eb749f89-84fd-4f2a-907d-5ceafa59936a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "0accab5e-bca5-447a-85f6-540a51e4de0c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "e4f42b66-b4e0-482b-bfd2-53c5d2de9a39", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "31bac218-3c32-4bb1-98f9-c0cd884b205e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "7a10e68b-e90a-4e8f-ba57-c8275a751c8b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "189806e6-7be8-4d3c-ad21-0cf71d190492", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "90be6511-8114-4836-bbe7-8d5933869c7c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "4b472021-70c3-463e-ae84-c236693d6643", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "bceee1b8-6e7e-478d-9055-c27f25eb83d5", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "a2536c76-44cd-4487-8e12-e605a76819dc", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "ec5f500c-7c2d-4057-95c3-44351695908a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "83ca9599-c9a5-4932-8763-5e7bf3be3f40", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "1ec3be48-a7f1-4ab4-8575-283f47be231e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "eb39dfd5-0875-473d-90f7-81a016a16b58", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "ab1abb14-6c4d-4f43-8abd-bfddd30b864a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "8404ee0e-114a-4a30-bc21-0332a19b0eb7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "6246c9ae-d3fe-4409-b6b2-0e91ef313ba5", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "f296346d-dd23-456a-ba81-2118588d37f5", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "c6657e0d-798a-4fc2-92c3-6733f9baf7fb", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "638d6a8a-7162-4737-8fa3-e8e146cc0d42", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "013b45b2-a782-42e0-a7bc-00ecfbd5047f", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "4c665479-c301-45a5-a481-eb6574bf2f34", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "6c1f260f-1646-4e64-b1f4-86bd0fde417e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "79a17ede-158c-4510-b5e4-def6d47716ce", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "535564f2-c023-4af1-b8c1-1b20ff9a5508", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b9b8eb39-50bf-4622-97c6-0db8b7092ef8", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "84c895ba-d74e-4452-b401-98d4af42e856", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "0f612768-a4c6-4269-a025-e04813b27d4b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b458079a-e426-4cc4-8970-0a2daa525ab4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b3bdadb2-8148-43ca-ae8c-5796d7ae8948", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "793401f2-1f8c-441f-9700-1d8a7602e63c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "26b9f302-62b7-4492-967e-f5616b59f5ad", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "45dac92b-3d0f-4cab-92b5-daba66f981de", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "4dddd94e-2d2e-47d8-bfd5-ac32b453a923", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "7493f49c-ea66-43d8-bb3f-3a79f11c1841", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "a2605ef7-1f40-4d8b-b370-8fc8e8f7b2b7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "55506ab0-a070-4aeb-a3d2-535eb42f194b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "21e3acbf-92d2-4c4e-9735-cae7c5aef20d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "7b8d7b83-fdb2-43c4-994f-95dc35fca8df", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "a264e637-6326-47fa-9e31-3a2dba0f2e7a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "44894eff-0418-4f7c-8de6-504a33f8b6e6", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "50d7929f-5b85-4d31-bd9d-155bd71683dc", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b50839da-ebda-4b03-b3ba-14d2148b0fe6", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "74ba0832-3b6c-4639-9ccb-6d82cfc20103", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "0eaf848e-c9c5-48f1-82eb-67f2d4e0b33e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "2ab1e65c-ec29-47c7-ad06-2d3318358d3d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "149a003f-a75f-4301-a0ef-4c9dfc975294", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "e584ce85-f552-46e7-9789-89fe95a3a9d5", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "71803a2b-5e8c-4dee-a3a7-35b7e55b7d60", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "a239511f-4615-4479-8432-9a77a376e254", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "be69f62a-1c25-4517-bc47-a40f68251bd0", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "d1866ab8-aa86-4a88-8198-899d9dee2e52", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b2bf0ec5-7b5a-4a71-bf03-543f6ab64187", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "b2882a3a-0ee7-47c7-b75f-6dbef16ea8a9", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "eabd259c-5f83-4ad4-a504-1fbdbc3cb0d8", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "6a923f5c-b865-4117-84dd-2336f10900d4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "3a450d92-683d-465a-9f92-ce219fff7afb", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "c6e21e83-2a6e-40e6-bf67-e1f8c93e16b6", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "27aaec0c-c7cf-4731-95b4-b34e01a02b4c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "64d9f161-42cc-442d-a8e9-3dcb513dd449", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "8a6dc453-bd88-4ad2-950d-3c8d409559ea", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "2f72ae86-0347-4416-a15e-09396038e3bb", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "2e024b0e-8ffc-40d4-995c-2f14ed48a2e5", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "4158511f-f940-4174-93e2-c6fe69cfaa5e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "afbddb26-3140-4cec-b85a-5c52e08b9354", "solution": "import numpy as np\n\nclass StreamlinedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n        self.indices = np.arange(self.pop_size)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            np.random.shuffle(self.indices)\n\n            for i in self.indices:\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(self.indices[self.indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        mask = self.evaluations < self.budget\n        valid_indices = self.indices[mask]\n        for i in valid_indices:\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "StreamlinedDifferentialEvolution", "description": "A streamlined differential evolution algorithm with improved memory handling and vectorized operations for faster execution.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {}, "mutation_prompt": null}
{"id": "bced6844-14b7-48cc-8d44-dc72ed7b88c7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "08e30803-cc4d-40e0-a816-bc286e887e47", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
{"id": "3679b2f8-6e51-4062-8dd0-830187665460", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5\n        self.Cr_initial = 0.9\n        self.Cr_decay = 0.99\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            self.Cr_initial *= self.Cr_decay\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n            if self.fitness[i] < self.best_fitness:\n                self.best_solution = self.population[i]\n                self.best_fitness = self.fitness[i]\n\n    def mutate(self, a, b, c):\n        return np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), -5, 5)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.Cr_initial\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced dynamic differential evolution algorithm with optimized loop structures and efficient vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a177893e-6c85-460f-92f8-6f11408d3091", "metadata": {"aucs": [0.8069502200429892, 0.7969060235903049, 0.8118749623576541, 0.783464881975759, 0.8169288579659091, 0.82038672606467, 0.8282587011453809, 0.8187065244106597, 0.8010786021572635, 0.676406302298147, 0.6567710916208542, 0.6398412059525271, 0.6433131277338129, 0.6414310987818651, 0.6582986736220401, 0.6658519153776261, 0.6425308125416046, 0.6575939403303457, 0.36595247531384534, 0.39395209953432875, 0.3131159598726485, 0.3595372543539126, 0.3428142014078579, 0.3572840190150458, 0.42513094854927447, 0.369817522394445, 0.391808666949363, 0.26499564490685856, 0.27980961327031906, 0.27444038423460027, 0.29017193183059564, 0.2764473965523109, 0.30720791018577487, 0.3224639160269207, 0.26466984116398606, 0.15134048245462106, 0.9201792711552235, 0.9356098344524468, 0.9161714446047767, 0.9237476769293537, 0.9182379050686672, 0.9439363219384713, 0.9548111520464913, 0.9376408158861742, 0.9475321748669592, 0.3044313560705265, 0.3087439438291073, 0.31857442374992806, 0.31219582668253365, 0.34417336679752053, 0.32525010389188824, 0.2675396387901259, 0.3239139073347441, 0.29864620599127034, 0.2970197038476603, 0.290531689480369, 0.28143131997459436, 0.6327130996641412, 0.40582962442166104, 0.5418536184465963, 0.3227288117789039, 0.3172369632134714, 0.7183187642133484, 0.16014012918655318, 0.154459875487012, 0.16446580384900478, 0.17240724808701036, 0.16455271893415302, 0.16740023674601, 0.1661895609529147, 0.16432041155953225, 0.15000370474210067, 0.1368491810876109, 0.10783512102662574, 0.13824994955357417, 0.15733391160094057, 0.1630034963268372, 0.16773999216969537, 0.15068661129772187, 0.1558641649701965, 0.1486620756051985, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033924422878284233, 0.004226529768893705, 9.999999999998899e-05, 9.999999999998899e-05, 0.018641418871127247, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765689664115218, 0.06111780725864413, 0.11318510727759079, 0.08042238298098925, 0.06899976708084721, 0.12872506833379882, 0.13284453575910016, 0.10264599972345845, 0.11326372414031483, 9.999999999998899e-05, 0.0036990037557971256, 0.018036005054167248, 0.0003217090729696892, 9.999999999998899e-05, 9.999999999998899e-05, 0.03274616742285341, 9.999999999998899e-05, 0.008369339919034213, 0.13979209153698557, 0.12841396269140481, 0.12666320549190024, 0.1318731408203343, 0.1308223815626286, 0.12399223775249901, 0.11428038436042876, 0.13155279750005433, 0.11244498447162898, 0.4956503578798044, 0.46110277091986307, 0.4712320499409667, 0.49073518162990293, 0.4706332159480192, 0.47618977498839876, 0.4891227491231882, 0.47360979451532126, 0.531477402570625, 0.13143767952340002, 0.10362015585316053, 0.11485386483030002, 0.10608799958094328, 0.09625810577152827, 0.09159049778078443, 0.09823304427908042, 0.10684322189416084, 0.09852333107967137, 0.15817606057713074, 0.13994533190192993, 0.1726753055122282, 0.1630574840314657, 0.15792424501967273, 0.142487805029899, 0.16204206993085024, 0.13851114014872823, 0.1545595629264277, 0.30721807583156924, 0.29211685210908545, 0.3300971369448895, 0.30108261668244884, 0.30685763182098913, 0.3300603318701807, 0.36740659855182134, 0.3693007694582908, 0.3843295999674323, 0.197162175178052, 0.22203302251977575, 0.24496108276868522, 0.20269941910454348, 0.19977944472407994, 0.19894890960051992, 0.24578728250085813, 0.2330575258788362, 0.21588914869124265, 0.18607126843700916, 0.20551929399088864, 0.1924364830101255, 0.19039479898798106, 0.2052965783146996, 0.18686552919752397, 0.19927000353918933, 0.22703884551408293, 0.19553252199794502, 0.2134792238944918, 0.2409094292778906, 0.2053525596189978, 0.24899768484655938, 0.2342243896227285, 0.22541906619980412, 0.22210152285474583, 0.2201531488682934, 0.24037819071776934, 0.24607329894168406, 0.2016904289463224, 0.33152325504050273, 0.17195470704881521, 0.1769892554161121, 0.26786802246961583, 0.3294445428042001, 0.23410153725533855, 0.24453431834571648, 0.24731740112386846, 0.20260502375426737, 0.38647070177682485, 0.3225109566189539, 0.1732932621300708, 0.3279795570234877, 0.20746718798250408, 0.20319496896122824, 0.3047826277383404, 0.17899739167889694, 0.19898493075989787, 0.1972997044625907, 0.2047306994190191, 0.18001120858690323, 0.1847521417203447, 0.19196336355283528, 0.1829234827686872, 0.1934488872589183, 0.0734021861783527, 0.07817295997789608, 0.0872792776661987, 0.08675729876390925, 0.07361759748286023, 0.08299466694710556, 0.07907263252915708, 0.07287076877372178, 0.08229722925303196]}, "mutation_prompt": null}
