{"id": "fddbd2af-f303-4e34-8819-e65bf2076661", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.3851136032831753, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "20738403-f3fc-4360-bc6d-3d1540f583b2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "8ee4b15c-d1aa-4a02-a4a5-e0956b667b77", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "7c705236-0eec-4b1c-aba6-544dd7759789", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "7f7ebbc7-65ab-4240-9568-2fa7c065aa71", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "19524edf-62c7-42a5-a9a1-0cb568df8c69", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "a01ce646-0ad4-4a8f-8405-d5691375df36", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "59f4c059-2aed-4983-aef5-a70cd148fd3d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "b025acbc-a478-4d7d-adf4-9b0a7024100b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "948f64ab-05d8-4a44-8b1a-e992cacc8f81", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "674b153a-b620-4315-adf9-c006d96f2afa", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "918367d5-5b96-4a0b-a864-2cf310306496", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "7abd959b-9322-4e21-915f-e975e8dd7814", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "c23cb8a2-8747-4c21-8045-b49b342c0dba", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "4adf80d6-f729-440b-9a81-7b3cab99964b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "76d76d08-bdfc-45bc-80ea-291ef02da687", "solution": "import numpy as np\n\nclass OptimizedHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # switch ratio between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population and fitness\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.zeros(self.pop_size)\n        for i in range(self.pop_size):\n            fitness[i] = func(population[i])\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = np.delete(indices, i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "OptimizedHybridDE", "description": "Optimized Hybrid Differential Evolution with improved loop structure and reduced redundant calculations for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": 0.3851136032831753, "feedback": "The algorithm OptimizedHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "785b841c-b6a2-4ce0-90f6-402a1c18d26e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "2dbf4320-9db9-4b6c-94ed-a5e170023745", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "f8651839-3d9f-4c71-8a37-cc593eaa9696", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "fc82b458-052c-4aaf-8648-1c8a9732f7a7", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "69d103ea-c61b-4439-adf3-3e4acdd79df0", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "09c33670-ad97-4cea-9a30-4e1da5a36a2c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "7d033edc-872b-4346-9aa1-26f085f9038c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "ee9109b8-0b93-468b-895d-330a9a545a81", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "a91df8ba-b5e6-4c3b-a6f1-1938a7cdc34c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "c2287819-ad8a-4d4c-801b-4de1d206e246", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "9ff72f01-a0be-4a68-b558-dabc32f6199c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "d65247b7-48a4-42c3-b1f3-01be5323ff7d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "75b21466-ba53-45c3-aeb4-d587e18e1834", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "caae7f5c-3933-43e2-ac0d-a3bb1dcf2d11", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "d4161bc6-4232-4978-8829-01454864cdd9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "3db1ed30-ff8a-4e71-a698-5687d0680757", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "d2c5c04e-fa54-4c47-9b8c-799b41361708", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "52bc6d1d-35c7-4880-80b4-104515f97c4b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "44a3a056-ab69-481a-a036-f7a9a5b674af", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "92093935-6b5f-479d-bdbb-0b2b1cd91cef", "solution": "import numpy as np\n\nclass OptimizedHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5\n        self.cr = 0.9\n        self.strategy_switch_ratio = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n\n            for i in range(self.pop_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                candidates = indices[indices != i]\n                a, b, c = candidates[:3]\n                \n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = population[i].copy()\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)\n                \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "OptimizedHybridDifferentialEvolution", "description": "Optimized Hybrid Differential Evolution with computational efficiency improvements by reducing redundant operations and utilizing vectorized calculations.", "configspace": "", "generation": 35, "fitness": 0.08848254011029336, "feedback": "The algorithm OptimizedHybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.21419980757015233, 0.12274862204912773, 0.1654673996090289, 0.130068718905602, 0.1376989422137327, 0.1972825680163166, 0.10856977502273968, 0.16772560359550082, 0.10756461389364835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07678936095247368, 0.03302473685513363, 0.08591789887172618, 0.05831514099349788, 0.05342048757098694, 0.07322885643871091, 0.06535395335241134, 0.091000616706149, 0.058717010496957434, 0.07248541506781125, 0.03248636166774832, 0.04641233264080746, 0.058537178597561246, 0.05299129772772271, 0.023893942580335725, 0.04079992615871797, 0.03791686886571699, 0.022811171636500926, 0.10628180733413373, 0.0620107029589928, 0.09539866609687919, 0.17822608438400434, 0.10763794434690876, 0.1264048432927235, 0.08555374597227927, 0.12807700634707886, 0.10640269197950625, 0.0838584446403553, 0.05702086555364316, 0.06337520412702868, 0.02298971477525591, 0.011203209096421585, 0.025467223521969395, 0.03619082019420894, 0.06162516933280604, 0.08988421827708337, 0.1886928469791629, 0.174295851708814, 0.1383332404762705, 0.2579260901715855, 0.19494944738714715, 0.09044826204730538, 0.043321734819460334, 0.11616291473142881, 0.12194694033237596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08891818200842005, 9.999999999998899e-05, 0.09554335186878948, 9.999999999998899e-05, 0.18202624293667602, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16280896222798058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08019563065085733, 0.05123291387051632, 0.08467757128573972, 0.019168209697884797, 0.009197468513982843, 0.020396166231026802, 0.04465370498996546, 0.04669377213316128, 0.08903671807244995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028751657076129367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023279503541288382, 0.1270266993774256, 0.23610037540691486, 0.16993249206770922, 0.16899398415498268, 0.18408404760423935, 0.2193520274122589, 0.18647189061517266, 0.1547777232740426, 0.1860421317597577, 0.05400293267475209, 0.050372240974395965, 0.047211516251242536, 0.0479882872345927, 0.03534985719191042, 0.026268230971114637, 0.02775510621183841, 0.029925907327530532, 0.06862532673796173, 0.11679666122835441, 0.14172319734932315, 0.11845414064830351, 0.15607608400319972, 0.11527549197583009, 0.1158003184038271, 0.1702011893710087, 0.10845601149912565, 0.12255042749941181, 0.17739673763997743, 0.13575677750313175, 0.22059890272195504, 0.20106766176414548, 0.1567093400961579, 0.1380984533595203, 0.18142127473496195, 0.2005129063912655, 0.1523922069294753, 0.10680501365704298, 0.07125024179294182, 0.13753471871518708, 0.11619625973024961, 0.09231366007653141, 0.1358317635881049, 0.1390689268467007, 0.1891803211779286, 0.11599665822085192, 0.2140145540985967, 0.1334925350401811, 0.17034974421351512, 0.1825520312478659, 0.1602196851190847, 0.18081077588370886, 0.18140374772298418, 0.1735274064911615, 0.21395127630928823, 0.1536751976495292, 9.999999999998899e-05, 0.16012182328393465, 0.15872306658847046, 0.15231059589931772, 0.15608110803808106, 0.17171844017552307, 0.14987526860468392, 0.1868033427339677, 0.1485338819135117, 0.11312867990846898, 0.16180957066279444, 0.10749458529198597, 0.14986150093102246, 0.11409844994005003, 0.13558745674151929, 0.11755954429293147, 0.12117634319089543, 0.1104026910324355, 0.10267165755511809, 0.09652509528141184, 0.10653690871847976, 0.10244457193433587, 0.13593925631680903, 0.08707241054435222, 0.08199619918335588, 0.0773021939436449, 0.1630168869358929, 0.17153599040854461, 0.15424254632420342, 0.1513848882304214, 0.1388028176311049, 0.18411888345937955, 0.1698731622926163, 0.16864688392248806, 0.17142938090580517, 0.054929447769150874, 0.0709966984500825, 0.10562114651531407, 0.05919584290011903, 0.08371730501887975, 0.053954791389210555, 0.10391535041516797, 0.06214515008514132, 0.08058941646795192]}, "mutation_prompt": null}
{"id": "e0ae723c-92c0-4dbc-a0ac-783456d162b3", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "690f2451-fada-435e-94c2-e38d361716f0", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "29afa0d8-b5bf-45b3-90cd-96ca7ced6fdf", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "ce92fcb1-5e75-4c87-b9e0-9bd10e5558e9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "65dcba02-236b-4af9-89c0-3c2023d50861", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "4a81b503-60ee-42bf-8fdc-12572c52875c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "51a360fa-a367-42f6-97fe-ef473baf46f0", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "1a0b95bf-d64f-418e-a31b-16130f8df458", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "4e4b1c48-7bf0-4ad5-abf2-bb85c9e24fe2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "59810c1f-e62a-4e46-9278-d8bee7d903c3", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "03f8b9ed-302a-43de-a052-b19914daa56e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "9b3a92c3-3b14-4b01-a070-c23ddab66cfe", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        # Precompute random indices for mutation once per iteration\n        rand_indices = np.array([np.random.choice(self.pop_size, 3, replace=False) for _ in range(self.pop_size)])\n        \n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - use precomputed random indices\n                a, b, c = rand_indices[i]\n                if a == i or b == i or c == i:  # Ensure indices are unique\n                    a, b, c = np.random.choice([idx for idx in range(self.pop_size) if idx != i], 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution optimized for runtime efficiency with reduced redundancy and streamlined operations.", "configspace": "", "generation": 47, "fitness": 0.15173311045660523, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.2831408574634129, 0.2596579128926295, 0.35436344374823414, 0.28252182597463393, 0.2041177514535224, 0.47908349531062566, 0.2704078189395137, 0.27711775323416277, 0.30860544210100027, 0.07847135578754005, 0.054164149199301015, 0.033412280352944745, 9.999999999998899e-05, 9.999999999998899e-05, 0.23731913725492582, 9.999999999998899e-05, 0.0002362266874457175, 0.1876335460111208, 0.08740322384479682, 0.06763070135993166, 0.07776017866777762, 0.08050338453446693, 0.06313920408900153, 0.0641083203520133, 0.0719945759423597, 0.07420316293039175, 0.08423054959152565, 0.07238100008331694, 0.05443991016827565, 0.07303760007553595, 0.06493977879295398, 0.042909226105330656, 0.08405871003035403, 0.08641239913615373, 0.04614138546148383, 0.06851714756192373, 0.8586824377829863, 0.7504825413770946, 0.6105993142760051, 0.8489012921365733, 0.9727755219651077, 0.8091719071032117, 0.9101377894591242, 0.6913659007025523, 0.8271771978945069, 0.12379527751876906, 0.08204635780050429, 0.17071880959756358, 0.09960070161131884, 0.10549358243521978, 0.15118890129345386, 0.13648316548831485, 0.09957015478746489, 0.2106085902890683, 0.29915739908460737, 0.13978404339279438, 0.22776535785611773, 0.21218917250452818, 0.1924001432983733, 0.20362292647548308, 0.2522895005035153, 0.1957391576354196, 0.24827373498329175, 0.042900405614669346, 0.0069371649646514655, 0.12214813743443498, 0.062430204662609734, 0.09272939134684588, 0.12475302327437254, 0.057074162733885214, 0.04082053715879341, 0.09229582566388383, 0.04780069863743397, 0.02472388134841985, 0.0730553130104763, 0.0933062878120785, 0.021262438353666258, 0.05069118861994759, 0.08375244910723945, 0.023486435549643137, 0.04218240387687511, 0.01605307827129765, 9.999999999998899e-05, 0.016914868149412232, 9.999999999998899e-05, 0.003056822538366366, 9.999999999998899e-05, 0.00014148158458415772, 9.999999999998899e-05, 0.0198390969186798, 0.103632291088399, 0.05412421338665585, 0.09358451072133978, 0.08995927956381433, 0.07292077898460103, 0.06612138616102459, 0.10199562353341718, 0.06819979194338577, 0.09757246701205291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005489732002731951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03694842738355242, 0.025975425797124863, 0.15844768819849653, 0.020653698416740363, 0.05739222574873071, 0.09198137381156613, 0.024278891225753663, 0.03439005001485729, 0.18423266394268678, 0.24055011351608568, 0.25245996451389086, 0.2706490606441323, 0.2781349905164827, 0.2650934378335491, 0.3600582169198284, 0.2573944867540505, 0.2341857238080216, 0.41231360024147046, 0.07607745021581791, 0.0671411339011112, 0.08437267035389195, 0.0713982669425175, 0.054997367842054, 0.06837961210976662, 0.06931131199091856, 0.0697245059610404, 0.06557016390747317, 0.12723009432137733, 0.11339285171889746, 0.14557632995600867, 0.14441567373469766, 0.15533998062273857, 0.13375116080487426, 0.12078668052666819, 0.12280047588101284, 0.11779686248336818, 0.20030216128609468, 0.16892852213434995, 0.2220175262755688, 0.18301294001183055, 0.16903813329286965, 0.20449425252307962, 0.22138268331505684, 0.18177773188094892, 0.1979447672932091, 0.13417316690106817, 0.14353650244756788, 0.1518411450005337, 0.11781560641099442, 0.10104043055072975, 0.13767922180237024, 0.17067689758594684, 0.12764497347696602, 0.1566403611989684, 0.1690280469338894, 0.1598155309818059, 0.1650696265259065, 0.15626683787446183, 0.1712060979865372, 0.17871885729802361, 0.18426095646545326, 0.17111477453449897, 0.16921993455143314, 0.1589841858226566, 0.19211046535428977, 0.16941928312331744, 0.16521244109879174, 0.16398431390419077, 0.1677025463057562, 0.16160125505897815, 0.16283535169892238, 0.16934902787826378, 0.15936104939313378, 0.12903580591760488, 0.12251843444734056, 0.18290899408871897, 0.13742053846907598, 0.17280735854518903, 0.13237472267799022, 0.13488406721034008, 0.14174110914721183, 0.13357679823317326, 0.1090278770724582, 0.13925724420477603, 0.15220726275854046, 0.12408214052199396, 0.18512363873331772, 0.1376305346747917, 0.16356046608272412, 0.12623857441003605, 0.17714598929138714, 0.21941459218418413, 0.19482473546712276, 0.18265784576316424, 0.16532164838023544, 0.16279162100176714, 0.16454517467989427, 0.18436852154076788, 0.19745942212913858, 0.06359191596703184, 0.06429142320347259, 0.0675391216879847, 0.07584611538807695, 0.05689036713396978, 0.05482689613072744, 0.07295682845950213, 0.05635437170018576, 0.07317975716185265]}, "mutation_prompt": null}
{"id": "a2335258-b827-42ff-a21e-4552e5316d38", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "99692131-4a1d-4f8b-9a97-174ac65b1d6b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "36f2deca-d171-4cd6-84f7-0cb2755c964e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "8eb1a1f2-41ab-4849-a10d-bc6f37d7be6f", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "0ce7aeb3-2da8-4059-89d4-56d5afb6f52b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "bb2084a5-7586-4bf3-90b5-ff7356d8159e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "c08546e8-c3e7-4b0a-90f6-7c18cd6473f5", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "d813894c-0196-4481-8613-84bcc7daeeca", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "267954cd-7de4-460c-893e-91f88a6de4af", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "5e5b4152-ca15-44de-a805-280dcd0fd38a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "377d668a-4324-4cee-a70c-2b68530f9f3f", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        # Precompute indices for mutation to reduce overhead\n        all_indices = np.arange(self.pop_size)\n\n        while num_evaluations < self.budget:\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = np.delete(all_indices, i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover using optimized mask creation\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Optimized Hybrid Differential Evolution with Refined Mutation and Efficient Loop Management for Enhanced Runtime Performance.", "configspace": "", "generation": 58, "fitness": 0.3851136032831753, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "035a1e38-82c4-4873-aa06-22bb28de98f5", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "655ef758-0af7-43f1-b58d-319f444d3d8a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "6a55fa95-f75c-49bc-a335-d69868a2b62d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            # Vectorized mutation and crossover\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            a, b, c = idx[:3]\n            mutant_vectors = population[a] + self.f * (population[b] - population[c])\n            mutant_vectors = np.clip(mutant_vectors, self.lower_bound, self.upper_bound)\n\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.cr\n            trials = np.where(crossover_mask, mutant_vectors, population)\n\n            # Vectorized fitness evaluation\n            trial_fitness = np.apply_along_axis(func, 1, trials)\n            num_evaluations += self.pop_size\n\n            # Vectorized selection\n            improved = trial_fitness < fitness\n            population[improved] = trials[improved]\n            fitness[improved] = trial_fitness[improved]\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Optimized Hybrid Differential Evolution with improved runtime efficiency through vectorized operations and streamlined loop structure.", "configspace": "", "generation": 61, "fitness": 0.06946242303429083, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.13440875335319502, 0.08846426339825142, 0.16715885576513445, 0.14896549055893016, 0.17436493121897745, 0.22462544203031165, 0.10784355548512425, 0.147042334948435, 0.11028719871744563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03174856682628868, 0.03177439913592994, 0.023605846746477033, 0.04003494658439688, 0.04474665716638426, 0.04702469496569106, 0.03901333654999506, 0.024002071785912404, 0.033649268653135334, 0.03713719672751681, 0.03405006617117756, 0.05846735126595959, 0.03954051903506428, 0.02297109859674551, 0.028970700548989203, 0.09220617426477007, 9.999999999998899e-05, 0.0031939686997253247, 0.08169633301328283, 0.07275841921717752, 0.06304636029955779, 0.0763762501480687, 0.06375342860777422, 0.08064756660304029, 0.06648083019480777, 0.06945598174298939, 0.07291325391081449, 0.06647332290725627, 0.04870219380005514, 0.03609551549795231, 0.01939394517065962, 0.0031268983159313812, 0.05116993662428593, 9.999999999998899e-05, 0.022826835574670468, 9.999999999998899e-05, 0.10048362652097276, 0.08395663470151649, 0.06719122380729226, 0.149571211931548, 0.09824130397763076, 0.10835256364180879, 0.05453045359390396, 0.06108397607088978, 0.08666937653486462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00571176413622887, 0.030986599535900106, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783802818696169, 9.999999999998899e-05, 0.029941186268786946, 9.999999999998899e-05, 9.999999999998899e-05, 0.011599544452714161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04452183299562207, 0.00971716394805211, 0.011298121932619143, 0.011719190179580452, 0.0164355086046164, 9.999999999998899e-05, 0.0010440769777542158, 0.030784966269403413, 0.044127855147410244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18876891456325096, 0.16348431843896816, 0.1629252388088629, 0.14890334017269213, 0.15829520087929128, 0.15085191695563083, 0.18908478379552052, 0.09744489311817273, 0.17155045793772328, 0.015588157127106705, 0.02551716187083186, 0.07400875749053015, 0.034523866258405755, 0.020330678228961507, 0.05030058432863205, 0.03537226217467049, 0.026327401951046547, 0.028933971738326902, 0.13766798770498967, 0.11479059749814025, 0.14684381128501722, 0.13265179730301935, 0.10852972522114013, 0.1105633473497093, 0.0952019574641052, 0.11402154452007418, 0.096414067255708, 0.1325435481849998, 0.16317363315842381, 0.17334843492442364, 0.21003204735952252, 0.14655158724413486, 0.1337408145534662, 0.13101712900417184, 0.1925889976539823, 0.19128053772633047, 0.09829317673985116, 0.07594204182329489, 0.09235046585142392, 0.09497736650455768, 0.10431508627445929, 0.08542110207563147, 0.13012393737511063, 0.12654060087279317, 0.07513446904905685, 0.16960170134107744, 0.1368907355620973, 0.1681923519252959, 0.12110782498383965, 0.14805932924864595, 0.1452778898726279, 0.14355766944662884, 0.13478849758790168, 0.12846320497133545, 0.12667696631910152, 0.129368290655272, 0.14151667650482846, 0.13410312337359775, 9.999999999998899e-05, 0.13209288268465025, 0.1536568234293203, 0.04886073494943777, 9.999999999998899e-05, 0.11073491007735414, 0.11032130082852654, 0.09525118348756989, 0.11451438759492771, 0.1255910091617346, 0.12857960010084057, 0.10917574250912365, 0.10561072781154257, 0.15905321904607395, 0.21154979649273353, 0.10469909258599452, 0.07078764800536341, 0.08489960715584943, 0.06630574444344928, 0.12330092906488155, 0.0817528493028995, 0.07970647432012046, 0.08315944049004775, 0.14156669039661796, 0.1653045329785897, 0.14763022729669195, 0.1513848882304214, 0.16338316060783586, 0.15883102460288523, 0.17809874334860543, 0.1579449159042453, 0.15501804573888878, 0.04882656298347887, 0.021653661555374182, 0.04576682297083934, 0.06817988826651966, 0.06565982562046613, 0.03793518083666236, 0.033366766870937314, 0.03814859683928684, 0.04423701233152155]}, "mutation_prompt": null}
{"id": "af62afb4-4162-4370-b2ba-258272a4871c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "054c2002-2809-4654-9c04-56482ddb0250", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "16c2f0a2-125c-4ef9-80c6-af283abecc26", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "f03ddccf-0edc-49ca-9396-a453ee7d14fa", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "7aee579f-d143-40f7-9356-945c92a7cd30", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "9680b504-52dc-4175-bae7-c0c0a3127a62", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "f8a54160-d937-4e6c-82fe-acbc434cc4c2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "e3a5d06a-5fd2-4011-8942-425a67177478", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "ec67db33-561e-4060-99b4-ae4d4dc5ba70", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "d2c53096-67e7-4f3c-8f4e-eeb12ed7a547", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "fef8c504-a280-4a2f-8bbd-d18341055db3", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "75a425e5-7f23-4564-b57d-f3afb0229736", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "566b82b3-b61e-436d-a5fe-143d079221c9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "0b09a1fb-9a59-4fde-abaa-c36b970ed726", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "57910a26-6d6f-4e97-a073-06c7d2956da9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "d7821702-db27-408d-9ea2-c834ca388dcb", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "c2963e9c-c235-4f65-94f5-5b24f850f937", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "b71b60ed-395f-4cb6-b5f9-3feeffadb220", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "883deec0-c36b-4a33-8145-41b56f994096", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "4b4a22ab-9eea-41d3-a80a-c70bc5175313", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "940d7d2a-3dd0-4c8d-beae-74cce5077613", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "b62077fe-9bba-4866-a09b-caedcd4fb408", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "db2a4508-c998-4901-8c33-175ee4703c30", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "e73b901e-25ce-4f6b-b677-d1aa3cad8e0b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "f1b206df-b41a-4a53-9126-4feb74dd3ea8", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "41c39a0f-24fb-4064-a973-4de54347cd69", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "12d919bb-fecf-48b8-9682-eb483d80859b", "solution": "import numpy as np\n\nclass OptimizedHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            np.random.shuffle(indices)\n            for idx in range(0, self.pop_size, 3):\n                if num_evaluations >= self.budget:\n                    break\n\n                i = indices[idx]\n                # Mutation - choose three unique donors\n                a, b, c = indices[idx:idx+3]\n                if len({a, b, c, i}) < 4:\n                    continue  # ensure unique selection\n\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "OptimizedHybridDifferentialEvolution", "description": "Optimized Hybrid Differential Evolution with Efficient Population Update and Calculation Reduction for Enhanced Runtime Performance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('not enough values to unpack (expected 3, got 2)').", "error": "ValueError('not enough values to unpack (expected 3, got 2)')", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {}, "mutation_prompt": null}
{"id": "84ea3d5f-97f8-4b93-a80b-b98dc11e6c70", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "88b9ca9f-f9d0-48e1-9a57-fe515967cb99", "solution": "import numpy as np\n\nclass OptimizedHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            indices = np.arange(self.pop_size)\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = indices[indices != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                np.clip(mutant_vector, self.lower_bound, self.upper_bound, out=mutant_vector)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "OptimizedHybridDifferentialEvolution", "description": "Optimized Hybrid Differential Evolution by minimizing redundant calculations and improving loop efficiency for faster convergence.", "configspace": "", "generation": 90, "fitness": 0.3851136032831753, "feedback": "The algorithm OptimizedHybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "9b9667cb-4836-4a19-9e28-97f5e0ffd0f7", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "213ea052-873c-4614-8fca-f439df24a799", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "59865485-5829-4ff9-91b8-59fd8d1ef9ba", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "55d21ace-a529-427a-9f65-e8426cc04016", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "8631b206-bdbb-4a64-9c12-ae5e777c2181", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "16f087a8-6035-4e99-a1c0-d68957b570a1", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "9e7b237f-5f87-45c9-9bbb-163f54d311bf", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "7cd9b3f4-9019-45cd-ab33-cfd277642640", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
{"id": "b6bccdd1-288f-4020-aa6b-f028c0300792", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover probability\n        self.strategy_switch_ratio = 0.5  # ratio to switch between exploration and exploitation\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.pop_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation - choose three unique donors\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = population[a] + self.f * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n            # Adaptive mutation strategy based on evaluations\n            if num_evaluations / self.budget > self.strategy_switch_ratio:\n                self.f = np.random.uniform(0.4, 0.9)  # switch to more exploitation\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fddbd2af-f303-4e34-8819-e65bf2076661", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6343860045413179, 0.6897291160620104, 0.6828773998362974, 0.6956870235625501, 0.6835412928896232, 0.7013311716044988, 0.6641150980076634, 0.6778096485996337, 0.6847353093339508, 0.12403045982819827, 0.12240434395356681, 0.1413708514153692, 0.10141118937158045, 0.10990597070105612, 0.13423531868805016, 0.12202125161392596, 0.11856810782336269, 0.1154615471944157, 0.09939410462652454, 0.11201787218392223, 0.1018676631657156, 0.10181967974154726, 0.10128356956067563, 0.12620064511139295, 0.10788723423204338, 0.1154478571528662, 0.1070050166592682, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.4800428990455943, 0.47697400651249333, 0.45288288457458203, 0.45334982189935535, 0.4277271939458469, 0.4560974704423304, 0.46629097012628906, 0.5327357482272268, 0.5424271168755661, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.4486908198914895, 0.3236554889037818, 0.2512941491393863, 0.2801050730261909, 0.25671708100561663, 0.30129377545082847, 0.3505721157110411, 0.4034748695229531, 0.2930055931626274, 0.23910786925016858, 0.4143889612954632, 0.3665212389269932, 0.3292835895349736, 0.21600499572831944, 0.3639583814843521, 0.37854336315623793, 0.43228652061866424, 0.27188831185813644, 0.4230022348985023, 0.4189836725820614, 0.36813268531431964, 0.4229107752778951, 0.41676927511571926, 0.39547134456969046, 0.391076373113173, 0.40142087693912876, 0.41950184687555125, 0.5215710439765876, 0.575796419903619, 0.5065153889440901, 0.5737787789756927, 0.532028427442337, 0.5489895316116111, 0.557607295502939, 0.641242705923051, 0.534963812517673, 0.18888907468630578, 0.10817514666635619, 0.11442898636973187, 0.18111047034975902, 0.2532890953731105, 0.24262061121072287, 0.15766368066823433, 0.18203030382303775, 0.15830531792578495, 0.32538167949819363, 0.32929775124154004, 0.3077109057627736, 0.3347562359193914, 0.3468068497487392, 0.3336476482447107, 0.3059145529772749, 0.3463179080338362, 0.2960560756740742, 0.7107491234316026, 0.7315257192093525, 0.746908819760641, 0.7109895201333817, 0.7151932433751969, 0.7526185677151143, 0.7046562414824935, 0.7118438700886637, 0.7246300954791338, 0.09655298158755155, 0.10507446696323897, 0.09353311324136415, 0.0958018647433686, 0.09586568690742536, 0.11200468208941328, 0.11394309468458719, 0.10242923561651973, 0.10926195124569171, 0.1668445090052374, 0.13351492146696564, 0.1500963471074367, 0.1688104707531125, 0.1718878182000242, 0.14384483069959897, 0.21261120626912644, 0.16285552317618734, 0.17661305217045742, 0.3927881951079959, 0.4140270556756176, 0.44189502054821805, 0.3635444409779637, 0.4157649711906328, 0.42416868220028625, 0.4254957574731628, 0.4632466630581886, 0.45612631106101587, 0.3258448232878588, 0.3312894245808887, 0.3199966618433139, 0.32515280728212625, 0.30021450521383986, 0.32373732974028013, 0.3491322051648945, 0.3452022396165295, 0.32707013643811533, 0.20704137607636652, 0.21476317805421452, 0.19070833445972313, 0.20720838202013414, 0.22689532950204405, 0.19473160316088522, 0.20433733024186573, 0.2083372133388951, 0.2084374266206721, 0.19672433026460034, 0.20413404892491072, 0.19190614230286618, 0.18176444401165448, 0.21208767730523836, 0.18894166454980266, 0.19105039462553963, 0.19445094723856293, 0.19335305020855365, 0.6717733202294587, 0.19796940312011713, 0.19251605026788177, 0.6088988668209658, 0.7234653051791861, 0.1786098066467755, 0.5609221158606296, 0.1711745860106998, 0.18106701915194812, 0.6868327140354242, 0.5036964752590709, 0.710391785663764, 0.19791888031743532, 0.2012540407259653, 0.70839429766416, 0.6376564383676365, 0.15061184268801575, 0.21044711928069626, 0.19431163605061297, 0.18846385284155953, 0.21371843256686773, 0.18181287540613544, 0.2054013654456397, 0.17020191541248075, 0.1958685708189951, 0.18886541357274933, 0.18844547691390823, 0.07726158872844657, 0.08681445066925175, 0.08286345113236604, 0.0756320071828872, 0.08129940914945089, 0.08619801121010329, 0.08386006488352926, 0.07792688422379801, 0.0769675714416066]}, "mutation_prompt": null}
