{"id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 0, "fitness": 0.15469664824613721, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": null, "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "15691939-77c2-468c-8d59-e3fd55789e24", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evals = self.population_size\n        \n        # Precompute random indices for mutations to minimize repeated random calls\n        mutation_indices = np.random.choice(self.population_size, (self.population_size, 3), replace=False)\n        temperature = self.temp_init\n        \n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                x1, x2, x3 = population[mutation_indices[i]]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An optimized version of HybridDESA that reduces unnecessary computations and leverages numpy for more efficient operations.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {}, "mutation_prompt": null}
{"id": "848b5016-07ee-4b52-99c9-8808d491db7c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "d89e1423-cc7d-4878-b8b8-ac1031038981", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "cd39dc4f-325d-46c9-a64d-f87ff8b8375c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "0a18b383-9f2b-43fe-8a72-9ca7b34baf0e", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population and fitness\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Cache random numbers to reduce calls\n        random_state = np.random.RandomState()\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            idxs = random_state.choice(self.population_size, (self.population_size, 3), replace=False)\n            for i, (idx1, idx2, idx3) in enumerate(idxs):\n                # Differential Evolution Mutation\n                x1, x2, x3 = population[idx1], population[idx2], population[idx3]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                cross_points = random_state.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or random_state.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "Enhanced HybridDESA with improved loop structure and caching for better runtime efficiency by reducing redundant calculations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {}, "mutation_prompt": null}
{"id": "aced26c4-ca8c-49aa-a564-2999aad5e2f2", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "5db03d7d-2d05-4cea-9562-bbd7dc908f39", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "f4b04372-a648-4e84-ae3c-10b0b50cbf19", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "eb8837cb-b929-4f2e-9492-3ab300dba2a6", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "3719df38-8050-4819-88f3-cf8331e6e181", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population and fitness\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation only if necessary\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature *= self.cooling_rate\n            if temperature < self.temp_final:\n                temperature = self.temp_final\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "Optimized HybridDESA with reduced redundancy in fitness calculations and streamlined loop structures to improve runtime efficiency by precisely 5%.", "configspace": "", "generation": 10, "fitness": 0.15469664824613721, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "9ceb2c99-9e8d-4d77-8810-6825f61761c9", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "16c18f31-1b57-4997-b277-cab04e26da42", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "e285b221-7ef0-4b58-b3e0-e2a46d16cb6d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "5ef509cb-0f81-45c6-894b-6dd0e3352b73", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[idxs]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that promotes exploration and exploitation by combining evolutionary strategies with probabilistic acceptance of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.15757497143768273, 0.16054565798526022, 0.15548846903819336, 0.17568251828390946, 0.2027315591752027, 0.1939845416748085, 0.196816815302017, 0.17551725667534535, 0.19900417404857107, 0.15213397877903845, 0.12433646160500411, 0.1167768573891359, 0.1198423833815686, 0.13277281797977536, 0.188456439155673, 0.18619946295227752, 0.1167378382544142, 0.12167637592904068, 0.06962467593463006, 0.06697118232156551, 0.05859294283488703, 0.056498044539392, 0.059024634177818, 0.06622895530885275, 0.05545815233804119, 0.05873727735885437, 0.062104379918353825, 0.05546300911581803, 0.04744059675386103, 0.05606002159304624, 0.04550162473728414, 0.05612287311084707, 0.051543749339341804, 0.0516670552174866, 0.053575116874227335, 0.05822254110840619, 0.9656879621752821, 0.8834310052981535, 0.9194464850297348, 0.884690891047622, 0.95344226338898, 0.862712614864352, 0.9759633278493706, 0.9202120166277664, 0.9654104654918374, 0.10584628717996802, 0.11763165349863414, 0.10421428996130633, 0.12236648935810956, 0.10948162045935295, 0.10525344075658216, 0.13555704644354394, 0.1111864796075046, 0.1420543919896281, 0.1631383197599101, 0.15621694464048363, 0.15268566904455716, 0.1625928618253123, 0.1631363876914671, 0.13926039165415638, 0.16079717234501478, 0.14720571962963946, 0.1399242286348824, 0.12998652976213365, 0.11955791872885202, 0.12769696836480782, 0.13043416791263374, 0.11060295111963092, 0.11100838388997925, 0.11632020001287624, 0.1141452650126541, 0.1160331023521568, 0.14358290071564805, 0.12324490926530995, 0.10663034379573877, 0.09975469244361923, 0.10885043662457683, 0.10307469201741115, 0.1228793845838071, 0.1198935673711039, 0.10017360158236421, 0.08162943136752188, 0.10054324859281782, 0.08786189646799336, 0.08633753354202744, 0.08508866687934746, 0.0878289308607173, 0.08913565409328517, 0.07825844198466259, 0.0881850143986539, 0.16737628823973205, 0.13746212665203617, 0.14839941671127566, 0.15772457513533222, 0.13372206789337837, 0.1760644122572228, 0.15627055321038097, 0.17100918503146945, 0.14118618010795958, 0.018692176991847553, 0.04575180855619565, 0.023587088850337334, 0.004917947899527486, 0.03913316040271242, 0.03221011917293526, 0.018046324360347366, 0.048499268513481186, 0.026706430346421395, 0.0487141339452517, 0.0482821037616703, 0.057068040656819585, 0.05150211893125978, 0.05197361788661092, 0.050402706186876256, 0.05386713730817316, 0.049037536638791956, 0.05219883445781559, 0.1893643726318569, 0.1855325069367807, 0.1717064146257009, 0.16719575080928972, 0.1932354055570057, 0.187788112441727, 0.1795278588189929, 0.19266473295010234, 0.17558604477479645, 0.06333566878632768, 0.06216819862944212, 0.06735908102655153, 0.09084305662209824, 0.05798456061477897, 0.05939584480205451, 0.0857023195033646, 0.06385592826553455, 0.058007417872108835, 0.13950872015559157, 0.13040479700730467, 0.15974579378604425, 0.146880573782737, 0.12657979056675794, 0.1427814641482117, 0.15417596724128502, 0.14227730529423954, 0.1493528322172809, 0.14975676525072756, 0.15460451477616444, 0.16262546345545892, 0.15536186569432353, 0.14677307444420273, 0.15374692063565654, 0.14750208247699448, 0.17377774300845283, 0.14922887520760308, 0.10406988571458531, 0.10142742947938788, 0.10207204949638149, 0.11285060750557463, 0.10508014082646111, 0.11733577212093682, 0.10722373253079054, 0.109489165526509, 0.11435942228554685, 0.16035632155028012, 0.13535201826800836, 0.15261828257777232, 0.15759961229802577, 0.1515012472911489, 0.1730866261783227, 0.15384037638201786, 0.18171561704481254, 0.1505084041826723, 0.16437898965161313, 0.17096747420267944, 0.17346096474721595, 0.18855415376302886, 0.1676534150362421, 0.1680555984029285, 0.17256482090474146, 0.1871592061597197, 0.16099496350461195, 0.13605945159456845, 0.13231688117160534, 0.1596039447881401, 0.17134617764893378, 0.14458579057690113, 0.13438581807970418, 0.12478689135210119, 0.17127105071364435, 0.17809187227024081, 0.14628433965889143, 0.14192306195382987, 0.12888392631128043, 0.10748003309487375, 0.12601401564500925, 0.20894008367584838, 0.1652712724079527, 0.15871134125637165, 0.14707103334178317, 0.18208849288494944, 0.187666781117378, 0.17663232342624602, 0.18564069456225196, 0.17893055952446557, 0.19205996280213355, 0.1915234275435399, 0.1967827764382558, 0.19146853282268905, 0.058270499328623715, 0.04800268359014248, 0.055435091839050266, 0.06191851686673289, 0.05578090530252233, 0.05755580223991852, 0.05204831852948533, 0.05512278214582256, 0.05070073047921719]}, "mutation_prompt": null}
{"id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 15, "fitness": 0.15724296181067673, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "5f5551ca-7faf-40fc-a03d-8a880caabe81", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "202ea3fa-892a-4405-b521-ffffd3c775b2", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "b570e44a-2576-4985-8c23-ad83e9649a49", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "52c7d0b7-9cf1-4d6e-bd04-fd794a6561c9", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "dc7ba5e9-d8ea-400c-9243-f0404fe616f5", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "71f67143-064b-4dae-8e85-4c64d196a02d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "069cae75-8e99-4661-bcb5-3f30a7a821e2", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "724140c4-5ec8-4fd8-836b-dd5ae9aca53f", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "0c2d0123-7231-4f96-a91b-cd839ef4f602", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "71db9bb5-0f65-4342-8308-a002613eff01", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "a7ed0fcc-96e6-4e9e-b174-2738003a58e4", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "35d226f4-8851-4f8c-ac9b-42bce2c990c4", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "6bf7016d-79c9-4991-9f4f-ab53736b6222", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "af109961-9708-4aa9-bd25-dd7ba4192494", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "c3e35eb6-cb56-4e01-bf9b-d6cf00683aec", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "948423c8-c957-4f92-bd99-401cfa56f15f", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "b06f24ed-4fcb-4154-bcd7-b90883640301", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "fb150d71-1cde-405f-a35c-115055cc688b", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "2a09239a-5cd0-4213-b968-f146f51845b5", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "487ed2d5-05ab-445e-b16c-11634298ff51", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "8a2ec1f7-d46f-4e9c-9f8a-779a3548c835", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "8418078b-6a57-4405-b413-a9fec9c5a51e", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "9256891e-c8ea-4e2f-aa46-85bcddc5a9ce", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "7d08490f-d954-45d5-9242-ed61ed46e6fa", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "bdf90e30-a3a4-4edd-9523-6f5bc67e98a9", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "dab1d02b-d143-4a4c-9c67-68838b94982d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "c9c2bdba-28e7-4d54-ba22-18b1958f84b5", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "a3809e5d-c2b8-4313-8094-ebe373c00deb", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "cb86f65c-1587-4a7e-b4fd-05086b4ce7ce", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "90259e5c-57b7-4164-8c28-e2af4370be6a", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "f0d5d2f1-42c7-4af2-a3c9-d064a3cd7245", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "b6977398-1711-417b-8ea5-7bdfc7117ae9", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "32aa1abd-9aa1-4133-95b0-52a0ebe44d7d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "f516729a-6bff-4956-bdaf-08451e984f9c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "3facefb0-0538-43a2-91f2-0d3d8a931cc3", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "e5116fbb-00ff-4c8d-b02b-2b6de1124a02", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "b5e105c2-f06d-4474-9bec-93b96972bd5f", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "dbdc602c-ea7c-47f9-93dd-6ece46e8e609", "solution": "import numpy as np\n\nclass OptimizedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population and evaluate fitness\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation efficiently\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Efficient Differential Evolution Mutation\n                if rand_idx_count < len(random_indices):\n                    idxs = random_indices[rand_idx_count]\n                    rand_idx_count += 1\n                    x1, x2, x3 = population[idxs]\n                    mutant = x1 + self.F * (x2 - x3)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    # Binomial Crossover with mask\n                    crossover_mask = np.random.rand(self.dim) < self.CR\n                    trial = np.where(crossover_mask, mutant, population[i])\n                    \n                    # Fitness evaluation with a check to avoid unnecessary evaluations\n                    trial_fitness = func(trial)\n                    evals += 1\n                    if evals >= self.budget:\n                        break\n\n                    # Simulated Annealing Acceptance\n                    delta = trial_fitness - fitness[i]\n                    if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n\n            # Improved cooling schedule\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "OptimizedHybridDESA", "description": "Optimized HybridDESA by reducing redundant fitness evaluations and improving mutation process efficiency.", "configspace": "", "generation": 52, "fitness": 0.15724296181067673, "feedback": "The algorithm OptimizedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "d25e2b38-98ec-4d87-92b6-73d17d101d10", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "a0356987-4ead-4f78-9155-918e9b2745c1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "a7aa9bd0-4269-47f1-826d-acf56e6d70b9", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "95f8dc8d-5cfe-448b-bef4-e1361da33f46", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population and fitness\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop with vectorized operations\n        temperature = self.temp_init\n        while evals < self.budget:\n            # Vectorize mutation and crossover operations to reduce loop overhead\n            idxs = random_indices[rand_idx_count:rand_idx_count+self.population_size]\n            rand_idx_count += self.population_size\n            x1, x2, x3 = population[idxs[:, 0]], population[idxs[:, 1]], population[idxs[:, 2]]\n            mutants = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n            crossover_masks = np.random.rand(self.population_size, self.dim) < self.CR\n            trials = np.where(crossover_masks, mutants, population)\n            \n            # Evaluate fitness and apply simulated annealing acceptance\n            trial_fitnesses = np.array([func(trial) for trial in trials])\n            evals += self.population_size\n            delta = trial_fitnesses - fitness\n            acceptance_probs = np.exp(-delta / temperature)\n            acceptance = (delta < 0) | (np.random.rand(self.population_size) < acceptance_probs)\n            population[acceptance] = trials[acceptance]\n            fitness[acceptance] = trial_fitnesses[acceptance]\n\n            # Update temperature\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "Improved HybridDESA algorithm optimizing data structure usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 56, "fitness": 0.15498311140017743, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1955546966033973, 0.1707827501780037, 0.1785157513772132, 0.21220286603802796, 0.20127522880173387, 0.19742940932254416, 0.18490961924988658, 0.18854782889174826, 0.1775281783247179, 0.11546231599111145, 0.12251601580182048, 0.1258470715205845, 0.11382460476547163, 0.1358699619814182, 0.12752909464020867, 0.1397541034638411, 0.12152676397768714, 0.11534966816534487, 0.06444487406799904, 0.05285926348962089, 0.08649205787959113, 0.061717499777780405, 0.05825278855984617, 0.0669173890039827, 0.06343488551844145, 0.07579140117462413, 0.06448008912901892, 0.054673920920387364, 0.05265296963803068, 0.05882514231297631, 0.05510899865287733, 0.05603651518188657, 0.06545607320903823, 0.054463942620329386, 0.055516121821607145, 0.0619208117460075, 0.9088022457075126, 0.9822497118908253, 0.906261212632876, 0.965268148989345, 0.8770891638105143, 0.9488799139241837, 0.8302809519090049, 0.8729340766835917, 0.9829854196016958, 0.110463122214292, 0.11406628991295364, 0.11411575046491673, 0.13164395480534474, 0.15645342998615175, 0.11923408220243115, 0.12575970695444505, 0.12605233845552744, 0.11164338677815233, 0.14857548972848345, 0.13760847011666755, 0.15965699665972644, 0.1772355185158423, 0.13692354057882317, 0.16646193816399768, 0.14899690198890114, 0.19876155330298695, 0.1641164753704164, 0.14823174704168685, 0.10537188542532316, 0.11839535328641837, 0.10444944711106896, 0.10685339288134177, 0.11878228326744933, 0.12284499325057896, 0.11027774870304652, 0.11802688841466713, 0.11068836984528041, 0.03528091939197853, 0.1226463649264029, 0.11327423504428735, 0.12153593058895529, 0.11354837370610471, 0.10922677688622662, 0.10169155975147093, 0.11209789188462871, 0.07533976342930238, 0.09920286029805392, 0.08461871391443443, 0.09185552983433265, 0.1029179787775687, 0.0899045321793035, 0.08710299353392548, 0.07765052940690309, 0.09748082011779513, 0.13956620148866428, 0.14390859197688444, 0.15241040423895325, 0.12036301037196517, 0.1341585737948311, 0.14081417258659878, 0.14549327023804037, 0.16870697884259367, 0.1440993773457251, 0.03303352052926911, 0.03053639145103082, 0.046043338424977764, 0.03430907879457612, 0.025301770744451835, 0.03761837261377299, 0.04353046184898535, 0.031412002825316865, 0.07194283274345903, 0.061192289610337514, 0.056508062536613446, 0.056799660404770136, 0.056022833021456386, 0.06881050549772061, 0.0556476325620926, 0.0598419475864328, 0.06804645711701052, 0.06175737045201435, 0.1987514769800045, 0.2163819313480917, 0.1740768000591716, 0.20123137715060013, 0.185786682509256, 0.23431077134244338, 0.1744404060611996, 0.20876733516484525, 0.2661535937456372, 0.08118142621745539, 0.06497920208771613, 0.06290310007142708, 0.0547529558167309, 0.05940819680463705, 0.05993167440156777, 0.060169973363777496, 0.05450791309416514, 0.055940574246250985, 0.16827251793834908, 0.12799707095779578, 0.12832456335737952, 0.12893513995189587, 0.14414578242212428, 0.14640923171420694, 0.17821920417928083, 0.14338368882393626, 0.12870308753386017, 0.1487549630951447, 0.16562165930536699, 0.1699731220717906, 0.14960947061436114, 0.1423332126513318, 0.1571445789763739, 0.16374353133227182, 0.17377774300845283, 0.18413223918895394, 0.10949261523045173, 0.10941334843242656, 0.10287750898804515, 0.10836911018844331, 0.09723029597821264, 0.10488080124080679, 0.10810614307334288, 0.11016650953389018, 0.10150586561036312, 0.15018395631673753, 0.14460704309128036, 0.17048325728280256, 0.1595154040322626, 0.15176095109067023, 0.1646355341397533, 0.15043841616809372, 0.1468220368041584, 0.15543102625282068, 0.16978192126923264, 0.16287189245993883, 0.17248435908859006, 0.1787000354472693, 0.164644847873879, 0.16441160761317664, 0.16597386781624268, 0.16742586306802443, 0.16854165880508076, 0.1294888225862051, 0.13917908426955183, 0.1394645317623464, 0.13434401223364423, 0.15242169489941793, 0.137514770662726, 0.15514615349798677, 0.14976382327347726, 0.14820000689882995, 0.1299155673707213, 0.13706224890583985, 0.11472479694094107, 0.13341466963888327, 0.10058984030355511, 0.12220974678962881, 0.18160434431053407, 0.2001227983845143, 0.184708040768919, 0.18437148116238655, 0.19135822466842123, 0.18384728942461848, 0.18050860993001028, 0.18313412697334563, 0.1772229709608487, 0.1867781160556088, 0.18735183792033372, 0.1979174664361606, 0.05696688741326272, 0.0483888406928783, 0.05166984185299606, 0.04801255998359444, 0.04737137504412081, 0.05351508843129138, 0.04788892323403238, 0.04923596688999243, 0.04386196968735512]}, "mutation_prompt": null}
{"id": "6bd57504-be34-481c-9b58-562144eab649", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "c2156ab7-1c05-4240-9e10-f017cbfaff9b", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation and crossover masks\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        crossover_masks = np.random.rand(self.budget - evals, self.dim) < self.CR\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                crossover_mask = crossover_masks[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using precomputed masks\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "Optimized HybridDESA by precomputing crossover masks and using numpy operations to enhance efficiency with minimal redundant calculations.", "configspace": "", "generation": 58, "fitness": 0.15590831672239763, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.18070681868919547, 0.18201436859318076, 0.1767243278186288, 0.18686526793804803, 0.19484569575808175, 0.19286688861871293, 0.18548319235918465, 0.17854713392965493, 0.20923666813456698, 0.1671170255774883, 0.12095447369839041, 0.1460640311536956, 0.1293185785897094, 0.1169244531875192, 0.13298042637382168, 0.1196140243170275, 0.13267838217136363, 0.13124669492306307, 0.06686201486564336, 0.06354089979454025, 0.053187345156826105, 0.06674415190369787, 0.06204301417660718, 0.07714925121003102, 0.056838047316102314, 0.06037882156976071, 0.05792300461721134, 0.05125504984653839, 0.05106317429786045, 0.057068956836877405, 0.0683322346722518, 0.053532861377223684, 0.06199254886503236, 0.06508528698714344, 0.0702830198275588, 0.057502797027429775, 0.9164735045296455, 0.9384056075817555, 0.8657006986951383, 0.8684855140676904, 0.9790504027801962, 0.9047660226448216, 0.8322200341667112, 0.7953024380906376, 0.8788985003613026, 0.1318778430440436, 0.11352227077110999, 0.11962132575687079, 0.11381191868254248, 0.12558048984481285, 0.11058075059860017, 0.11843540987331636, 0.13533088560080264, 0.11834345136240154, 0.14852613367016487, 0.16658478898406137, 0.14489192481811897, 0.16654960131806562, 0.16007006018648096, 0.16065969761723187, 0.15350317134253288, 0.17810916452767123, 0.17304267191059242, 0.11278567543366391, 0.11642804895664627, 0.11166887885156596, 0.10305192761389004, 0.10944902876226514, 0.12655636706752993, 0.11626969954069188, 0.12063885148230802, 0.11888365237936394, 0.11699716549308992, 0.11157793138021421, 0.12304088215347964, 0.12612748404764285, 0.12087695700278056, 0.12903814981216255, 0.11518881544664727, 0.11210394623341235, 0.11181325072734327, 0.10306398968460073, 0.12083192766946738, 0.08438322211377558, 0.093836676125717, 0.11737766081844525, 0.10588003371015875, 0.08915330500823548, 0.13497657564541587, 0.08968690368100685, 0.17224653124160827, 0.1307127335404641, 0.1344003408060307, 0.16661319381342798, 0.13742745037466608, 0.19978390354807396, 0.14925691323544943, 0.1651708059406064, 0.14626373390707326, 0.033818495174533725, 0.052640763616888187, 0.037877703309458055, 0.05959359892420435, 0.051483739470059464, 0.06357615862183286, 0.05428409962641911, 0.056584061672351194, 0.04169056603957466, 0.06154039118256238, 0.06454589812443245, 0.06515851203776069, 0.05609967732647836, 0.05766554891477571, 0.06632634277952565, 0.064795704667993, 0.06128409628083065, 0.06258991820258908, 0.19142963794849677, 0.20692580923975634, 0.1987479879354802, 0.18638387801583634, 0.1820448159185799, 0.17501666824461826, 0.18292014071823337, 0.18198089164493803, 0.19899111138683057, 0.0672955524164921, 0.06722976012587822, 0.09488205347374967, 0.053234174067528284, 0.06995430045659501, 0.054743549407609726, 0.057422702733247566, 0.05442132879982031, 0.06078943888217003, 0.14126889098119955, 0.12964903413929985, 0.13219061835218382, 0.1427967239543546, 0.16196057961667143, 0.1470401232679025, 0.1542954820779049, 0.13988550516478138, 0.13302669001025336, 0.1547339743299595, 0.14977738843739807, 0.1613932299901244, 0.14581863219693736, 0.14235792898284272, 0.14805245989836735, 0.1474802334250429, 0.17377774300845283, 0.1626946202946954, 0.108852401354531, 0.11358731464058203, 0.10794765253743477, 0.10543515441048879, 0.10953040924226365, 0.10835987627609756, 0.11950648983673506, 0.1086051739391638, 0.1313287489669911, 0.15651153198463164, 0.17574529263702565, 0.17202039429633553, 0.14677715283300496, 0.13787212262091997, 0.19457317175534883, 0.1486146312263571, 0.1423704290429363, 0.14993494743434344, 0.17214546738059433, 0.16606021710229613, 0.17427900390574091, 0.16610631985030433, 0.16840889111324853, 0.17201326468925748, 0.16947551244551362, 0.16672272692312562, 0.16779510473302928, 0.15857304825384522, 0.1627278019708981, 0.14605257183267728, 0.13995362452085025, 0.13192930676860593, 0.13121407950049946, 0.12650143220815258, 0.1343766799395396, 0.16910687320094553, 0.13760257331808456, 0.16157730439464668, 0.12970269714001392, 0.1410668531558349, 0.11557764234304702, 0.14557492751526713, 0.15612353050267935, 0.20211229175026235, 0.1682590070638158, 0.17822716042132847, 0.17350953404211178, 0.187908377107319, 0.18135324646570083, 0.2114869596430039, 0.17867619513963873, 0.1874211934946255, 0.1725683493673832, 0.19022090017642945, 0.056410409936259565, 0.05204599337689142, 0.04688088624662723, 0.05645409177706584, 0.05452484509677502, 0.060586531606848126, 0.05562670566321559, 0.05115542370189685, 0.05148119644439064]}, "mutation_prompt": null}
{"id": "37369fbf-ccf9-4fd1-b59a-9d899d7a3d35", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "faef860a-b42e-44e8-9889-bf5c5d63c501", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "13460fa6-10f0-4448-b727-8f7238aabd40", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "f5e52615-5f33-414d-8186-d1adda1b9338", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "ab2590dc-a47f-464d-95bd-09d03977a5c1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "c17712fb-9ff9-4f21-9e44-9d38e979ce08", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "56a9bbdd-97ec-44f9-9950-1d20b460f2c4", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "df731b0a-a152-4c71-96ed-6054f3ec2cc3", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "7c1f6e83-f48a-4fee-ad87-2f654635ba15", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "4363c0c7-250e-4273-bf76-728e3b302a4e", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "bc740702-48cf-4d90-946d-832b77b52fd3", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "3242a760-d0db-4a3b-be8e-21a8fa56a459", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "8ad1ddf6-6dfa-4a9d-8302-9f8f39d143ec", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "7d33db70-027a-46bd-be9a-bd860ca39cc3", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "5184cb5b-7875-462b-9231-63f5f15e03da", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "99a2d896-6c72-4ea8-b1cd-74fb4d7c792a", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "f5474733-54d3-4cf7-bf2a-656ceb1160ce", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "e15d1460-cf06-4d5f-90cf-42757e1c6512", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "2bb3dcf9-7b05-4325-b7d6-4a0830e61c1e", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "e4468601-f222-44b9-bd0e-19472a528659", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "e8da9fb1-12ca-4b15-8ef2-0db39f97689e", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "5cdd91a0-6f14-4998-8fe9-dced2910c7b7", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "267adc87-c885-4162-ba96-f92edddd18e6", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "64b9a375-0236-4df5-8077-5297e162e6a4", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "b1dd34e1-c6e9-49a2-ac1c-226e17573a38", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "f93384fe-0b05-400c-bb04-a372307d7077", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "fb45c378-b115-4012-80bc-c7ee7b2321d6", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "7dc3704f-84f6-4972-8a43-7f5ce579d683", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "7cbd89b4-df50-477f-8d5a-facd49a2d072", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "ea734beb-6477-4c5f-9898-0728a8f3d5ca", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "d6f217fc-1891-4331-8bcb-3ea95cce92be", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation to avoid repetitive calculation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask to avoid where call\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with early temperature correction to prevent low temperature too early\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm that optimizes efficiency by reducing redundant calculations and improving resource management.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.1643910002016622, 0.17069171769120584, 0.1843414635095012, 0.19332845761997441, 0.1959018944599552, 0.2229430727228502, 0.20004889358554312, 0.18086257340917022, 0.16660701260977073, 0.11235872579799888, 0.1384710899109699, 0.12585962729083444, 0.1296461554334981, 0.14086136260465265, 0.12559906235166707, 0.16382932237199255, 0.11294362251293211, 0.12799238701121463, 0.07409469698053794, 0.06887444666677622, 0.05942118041484823, 0.07827042757473734, 0.06559179288687156, 0.06329024935812799, 0.06141096680298197, 0.06106874482774238, 0.06292789934409937, 0.05666692522673711, 0.048740477766833434, 0.06676721577852918, 0.04986993397426409, 0.05308527566296595, 0.04871808560589741, 0.05735745611916532, 0.05393854054368663, 0.054473312442160915, 0.8843074525558179, 0.9679393294611665, 0.9780943764502987, 0.9683696267725622, 0.896203501001451, 0.9684009749377418, 0.9489957651695742, 0.9319797996983804, 0.9400160262176649, 0.10229286118167802, 0.09840109154116727, 0.11596790657586609, 0.12572374966699496, 0.11920364937295913, 0.12126252767100487, 0.10737194601378053, 0.11195943713022205, 0.13472835540118322, 0.16472485310447627, 0.16399734895572093, 0.18008609588468827, 0.16818922903436018, 0.20176382434374818, 0.1671938459901796, 0.1674146208153312, 0.14185987947186074, 0.17403743612980238, 0.12104687194005581, 0.1088272443005972, 0.12856759007615237, 0.11711358310107878, 0.11791834326911088, 0.1362064643211497, 0.11371376346633766, 0.11129871975915862, 0.11935024152088114, 0.10885758101876364, 0.13024073396722324, 0.11553613840361632, 0.1127868946915338, 0.12259764665941986, 0.12780029568629359, 0.09818462923335392, 0.1398387900775797, 0.1167972426159688, 0.07459446970324557, 0.10134051612041184, 0.08788457013658912, 0.09414315802901474, 0.1163328868645025, 0.11008657707687874, 0.10357514579444249, 0.09660276297231851, 0.08982477226515928, 0.13675679424294063, 0.152447660382665, 0.15958803721466064, 0.13584809954181132, 0.13585599975068707, 0.1444657519588527, 0.13127983725184367, 0.14352421497106893, 0.16155159975404876, 0.04020132413943733, 0.020000254842697518, 0.03642184502838297, 0.05509467032139315, 0.049850893796497986, 0.05718184689850625, 0.028920267895819585, 0.08082306771556291, 0.0576409233380315, 0.07372695939116225, 0.05533053826853396, 0.05956646252151365, 0.05534626062998671, 0.05707332862436165, 0.0778198028097431, 0.05563547875457098, 0.05682006872068546, 0.05427366137807532, 0.18827953644283257, 0.19729180677241753, 0.18881651389914278, 0.1972319745669524, 0.1912432401370191, 0.18267121949780318, 0.16936610962441012, 0.1799880538646792, 0.18062127588158838, 0.06375761635069466, 0.06440208581903184, 0.06876623144310867, 0.057054543583924366, 0.06654294140129946, 0.06744143621128518, 0.055822961389270453, 0.0600769317976223, 0.07271424238035562, 0.14743746174898187, 0.13190392804979711, 0.16403878305035835, 0.13870839068560403, 0.1416749376547185, 0.14801346259288328, 0.13762461240835633, 0.11977984991523405, 0.1401362258714406, 0.16087954634639134, 0.15767638984942456, 0.1648616211435947, 0.16848083146038295, 0.14641015069156926, 0.15882217701774604, 0.1588758959096842, 0.17377774300845283, 0.15663137465379529, 0.12244218397515638, 0.10332780820298015, 0.11201750526379495, 0.10642580108947497, 0.11073195289502769, 0.10231416467588494, 0.11086588836399802, 0.1121008388892597, 0.11118759271179646, 0.1420153098927036, 0.15771930480943042, 0.14055616675812466, 0.16240056515267765, 0.1483299068763596, 0.146629277685128, 0.1569621231547026, 0.15249298648066323, 0.15009808736460728, 0.17515747118667135, 0.16365010237809474, 0.17265439268448868, 0.16965780841547917, 0.16990057872126785, 0.16473455712467056, 0.17083021101117413, 0.16702065770470254, 0.16636682188524177, 0.13133105136802037, 0.17727322716392724, 0.140606508209959, 0.15413004494442362, 0.1556767146411273, 0.13619127913751705, 0.14955714019394195, 0.13542349455124347, 0.1469066270496514, 0.14872757631318567, 0.14537479083835536, 0.13455185212448595, 0.1550523023364262, 0.11329761660276527, 0.1236749139626443, 0.17736912829960982, 0.16455651023311535, 0.1667389687636267, 0.19560155859183415, 0.20852444197523723, 0.18066795930419177, 0.1920818811339493, 0.1760172358698333, 0.20304221523182964, 0.17276664385268237, 0.20599848580543845, 0.19765498338189513, 0.04483318251225554, 0.05094257350382447, 0.05463540619710361, 0.05156650466388879, 0.04423964118090129, 0.05594853442481895, 0.05103317597933987, 0.05196272017719661, 0.04826682927409842]}, "mutation_prompt": null}
{"id": "2084774f-c6b6-4d66-b0c8-0cd0c30e8906", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp(-(trial_fitness - fitness[i]) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with linear decay\n            temperature = self.temp_final + (temperature - self.temp_final) * self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm with optimized index selection and temperature scheduling for improved runtime efficiency.", "configspace": "", "generation": 90, "fitness": 0.18605690368366362, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5e3b0bd0-5e9f-4352-9f71-0bf29256c063", "metadata": {"aucs": [0.23549091581478387, 0.23843759579211998, 0.21981167233344434, 0.24700709844550706, 0.22705868285337183, 0.24353221871554032, 0.23295001599699172, 0.23294279479851132, 0.26224237354792357, 0.19264169786556806, 0.19794327454051386, 0.19858238526724137, 0.19722073606991453, 0.19489751468733585, 0.19596867158193343, 0.19687106824382472, 0.19441914504035318, 0.21143991367982862, 0.09304253392994455, 0.09238314504595946, 0.09104581263124178, 0.09080866302572244, 0.08627244401004386, 0.09226053636398224, 0.08755533969931717, 0.09332518624648833, 0.09386497162530627, 0.07789475687977188, 0.0805439888872932, 0.08143142428202677, 0.08064130022242666, 0.09336942082614363, 0.08181915391087347, 0.08471093850431366, 0.08052685444433538, 0.0815620959714004, 0.8754998241818985, 0.9679393294611665, 0.9780943764502987, 0.9698501311245561, 0.7979610052205584, 0.940593111129805, 0.9544062401648662, 0.9614691954001128, 0.8803354560714124, 0.17464884605926234, 0.17400060256945127, 0.16802300825980798, 0.17762680138712772, 0.1817528927036367, 0.16079419397536276, 0.17510661845540254, 0.17294564854182914, 0.17921351945145203, 0.19416749076286977, 0.2136693520991405, 0.1949825503693835, 0.22586355387875734, 0.20453737470599886, 0.21367957207273935, 0.21435487685438004, 0.20642766932300705, 0.2136671785121994, 0.1514004873650816, 0.1546891173163767, 0.14659532418081767, 0.16332093855716034, 0.14419438423332975, 0.1524664812320663, 0.1437453811792233, 0.12909578164100166, 0.14808718740738058, 0.051047898396029856, 0.18790383106311204, 0.14093030693685538, 0.14085688940833097, 0.14104707223560342, 0.1410187684568016, 0.13896204837701953, 0.1534997784152865, 0.1409945720729373, 0.12508963121723682, 0.13436846999454044, 0.145592538414686, 0.155540655172273, 0.15335374565107673, 0.1509115991745572, 0.15575264945483414, 0.1417204246511734, 0.14200123102839246, 0.21912349101049444, 0.21628463222660932, 0.20832048407301795, 0.20376081454431483, 0.20140511832936314, 0.20165556356290615, 0.19616848370073914, 0.18773298178458742, 0.1962782730489181, 0.07527061065435048, 0.04330822558214764, 0.03112686124155739, 0.08087169711085151, 0.07718061178613667, 0.08155644039509569, 0.037145063093376174, 0.06612597260002384, 0.07817867929459921, 0.11344873662768096, 0.11619559640375865, 0.11003528227911519, 0.11649585354516534, 0.1222364077360073, 0.10652505221561148, 0.12100285700074542, 0.11471107261444591, 0.11201613623232076, 0.21450976707760705, 0.2409540070975611, 0.22724652043127258, 0.2282690425182391, 0.24279892094111954, 0.21923109055373202, 0.2232939240310301, 0.21402817611734337, 0.22237344830882466, 0.09532920740831818, 0.07739146293438404, 0.08794357026352317, 0.10623954408859448, 0.06968405169527303, 0.06813631823420507, 0.07259052402735111, 0.07583904051029766, 0.07146223192580203, 0.16929326333934114, 0.15406622475175935, 0.1692316515178367, 0.18140386478786452, 0.15209687637917157, 0.14813850008139473, 0.13539728069946488, 0.15364922763351152, 0.16194423966205473, 0.17997374212921513, 0.18092086247075412, 0.18309107520513912, 0.16594818933837685, 0.16520109071280387, 0.1767752862659101, 0.17792702302915464, 0.19112087073343254, 0.18256274294524644, 0.16005300579027226, 0.13178832791669337, 0.15626384253060366, 0.15486746325232237, 0.14509685629631552, 0.15209871721911783, 0.15524825223845273, 0.14544449109865143, 0.1526811161410886, 0.1642251397595188, 0.1613049549476967, 0.1604711918499152, 0.1700905776215813, 0.1523607469672672, 0.15897010562887082, 0.16028879181853084, 0.16102576047144634, 0.18197351718598664, 0.20749727649166938, 0.17417043732788484, 0.1728452104755579, 0.17319536065483732, 0.17762305064748596, 0.1685456160270391, 0.1697052534450919, 0.1672445956421159, 0.18284809725297535, 0.2508450385359803, 0.1523366073473822, 0.13932616432259115, 0.15233266926796496, 0.16197832822005243, 0.1651199030423839, 0.15812377312995796, 0.16071643371332645, 0.22952213336259397, 0.15372466312523025, 0.1508170504983336, 0.18247694593521468, 0.24161119981491685, 0.1610677996535902, 0.15541811663312222, 0.1838269578065942, 0.1181186324909611, 0.18359949476396564, 0.18946773735285793, 0.1922773590060105, 0.21931227142402732, 0.18373418501535055, 0.1830736777729226, 0.18600439537848146, 0.18761901798871528, 0.19417086557999486, 0.18729848431120666, 0.06473215226422924, 0.05717841319709427, 0.06151850088699862, 0.07280933376974374, 0.06211046124340569, 0.06764956783670117, 0.06748890398946727, 0.0587691819590469, 0.08564920559011602]}, "mutation_prompt": null}
{"id": "aa5dd492-bcc0-47f5-a331-8551ede84b14", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp(-(trial_fitness - fitness[i]) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with linear decay\n            temperature = self.temp_final + (temperature - self.temp_final) * self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm with optimized index selection and temperature scheduling for improved runtime efficiency.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2084774f-c6b6-4d66-b0c8-0cd0c30e8906", "metadata": {"aucs": [0.23549091581478387, 0.23843759579211998, 0.21981167233344434, 0.24700709844550706, 0.22705868285337183, 0.24353221871554032, 0.23295001599699172, 0.23294279479851132, 0.26224237354792357, 0.19264169786556806, 0.19794327454051386, 0.19858238526724137, 0.19722073606991453, 0.19489751468733585, 0.19596867158193343, 0.19687106824382472, 0.19441914504035318, 0.21143991367982862, 0.09304253392994455, 0.09238314504595946, 0.09104581263124178, 0.09080866302572244, 0.08627244401004386, 0.09226053636398224, 0.08755533969931717, 0.09332518624648833, 0.09386497162530627, 0.07789475687977188, 0.0805439888872932, 0.08143142428202677, 0.08064130022242666, 0.09336942082614363, 0.08181915391087347, 0.08471093850431366, 0.08052685444433538, 0.0815620959714004, 0.8754998241818985, 0.9679393294611665, 0.9780943764502987, 0.9698501311245561, 0.7979610052205584, 0.940593111129805, 0.9544062401648662, 0.9614691954001128, 0.8803354560714124, 0.17464884605926234, 0.17400060256945127, 0.16802300825980798, 0.17762680138712772, 0.1817528927036367, 0.16079419397536276, 0.17510661845540254, 0.17294564854182914, 0.17921351945145203, 0.19416749076286977, 0.2136693520991405, 0.1949825503693835, 0.22586355387875734, 0.20453737470599886, 0.21367957207273935, 0.21435487685438004, 0.20642766932300705, 0.2136671785121994, 0.1514004873650816, 0.1546891173163767, 0.14659532418081767, 0.16332093855716034, 0.14419438423332975, 0.1524664812320663, 0.1437453811792233, 0.12909578164100166, 0.14808718740738058, 0.051047898396029856, 0.18790383106311204, 0.14093030693685538, 0.14085688940833097, 0.14104707223560342, 0.1410187684568016, 0.13896204837701953, 0.1534997784152865, 0.1409945720729373, 0.12508963121723682, 0.13436846999454044, 0.145592538414686, 0.155540655172273, 0.15335374565107673, 0.1509115991745572, 0.15575264945483414, 0.1417204246511734, 0.14200123102839246, 0.21912349101049444, 0.21628463222660932, 0.20832048407301795, 0.20376081454431483, 0.20140511832936314, 0.20165556356290615, 0.19616848370073914, 0.18773298178458742, 0.1962782730489181, 0.07527061065435048, 0.04330822558214764, 0.03112686124155739, 0.08087169711085151, 0.07718061178613667, 0.08155644039509569, 0.037145063093376174, 0.06612597260002384, 0.07817867929459921, 0.11344873662768096, 0.11619559640375865, 0.11003528227911519, 0.11649585354516534, 0.1222364077360073, 0.10652505221561148, 0.12100285700074542, 0.11471107261444591, 0.11201613623232076, 0.21450976707760705, 0.2409540070975611, 0.22724652043127258, 0.2282690425182391, 0.24279892094111954, 0.21923109055373202, 0.2232939240310301, 0.21402817611734337, 0.22237344830882466, 0.09532920740831818, 0.07739146293438404, 0.08794357026352317, 0.10623954408859448, 0.06968405169527303, 0.06813631823420507, 0.07259052402735111, 0.07583904051029766, 0.07146223192580203, 0.16929326333934114, 0.15406622475175935, 0.1692316515178367, 0.18140386478786452, 0.15209687637917157, 0.14813850008139473, 0.13539728069946488, 0.15364922763351152, 0.16194423966205473, 0.17997374212921513, 0.18092086247075412, 0.18309107520513912, 0.16594818933837685, 0.16520109071280387, 0.1767752862659101, 0.17792702302915464, 0.19112087073343254, 0.18256274294524644, 0.16005300579027226, 0.13178832791669337, 0.15626384253060366, 0.15486746325232237, 0.14509685629631552, 0.15209871721911783, 0.15524825223845273, 0.14544449109865143, 0.1526811161410886, 0.1642251397595188, 0.1613049549476967, 0.1604711918499152, 0.1700905776215813, 0.1523607469672672, 0.15897010562887082, 0.16028879181853084, 0.16102576047144634, 0.18197351718598664, 0.20749727649166938, 0.17417043732788484, 0.1728452104755579, 0.17319536065483732, 0.17762305064748596, 0.1685456160270391, 0.1697052534450919, 0.1672445956421159, 0.18284809725297535, 0.2508450385359803, 0.1523366073473822, 0.13932616432259115, 0.15233266926796496, 0.16197832822005243, 0.1651199030423839, 0.15812377312995796, 0.16071643371332645, 0.22952213336259397, 0.15372466312523025, 0.1508170504983336, 0.18247694593521468, 0.24161119981491685, 0.1610677996535902, 0.15541811663312222, 0.1838269578065942, 0.1181186324909611, 0.18359949476396564, 0.18946773735285793, 0.1922773590060105, 0.21931227142402732, 0.18373418501535055, 0.1830736777729226, 0.18600439537848146, 0.18761901798871528, 0.19417086557999486, 0.18729848431120666, 0.06473215226422924, 0.05717841319709427, 0.06151850088699862, 0.07280933376974374, 0.06211046124340569, 0.06764956783670117, 0.06748890398946727, 0.0587691819590469, 0.08564920559011602]}, "mutation_prompt": null}
{"id": "bbb19080-b3ea-4d5e-beba-55425f8f97dd", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Precompute crossover masks\n        crossover_masks = np.random.rand(self.budget - evals, self.dim) < self.CR\n        mask_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        cooling_factor = (self.temp_init - self.temp_final) / self.budget\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using precomputed mask\n                crossover_mask = crossover_masks[mask_count]\n                mask_count += 1\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp(-(trial_fitness - fitness[i]) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Improved cooling schedule\n            temperature = max(self.temp_final, temperature - cooling_factor)\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "Optimized HybridDESA with precomputed crossover masks and efficient temperature decay for improved runtime efficiency.", "configspace": "", "generation": 92, "fitness": 0.14561640235580345, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "2084774f-c6b6-4d66-b0c8-0cd0c30e8906", "metadata": {"aucs": [0.17331089501819097, 0.15708049765604137, 0.1592612985100491, 0.17063372571958968, 0.18905219918238958, 0.18123312683587878, 0.17332007158771923, 0.16632928670186375, 0.16556133174419152, 0.1152195661112475, 0.09023789591881282, 0.15277483819713, 0.1032721812294689, 0.09580430128590722, 0.1064068110667491, 0.10227419215999634, 0.0862372619349202, 0.08903211481404527, 0.05106499427748146, 0.05317273182816695, 0.06214151834573045, 0.05679219841740668, 0.057385446203318535, 0.053712906595660415, 0.05472536179602994, 0.050478506992396754, 0.047859206006033994, 0.031856196334611564, 0.03899855904709171, 0.041771318185538586, 0.05300958049627169, 0.04655154927428773, 0.03919624517608533, 0.04490980360165253, 0.04839449723702671, 0.04487018429120415, 0.8383387706455359, 0.9457141580022979, 0.7928736956185434, 0.9179712321390215, 0.9790504027801962, 0.8621404812496452, 0.9134271093864486, 0.9167998933540958, 0.909751051622903, 0.09214703298593507, 0.10664591545064173, 0.09322092459769848, 0.08707868941179864, 0.08479184635843684, 0.09356439785703385, 0.1111752328727289, 0.12039498558421269, 0.12993406647620354, 0.1486478924354353, 0.13942609676621143, 0.13349014104035173, 0.172502734615131, 0.1598664096066379, 0.14175059077647112, 0.13060450969417947, 0.14144587179116863, 0.14829283684228844, 0.09436937045735305, 0.10767653110479203, 0.1005989753403308, 0.09763300583562973, 0.11952646177688853, 0.10796416793615093, 0.11239273759705248, 0.11016564404924556, 0.10077032193464786, 0.08528330611986801, 0.10492549946156249, 0.11968110528861375, 0.10590686958687134, 0.13149182891854727, 0.11023992041758124, 0.09020147517735855, 0.10491367012154984, 0.09766252835606115, 0.08590248652165722, 0.0775565093249253, 0.07004249392961337, 0.07276080858494838, 0.0869356735166339, 0.09041857730205871, 0.0982156621866459, 0.07334458536513233, 0.08201301094103675, 0.16432628214816725, 0.13451807678447658, 0.13026908457553854, 0.15690871672967244, 0.1086845724158444, 0.12617072868995238, 0.1275979589893479, 0.14498297185878017, 0.13023492773381062, 0.04494855891027216, 0.04451121073440556, 0.04595296618574318, 0.03697453320804156, 0.02707928243759894, 0.059150504746576904, 0.04317908480905808, 0.04780587549416593, 0.049599874500697805, 0.0344829132181792, 0.030425116454981582, 0.04475050917829504, 0.0277070882092747, 0.03199475191309664, 0.0313265013555587, 0.03250223903473759, 0.03962255185676644, 0.048761054646731306, 0.18460769546892974, 0.17557363369897683, 0.20626277464556309, 0.18990577390257823, 0.17493745725920984, 0.16769616887027428, 0.20422116132427126, 0.17259371777651267, 0.1772127639965836, 0.0674295717560941, 0.0576309437419773, 0.056844051096743176, 0.05010666760649585, 0.07550907772245696, 0.046575298517158026, 0.05054304340936944, 0.0848427707459638, 0.0565243553002851, 0.13886868054071455, 0.12604258312452932, 0.14882541109641045, 0.15533179739488845, 0.13108555173736403, 0.134818202572349, 0.15513828538012642, 0.12084322718891294, 0.1456769210051858, 0.15689863958440087, 0.14321922132004816, 0.1613932299901244, 0.14718272748670647, 0.13953043192237602, 0.14406225840579956, 0.14833895462990754, 0.1756633942542628, 0.1494939299533573, 0.09852922679955367, 0.11507292387438961, 0.09389527406924503, 0.10467151733933766, 0.10906782427704853, 0.10122172938441798, 0.130263674578724, 0.10836398420921234, 0.10788588153597378, 0.15149810770723382, 0.14804447870262027, 0.15053936317724015, 0.15378783148668596, 0.13848549772008412, 0.1608404983845778, 0.1424704763563246, 0.14331944602849622, 0.14179940994074114, 0.16511919721566504, 0.15937227081195993, 0.17018719281105155, 0.18327203119616298, 0.17610998803558375, 0.17005949408221055, 0.16818244070793897, 0.17602523675939286, 0.17250851639850484, 0.15706083815266159, 0.1273469711390156, 0.1378194807202452, 0.15819195815840903, 0.1306307650852172, 0.13097251784525799, 0.11460912054123873, 0.12515552842208455, 0.14798606035339001, 0.11798991834232342, 0.16074957741637352, 0.11364693232771583, 0.10649005002809098, 0.1010012020942338, 0.0958661813320778, 0.13236776365435676, 0.19934667708321463, 0.17127470330055583, 0.1848343478336053, 0.17944766957872094, 0.18705239706415033, 0.19177228900155863, 0.2114869596430039, 0.186493866412468, 0.19202210832949274, 0.18373676002545802, 0.17360100694917435, 0.051882794559631296, 0.047787564643416935, 0.055402654185948585, 0.04514034758657126, 0.04022411300886053, 0.05112062105918902, 0.03919033843096564, 0.04567971458712039, 0.047696688226492534]}, "mutation_prompt": null}
{"id": "588bc269-239c-48ae-b60e-85ba29ce1b50", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.95  # Further adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        # Precompute random indices for mutation using numpy matrix operation\n        random_indices = np.random.randint(0, self.population_size, (self.population_size, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            # Vectorized loop to enhance efficiency\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation using vectorized approach\n                idxs = random_indices[i]\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n                \n                # Binomial Crossover using numpy's broadcasting\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp(-(trial_fitness - fitness[i]) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with exponential decay\n            temperature *= self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An optimized hybrid Differential Evolution and Simulated Annealing algorithm with enhanced mutation efficiency and improved cooling scheduling.", "configspace": "", "generation": 93, "fitness": 0.113055264328067, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.16.", "error": "", "parent_id": "2084774f-c6b6-4d66-b0c8-0cd0c30e8906", "metadata": {"aucs": [0.15049938050970213, 0.17648590258357633, 0.14628694671398412, 0.2011353384185608, 0.2312300542005703, 0.15032464996504202, 0.15271161003575762, 0.2028068519308407, 0.14978807624783252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051577064016966157, 0.05085870078974153, 0.04516568320612491, 0.05469652730181185, 0.04902524737562586, 0.04305394023220088, 0.05206255065867249, 0.06432847999126534, 0.041546620153636415, 0.019216425976063656, 0.018875129642422883, 0.01970026353678256, 0.0385601901303817, 0.041257719105021184, 0.02543394840205071, 0.0358394633147715, 0.029571195292132146, 0.029831588064296866, 0.9229549048479732, 0.9761523693312651, 0.14893010996825373, 0.833947236668984, 0.8973255050142452, 0.9685555858252005, 0.7692103528434756, 0.7840966038666312, 0.09805460583418657, 0.10164245072146527, 0.06836423454612772, 0.07025562278379471, 0.050052241490648575, 0.08296906199790632, 0.04700530538961778, 0.09270819402086705, 0.06177052611795575, 0.052532376344349596, 0.15983494640389762, 0.09537785208239968, 0.1520051679847455, 0.12771400579987624, 0.15081653027861863, 0.1286514719405446, 0.15755755816667139, 0.14046912577816506, 0.1294958646925788, 9.999999999998899e-05, 9.999999999998899e-05, 0.007463921345332691, 0.017798892849830605, 0.02625343742994979, 9.999999999998899e-05, 0.005457718340631024, 0.0014064713314233535, 9.999999999998899e-05, 9.999999999998899e-05, 0.009040227307368864, 0.012433173199224767, 9.999999999998899e-05, 0.02638967211410348, 0.021616557253196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03730390038350018, 0.007741571343462428, 0.02566844106612931, 0.022348390161075593, 0.026549100283466576, 0.01045390488339093, 0.012101587362753685, 0.02571373212039829, 0.027427183808232947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002657640214390744, 0.009520865894921515, 0.012328969576110071, 9.999999999998899e-05, 0.008682184356993639, 0.006442236248511146, 0.005631495767227879, 0.0006051971160903058, 0.00010761855220475791, 0.18489357831261954, 0.3320328939301088, 0.178546949514504, 0.19973358999681645, 0.22517925065776512, 0.21684634025491312, 0.20192082996925098, 0.19932444621735523, 0.23974199855494227, 0.07041220812821136, 0.055889001192307664, 0.03559158722317357, 0.05431765306705161, 0.051845422534900765, 0.05911449798242141, 0.04217134722840565, 0.04187904818767807, 0.06521857904251516, 0.11740677754905304, 0.12288084975298319, 0.1444148245497352, 0.12014930042480121, 0.14369163125215922, 0.1453970669026985, 0.15288342300293245, 0.1216075804253558, 0.12194093885061597, 0.14713525559093776, 0.15688495287365645, 0.17347132911403407, 0.15670498927132825, 0.16208233955955398, 0.15127986484730005, 0.16049654113244083, 0.17863476984092563, 0.16105183264833545, 0.0972861618511186, 0.10468949911697167, 0.1147068295347633, 0.10624819514433037, 0.1201680041317903, 0.10844059697232222, 0.11184160481002114, 0.11386063997479501, 0.10779271762493825, 0.14464251806002792, 0.16260994160280973, 0.162712821238984, 0.16179754040772254, 0.15966306689331344, 0.15066485464953583, 0.13850424928893668, 0.15276010564986586, 0.1569149269368414, 0.15298877377068787, 0.15346640641022946, 0.1272492572046725, 0.13847547102374935, 0.14277953971032786, 0.13681298064110892, 0.14908946058193884, 0.14925831263938838, 0.15206657091601228, 0.1601179114506862, 0.14799957236554306, 0.10866888123357055, 0.16500196377857612, 0.15256745136645622, 0.1105074462910941, 0.14213219448898418, 0.15299210513551442, 0.1265026066193905, 0.11685936209218417, 0.15282091246049312, 0.14439943141888179, 0.15138943010945827, 0.12169682907575663, 0.13875550933262382, 0.17163743315980906, 0.20054621959524654, 0.15172563509112458, 0.16581251128900332, 0.1982536023271858, 0.1932753637869099, 0.17987199224300798, 0.1873008905463377, 0.20554486189452403, 0.18651709809303096, 0.17202831034115007, 0.17412094222019037, 0.050662377264385605, 0.04809191972805238, 0.04685616191205155, 0.053883264696062194, 0.05843768286521611, 0.05408652849277518, 0.05266909778978224, 0.04057330044693175, 0.0545941848362399]}, "mutation_prompt": null}
{"id": "49f97fd6-4711-4b7c-b6ad-8a0a029cc3b2", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation in batches to enhance vectorized operations\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_batches = np.split(random_indices, len(random_indices) // self.population_size)\n        \n        # Evolutionary loop\n        temperature = self.temp_init\n        batch_idx = 0\n        while evals < self.budget:\n            # Use precomputed batch indices to reduce redundant indexing operations\n            batch_idxs = rand_idx_batches[batch_idx]\n            batch_idx = (batch_idx + 1) % len(rand_idx_batches)\n            mutants = population[batch_idxs[:, 0]] + self.F * (population[batch_idxs[:, 1]] - population[batch_idxs[:, 2]])\n            mutants = np.clip(mutants, self.lower_bound, self.upper_bound)\n\n            # Binomial Crossover with vectorized operations\n            crossover_mask = np.random.rand(self.population_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, population)\n            \n            # Fitness evaluation and Simulated Annealing Acceptance in a vectorized manner\n            trial_fitness = np.array([func(trial) for trial in trials])\n            evals += self.population_size\n            improved = trial_fitness < fitness\n            accept_prob = np.exp(-(trial_fitness - fitness) / temperature)\n            accepted = improved | (np.random.rand(self.population_size) < accept_prob)\n            population[accepted] = trials[accepted]\n            fitness[accepted] = trial_fitness[accepted]\n\n            # Cooling schedule with linear decay\n            temperature = self.temp_final + (temperature - self.temp_final) * self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm utilizing vectorized operations and efficient index management for enhanced runtime efficiency.", "configspace": "", "generation": 94, "fitness": 0.18173624054935547, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "2084774f-c6b6-4d66-b0c8-0cd0c30e8906", "metadata": {"aucs": [0.22525969572002003, 0.22266607164712382, 0.2273054550887189, 0.23797319702609843, 0.23970582464160317, 0.2368654976398319, 0.24716723250714256, 0.23567629130340018, 0.2294515371222603, 0.18802948852543355, 0.1781612796848815, 0.199150944492417, 0.1787765105300856, 0.1909188341085457, 0.1866732797074322, 0.18245668081103283, 0.18525215181859134, 0.18393368019780187, 0.08142531917898543, 0.09068152739704405, 0.08843533372811285, 0.12821353284961245, 0.09529348182605168, 0.09110832655086776, 0.08727824271582907, 0.0850168324259345, 0.08590174727537303, 0.08923019715317237, 0.07570143837771359, 0.09046581304315682, 0.0850895808204466, 0.07709301753928866, 0.08034994412002794, 0.0832402056881063, 0.0770281738246742, 0.0745703246965238, 0.940588351872186, 0.9822497118908253, 0.929541348468308, 0.965268148989345, 0.9618603907829868, 0.8197737339542472, 0.8795865035417286, 0.9105254544488237, 0.9829854196016958, 0.15879512689538677, 0.16955585002709705, 0.16788853568706508, 0.16889795147170406, 0.17146086088823143, 0.1630892158395687, 0.16330769010512958, 0.17473620569605997, 0.16437773907339648, 0.21197108592819813, 0.18825613493006899, 0.19727306648212362, 0.19458958137578186, 0.20832444736463063, 0.23781227084366252, 0.19826925788503735, 0.21196042015394323, 0.20110824542622907, 0.13735088941273765, 0.14117964510007464, 0.12307910678379286, 0.1315125299404586, 0.1386606438262239, 0.14271131191216246, 0.1290283136860717, 0.15166967222868677, 0.1495065937422636, 0.17655044294808575, 0.021513478451385182, 0.12105428064957646, 0.16363773554345085, 0.13600136446232114, 0.14241740942458325, 0.15448675131561884, 0.14112670124741067, 0.1573775810391841, 0.10002881481456227, 0.1257520133346829, 0.11704419654722531, 0.13102479479680462, 0.13805199540597046, 0.12980971355192594, 0.12995621585568973, 0.14288665725964023, 0.1249149243434231, 0.1788764409229947, 0.20931725968882542, 0.20196967188408188, 0.2244262618071623, 0.18081115889254384, 0.18518009320748852, 0.19615518989302905, 0.20060473640998566, 0.1967661109438813, 0.0481602642682285, 0.04050747197854376, 0.03701893355684949, 0.05271641956904294, 0.04273855161704976, 0.040757896822102846, 0.06766882950774111, 0.026065415817389304, 0.1042313937415249, 0.1129298549753639, 0.11341005578720831, 0.11203845955302827, 0.1129076896911807, 0.11111898080696159, 0.11544039663357741, 0.11260088276266511, 0.12223843996427408, 0.11039299896174415, 0.21980716053339966, 0.21654834913375565, 0.226971026534331, 0.23396610526743922, 0.21709819083932602, 0.25187088443861727, 0.21729652526824228, 0.21719982376998892, 0.24583605783876694, 0.08158782060855296, 0.07709130515370777, 0.08053337833425522, 0.07977837156659784, 0.07281038520445748, 0.07075540929889979, 0.07617062633080329, 0.07450072042865397, 0.08142442952774454, 0.13961414364607827, 0.13489445848025994, 0.14635832565491014, 0.16154519662004785, 0.15300763056089184, 0.15300609448682612, 0.13747387241855247, 0.1301626740443924, 0.19304204222449917, 0.17905890366780308, 0.19000571347909, 0.19342843646837493, 0.16848634287297048, 0.17060066380056904, 0.1910601747000492, 0.17301595655145574, 0.19229076528865952, 0.17555307453652658, 0.15774136663648475, 0.15213303787519417, 0.14838686568295834, 0.14073880787866688, 0.13454206648997513, 0.14522125950778741, 0.13961363853516073, 0.14959692087314758, 0.1474080463892098, 0.18597941320037448, 0.1678962467362749, 0.17848100259307553, 0.15734269379004895, 0.16186545905157834, 0.16650616490898829, 0.17485685861511102, 0.18140693586491596, 0.16250438472347672, 0.1690012027095441, 0.1664468592827708, 0.17870009451849123, 0.16287751871875278, 0.16887213817619218, 0.16354676820674818, 0.1738002286538164, 0.17161453359571766, 0.16892449788681063, 0.13935827442401028, 0.2444633405347726, 0.17386126224916532, 0.15144985112406284, 0.16148684156701076, 0.14265196258505952, 0.1547391096873304, 0.16488334373580327, 0.16936684348390696, 0.14866747897160693, 0.14985992125840453, 0.14799007617439996, 0.18710660383029498, 0.1561052719770254, 0.14291391109605123, 0.18925713380490106, 0.20454412369513675, 0.19077591841533936, 0.17661453367692737, 0.1836198423564348, 0.17873255132160282, 0.17575628638841012, 0.1839028823715536, 0.17841997786254937, 0.17599966501480757, 0.19243586089717202, 0.19658691265058792, 0.0689439619780875, 0.06175398299862078, 0.06401602266764661, 0.06507924921348407, 0.056445075681597734, 0.06711210255550559, 0.06300880439123557, 0.06064652135043269, 0.06563332729378779]}, "mutation_prompt": null}
{"id": "742e5de4-0ea8-46e7-9701-fe8b25f0b986", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp(-(trial_fitness - fitness[i]) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with linear decay\n            temperature = self.temp_final + (temperature - self.temp_final) * self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "HybridDESA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm with optimized index selection and temperature scheduling for improved runtime efficiency.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2084774f-c6b6-4d66-b0c8-0cd0c30e8906", "metadata": {"aucs": [0.23549091581478387, 0.23843759579211998, 0.21981167233344434, 0.24700709844550706, 0.22705868285337183, 0.24353221871554032, 0.23295001599699172, 0.23294279479851132, 0.26224237354792357, 0.19264169786556806, 0.19794327454051386, 0.19858238526724137, 0.19722073606991453, 0.19489751468733585, 0.19596867158193343, 0.19687106824382472, 0.19441914504035318, 0.21143991367982862, 0.09304253392994455, 0.09238314504595946, 0.09104581263124178, 0.09080866302572244, 0.08627244401004386, 0.09226053636398224, 0.08755533969931717, 0.09332518624648833, 0.09386497162530627, 0.07789475687977188, 0.0805439888872932, 0.08143142428202677, 0.08064130022242666, 0.09336942082614363, 0.08181915391087347, 0.08471093850431366, 0.08052685444433538, 0.0815620959714004, 0.8754998241818985, 0.9679393294611665, 0.9780943764502987, 0.9698501311245561, 0.7979610052205584, 0.940593111129805, 0.9544062401648662, 0.9614691954001128, 0.8803354560714124, 0.17464884605926234, 0.17400060256945127, 0.16802300825980798, 0.17762680138712772, 0.1817528927036367, 0.16079419397536276, 0.17510661845540254, 0.17294564854182914, 0.17921351945145203, 0.19416749076286977, 0.2136693520991405, 0.1949825503693835, 0.22586355387875734, 0.20453737470599886, 0.21367957207273935, 0.21435487685438004, 0.20642766932300705, 0.2136671785121994, 0.1514004873650816, 0.1546891173163767, 0.14659532418081767, 0.16332093855716034, 0.14419438423332975, 0.1524664812320663, 0.1437453811792233, 0.12909578164100166, 0.14808718740738058, 0.051047898396029856, 0.18790383106311204, 0.14093030693685538, 0.14085688940833097, 0.14104707223560342, 0.1410187684568016, 0.13896204837701953, 0.1534997784152865, 0.1409945720729373, 0.12508963121723682, 0.13436846999454044, 0.145592538414686, 0.155540655172273, 0.15335374565107673, 0.1509115991745572, 0.15575264945483414, 0.1417204246511734, 0.14200123102839246, 0.21912349101049444, 0.21628463222660932, 0.20832048407301795, 0.20376081454431483, 0.20140511832936314, 0.20165556356290615, 0.19616848370073914, 0.18773298178458742, 0.1962782730489181, 0.07527061065435048, 0.04330822558214764, 0.03112686124155739, 0.08087169711085151, 0.07718061178613667, 0.08155644039509569, 0.037145063093376174, 0.06612597260002384, 0.07817867929459921, 0.11344873662768096, 0.11619559640375865, 0.11003528227911519, 0.11649585354516534, 0.1222364077360073, 0.10652505221561148, 0.12100285700074542, 0.11471107261444591, 0.11201613623232076, 0.21450976707760705, 0.2409540070975611, 0.22724652043127258, 0.2282690425182391, 0.24279892094111954, 0.21923109055373202, 0.2232939240310301, 0.21402817611734337, 0.22237344830882466, 0.09532920740831818, 0.07739146293438404, 0.08794357026352317, 0.10623954408859448, 0.06968405169527303, 0.06813631823420507, 0.07259052402735111, 0.07583904051029766, 0.07146223192580203, 0.16929326333934114, 0.15406622475175935, 0.1692316515178367, 0.18140386478786452, 0.15209687637917157, 0.14813850008139473, 0.13539728069946488, 0.15364922763351152, 0.16194423966205473, 0.17997374212921513, 0.18092086247075412, 0.18309107520513912, 0.16594818933837685, 0.16520109071280387, 0.1767752862659101, 0.17792702302915464, 0.19112087073343254, 0.18256274294524644, 0.16005300579027226, 0.13178832791669337, 0.15626384253060366, 0.15486746325232237, 0.14509685629631552, 0.15209871721911783, 0.15524825223845273, 0.14544449109865143, 0.1526811161410886, 0.1642251397595188, 0.1613049549476967, 0.1604711918499152, 0.1700905776215813, 0.1523607469672672, 0.15897010562887082, 0.16028879181853084, 0.16102576047144634, 0.18197351718598664, 0.20749727649166938, 0.17417043732788484, 0.1728452104755579, 0.17319536065483732, 0.17762305064748596, 0.1685456160270391, 0.1697052534450919, 0.1672445956421159, 0.18284809725297535, 0.2508450385359803, 0.1523366073473822, 0.13932616432259115, 0.15233266926796496, 0.16197832822005243, 0.1651199030423839, 0.15812377312995796, 0.16071643371332645, 0.22952213336259397, 0.15372466312523025, 0.1508170504983336, 0.18247694593521468, 0.24161119981491685, 0.1610677996535902, 0.15541811663312222, 0.1838269578065942, 0.1181186324909611, 0.18359949476396564, 0.18946773735285793, 0.1922773590060105, 0.21931227142402732, 0.18373418501535055, 0.1830736777729226, 0.18600439537848146, 0.18761901798871528, 0.19417086557999486, 0.18729848431120666, 0.06473215226422924, 0.05717841319709427, 0.06151850088699862, 0.07280933376974374, 0.06211046124340569, 0.06764956783670117, 0.06748890398946727, 0.0587691819590469, 0.08564920559011602]}, "mutation_prompt": null}
{"id": "a800e153-f071-4e69-808f-d4ab10f991e4", "solution": "import numpy as np\n\nclass OptimizedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation and acceptance\n                trial_fitness = func(trial)\n                evals += 1\n                delta_fitness = trial_fitness - fitness[i]\n                if delta_fitness < 0 or np.random.rand() < np.exp(-delta_fitness / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with linear decay\n            temperature *= self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "OptimizedHybridDESA", "description": "Optimized the HybridDESA algorithm by reducing redundant evaluations and improving loop efficiency for better runtime performance.", "configspace": "", "generation": 96, "fitness": 0.1861823302864266, "feedback": "The algorithm OptimizedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "2084774f-c6b6-4d66-b0c8-0cd0c30e8906", "metadata": {"aucs": [0.21871211761685738, 0.23473127639302682, 0.22217235727839735, 0.27074751447089407, 0.23835654411626594, 0.24239647435175282, 0.23706721973568046, 0.23018369797463634, 0.24218895019214848, 0.1902200966140909, 0.19552945922937037, 0.20529359349126508, 0.1888511435822351, 0.21793060889566018, 0.22541629528901486, 0.21713776842224175, 0.19697205936990292, 0.20076450998556705, 0.10154219303081768, 0.09353443550633056, 0.0803978930712056, 0.10726394706847475, 0.09050230286620864, 0.09093581608500423, 0.080123384898798, 0.08825325206467749, 0.08569380087108547, 0.08241275144672655, 0.07915977281083109, 0.07714394377946576, 0.0837583879658812, 0.0902282611782006, 0.08017122466370186, 0.08505162444487191, 0.08068586590336746, 0.08755588542242276, 0.8754998241818985, 0.9679393294611665, 0.9780943764502987, 0.9698501311245561, 0.8027319567252404, 0.940593111129805, 0.9544062401648662, 0.9614691954001128, 0.8803354560714124, 0.17005859803932089, 0.15792789693082543, 0.16477271390627846, 0.17519020893630932, 0.18294957641561815, 0.1850846902469896, 0.1776684342934285, 0.18123481355159465, 0.1824096685736305, 0.19800412683758728, 0.20666221586298117, 0.21460913960247674, 0.2051679688501442, 0.22348325357026522, 0.20266972386720616, 0.21657220618551798, 0.21047904509291882, 0.21592772135458604, 0.15072097515498195, 0.1362271543151019, 0.14596206418012025, 0.1555460809200515, 0.13815860641842392, 0.12737270708599557, 0.14846575056002564, 0.15677642130899272, 0.13662548321146606, 0.05126300167691111, 0.19106989822181009, 0.1454843242325432, 0.13851491319796372, 0.1551870024926939, 0.13988312715616524, 0.1433487262306664, 0.1498627188072258, 0.15478091505738667, 0.12264926758907935, 0.13400976158976574, 0.14357478944358804, 0.14461631677616948, 0.14845998084068923, 0.1612178728360708, 0.15483948897503064, 0.1388652275686325, 0.1416571855654436, 0.18702494863041053, 0.22235496227235263, 0.1943883424432704, 0.18606441688047193, 0.2028975357834747, 0.193980832150072, 0.18764663949899296, 0.18481515816870808, 0.211175067128763, 0.07321691977591038, 0.04330822558214764, 0.031081115812381488, 0.08175941794290598, 0.0766400255809132, 0.07805189971674842, 0.037145063093376174, 0.06612597260002384, 0.07662009988101837, 0.11361196157454578, 0.11406021380669173, 0.11925380007302777, 0.1296584032472038, 0.11826153332052292, 0.127626721449694, 0.11139050055670652, 0.11985518971766773, 0.11256506905072239, 0.22948638032761493, 0.24433628119008144, 0.21507322077520774, 0.22759374775002983, 0.23785876254729088, 0.22922847659539003, 0.21648269900680406, 0.22355847810324792, 0.22554231964496108, 0.09305005534344624, 0.08165252031034997, 0.08741394012850356, 0.07891849098498338, 0.08690200690811667, 0.08235677262813645, 0.06640697447226307, 0.08139428431962714, 0.07482663156437086, 0.14106341866506156, 0.1378861896742536, 0.16406590850873326, 0.18121158532099613, 0.1385956499004738, 0.14813850008139473, 0.1352412778525791, 0.13850982567572956, 0.16501071172254866, 0.17807638652565072, 0.18771839922837963, 0.18258786399862215, 0.1694187777598516, 0.1690467609467674, 0.17605223445680185, 0.18079075059373284, 0.19398720424792493, 0.18846845467862428, 0.14710364365271145, 0.15130130002532682, 0.14863963466922958, 0.15216617888153472, 0.14932608469739894, 0.13892897007804472, 0.15597980596728578, 0.14740793608014224, 0.1533578175113327, 0.15851553475428715, 0.16925284392119944, 0.1615618934826023, 0.17853218474618715, 0.16109898481537, 0.17159024640779752, 0.1652960926168957, 0.17231093509453954, 0.16960946666173604, 0.20749727649166938, 0.17417043732788484, 0.16789194435167187, 0.17354506426307215, 0.17539437895175847, 0.1710402201696719, 0.16942083893436133, 0.16875627062669918, 0.18284809725297535, 0.2687727899812168, 0.17676183448306493, 0.13881085681408023, 0.16016388443972485, 0.16190389022330764, 0.16419972570003705, 0.16428301766120734, 0.17818616850478486, 0.2506121739087861, 0.15065822699435716, 0.16232662717083435, 0.1638781742190879, 0.15471240353545823, 0.1499135112739861, 0.15020146062815365, 0.18427803336022497, 0.11864257512966758, 0.18470848087026936, 0.18213411744600994, 0.19136420164003443, 0.21931227142402732, 0.19466026448824902, 0.18287164124052302, 0.1879945849718111, 0.18761901798871528, 0.19417086557999486, 0.18768560533378753, 0.06296467110850368, 0.06250654871822425, 0.06681259391759153, 0.059410353815829375, 0.06332686141267818, 0.07003040291510276, 0.07171334636358129, 0.06504907807734706, 0.08564920559011602]}, "mutation_prompt": null}
{"id": "6cfd8d08-53c4-49ee-aab5-399cbd9b3187", "solution": "import numpy as np\n\nclass OptimizedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation and acceptance\n                trial_fitness = func(trial)\n                evals += 1\n                delta_fitness = trial_fitness - fitness[i]\n                if delta_fitness < 0 or np.random.rand() < np.exp(-delta_fitness / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with linear decay\n            temperature *= self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "OptimizedHybridDESA", "description": "Optimized the HybridDESA algorithm by reducing redundant evaluations and improving loop efficiency for better runtime performance.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a800e153-f071-4e69-808f-d4ab10f991e4", "metadata": {"aucs": [0.21871211761685738, 0.23473127639302682, 0.22217235727839735, 0.27074751447089407, 0.23835654411626594, 0.24239647435175282, 0.23706721973568046, 0.23018369797463634, 0.24218895019214848, 0.1902200966140909, 0.19552945922937037, 0.20529359349126508, 0.1888511435822351, 0.21793060889566018, 0.22541629528901486, 0.21713776842224175, 0.19697205936990292, 0.20076450998556705, 0.10154219303081768, 0.09353443550633056, 0.0803978930712056, 0.10726394706847475, 0.09050230286620864, 0.09093581608500423, 0.080123384898798, 0.08825325206467749, 0.08569380087108547, 0.08241275144672655, 0.07915977281083109, 0.07714394377946576, 0.0837583879658812, 0.0902282611782006, 0.08017122466370186, 0.08505162444487191, 0.08068586590336746, 0.08755588542242276, 0.8754998241818985, 0.9679393294611665, 0.9780943764502987, 0.9698501311245561, 0.8027319567252404, 0.940593111129805, 0.9544062401648662, 0.9614691954001128, 0.8803354560714124, 0.17005859803932089, 0.15792789693082543, 0.16477271390627846, 0.17519020893630932, 0.18294957641561815, 0.1850846902469896, 0.1776684342934285, 0.18123481355159465, 0.1824096685736305, 0.19800412683758728, 0.20666221586298117, 0.21460913960247674, 0.2051679688501442, 0.22348325357026522, 0.20266972386720616, 0.21657220618551798, 0.21047904509291882, 0.21592772135458604, 0.15072097515498195, 0.1362271543151019, 0.14596206418012025, 0.1555460809200515, 0.13815860641842392, 0.12737270708599557, 0.14846575056002564, 0.15677642130899272, 0.13662548321146606, 0.05126300167691111, 0.19106989822181009, 0.1454843242325432, 0.13851491319796372, 0.1551870024926939, 0.13988312715616524, 0.1433487262306664, 0.1498627188072258, 0.15478091505738667, 0.12264926758907935, 0.13400976158976574, 0.14357478944358804, 0.14461631677616948, 0.14845998084068923, 0.1612178728360708, 0.15483948897503064, 0.1388652275686325, 0.1416571855654436, 0.18702494863041053, 0.22235496227235263, 0.1943883424432704, 0.18606441688047193, 0.2028975357834747, 0.193980832150072, 0.18764663949899296, 0.18481515816870808, 0.211175067128763, 0.07321691977591038, 0.04330822558214764, 0.031081115812381488, 0.08175941794290598, 0.0766400255809132, 0.07805189971674842, 0.037145063093376174, 0.06612597260002384, 0.07662009988101837, 0.11361196157454578, 0.11406021380669173, 0.11925380007302777, 0.1296584032472038, 0.11826153332052292, 0.127626721449694, 0.11139050055670652, 0.11985518971766773, 0.11256506905072239, 0.22948638032761493, 0.24433628119008144, 0.21507322077520774, 0.22759374775002983, 0.23785876254729088, 0.22922847659539003, 0.21648269900680406, 0.22355847810324792, 0.22554231964496108, 0.09305005534344624, 0.08165252031034997, 0.08741394012850356, 0.07891849098498338, 0.08690200690811667, 0.08235677262813645, 0.06640697447226307, 0.08139428431962714, 0.07482663156437086, 0.14106341866506156, 0.1378861896742536, 0.16406590850873326, 0.18121158532099613, 0.1385956499004738, 0.14813850008139473, 0.1352412778525791, 0.13850982567572956, 0.16501071172254866, 0.17807638652565072, 0.18771839922837963, 0.18258786399862215, 0.1694187777598516, 0.1690467609467674, 0.17605223445680185, 0.18079075059373284, 0.19398720424792493, 0.18846845467862428, 0.14710364365271145, 0.15130130002532682, 0.14863963466922958, 0.15216617888153472, 0.14932608469739894, 0.13892897007804472, 0.15597980596728578, 0.14740793608014224, 0.1533578175113327, 0.15851553475428715, 0.16925284392119944, 0.1615618934826023, 0.17853218474618715, 0.16109898481537, 0.17159024640779752, 0.1652960926168957, 0.17231093509453954, 0.16960946666173604, 0.20749727649166938, 0.17417043732788484, 0.16789194435167187, 0.17354506426307215, 0.17539437895175847, 0.1710402201696719, 0.16942083893436133, 0.16875627062669918, 0.18284809725297535, 0.2687727899812168, 0.17676183448306493, 0.13881085681408023, 0.16016388443972485, 0.16190389022330764, 0.16419972570003705, 0.16428301766120734, 0.17818616850478486, 0.2506121739087861, 0.15065822699435716, 0.16232662717083435, 0.1638781742190879, 0.15471240353545823, 0.1499135112739861, 0.15020146062815365, 0.18427803336022497, 0.11864257512966758, 0.18470848087026936, 0.18213411744600994, 0.19136420164003443, 0.21931227142402732, 0.19466026448824902, 0.18287164124052302, 0.1879945849718111, 0.18761901798871528, 0.19417086557999486, 0.18768560533378753, 0.06296467110850368, 0.06250654871822425, 0.06681259391759153, 0.059410353815829375, 0.06332686141267818, 0.07003040291510276, 0.07171334636358129, 0.06504907807734706, 0.08564920559011602]}, "mutation_prompt": null}
{"id": "9c5a8843-2da1-439e-8bef-87272aedaaa2", "solution": "import numpy as np\n\nclass OptimizedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation and acceptance\n                trial_fitness = func(trial)\n                evals += 1\n                delta_fitness = trial_fitness - fitness[i]\n                if delta_fitness < 0 or np.random.rand() < np.exp(-delta_fitness / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with linear decay\n            temperature *= self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "OptimizedHybridDESA", "description": "Optimized the HybridDESA algorithm by reducing redundant evaluations and improving loop efficiency for better runtime performance.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a800e153-f071-4e69-808f-d4ab10f991e4", "metadata": {"aucs": [0.21871211761685738, 0.23473127639302682, 0.22217235727839735, 0.27074751447089407, 0.23835654411626594, 0.24239647435175282, 0.23706721973568046, 0.23018369797463634, 0.24218895019214848, 0.1902200966140909, 0.19552945922937037, 0.20529359349126508, 0.1888511435822351, 0.21793060889566018, 0.22541629528901486, 0.21713776842224175, 0.19697205936990292, 0.20076450998556705, 0.10154219303081768, 0.09353443550633056, 0.0803978930712056, 0.10726394706847475, 0.09050230286620864, 0.09093581608500423, 0.080123384898798, 0.08825325206467749, 0.08569380087108547, 0.08241275144672655, 0.07915977281083109, 0.07714394377946576, 0.0837583879658812, 0.0902282611782006, 0.08017122466370186, 0.08505162444487191, 0.08068586590336746, 0.08755588542242276, 0.8754998241818985, 0.9679393294611665, 0.9780943764502987, 0.9698501311245561, 0.8027319567252404, 0.940593111129805, 0.9544062401648662, 0.9614691954001128, 0.8803354560714124, 0.17005859803932089, 0.15792789693082543, 0.16477271390627846, 0.17519020893630932, 0.18294957641561815, 0.1850846902469896, 0.1776684342934285, 0.18123481355159465, 0.1824096685736305, 0.19800412683758728, 0.20666221586298117, 0.21460913960247674, 0.2051679688501442, 0.22348325357026522, 0.20266972386720616, 0.21657220618551798, 0.21047904509291882, 0.21592772135458604, 0.15072097515498195, 0.1362271543151019, 0.14596206418012025, 0.1555460809200515, 0.13815860641842392, 0.12737270708599557, 0.14846575056002564, 0.15677642130899272, 0.13662548321146606, 0.05126300167691111, 0.19106989822181009, 0.1454843242325432, 0.13851491319796372, 0.1551870024926939, 0.13988312715616524, 0.1433487262306664, 0.1498627188072258, 0.15478091505738667, 0.12264926758907935, 0.13400976158976574, 0.14357478944358804, 0.14461631677616948, 0.14845998084068923, 0.1612178728360708, 0.15483948897503064, 0.1388652275686325, 0.1416571855654436, 0.18702494863041053, 0.22235496227235263, 0.1943883424432704, 0.18606441688047193, 0.2028975357834747, 0.193980832150072, 0.18764663949899296, 0.18481515816870808, 0.211175067128763, 0.07321691977591038, 0.04330822558214764, 0.031081115812381488, 0.08175941794290598, 0.0766400255809132, 0.07805189971674842, 0.037145063093376174, 0.06612597260002384, 0.07662009988101837, 0.11361196157454578, 0.11406021380669173, 0.11925380007302777, 0.1296584032472038, 0.11826153332052292, 0.127626721449694, 0.11139050055670652, 0.11985518971766773, 0.11256506905072239, 0.22948638032761493, 0.24433628119008144, 0.21507322077520774, 0.22759374775002983, 0.23785876254729088, 0.22922847659539003, 0.21648269900680406, 0.22355847810324792, 0.22554231964496108, 0.09305005534344624, 0.08165252031034997, 0.08741394012850356, 0.07891849098498338, 0.08690200690811667, 0.08235677262813645, 0.06640697447226307, 0.08139428431962714, 0.07482663156437086, 0.14106341866506156, 0.1378861896742536, 0.16406590850873326, 0.18121158532099613, 0.1385956499004738, 0.14813850008139473, 0.1352412778525791, 0.13850982567572956, 0.16501071172254866, 0.17807638652565072, 0.18771839922837963, 0.18258786399862215, 0.1694187777598516, 0.1690467609467674, 0.17605223445680185, 0.18079075059373284, 0.19398720424792493, 0.18846845467862428, 0.14710364365271145, 0.15130130002532682, 0.14863963466922958, 0.15216617888153472, 0.14932608469739894, 0.13892897007804472, 0.15597980596728578, 0.14740793608014224, 0.1533578175113327, 0.15851553475428715, 0.16925284392119944, 0.1615618934826023, 0.17853218474618715, 0.16109898481537, 0.17159024640779752, 0.1652960926168957, 0.17231093509453954, 0.16960946666173604, 0.20749727649166938, 0.17417043732788484, 0.16789194435167187, 0.17354506426307215, 0.17539437895175847, 0.1710402201696719, 0.16942083893436133, 0.16875627062669918, 0.18284809725297535, 0.2687727899812168, 0.17676183448306493, 0.13881085681408023, 0.16016388443972485, 0.16190389022330764, 0.16419972570003705, 0.16428301766120734, 0.17818616850478486, 0.2506121739087861, 0.15065822699435716, 0.16232662717083435, 0.1638781742190879, 0.15471240353545823, 0.1499135112739861, 0.15020146062815365, 0.18427803336022497, 0.11864257512966758, 0.18470848087026936, 0.18213411744600994, 0.19136420164003443, 0.21931227142402732, 0.19466026448824902, 0.18287164124052302, 0.1879945849718111, 0.18761901798871528, 0.19417086557999486, 0.18768560533378753, 0.06296467110850368, 0.06250654871822425, 0.06681259391759153, 0.059410353815829375, 0.06332686141267818, 0.07003040291510276, 0.07171334636358129, 0.06504907807734706, 0.08564920559011602]}, "mutation_prompt": null}
{"id": "8cded212-b454-4bed-99aa-e9fd10c6cb14", "solution": "import numpy as np\n\nclass OptimizedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temp_init = 100  # Initial temperature for simulated annealing\n        self.temp_final = 0.1  # Final temperature\n        self.cooling_rate = 0.97  # Adjusted cooling rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        # Precompute random indices for mutation\n        random_indices = np.random.randint(0, self.population_size, (self.budget - evals, 3))\n        rand_idx_count = 0\n\n        # Evolutionary loop\n        temperature = self.temp_init\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                # Differential Evolution Mutation with precomputed indices\n                idxs = random_indices[rand_idx_count]\n                rand_idx_count += 1\n                x1, x2, x3 = population[idxs]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Binomial Crossover using boolean mask\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Fitness evaluation and acceptance\n                trial_fitness = func(trial)\n                evals += 1\n                delta_fitness = trial_fitness - fitness[i]\n                if delta_fitness < 0 or np.random.rand() < np.exp(-delta_fitness / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Cooling schedule with linear decay\n            temperature *= self.cooling_rate\n        \n        return population[np.argmin(fitness)]", "name": "OptimizedHybridDESA", "description": "Optimized the HybridDESA algorithm by reducing redundant evaluations and improving loop efficiency for better runtime performance.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a800e153-f071-4e69-808f-d4ab10f991e4", "metadata": {"aucs": [0.21871211761685738, 0.23473127639302682, 0.22217235727839735, 0.27074751447089407, 0.23835654411626594, 0.24239647435175282, 0.23706721973568046, 0.23018369797463634, 0.24218895019214848, 0.1902200966140909, 0.19552945922937037, 0.20529359349126508, 0.1888511435822351, 0.21793060889566018, 0.22541629528901486, 0.21713776842224175, 0.19697205936990292, 0.20076450998556705, 0.10154219303081768, 0.09353443550633056, 0.0803978930712056, 0.10726394706847475, 0.09050230286620864, 0.09093581608500423, 0.080123384898798, 0.08825325206467749, 0.08569380087108547, 0.08241275144672655, 0.07915977281083109, 0.07714394377946576, 0.0837583879658812, 0.0902282611782006, 0.08017122466370186, 0.08505162444487191, 0.08068586590336746, 0.08755588542242276, 0.8754998241818985, 0.9679393294611665, 0.9780943764502987, 0.9698501311245561, 0.8027319567252404, 0.940593111129805, 0.9544062401648662, 0.9614691954001128, 0.8803354560714124, 0.17005859803932089, 0.15792789693082543, 0.16477271390627846, 0.17519020893630932, 0.18294957641561815, 0.1850846902469896, 0.1776684342934285, 0.18123481355159465, 0.1824096685736305, 0.19800412683758728, 0.20666221586298117, 0.21460913960247674, 0.2051679688501442, 0.22348325357026522, 0.20266972386720616, 0.21657220618551798, 0.21047904509291882, 0.21592772135458604, 0.15072097515498195, 0.1362271543151019, 0.14596206418012025, 0.1555460809200515, 0.13815860641842392, 0.12737270708599557, 0.14846575056002564, 0.15677642130899272, 0.13662548321146606, 0.05126300167691111, 0.19106989822181009, 0.1454843242325432, 0.13851491319796372, 0.1551870024926939, 0.13988312715616524, 0.1433487262306664, 0.1498627188072258, 0.15478091505738667, 0.12264926758907935, 0.13400976158976574, 0.14357478944358804, 0.14461631677616948, 0.14845998084068923, 0.1612178728360708, 0.15483948897503064, 0.1388652275686325, 0.1416571855654436, 0.18702494863041053, 0.22235496227235263, 0.1943883424432704, 0.18606441688047193, 0.2028975357834747, 0.193980832150072, 0.18764663949899296, 0.18481515816870808, 0.211175067128763, 0.07321691977591038, 0.04330822558214764, 0.031081115812381488, 0.08175941794290598, 0.0766400255809132, 0.07805189971674842, 0.037145063093376174, 0.06612597260002384, 0.07662009988101837, 0.11361196157454578, 0.11406021380669173, 0.11925380007302777, 0.1296584032472038, 0.11826153332052292, 0.127626721449694, 0.11139050055670652, 0.11985518971766773, 0.11256506905072239, 0.22948638032761493, 0.24433628119008144, 0.21507322077520774, 0.22759374775002983, 0.23785876254729088, 0.22922847659539003, 0.21648269900680406, 0.22355847810324792, 0.22554231964496108, 0.09305005534344624, 0.08165252031034997, 0.08741394012850356, 0.07891849098498338, 0.08690200690811667, 0.08235677262813645, 0.06640697447226307, 0.08139428431962714, 0.07482663156437086, 0.14106341866506156, 0.1378861896742536, 0.16406590850873326, 0.18121158532099613, 0.1385956499004738, 0.14813850008139473, 0.1352412778525791, 0.13850982567572956, 0.16501071172254866, 0.17807638652565072, 0.18771839922837963, 0.18258786399862215, 0.1694187777598516, 0.1690467609467674, 0.17605223445680185, 0.18079075059373284, 0.19398720424792493, 0.18846845467862428, 0.14710364365271145, 0.15130130002532682, 0.14863963466922958, 0.15216617888153472, 0.14932608469739894, 0.13892897007804472, 0.15597980596728578, 0.14740793608014224, 0.1533578175113327, 0.15851553475428715, 0.16925284392119944, 0.1615618934826023, 0.17853218474618715, 0.16109898481537, 0.17159024640779752, 0.1652960926168957, 0.17231093509453954, 0.16960946666173604, 0.20749727649166938, 0.17417043732788484, 0.16789194435167187, 0.17354506426307215, 0.17539437895175847, 0.1710402201696719, 0.16942083893436133, 0.16875627062669918, 0.18284809725297535, 0.2687727899812168, 0.17676183448306493, 0.13881085681408023, 0.16016388443972485, 0.16190389022330764, 0.16419972570003705, 0.16428301766120734, 0.17818616850478486, 0.2506121739087861, 0.15065822699435716, 0.16232662717083435, 0.1638781742190879, 0.15471240353545823, 0.1499135112739861, 0.15020146062815365, 0.18427803336022497, 0.11864257512966758, 0.18470848087026936, 0.18213411744600994, 0.19136420164003443, 0.21931227142402732, 0.19466026448824902, 0.18287164124052302, 0.1879945849718111, 0.18761901798871528, 0.19417086557999486, 0.18768560533378753, 0.06296467110850368, 0.06250654871822425, 0.06681259391759153, 0.059410353815829375, 0.06332686141267818, 0.07003040291510276, 0.07171334636358129, 0.06504907807734706, 0.08564920559011602]}, "mutation_prompt": null}
