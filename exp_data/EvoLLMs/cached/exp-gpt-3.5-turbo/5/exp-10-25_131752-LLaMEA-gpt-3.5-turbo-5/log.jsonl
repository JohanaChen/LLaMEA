{"id": "b4450e60-20ac-477c-a893-a5702c4c37e0", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "A novel metaheuristic algorithm called Harmony Search Algorithm (HSA) to optimize black box functions by generating new solutions using a process inspired by musicians improvising harmonious music.", "configspace": "", "generation": 0, "fitness": 0.09174447116172771, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.17770426407828122, 0.1758923919573988, 0.17024187281920544, 0.17149680367425368, 0.18816409919628896, 0.17434099885345677, 0.1785738522203103, 0.1627745732600877, 0.19010343688805764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03731730824551327, 0.03948978223329991, 0.05284006369199856, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746922089081222, 0.07415201314607622, 0.0907845430050056, 0.08822850354672807, 0.0802405070652461, 0.08637798835829458, 0.08222551002345158, 0.0860882142292354, 0.07932928140346363, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.06235675173009281, 0.06159632848775487, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12551356758130827, 0.19338035912278329, 0.14869620585270515, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.1159805481505014, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.07460990088800867, 0.04835093667307078, 0.011988543793833517, 0.035362057023575866, 0.01331167896001939, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208204298307661, 0.19294523610749337, 0.19474535533599713, 0.20555818249196867, 0.18924041927641555, 0.20727143578678764, 0.19985143300954156, 0.1794686318794968, 0.2045587304823534, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.040578207267516375, 0.04601208007090696, 0.073263588849099, 0.04411195833094461, 0.05138468057601764, 0.13752577039280822, 0.12733005192038505, 0.13722502929599012, 0.14128878627424635, 0.14113610847135494, 0.1301055403980501, 0.15036794481076798, 0.14862065303538197, 0.1337664313237905, 0.17180880613530825, 0.16055691056558175, 0.17600792073869798, 0.16777841063371923, 0.18269499107331677, 0.17714170244249638, 0.16584545234604098, 0.173789866893872, 0.15378640871048954, 0.11531990429708294, 0.10383950805991149, 0.11848149799936125, 0.11234854223347246, 0.1361491901746955, 0.11677783744083814, 0.1062402925202599, 0.12374821236596778, 0.1229499928566754, 0.1410058031875464, 0.16264165158995914, 0.1583362542111576, 0.1601358572565298, 0.14809272627314551, 0.1625716302214587, 0.15487922482929373, 0.17370452513128953, 0.18275446336204348, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.14522962282922125, 0.15344767083522204, 0.14096434603863706, 0.14542523000088348, 0.16207881422481074, 0.18402564221653983, 0.16677311400055528, 0.1665645141881309, 0.15963925135576706, 0.15000987768077945, 0.14170698192810216, 0.16138240675694648, 0.16335670140052994, 0.17647340923194754, 0.15768323085769975, 0.15830914019827014, 0.16490131334164615, 0.15032954721282699, 0.18886654767919742, 0.16036955722882595, 0.16855891570295556, 0.1733857578475334, 0.2028764295516139, 0.17578027197742052, 0.190911156673788, 0.17569920853986354, 0.18699377177198984, 0.21357171056561985, 0.18373895683058195, 0.1759365063372943, 0.18939285805899886, 0.20569860024520714, 0.058344077551123696, 0.0553201504794788, 0.06584883359267546, 0.05186305593955043, 0.05934954918579993, 0.05593669431727999, 0.07532286703081303, 0.054982305351165994, 0.060734014235820366]}, "mutation_prompt": null}
{"id": "881d06a6-74b8-4dbb-9edc-34fca75b7602", "solution": "import numpy as np\n\nclass QuantumHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, qmr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.qmr = qmr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def quantum_mutation(harmony_memory):\n            mutated_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.qmr:\n                    phase_shift = np.random.uniform(0, 2*np.pi)\n                    mutated_harmony[i] += np.sin(phase_shift) * np.random.uniform(-1, 1)\n                    mutated_harmony[i] = np.clip(mutated_harmony[i], -5.0, 5.0)\n            return mutated_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = quantum_mutation(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumHarmonySearch", "description": "A novel metaheuristic algorithm called Quantum Harmony Search Algorithm (QHSA) that incorporates quantum-inspired operators to enhance exploration and exploitation for optimizing black box functions.", "configspace": "", "generation": 1, "fitness": 0.09144543544136895, "feedback": "The algorithm QuantumHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "b4450e60-20ac-477c-a893-a5702c4c37e0", "metadata": {"aucs": [0.1777120734443839, 0.17578705017503693, 0.17026368649618528, 0.17150364065308243, 0.1881776368996526, 0.1743435064021196, 0.1785644155249736, 0.16275796452203484, 0.19005709483794375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03731730824551327, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746947437265629, 0.07417787676969456, 0.09087429921538537, 0.08822863271431869, 0.080307933078265, 0.08639370341665376, 0.08222559889516068, 0.08618978007890199, 0.07933307353074615, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.06227510184226048, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12551934668328535, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22081804193176535, 0.19297871911520592, 0.19500595677621224, 0.20558526942244826, 0.18923442819522984, 0.20725128854932084, 0.19987394121886715, 0.1786017800840718, 0.2040758344077016, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05136137279013053, 0.13752661119451337, 0.12734227362630302, 0.13721680985239493, 0.1412860810390919, 0.14114312972440712, 0.13013755749087796, 0.15034741919073968, 0.1486237132747481, 0.13384305026345444, 0.17181664541843056, 0.16055907573301265, 0.1760281690733846, 0.16783948201155585, 0.18218149376327508, 0.17697043905528376, 0.1658623796769556, 0.1737809757887624, 0.15374317716827102, 0.1153309979963204, 0.1038311245831266, 0.11849028185502597, 0.11235921184951037, 0.13613448181625898, 0.11676919299387534, 0.10625541996624166, 0.12374064570758092, 0.1229216354465843, 0.14104337779844722, 0.16233294996933634, 0.15834988090165003, 0.16015573958184737, 0.14535590907380502, 0.16235906898786756, 0.15491942063799835, 0.17354621194858633, 0.18278965811907388, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18403262318726066, 0.16679639680945224, 0.1665810796864864, 0.15964385025912486, 0.15120098275515614, 0.14119666661354058, 0.16138603968000387, 0.163405537598465, 0.1765124002605979, 0.15768339727779057, 0.1583307469197771, 0.16490670890005987, 0.1503302157155313, 0.1888673130884283, 0.16042056130906623, 0.1685596975928655, 0.17338279739228946, 0.2028812389224398, 0.17573947183766558, 0.190923106626687, 0.17584844963341018, 0.18682586060395756, 0.21435794694006194, 0.18382439475410084, 0.1759570492934941, 0.18934445958242507, 0.2056890566721915, 0.05836845628104326, 0.055316762568836775, 0.06585155299632517, 0.051869349897152306, 0.05934830659822565, 0.055933964908894684, 0.07532477116812386, 0.05493141943624358, 0.060728228514615124]}, "mutation_prompt": null}
{"id": "609c46b9-d3ae-4ba2-8faf-a57950d77e30", "solution": "import numpy as np\n\nclass FlockSearch:\n    def __init__(self, budget, dim, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            new_position = np.clip(new_position, -5.0, 5.0)\n            return new_position\n\n        def update_velocity(velocity, best_position, global_best_position):\n            inertia = self.w * velocity\n            cognitive = self.c1 * np.random.rand() * (best_position - velocity)\n            social = self.c2 * np.random.rand() * (global_best_position - velocity)\n            new_velocity = inertia + cognitive + social\n            return new_velocity\n\n        population = initialize_population()\n        velocity = np.zeros((self.budget, self.dim))\n        best_position = population[np.argmin(func(population))]\n        global_best_position = np.copy(best_position)\n        \n        for _ in range(self.budget):\n            for i in range(self.budget):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_position)\n                population[i] = update_position(population[i], velocity[i])\n                if func(population[i]) < func(best_position):\n                    best_position = population[i]\n                if func(population[i]) < func(global_best_position):\n                    global_best_position = population[i]\n\n        return best_position", "name": "FlockSearch", "description": "A metaheuristic algorithm inspired by the behavior of birds flocking to search for optimal solutions by updating solutions based on the best individuals in the population.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm FlockSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "b4450e60-20ac-477c-a893-a5702c4c37e0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "38ee3fc9-5f16-4dc5-90bc-0246f255bab3", "solution": "import numpy as np\n\nclass ModifiedFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.5, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_fireflies():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def move_fireflies(fireflies):\n            new_fireflies = np.copy(fireflies)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(fireflies[j]) < func(fireflies[i]):\n                        beta = self.beta0 * np.exp(-self.gamma * np.linalg.norm(fireflies[j] - fireflies[i])**2)\n                        new_fireflies[i] += self.alpha * (fireflies[j] - fireflies[i]) * beta\n                        new_fireflies[i] = np.clip(new_fireflies[i], -5.0, 5.0)\n            return new_fireflies\n        \n        fireflies = initialize_fireflies()\n        for _ in range(self.budget):\n            fireflies = move_fireflies(fireflies)\n        return min(fireflies, key=lambda x: func(x))", "name": "ModifiedFireflyAlgorithm", "description": "Implementing a modified Firefly Algorithm (FA) for optimizing black box functions by simulating the flashing behavior of fireflies to attract each other and improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.08405074326702745, "feedback": "The algorithm ModifiedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "b4450e60-20ac-477c-a893-a5702c4c37e0", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "7248f02b-0197-4a76-a761-fc2be2ca946b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return self.beta0 * np.exp(-self.gamma * distance**2)\n\n        def move_fireflies(fireflies):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(fireflies[i]) > func(fireflies[j]):\n                        distance = np.linalg.norm(fireflies[i] - fireflies[j])\n                        beta = attractiveness(distance)\n                        fireflies[i] += beta * (fireflies[j] - fireflies[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        fireflies[i] = np.clip(fireflies[i], -5.0, 5.0)\n            return fireflies\n\n        fireflies = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            fireflies = move_fireflies(fireflies)\n        return fireflies[np.argmin([func(f) for f in fireflies])]", "name": "FireflyAlgorithm", "description": "Introducing Firefly Algorithm as an optimization heuristic inspired by the flashing behavior of fireflies to find optimal solutions in a dynamic environment.", "configspace": "", "generation": 4, "fitness": 0.0841630374041994, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "b4450e60-20ac-477c-a893-a5702c4c37e0", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502454145855876, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.0472612036367378, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.12101989612191066, 0.12100027782077394, 0.13987543366300104, 0.13916780410775698, 0.11733927206759764, 0.14763481983925486, 0.14467876293994975, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16327635951060493, 0.16732519450230976, 0.16784625148818755, 0.1569248708925337, 0.17364486802209667, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10113577223856118, 0.1252016238635446, 0.10666286959620341, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13268910872016626, 0.15451534811139422, 0.14216762865953625, 0.15284099887614033, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.16481758747400854, 0.1835301851688902, 0.17511779265286842, 0.18430238586030845, 0.20834770910876255, 0.176388394987671, 0.17378641104812154, 0.17890401218956087, 0.20343503955864994, 0.05177035105127237, 0.049039147045157216, 0.06398342394504342, 0.05022753009711356, 0.0586070684490142, 0.04906964415901416, 0.07206761357283153, 0.05270037810245409, 0.04297471096993832]}, "mutation_prompt": null}
{"id": "9e1149e5-f69f-4266-be7f-a95abe2b6d89", "solution": "import numpy as np\n\nclass QuantumHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, quantum_prob=0.6):\n        super().__init__(budget, dim, hmcr, par, bw)\n        self.quantum_prob = quantum_prob\n\n    def __call__(self, func):\n        def quantum_improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    if np.random.rand() < self.quantum_prob:\n                        phase = np.random.uniform(-np.pi, np.pi)\n                        rotation = np.random.choice([np.exp(1j * phase), np.exp(-1j * phase)])\n                        new_harmony[i] *= rotation\n                    else:\n                        new_harmony[i] += self.bw * np.random.randn()\n                        new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = quantum_improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumHarmonySearch", "description": "An innovative metaheuristic algorithm named Quantum Harmony Search Algorithm (QHSA) that integrates quantum computing principles to enhance search exploration and exploitation capabilities.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony_memory' is not defined\").", "error": "NameError(\"name 'initialize_harmony_memory' is not defined\")", "parent_id": "b4450e60-20ac-477c-a893-a5702c4c37e0", "metadata": {}, "mutation_prompt": null}
{"id": "537e940a-4245-47f4-bfd7-4301dff13b65", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 6, "fitness": 0.09420647861597962, "feedback": "The algorithm QuantumInspiredHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "b4450e60-20ac-477c-a893-a5702c4c37e0", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "1620f097-0461-44c2-b38c-3e4f67d5049b", "solution": "import numpy as np\n\nclass MultiPhaseQuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory, phase_factor):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony, self.phase_factor)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "MultiPhaseQuantumInspiredHarmonySearch", "description": "Enhancing Quantum-Inspired Harmony Search with a Multi-Phase Quantum Operator for Improved Global Exploration and Local Exploitation.", "configspace": "", "generation": 7, "fitness": 0.09420647861597962, "feedback": "The algorithm MultiPhaseQuantumInspiredHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "5b33d700-ff28-4adc-b6c4-44ca403becc0", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredHarmonySearch(QuantumInspiredHarmonySearch):\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        super().__init__(budget, dim, hmcr, par, bw, phase_factor)\n\n    def __call__(self, func):\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            dynamic_phase_factor = self.phase_factor * np.exp(-_ / self.budget)  # Adjust phase_factor dynamically\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony, dynamic_phase_factor)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "EnhancedQuantumInspiredHarmonySearch", "description": "Enhancing Quantum-Inspired Harmony Search by dynamically adjusting phase factor during improvisation to improve convergence speed and solution quality.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony_memory' is not defined\").", "error": "NameError(\"name 'initialize_harmony_memory' is not defined\")", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {}, "mutation_prompt": null}
{"id": "955a754f-4d40-4e55-911a-5b5a376bb262", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredHarmonySearch(QuantumInspiredHarmonySearch):\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5, phase_update_rate=0.01):\n        super().__init__(budget, dim, hmcr, par, bw, phase_factor)\n        self.phase_update_rate = phase_update_rate\n\n    def __call__(self, func):\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            phase_update = np.random.uniform(-self.phase_update_rate, self.phase_update_rate)\n            return np.multiply(harmony_memory, np.exp(1j * (self.phase_factor + phase_update) * phase))\n\n        return super().__call__(func)", "name": "AdaptiveQuantumInspiredHarmonySearch", "description": "Enhancing Quantum-Inspired Harmony Search by introducing adaptive phase manipulation for improved convergence speed and solution quality.", "configspace": "", "generation": 9, "fitness": 0.09420647861597962, "feedback": "The algorithm AdaptiveQuantumInspiredHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "420cc360-c030-4da2-a121-84777e3961cf", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "416d3a66-5ff9-4b34-85d5-c069b57e3a63", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "ef182623-0b5e-410f-8689-8aa90a5d7846", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "33e905da-5b85-4999-90f9-c3aff539e2fa", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearchWithDE:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5, de_cr=0.5, de_f=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n        self.de_cr = de_cr\n        self.de_f = de_f\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n            # Integrate Differential Evolution\n            r1, r2, r3 = np.random.randint(0, self.budget, 3)\n            de_trial = harmony_memory[r1] + self.de_f * (harmony_memory[r2] - harmony_memory[r3])\n            mask = np.random.rand(self.dim) < self.de_cr\n            harmony_memory[0] = np.where(mask, de_trial, harmony_memory[0])\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearchWithDE", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) enhanced with Differential Evolution (QIHS-DE) to improve exploration and exploitation for black box optimization.", "configspace": "", "generation": 13, "fitness": 0.09420647861597962, "feedback": "The algorithm QuantumInspiredHarmonySearchWithDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "611269e2-59ac-4175-98f2-890ed8277c83", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "2ad7fdfa-38a7-4692-9f83-8080d0bb875a", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "1aba48c1-faa0-4b7a-b44e-7452ba3b5777", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "cdf4ad73-9748-42b5-b4d2-45d3a0484a5a", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearch", "description": "A novel optimization algorithm named Quantum-Inspired Harmony Search (QIHS) combining quantum computing principles with harmony search for improved exploration-exploitation trade-off.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "c6af5d00-6d88-4357-adbf-7d1304ff8604", "solution": "import numpy as np\n\nclass ImprovedQuantumInspiredHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5, adapt_rate=0.05):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory, phase_factor):\n            phases = np.random.uniform(0, 2 * np.pi, size=self.dim)\n            return np.multiply(harmony_memory, np.exp(1j * phase_factor * phases))\n\n        def improvise_new_harmony(harmony_memory, phase_factor):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony, phase_factor)\n\n        harmony_memory = initialize_harmony_memory()\n        current_phase_factor = self.phase_factor\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory, current_phase_factor)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n            current_phase_factor = max(0, current_phase_factor + self.adapt_rate * (1 - _ / self.budget))\n        return harmony_memory[0]", "name": "ImprovedQuantumInspiredHarmonySearch", "description": "Improving Quantum-Inspired Harmony Search by enhancing exploration with adaptive parameter adjustments and dynamic phase factor modulation", "configspace": "", "generation": 18, "fitness": 0.08882686391173561, "feedback": "The algorithm ImprovedQuantumInspiredHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.1348876707549962, 0.18437096419889742, 0.20894424667294142, 0.14404636216244948, 0.11705700429277788, 0.09365203895416452, 0.1022101387913894, 0.1867391091216274, 0.09929452868700794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027913302848903032, 0.04905592775646006, 0.06562986835649065, 0.015302788888126306, 0.08256306535314084, 0.035341255459061305, 9.999999999998899e-05, 0.08827276900417014, 0.037159291846133424, 0.021872884019004002, 0.06326612387568242, 0.04479007717182082, 0.01742401035786456, 0.04628526054051241, 0.02847807442824779, 9.999999999998899e-05, 0.04695761350607541, 0.035126404735574046, 0.01889236162869945, 0.04925581449857486, 0.051777999544516784, 0.0186849773586788, 0.05003377062382475, 0.045932966706328626, 0.016808847349912837, 0.050388640352852954, 0.04700671779739385, 9.999999999998899e-05, 0.06554041893339291, 0.05224167269701463, 0.06132861804320422, 0.033380997933527556, 0.06927906284024343, 0.06977441062376388, 9.999999999998899e-05, 0.026970395454129714, 0.14043576530803292, 0.1348626957132557, 0.12510549969246765, 0.10989082344953893, 0.04965515941499887, 0.14524937932601623, 0.14214137242143365, 0.11356125754719959, 0.0943648742170693, 9.999999999998899e-05, 0.022608802388325078, 0.05164346168274969, 9.999999999998899e-05, 0.018321393615813752, 0.0017618555452905138, 0.02024363469779744, 0.01277708311340997, 9.999999999998899e-05, 0.028320107429065655, 0.011961134263708484, 0.025376413998879466, 0.038108760766331184, 0.05928727315178839, 0.049013745655301366, 0.04403634707893611, 0.04209303368529238, 0.030312548008383455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016540359888887024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07691524655673565, 0.08318750761390115, 0.08919937931462718, 0.031948563842152944, 0.059231757175415845, 0.05057234078206352, 0.07265142472786212, 0.072335973078691, 0.06173692048754331, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18829133246034901, 0.19054572742501608, 0.17890793789212112, 0.13353889158529875, 0.16699317742384245, 0.18501076798109906, 0.2114157734680665, 0.21570018543034641, 0.2140743077438717, 0.01609213446821156, 0.034249390376524746, 0.0043117654467387245, 0.05154444446536288, 0.026531994049470597, 0.05785586057486691, 0.034928071732330146, 0.06709436368261723, 0.051343602643690645, 0.13635053304028733, 0.14979871193233807, 0.16459017736595705, 0.13283373229544448, 0.13800605473277883, 0.16007375133572221, 0.15189646679690427, 0.13161942050339603, 0.13045229487286636, 0.16422754684976826, 0.18641594135687178, 0.1640026442756647, 0.1704898983265306, 0.17405319005548703, 0.1964572845976228, 0.17146939632621838, 0.1854291338655174, 0.16556678202794206, 0.10158264227841352, 0.12420858060968498, 0.10887767118604208, 0.1236582882067867, 0.11613749679158625, 0.13408394047556227, 0.1016497830558043, 0.15313036578375416, 0.10172135678488137, 0.18028385668894276, 0.18749571424124578, 0.17016174974947884, 0.1732576945182085, 0.18222578303573078, 0.18051307510929604, 0.18546531085321183, 0.18613407619240985, 0.18082930664776387, 0.15301976414715623, 0.15631315268501644, 0.15401252042167612, 0.1496297345542773, 0.14738471763506678, 0.15903497101871, 0.1613125289796592, 0.15706605750592884, 0.15634408418891832, 0.15738003434971748, 0.12933860477713865, 0.1625841962186685, 0.11247062709267974, 0.2165573033273387, 0.14621221252975847, 0.23011528782069157, 0.1823688079586544, 0.20506361850394883, 0.17432246909261628, 0.194199014005368, 0.2147380619264727, 0.13478034156800045, 0.1698490285661879, 0.16463180635016383, 0.2333538243558111, 0.13635187534612292, 0.1610347572995221, 0.19947866127524216, 0.19046874456511342, 0.19292718810924636, 0.19252711126786415, 0.1857739632318116, 0.17669664738173219, 0.179469697424971, 0.18707183769132807, 0.18743686543630667, 0.07036523687897245, 0.0561637144130982, 0.07184419307581191, 0.0639145946018369, 0.054302574631099776, 0.0605940948472542, 0.06120297020020338, 0.053064282439690524, 0.05666109381354778]}, "mutation_prompt": null}
{"id": "57c6e4e0-4688-4faa-808d-202cd0efe35d", "solution": "import numpy as np\n\nclass QuantumInspiredHarmonySearchDynamicBw:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01, phase_factor=0.5, bw_lower=0.001, bw_upper=0.1, bw_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n        self.phase_factor = phase_factor\n        self.bw_lower = bw_lower\n        self.bw_upper = bw_upper\n        self.bw_decay = bw_decay\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def apply_quantum_phase(harmony_memory):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(harmony_memory, np.exp(1j * self.phase_factor * phase))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    if np.random.rand() < self.par:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    else:\n                        j = np.random.randint(self.budget)\n                        new_harmony[i] = harmony_memory[j, i]\n                else:\n                    new_harmony[i] += self.bw * np.random.randn()\n                    new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n            return apply_quantum_phase(new_harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[0]):\n                harmony_memory[0] = new_harmony\n            self.bw = max(self.bw_lower, self.bw * self.bw_decay) if func(new_harmony) < func(harmony_memory[0]) else min(self.bw_upper, self.bw / self.bw_decay)\n        return harmony_memory[0]", "name": "QuantumInspiredHarmonySearchDynamicBw", "description": "Introducing Quantum-Inspired Harmony Search with Dynamic Bandwidth Adaptation for Enhanced Exploration and Exploitation Trade-off.", "configspace": "", "generation": 19, "fitness": 0.09420647861597962, "feedback": "The algorithm QuantumInspiredHarmonySearchDynamicBw got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.16495420765898394, 0.17321701307384196, 0.24750800804312134, 0.18217466216303346, 0.16227974451613758, 0.11306716026826047, 0.1805566305096834, 0.20289193431877817, 0.15211514348999644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0449162084113528, 0.0506081078865942, 0.053398052530371, 0.056549595043285494, 0.040193170163884684, 0.04690771231695068, 0.05631402325544843, 0.04865475449768253, 0.04052278321082414, 0.02993017032648182, 0.03396075257607267, 0.05321664227956424, 0.059979084497737145, 0.03538069197219906, 0.04556252188156418, 0.030869106944511948, 0.0355061855089458, 0.030920589348711336, 0.08243285443064252, 0.08462556495262907, 0.02668613903944894, 0.07114877070700754, 0.07736411280977173, 0.027885973574488854, 0.08380176047346521, 0.07469959905542711, 0.029164845183805133, 0.0828036876136492, 0.08739809898304574, 0.08218368015432265, 0.06699823862560494, 0.060292840797181446, 0.06117382396382087, 0.09635757242343901, 0.0881954848728439, 9.999999999998899e-05, 0.1505392349747493, 0.12606122595457814, 0.1594310976284149, 0.10709818743299748, 0.1488323786615383, 0.11327872898020419, 0.1271279658927924, 0.14100142758045908, 0.09638610864459829, 9.999999999998899e-05, 0.016116746045500285, 0.00423243713591126, 9.999999999998899e-05, 0.007357293210255911, 9.999999999998899e-05, 0.0002196185450135113, 9.999999999998899e-05, 0.03678261632841895, 0.031051808076104526, 0.017735669222861516, 0.04909557193317793, 0.003913024673286913, 9.999999999998899e-05, 0.05792589436467044, 0.0006281700118335731, 0.01464568219269291, 0.04311803215137877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035830469389484976, 0.048860179352270494, 0.06682887842454366, 0.052670931894849504, 0.05911924082029296, 0.062370777423713664, 0.038942408481587476, 0.09315977872248282, 0.08975531432032235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000616897543674555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19275111780883758, 0.22556694432418412, 0.23974118509970066, 0.19126930270978004, 0.18856733525797376, 0.18596190118254763, 0.19403102909579306, 0.20240930045437255, 0.25584474671026936, 0.07102008062430054, 0.039440484111555096, 0.023107565208129066, 0.04391997485604804, 0.050735094507170286, 0.04408072239269767, 0.04181527407271801, 0.046996171872862424, 0.0565703086053736, 0.1424393620702158, 0.12740433157773712, 0.1419323265527752, 0.18093400204589183, 0.15286324731453949, 0.12403963829627496, 0.15332037917212982, 0.12641620678605536, 0.14516323008473697, 0.14892329209096822, 0.16331032529384415, 0.17099035303505838, 0.15708797979658518, 0.18852504605476283, 0.21847396036354083, 0.1804664266075794, 0.16533457557540254, 0.1628795302561028, 0.10711061445390202, 0.09914872602998803, 0.12404647181746042, 0.1372724231582204, 0.11922750944773775, 0.16042710227616386, 0.1255579180537254, 0.1155012730646342, 0.11973467616967792, 0.16209011239136695, 0.15764284799381145, 0.18564206805530126, 0.17329147575261072, 0.17930786105335972, 0.20964824662140213, 0.1937614563401212, 0.16862423632255719, 0.18348456102673805, 0.15367263531564535, 0.14324407689793028, 0.16908316639027876, 0.15589481001916083, 0.14902353172105487, 0.1771212835130933, 0.13947828515596483, 0.14857124922776144, 0.17986592680319025, 0.18202213998845573, 0.16067850520336835, 0.16579734785332934, 0.156713876939641, 0.22037281259623864, 0.253935189232231, 0.15912766390682465, 0.16092086372294356, 0.21206321227164193, 0.14259789439914783, 0.17865733434921427, 0.20527732608331606, 0.1567204597847165, 0.1670526554975621, 0.18664558883094562, 0.16901901665055397, 0.17271667173488625, 0.20194259350611854, 0.18566119041605467, 0.18268124453309176, 0.19026221708843782, 0.18838881026609366, 0.18545442713556248, 0.1899158975208859, 0.20569991394560216, 0.18744326185108706, 0.19028114644610983, 0.05670396335094863, 0.051198975137592195, 0.07749197026161403, 0.048718927501173126, 0.056225941204608554, 0.06854478709970013, 0.05396482278466441, 0.07214508447290668, 0.06354685017368233]}, "mutation_prompt": null}
{"id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 20, "fitness": 0.09497759257252085, "feedback": "The algorithm QuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "537e940a-4245-47f4-bfd7-4301dff13b65", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "386178f1-f021-4217-bcad-ac248f2fb2a6", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "f3fcba70-4023-4238-acb9-6a272c7b4ca2", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "5fa08762-b952-4a2e-ada9-c750fa906676", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "5e644123-bbe7-48a8-b91f-55bea1e20e25", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "27eee40c-fc80-4806-be09-65a82ffe6c01", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "ae9a4223-ce78-4aae-9c79-bd6f62c24ab1", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "1699009b-b3d8-4588-afc2-bd5b0e73261a", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n                if np.random.rand() < self.mutation_rate:\n                    offspring_population[i] = parent + 0.1 * np.random.randn(self.dim)\n                    offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "EnhancedQuantumInspiredEvolutionaryStrategy", "description": "Enhancing Quantum-Inspired Evolutionary Strategy through adaptive mutation and elitism for improved optimization performance.", "configspace": "", "generation": 27, "fitness": 0.08963320967466368, "feedback": "The algorithm EnhancedQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.20509113639396293, 0.2721532132894229, 0.17311788742857648, 0.06922098473957339, 0.09529202597003517, 0.05739602438501423, 0.11055860745810753, 0.1248063341941783, 0.10170838060404697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02749446015658319, 0.04464600289351961, 0.054105250943213834, 0.054880485089637165, 0.048730755989194185, 0.032182423089507584, 0.04459949753006198, 0.0319388097311174, 0.024137300950428986, 0.015110722089233808, 0.029179029512920507, 0.05479078325188713, 0.02294632254636675, 0.03869935177194461, 0.0244865597024162, 9.999999999998899e-05, 0.04902597205240111, 0.02136242164277191, 0.0527695397932928, 0.04189189516325753, 0.05015593470816215, 0.045696046868648255, 0.05595623572644437, 0.03621904868468606, 0.03921325251483432, 0.05911289789700935, 0.031748635136101044, 0.02613629938365103, 0.03215098157144036, 0.008242091645711658, 0.02981191351121948, 0.06310329640123091, 0.022420444602603173, 0.01298320282227361, 0.010311853516389746, 0.0040018284062367515, 0.13290519601513573, 0.17246882767900573, 0.13151575840503305, 0.02591665016452893, 0.02430412457658715, 9.999999999998899e-05, 0.04155244889088028, 0.10268893651471878, 0.04171873019527561, 9.999999999998899e-05, 0.0004300775505317045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00112199415852543, 0.017562252947991297, 0.003274635526019476, 0.0011954657541922709, 0.17307482847894373, 0.17698040273923, 0.15106967613954325, 0.1836494140151672, 0.154250132285222, 0.1895271379729112, 0.1933255703253436, 0.1821165645292223, 0.1477155475347608, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04843056114169264, 0.053246963421966886, 0.09843844820796144, 0.055656756984410305, 0.055537385001801165, 0.04599681704110736, 0.05464164240224123, 0.05393496584184665, 0.03663013431865658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008216563243528263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03064937895590214, 9.999999999998899e-05, 0.1812523362122772, 0.2646654199294367, 0.2308530359732054, 0.11161711454059065, 0.15119347260999605, 0.14404676637565061, 0.3055889238868099, 0.20645842462256092, 0.20360497720588078, 9.999999999998899e-05, 0.003273535611916456, 0.031908449080724655, 0.032330574714639626, 0.02920602180706533, 0.02914253931158617, 0.013039312220923027, 0.03659969938524377, 0.06565479563921728, 0.11244034834543182, 0.18843482190179717, 0.1354028939179237, 0.12785418351690347, 0.1221919064983007, 0.1203536026707559, 0.20653490677436948, 0.1703645812758341, 0.13104518331457726, 0.13237675091161727, 0.1446837189979211, 0.13079505494887178, 0.15986322032776956, 0.16419022577301434, 0.1753546473808688, 0.12983906603945383, 0.14428677895919395, 0.15601930295409694, 0.06772232310460291, 0.08635418827083119, 0.0783714629474156, 0.11352123390498414, 0.10813604870915527, 0.11180748705130317, 0.0659894322442679, 0.10238312572946939, 0.12218606200289017, 0.3292977452819912, 0.2571997732460837, 0.25349036025497385, 0.27624324347935103, 0.28088832265840924, 0.23877948791788162, 0.27622976786834474, 0.27466586026808804, 0.29268997155969767, 0.14207138338974024, 0.15638279736286553, 0.16537191213245572, 0.17433028320095467, 0.1658481369546444, 0.15783967180029812, 0.14573358874159026, 0.14957301372967757, 0.1768025467526586, 0.16887661348730454, 0.12151323963456451, 0.10876587970135099, 0.22918265858037523, 0.1810640959130484, 0.09874424194852649, 0.10288267712139565, 0.10389998772717102, 0.11927521701134813, 0.20338934301916312, 0.185814235513739, 0.14594984242327302, 0.11953005155919505, 0.13081283414326883, 0.11781517305160338, 0.07663459094666158, 0.12691365604453986, 0.11080383526614568, 0.17561985419280957, 0.18144834845619506, 0.18479022949606283, 0.19731265034132428, 0.1687589398612681, 0.174977040923745, 0.1935241699331678, 0.19675296373762707, 0.18029077604287636, 0.10244951536788072, 0.04913890871620574, 0.06753413730251834, 0.0432826449313678, 0.07710401387747767, 0.0671685953989336, 0.044823528337431306, 0.060348561405410006, 0.045169190311306506]}, "mutation_prompt": null}
{"id": "6bd34485-966c-4c46-bfb3-47f808db2108", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "ddd02b78-314e-4e85-a2b9-1a3f64bdb9ea", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n        return population[0]", "name": "QuantumInspiredEvolutionaryStrategy", "description": "An evolutionary algorithm named Quantum-Inspired Evolutionary Strategy (QIES) that integrates principles from quantum computing with evolutionary strategy to enhance optimization performance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.27531677836995583, 0.30673614804885274, 0.2933891333464288, 0.0791361861583153, 0.0901505314997425, 0.0708238230431425, 0.1003372619213675, 0.12817522878592336, 0.12954437631656768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02934930466035568, 0.023716133880851475, 0.04998592331001328, 0.05864218605332405, 0.05264396874094146, 0.03314384456084207, 0.04839797850359551, 0.04890893185388556, 0.032083319798796084, 0.013747307266439912, 0.05402183451950937, 0.05030308522121685, 0.026972960271035795, 0.042107934973060535, 0.024238980650104658, 9.999999999998899e-05, 0.05072910809292297, 0.029601512129548424, 0.0600947393216662, 0.04324097236792401, 0.06281372862089751, 0.05247147440182254, 0.05954893043641274, 0.043754370136223186, 0.04432729535772051, 0.0628568760696051, 0.03860749777428485, 0.06747263284750693, 0.03267211488589383, 0.05339574470305397, 0.04631470711152719, 0.06322280196062202, 0.02759315922147365, 0.051115355780737115, 9.999999999998899e-05, 0.024402404674027323, 0.13277032038613013, 0.17202766532222125, 0.1313923542866653, 0.02306210345430626, 0.02926239301759237, 9.999999999998899e-05, 0.04006919830588107, 0.10205331084450842, 0.040857607851711664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020026396202806773, 9.999999999998899e-05, 0.01282201148980111, 0.0054496176697431675, 0.1704315807316038, 0.16390581858022646, 0.19202775725402765, 0.1802766282791356, 0.1757073805547309, 0.1690879677653957, 0.19937247449351847, 0.18376463567763668, 0.19008746669695198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06022697942460309, 0.059654902458604164, 0.07865164367559552, 0.04713525325783052, 0.052600216061267746, 0.04097069877099735, 0.0585549177094008, 0.062213297750148056, 0.08782992556423219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004259631911232464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029773035276263182, 9.999999999998899e-05, 0.1665087204253778, 0.28023871946951284, 0.2978984613567368, 0.12769219261246012, 0.15218137877982352, 0.17409157936397335, 0.29155557807869725, 0.24309507968782407, 0.2128088598268124, 9.999999999998899e-05, 0.0020367554756385298, 0.0432035185853642, 0.039199065859814586, 0.029288669469093698, 0.029514802468032175, 0.011930148645681427, 0.02976579459228046, 0.061126422044658124, 0.10805479160779963, 0.20368926130843035, 0.16299471511279717, 0.12647902460501248, 0.13543422633675706, 0.10450296706941009, 0.24093025282713465, 0.11503936129790437, 0.27549713940914644, 0.13221224314989377, 0.14263858106258198, 0.12713129011749702, 0.15487531269324628, 0.1650411283810408, 0.17006364555527853, 0.13994477606149447, 0.14025575046083016, 0.1584928532457609, 0.06752673076544013, 0.07901965615094375, 0.07506003771705605, 0.10126601548995773, 0.10716690510230187, 0.10440846644734825, 0.05858620332994291, 0.10545714126797234, 0.12257245913137815, 0.2718585343578137, 0.2653587769468253, 0.2470103823528188, 0.24413160593340621, 0.259777703135441, 0.2685133249341316, 0.24875333067252947, 0.2636715492570846, 0.2849878360481558, 0.15169371550992472, 0.1590718800690183, 0.17040065824075756, 0.1904449437507092, 0.15044180259624196, 0.1517790145650857, 0.14897582399454057, 0.1635351917547878, 0.17381595710148245, 0.1655366386078989, 0.07445024593961702, 0.15448732850361813, 0.25575225907495036, 0.19276016265474838, 0.1425995890715005, 0.1009070747114158, 0.10123305224414214, 0.15584943382963024, 0.22002368779030235, 0.2166628008189574, 0.18732346730265848, 0.14972111319122627, 0.12990897137007995, 0.16210644607184965, 0.07635115256454938, 0.14792609481390773, 0.1310156685575743, 0.1826685943504861, 0.18620900779080096, 0.2021548530800079, 0.19011299401637383, 0.1736843592797752, 0.1829828288190425, 0.19428522127567827, 0.18651925603415787, 0.19657172849935878, 0.09859371872124834, 0.05367357734693956, 0.06589397327255431, 0.04230263378669219, 0.06632657232702588, 0.058552173972577615, 0.04620257555898555, 0.05058624185057892, 0.045692006523789463]}, "mutation_prompt": null}
{"id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase to adaptively explore and exploit the search space for improved optimization performance", "configspace": "", "generation": 30, "fitness": 0.10903221575058826, "feedback": "The algorithm DynamicQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "f0f9eb95-8b7d-41c1-9633-7d89d32f4be0", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "9f7d29d2-dbbe-41c2-b023-684c7c1e9b61", "solution": "import numpy as np\n\nclass EnhancedDynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Adaptive phase factor\n        return population[0]", "name": "EnhancedDynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase and adaptive phase factor to enhance exploration and exploitation for black box optimization", "configspace": "", "generation": 31, "fitness": 0.10903221575058826, "feedback": "The algorithm EnhancedDynamicQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "9ae5f5c3-0b39-455b-9020-c9c7e2584b59", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase to adaptively explore and exploit the search space for improved optimization performance", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "9574ee51-5ccd-4c64-8659-766a07fc480e", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.clip(population + self.sigma * np.random.randn(self.lambda_, self.dim), -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            phase = np.random.uniform(0, 2 * np.pi)\n            offspring = mutate_population(population, self.phase_factor)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with dynamic mutation phase and phase adaptation to explore and exploit the search space for efficient optimization.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,5) (20,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,5) (20,5) ')", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {}, "mutation_prompt": null}
{"id": "0a9ecd96-d78b-41a5-a649-344296c73e5f", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Adaptive mutation phase\n        return population[0]", "name": "AdaptiveQuantumInspiredEvolutionaryStrategy", "description": "DynamicQuantumInspiredEvolutionaryStrategy with Adaptive Mutation Phase for Improved Convergence", "configspace": "", "generation": 34, "fitness": 0.10903221575058826, "feedback": "The algorithm AdaptiveQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "6889cb41-8d2e-4f7d-a46a-32e0ea93b26c", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase to adaptively explore and exploit the search space for improved optimization performance", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "7a33884f-3656-4f9d-9f8a-10449e2371a9", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def mutate_population(population):\n            mutated_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                a, b, c = np.random.choice(range(self.lambda_), 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                offspring = np.where(crossover, mutant, population[i])\n                mutated_population[i] = np.clip(offspring, -5.0, 5.0)\n            return mutated_population\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.f = np.clip(np.random.normal(self.f, 0.1), 0.1, 1.0)  # Adaptive mutation factor\n            self.cr = np.clip(np.random.normal(self.cr, 0.1), 0.1, 1.0)  # Adaptive crossover rate\n        return population[0]", "name": "DynamicDifferentialEvolution", "description": "Introducing a dynamic differential evolution strategy with adaptive mutation and crossover to enhance exploration and exploitation for improved optimization performance", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicDifferentialEvolution' object has no attribute 'mu'\").", "error": "AttributeError(\"'DynamicDifferentialEvolution' object has no attribute 'mu'\")", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {}, "mutation_prompt": null}
{"id": "2f60207d-40a6-46d6-a3be-15f3c33ab5f2", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase_factor):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * phase_factor * phase))\n\n        def mutate_population(population, phase_factor):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase_factor)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population, self.phase_factor)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "EnhancedQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with dynamic mutation phase and quantum phase factor adaptation for enhanced search space exploration and exploitation", "configspace": "", "generation": 37, "fitness": 0.10903221575058826, "feedback": "The algorithm EnhancedQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "b5b2fe35-56cf-4825-b675-035b8ad6026a", "solution": "import numpy as np\n\nclass EnhancedDynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase adjustment\n        return population[0]", "name": "EnhancedDynamicQuantumInspiredEvolutionaryStrategy", "description": "Enhancing exploration by dynamically adjusting mutation phase while exploiting promising regions through a quantum-inspired evolutionary strategy.", "configspace": "", "generation": 38, "fitness": 0.10903221575058826, "feedback": "The algorithm EnhancedDynamicQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "2d95438a-2266-46fb-87eb-0b17748d7e2c", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n        self.elitism_rate = elitism_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n            elite_idx = int(self.elitism_rate * self.mu)\n            elite_indices = np.argsort(fitness)[:elite_idx]\n            for idx in elite_indices:\n                if fitness[idx] < func(population[idx]):\n                    population[idx] = offspring[idx]\n        return population[0]", "name": "EnhancedQuantumInspiredEvolutionaryStrategy", "description": "Enhancing Quantum-inspired Evolutionary Strategy with adaptive mutation phase and elitism for better exploration-exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.10903221575058826, "feedback": "The algorithm EnhancedQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "815c4fa5-b68a-4fc6-b1b6-131364516ac6", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "EnhancedQuantumInspiredEvolutionaryStrategy", "description": "An enhanced Quantum-inspired Evolutionary Strategy with adaptive mutation phase and improved population initialization to efficiently optimize black box functions in a multidimensional search space.", "configspace": "", "generation": 40, "fitness": 0.10903221575058826, "feedback": "The algorithm EnhancedQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "91d58799-7c32-4fcd-9f18-ccb943b408c3", "solution": "import numpy as np\n\nclass ImprovedDynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                idxs = np.random.choice(range(self.mu), 3, replace=False)\n                trial_vector = population[idxs[0]] + self.f * (population[idxs[1]] - population[idxs[2]])\n                crossover = np.random.rand(self.dim) < self.cr\n                offspring_population[i] = np.where(crossover, trial_vector, population[i])\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "ImprovedDynamicQuantumInspiredEvolutionaryStrategy", "description": "Improving Quantum-inspired Evolutionary Strategy with dynamic mutation phase by introducing differential evolution strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 5 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 5 is out of bounds for axis 0 with size 5')", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {}, "mutation_prompt": null}
{"id": "42840168-f0d0-44df-8d05-2ba12ad4c6c3", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase to adaptively explore and exploit the search space for improved optimization performance", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "5f409357-1085-4b12-a37e-77fde1296170", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase to adaptively explore and exploit the search space for improved optimization performance", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "b6199e64-4fae-401d-9fc1-337823b4f7a1", "solution": "import numpy as np\n\nclass EnhancedDynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n        self.elitism_rate = elitism_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            # Introduce elitism\n            num_elites = int(self.mu * self.elitism_rate)\n            elite_indices = np.argsort(fitness)[:num_elites]\n            population[1:num_elites+1] = offspring[elite_indices]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "EnhancedDynamicQuantumInspiredEvolutionaryStrategy", "description": "Enhancing quantum-inspired evolutionary strategy by incorporating a dynamic mutation phase and elitism", "configspace": "", "generation": 44, "fitness": 0.10903221575058826, "feedback": "The algorithm EnhancedDynamicQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "a797574f-06a1-42c5-b7c3-f8719e4da419", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase to adaptively explore and exploit the search space for improved optimization performance", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "57eeea86-54bb-4fca-b075-d7a897db8788", "solution": "import numpy as np\n\nclass DynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population):\n            phase = np.random.uniform(0, 2 * np.pi)\n            return np.multiply(population, np.exp(1j * self.phase_factor * phase))\n\n        def mutate_population(population):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population)\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            offspring = mutate_population(population)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            self.phase_factor = np.random.uniform(0, 1)  # Dynamic mutation phase\n        return population[0]", "name": "DynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase to adaptively explore and exploit the search space for improved optimization performance", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.36351747495856057, 0.3220916844003947, 0.3653243459154897, 0.1254019508494726, 0.105588005493229, 0.10788397557538176, 0.16212939438895557, 0.17910486573099638, 0.26117980364370774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036859168145977894, 0.030371530869036878, 0.0663488428121145, 0.05968244198150208, 0.055766016989407086, 0.047170790905432525, 0.05614651634526768, 0.043259742868762996, 0.03775198028735938, 0.01871439861482138, 0.03387760626831804, 0.0549180806044669, 0.029477327547673293, 0.04381485868930102, 0.039708869732597796, 9.999999999998899e-05, 0.051128748096064935, 0.03623583562771504, 0.07132543949932957, 0.04563375667247915, 0.07427237590247238, 0.05705765825193776, 0.06444372742307625, 0.05253865901720833, 0.05067582012672078, 0.06369641975133034, 0.04647569698481324, 0.09957269934320889, 0.06917813584850996, 0.10414086533127043, 0.06532814069659276, 0.08183517739582113, 0.0585152406684909, 0.0909618977835116, 0.015744071952400573, 0.054127449641535486, 0.13272711395182557, 0.17236928774993743, 0.1328119177736684, 0.02219834589528258, 0.024320201786813267, 0.03706042285436051, 0.05819931582549853, 0.10205929053681173, 0.04118692668679047, 0.01904016906411632, 0.02286798002986612, 0.07631194552800402, 9.999999999998899e-05, 0.002835275610316268, 0.0950422742336432, 0.03924588753048519, 0.0903406238819, 0.07930466808615333, 0.17595759694899082, 0.17540281260298907, 0.16901143159452336, 0.18910567652508503, 0.17906426872930592, 0.20252887017234378, 0.19745954863519233, 0.18721742114424667, 0.22174168472514544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198236255867762, 0.09727590876444703, 0.07080563995838585, 0.057027933859726376, 0.05794866274399102, 0.02970036219424199, 0.060709691953258926, 0.04605930744136599, 0.0880788472893077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02969504120163491, 9.999999999998899e-05, 0.009614314993854345, 0.02691675674992644, 0.00210587955728736, 0.008145791669764368, 9.999999999998899e-05, 0.04902571797439281, 0.03660924037614899, 0.25127541827448974, 0.312449332020018, 0.365795655135271, 0.1540415571664966, 0.18359174851674231, 0.24964417070772316, 0.3471915470706788, 0.3170806107656087, 0.2912907787521549, 9.999999999998899e-05, 0.0012565614444327577, 0.04686391120891509, 0.04082062939843689, 0.02849293755993554, 0.03809412746714702, 0.015906555667473232, 0.037588166123931455, 0.06997298591458834, 0.19904184681948378, 0.23046624138779837, 0.15478336806168824, 0.13786262212635425, 0.11580677508039638, 0.13231550797042912, 0.20417755393387904, 0.1715379572195379, 0.1111016291903254, 0.1361011515582421, 0.15756173980252863, 0.12819560978132283, 0.15609326913252974, 0.17021004100519999, 0.1868711047214271, 0.13571364843071698, 0.14007255738884228, 0.1592744004496448, 0.07027050011558167, 0.09376454848033877, 0.09114898597672438, 0.1081089464662337, 0.11069859473589039, 0.1179791484584779, 0.06798098988416401, 0.09349596788488657, 0.1365859900656673, 0.2674939811576994, 0.2645782603704717, 0.27557227182963173, 0.286880273488037, 0.27850883829835127, 0.3121581234239391, 0.2680106279603196, 0.283621588872803, 0.2573700594500953, 0.1711590921811048, 0.16976155277873062, 0.16978178353457474, 0.1843699863957169, 0.1664562100158421, 0.16054561109980536, 0.1686038529071371, 0.14964583101038242, 0.1598462450749899, 0.1799522819889775, 0.07443372489378508, 0.1766200618151652, 0.38459018993087146, 0.19273445787879295, 0.1592432041313725, 0.1002566843064795, 0.10369142652997576, 0.16384844508619167, 0.34558724086413195, 0.3471649000704632, 0.26862024821542885, 0.19772115024424397, 0.1461612807176711, 0.16107471794717199, 0.07982676420462909, 0.14377371711038145, 0.13953216481810482, 0.1856242844419197, 0.17467199218330332, 0.1902486133560719, 0.1907079406236747, 0.18950700018621902, 0.18733452930794536, 0.19313992049052997, 0.18782804363327454, 0.17735387771473, 0.10096814407381394, 0.06021931213635612, 0.07134311047726438, 0.04058553309849233, 0.07356872959435845, 0.06429725276679199, 0.053722187675358524, 0.055259316374351886, 0.04751466704436136]}, "mutation_prompt": null}
{"id": "58f08670-7758-445b-b306-a845b2eb8c0c", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredEvolutionaryStrategy:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, 1)  # Adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredEvolutionaryStrategy", "description": "Utilizing Quantum-inspired Evolutionary Strategy with a dynamic mutation phase and adaptive phase selection for enhanced optimization performance", "configspace": "", "generation": 47, "fitness": 0.1111200223197076, "feedback": "The algorithm CustomDynamicQuantumInspiredEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "b6a10a9e-5e6c-444a-8b8c-40487f921353", "metadata": {"aucs": [0.3886043461213139, 0.3856760733695911, 0.37637201530222286, 0.1704513856447758, 0.22143736305049444, 0.13990744245497277, 0.2489203729155155, 0.25658534147561785, 0.2656204915582433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024643431786497416, 0.04041407551526777, 0.044393933849585454, 0.06255430128803074, 0.05884144649461709, 0.038683916730504864, 0.05316789717249759, 0.03943187437701212, 0.029287984311249016, 0.019751200493917764, 0.039272790048186845, 0.03333553189992455, 9.999999999998899e-05, 0.018677101134074503, 0.024383762752639426, 9.999999999998899e-05, 0.015620873112902167, 0.011269321398190368, 0.0737659833971751, 0.058279329351198395, 0.07879060879492517, 0.06355049096937615, 0.07511076896094493, 0.053683055363455745, 0.056368491098413354, 0.07681911698315602, 0.04426809269521437, 0.16605220554673472, 0.1083172264945973, 0.08662312926009486, 0.1039237248165753, 0.10139329466869695, 0.06309373347980851, 0.20920018403564777, 0.06947737055987413, 0.06567655668886097, 0.12084675136181666, 0.1207577776656984, 0.17166718744760545, 0.03957724948827923, 9.999999999998899e-05, 0.0033122118719682847, 0.04909992142263797, 9.999999999998899e-05, 0.041748835315246424, 0.09033526193080521, 0.04751621336493772, 0.06261442743373424, 9.999999999998899e-05, 9.999999999998899e-05, 0.09069414509451579, 0.08189795618001294, 0.08837736235298599, 0.06443446289840571, 0.12090729730811622, 0.15871403112770877, 0.16965158935755786, 0.18539179933825056, 0.18882764151478082, 0.18748803963208693, 0.17041028425896498, 0.20337257111293894, 0.1717253402607608, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05941625410313267, 0.08120001502227492, 0.10683698791792517, 0.060715713745842725, 0.05648564809922496, 0.023030648156727174, 0.07410597561034393, 0.03081492616960746, 0.08039398781379692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04291082813669034, 0.012138887704410628, 0.03254521875523153, 0.04521064742497016, 0.03082229914585155, 0.03248266615444606, 0.009847428767713051, 0.01803596419737985, 0.007616478844070351, 0.314873473006671, 0.3373202742440061, 0.3590997600811473, 0.21422817691018736, 0.3066652761795855, 0.28246083708652914, 0.35018735234436205, 0.32897774320938034, 0.3464688923305448, 9.999999999998899e-05, 9.999999999998899e-05, 0.03336425497700202, 0.03003839044693868, 0.03109884168910282, 0.038762218042638574, 0.0024925280159288077, 0.03197511816704157, 0.06609388958407691, 0.15288595589616272, 0.20614505322586552, 0.1752199099166979, 0.1467894917960353, 0.16990029146679098, 0.12233526898391045, 0.13708476951061643, 0.15796628281330738, 0.23136925791052176, 0.13374494010826654, 0.1436598130769351, 0.1307924922314898, 0.15756178359691753, 0.16881238362999806, 0.18227689027801042, 0.12869513811819466, 0.14205411469003104, 0.15733488500109338, 0.07186196027669922, 0.09066404838801134, 0.0690015104336491, 0.11519031339858299, 0.09337533384128838, 0.12711888712726616, 0.06570217319359539, 0.10430768274053503, 0.12050190232626479, 0.21806206485088087, 0.2576609678057522, 0.19282155070371398, 0.2282037732981046, 0.26704742629167677, 0.2372362189474847, 0.22130902882464787, 0.20887826152142475, 0.18496786248877728, 0.16878535510813786, 0.13874514514742042, 0.16966748543918642, 0.164396573029581, 0.15518731551752207, 0.1650870911665574, 0.16738168085608507, 0.15973100872640444, 0.17057391237958186, 0.18416838360195298, 0.07538487273587657, 0.23373698864521775, 0.5064907330400841, 0.19683034444953396, 0.15547470755122828, 0.1373257586989758, 0.11421455756620602, 0.09854799143417081, 0.11684882473062042, 0.3561089093169716, 0.35508444746293366, 0.30609437681435003, 0.15897826738953935, 0.15977094178720086, 0.1456229171871477, 0.08438347097574694, 0.10086616885808652, 0.19002143723251452, 0.19205199735125467, 0.19683927704396342, 0.17256631015111357, 0.18225717529888374, 0.18840010257283446, 0.20017982302144066, 0.17417911701483646, 0.18277396060395568, 0.11979223231948277, 0.04650014384065193, 0.06446157394342777, 0.04419540407970113, 0.08631767986397676, 0.06655978568892695, 0.05451075470166811, 0.05505254649739144, 0.04795398425810693]}, "mutation_prompt": null}
{"id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 48, "fitness": 0.12436109095983107, "feedback": "The algorithm CustomDynamicQuantumInspiredOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "58f08670-7758-445b-b306-a845b2eb8c0c", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "e4106626-58d3-4980-88fd-b8996250f7f7", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "0689cbff-2d77-42c7-b390-d3154611dc48", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "EnhancedQuantumInspiredOptimization", "description": "Enhancing Quantum-inspired Metaheuristic Algorithm with Adaptive Phase Control and Improved Mutation Strategy for Black Box Optimization", "configspace": "", "generation": 50, "fitness": 0.12436109095983107, "feedback": "The algorithm EnhancedQuantumInspiredOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "aa666923-d33d-468a-8f7b-fd7eaf272e7d", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "a389b62b-3b1e-4c35-b4c5-a242be9c647d", "solution": "import numpy as np\n\nclass CustomHybridFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            sigma1 = (np.math.gamma(1 + self.beta0) * np.sin(np.pi * self.beta0 / 2)) / (np.math.gamma((1 + self.beta0) / 2) * self.beta0 * 2 ** ((self.beta0 - 1) / 2))\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, dim)\n            v = np.random.normal(0, sigma2, dim)\n            step = u / np.power(np.abs(v), 1 / self.beta0)\n            return self.alpha * step\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(population[i]) < func(population[j]):\n                        step = levy_flight(self.dim)\n                        population[i] += self.gamma * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n        best_index = np.argmin([func(individual) for individual in population])\n        return population[best_index]", "name": "CustomHybridFireflyAlgorithm", "description": "Introducing a Novel Hybrid Firefly Algorithm with Dynamic Levy Flight Mutation for Black Box Optimization", "configspace": "", "generation": 52, "fitness": 0.08423113631444813, "feedback": "The algorithm CustomHybridFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.16922366095325037, 0.17405532521825262, 0.16287668652659426, 0.15712748334345394, 0.17649640392473176, 0.16664296446213944, 0.1702610027674777, 0.15035876431518502, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03638160642053101, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.0810733875427413, 0.0802675228163704, 0.07626316680413836, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09634048540316487, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03797745859340862, 0.06600492231431232, 0.04329876953489298, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.03599233111887479, 0.03281190542321222, 0.0488587867928707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21372152322537807, 0.19064354651143434, 0.176806362362948, 0.20274517788360524, 0.18329860184692526, 0.19563030720860775, 0.19544069197218483, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806950790074155, 0.12093594562712029, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.1476350857839137, 0.14526513225660076, 0.12208256627744829, 0.16339500341649038, 0.15439440067120414, 0.16746505344583962, 0.16328808326183675, 0.16732519450230976, 0.1678789794330714, 0.15714262961833358, 0.17364340948589474, 0.14495360044085537, 0.10305204163257409, 0.09645586794840277, 0.10911721304895583, 0.10115647982840548, 0.1252016238635446, 0.10672883907339326, 0.10145484883831346, 0.12308409916342788, 0.1166830008582368, 0.1331988095840081, 0.15451534811139422, 0.1421707255210517, 0.15354149469121092, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15961846118765355, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793691062545, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.12901923870331444, 0.15343965519002234, 0.15393373965741808, 0.15492076561818646, 0.14839819725353842, 0.1460792601669626, 0.1469808249548954, 0.13402108048380756, 0.13430577240401198, 0.14832764160029732, 0.162019298172546, 0.16397241105815452, 0.14409045054873382, 0.1692710935779711, 0.1835301851688902, 0.17156041100355435, 0.18575884519749375, 0.2077621331717494, 0.176388394987671, 0.17446437699476358, 0.18793241202550948, 0.20332995035089896, 0.05175367147830234, 0.049039147045157216, 0.06398342394504342, 0.05016160916725931, 0.0586070684490142, 0.04906964415901416, 0.07208984179935884, 0.05270037810245409, 0.04224843193395067]}, "mutation_prompt": null}
{"id": "d5918235-82b2-47cb-b304-29ddca2ccef6", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "2a1201a7-5d37-46a9-ab02-48bb0a49b360", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "30e0c39c-81bd-4c81-9eac-8b4e938fd23b", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "aeb2ad4c-8f12-45db-ac29-12bc8e7bd341", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "2b58a7c1-2868-442f-b0ff-8160dd0d8f4c", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "c1cb7a6f-b84e-4701-8f3f-a955fc7dcf78", "solution": "import numpy as np\n\nclass CustomDynamicQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n        return population[0]", "name": "CustomDynamicQuantumInspiredOptimization", "description": "Introducing a Novel Quantum-inspired Metaheuristic Algorithm with Dynamic Mutation and Adaptive Phase Control for Black Box Optimization", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.3919379222884508, 0.4290268162930302, 0.44426409368226216, 0.3190210483435916, 0.3272637247722511, 0.3131839010522771, 0.32755388418786524, 0.35606105185646253, 0.36596536947588565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049437874960862604, 9.999999999998899e-05, 9.999999999998899e-05, 0.001968369227756561, 0.01427371797029442, 0.0643729588695845, 0.06576667923144541, 0.049894728827659995, 0.0409920273132337, 0.04679692506107369, 0.039310709201623606, 0.024231034106775406, 0.0035554734952203404, 9.999999999998899e-05, 0.03440582022722194, 0.001578700096848129, 9.999999999998899e-05, 0.026352527287935246, 9.999999999998899e-05, 0.01743538851121762, 0.011970514062000226, 0.09483208611244609, 0.06851882835885537, 0.10432437191072275, 0.07629575474181927, 0.07998082586793664, 0.0641237565567766, 0.06474864687811277, 0.08181076605597881, 0.05551855277834916, 0.24659894812078775, 0.18728785057180464, 0.15851145827015867, 0.18597465393459733, 0.19560482036439464, 0.13709728926025277, 0.2575865329929863, 0.17563982426908786, 0.16971764607101525, 0.13134859154931033, 0.07702204013102909, 0.19048238161521935, 0.02412204214094804, 9.999999999998899e-05, 0.003524740486257394, 0.05088089450027711, 9.999999999998899e-05, 0.04187812414019809, 0.13035997676074096, 0.09668719286233496, 0.10754446124527572, 0.06573252797935147, 0.06962963014584034, 0.11854718388107754, 0.1505385216451628, 0.12053644065848368, 0.1455250559823722, 0.13058109106024207, 0.1713632211356484, 0.18184425595624365, 0.19057722077719397, 0.19895499543960327, 0.1864481760562876, 0.18008398289782512, 0.16312800269220895, 0.12571275193025722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010535568957188435, 9.999999999998899e-05, 0.05745610955099656, 0.056549277810360454, 0.04857615086076217, 0.06621514606337564, 0.018178556520545897, 0.02381093761998332, 0.0654768604401399, 0.03435717100920632, 0.08235854661172182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192804546844477, 0.056155792669285054, 0.05037822673106984, 0.04157790519649518, 0.07278195981335212, 0.09533008412474975, 0.0445576199091654, 0.05419574309480646, 0.032956899826603325, 0.35279641758904734, 0.3671640332168602, 0.3911389408812642, 0.3182216200052532, 0.3359138796695431, 0.36590924008995473, 0.3623971777812893, 0.37397881937074484, 0.3892778155633566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201887634641566, 0.03870360552727037, 0.03614690753307481, 0.047813505608023665, 0.0022242115565437315, 0.04879185194623459, 0.06663426974241671, 0.1925446619101484, 0.21877561838056003, 0.09676704731211849, 0.13613724801846183, 0.20505553237497032, 0.15349355588475433, 0.1770042277092958, 0.11195322338696823, 0.24258495290673465, 0.1265359168422734, 0.15165878918698328, 0.15919715549215085, 0.16327434764355364, 0.14684811778109674, 0.22992959634318555, 0.1345914487400014, 0.13052220042252283, 0.15879437705924115, 0.060363303462008244, 0.0959915962930682, 0.07837015396787306, 0.12554549543831017, 0.12683508184246817, 0.13262578691856763, 0.06673592664084937, 0.11068959800599354, 0.11921670580218946, 0.1921589874976275, 0.16004964143442557, 0.15489265035882405, 0.18730359981976863, 0.18906065923978754, 0.1719684262001594, 0.1708930319588552, 0.13194957379640093, 0.17144687721314966, 0.167246725499137, 0.14711062370556316, 0.17291344476682535, 0.19253625513782813, 0.16984852568610564, 0.18531912459409372, 0.16439678075838315, 0.1784003838304158, 0.18193645348598453, 0.18570460019278767, 0.07601853189151075, 0.39645292354947437, 0.5299772449946529, 0.19945600337658653, 0.11866350128285341, 0.1494608030653135, 0.1207179040235693, 0.15929560477686044, 0.1330439539442213, 0.4295669740186654, 0.4319549288830745, 0.4456571946087068, 0.16436519965188634, 0.1630839825511734, 0.15923464764293427, 0.08896627289494241, 0.10590167865438327, 0.17679201008342238, 0.18307534965891148, 0.18987732695598003, 0.18985208300148348, 0.1909752604500512, 0.20860268594158626, 0.1910460126664706, 0.18019569228367094, 0.18464854907865536, 0.08085799331225785, 0.03663051131910777, 0.058805638574779384, 0.0472469202430309, 0.07119972305910216, 0.055615989848591396, 0.04506257027953653, 0.04809195720551673, 0.038844940240474024]}, "mutation_prompt": null}
{"id": "96b36757-39ca-4905-96e9-f99825102ed6", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n            if np.random.rand() < 0.05:  # Introduce exploration\n                phase = np.random.uniform(0, 2 * np.pi)\n                self.sigma *= 0.9  # Reduce mutation step size for exploration\n        return population[0]", "name": "EnhancedQuantumInspiredOptimization", "description": "Enhancing Quantum-inspired Metaheuristic with Improved Adaptive Phase Control and Population Update Strategy", "configspace": "", "generation": 59, "fitness": 0.1252828322063362, "feedback": "The algorithm EnhancedQuantumInspiredOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "68d174e7-427a-4c4c-b470-4f1ba70341e4", "metadata": {"aucs": [0.5162914091938688, 0.48276175451582914, 0.5043144628113847, 0.14924956956063162, 0.36199589562446577, 0.22294514269242327, 0.3879904306204236, 0.4446559294297432, 0.44986142007102004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023272586452082078, 0.014538204929739895, 0.059547026602105535, 0.03691002760585638, 0.05307902434844747, 0.022225140611452088, 0.043097933291057045, 0.04139135820198081, 0.011855567365564479, 0.008433337706208133, 0.01727577286818449, 0.061361709752487115, 0.01884523040010777, 0.04452432608144841, 0.027170538918283804, 9.999999999998899e-05, 0.02189356381675256, 0.03402610862681954, 0.07252607518516485, 0.06147728295046073, 0.07346177358499428, 0.06210984226981342, 0.078816949185607, 0.05789974624357275, 0.05573748059839512, 0.07962289558790925, 0.050809064271449045, 0.24971759554040285, 0.22093724480674293, 0.30011498565375727, 0.08043512371217598, 0.20386846125820646, 0.08456845528517132, 0.1829521371493149, 0.0785999694424867, 0.10079748099037644, 0.10814986912514812, 0.14712036385365923, 0.1413525505031099, 0.0142096981935661, 0.02033895296575916, 9.999999999998899e-05, 0.039975789136966866, 0.08963963158910304, 0.03423524085365737, 0.13150332697366685, 0.12256734605836705, 0.010331776032757478, 9.999999999998899e-05, 0.09808880519843954, 0.1422989081758722, 0.1162538922801617, 0.14315636409443466, 0.160001706118867, 0.13415839697252974, 0.18729396963187073, 0.24385805777546343, 0.1793438356049344, 0.2322311488288139, 0.1776383655088759, 0.16140135530423771, 0.23430505653595202, 0.12644323600431695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02423709599152757, 0.057005719901361385, 0.093350655483035, 0.037902783000336226, 0.06445203974197133, 0.009869110878312659, 0.015877771685339437, 0.051635623165609434, 0.03621359223740361, 0.08703106920297854, 0.028676540804762007, 0.009250186377190994, 0.020941521355130277, 0.007565739970717966, 9.999999999998899e-05, 0.02392091442230937, 9.999999999998899e-05, 0.009560461016558608, 0.011079835904114765, 0.07773939443352973, 0.0713278274775404, 0.05393970787138769, 0.08103303010733909, 0.0975613864728444, 0.016876864936472336, 0.004769613930935557, 0.09888803131701918, 0.06234802772049175, 0.38584746757867405, 0.40282715762627264, 0.4585551403674619, 0.1852964267077163, 0.3810003651443842, 0.3965465702722092, 0.43217145905313115, 0.40475018167816057, 0.4636504203480688, 9.999999999998899e-05, 9.999999999998899e-05, 0.04467430744964129, 0.042338204736634855, 0.048286950620253455, 0.027438284552511738, 0.003003160397946125, 0.021931713065170833, 0.07287006419865993, 0.10780825805746386, 0.2780262777014598, 0.15695289448745497, 0.14249217751814336, 0.1673777925280241, 0.1369451673403983, 0.16105513623084555, 0.12494426648727208, 0.1794424623306211, 0.11467309846847562, 0.140534472253523, 0.1359751246417369, 0.15738603936085893, 0.15979511149362569, 0.17950701174575456, 0.14638743627284534, 0.12523680775534918, 0.16021792765179366, 0.06034961856271237, 0.13662360773222904, 0.09286176312522054, 0.11832024880341163, 0.11094861780315368, 0.13547576015126328, 0.07119590159380207, 0.11280180354801106, 0.12150130399038628, 0.20372076961510022, 0.22615031602870495, 0.21328578782652452, 0.17573545716878747, 0.2127291874749052, 0.1945321191090934, 0.18102799170331785, 0.29833227856816125, 0.19999282191905876, 0.18035913454981656, 0.15838508572345456, 0.19119973128972922, 0.18386139903825327, 0.17220961600360807, 0.18093481046494642, 0.16592248264438025, 0.17254084347768184, 0.18646931120247423, 0.18484843891426894, 0.07603009294874341, 0.15722688323946954, 0.17104619286040812, 0.20003702310473204, 0.12120990830841405, 0.15363079858489948, 0.11365014469444756, 0.10198734848688584, 0.11675185281614175, 0.5376059652200131, 0.4070327164559032, 0.3454074581758497, 0.16624913830351218, 0.16725418907047385, 0.15618526001081612, 0.09127115209033487, 0.10902285938498157, 0.19471944466540103, 0.16839613359524142, 0.1833639743709361, 0.18034022732840183, 0.19602504222626638, 0.19333994974779745, 0.1883848974301755, 0.17695992713511677, 0.19551357012225146, 0.07244688329824023, 0.04068604311198687, 0.06345303346967301, 0.044882934700746446, 0.06085059831270023, 0.05423062227047848, 0.056587250283738455, 0.05431069165368119, 0.05142178039363876]}, "mutation_prompt": null}
{"id": "fa8b2ed9-5d99-41ee-90e6-f1b144bbcbe8", "solution": "import numpy as np\n\nclass HybridDEWithAdaptiveMutation:\n    def __init__(self, budget, dim, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        def mutate_population(population, target_index):\n            candidates = [idx for idx in range(self.budget) if idx != target_index]\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + self.f * (population[b] - population[c])\n            crossover_points = np.random.rand(self.dim) < self.cr\n            trial = np.where(crossover_points, mutant, population[target_index])\n            trial = np.clip(trial, -5.0, 5.0)\n            return trial\n\n        population = initialize_population()\n        for _ in range(self.budget):\n            new_population = np.copy(population)\n            for i in range(self.budget):\n                trial = mutate_population(population, i)\n                if func(trial) < func(population[i]):\n                    new_population[i] = trial\n            population = new_population\n        best_index = np.argmin([func(individual) for individual in population])\n        return population[best_index]", "name": "HybridDEWithAdaptiveMutation", "description": "Introducing a Hybrid Differential Evolution Algorithm with Adaptive Mutation Strategy for Black Box Optimization", "configspace": "", "generation": 60, "fitness": 0.09207455415201371, "feedback": "The algorithm HybridDEWithAdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96b36757-39ca-4905-96e9-f99825102ed6", "metadata": {"aucs": [0.20247585883837815, 0.1742256321277733, 0.16797705213996583, 0.17617560395437049, 0.18400252586921007, 0.16778255543278642, 0.17699871556835356, 0.15088241383881684, 0.1642993708518301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03947848435807022, 0.049477803482311344, 0.03290617848080224, 0.05385321427134404, 0.04354646976758558, 0.04894353694196418, 0.04788337633970241, 0.063366979343081, 0.0549194625833479, 0.02556202863846102, 0.03165654977675225, 0.03967698458708313, 0.03170779554299186, 0.045868763852675465, 0.05529424662991678, 0.0352462949077853, 0.034426088879194516, 0.028038112904420487, 0.1122188322322174, 0.12241092776429718, 0.10516343824992325, 0.10479578921402466, 0.10423748720995496, 0.10187604667348438, 0.14622830163184075, 0.13743855310682285, 0.11904804675354974, 0.06389383576188679, 0.07480430906170188, 0.10040170346612254, 0.0725836102474563, 0.0630848747153816, 0.056844408709922356, 0.09300964766061404, 0.05997280063330512, 0.09118436053786949, 0.12681248279382507, 0.18940113762774202, 0.14287978746640406, 0.10786987321588493, 0.09972539724291096, 0.12259326614442578, 0.10057220659742139, 0.12718657841279235, 0.1105166839729338, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.06680602559129256, 9.999999999998899e-05, 0.0021740940913237417, 0.03833245121094986, 0.013782202298538104, 0.017667153369731237, 0.07000435159158136, 0.016920554936147303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034704455159323744, 0.06600492231431232, 0.04394782081452686, 0.05941523347397892, 0.05264165169514379, 0.08264061547217483, 0.0695175023542437, 0.033502578150453655, 0.04713531299381213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21859978240883127, 0.19899594986575098, 0.17912010064295447, 0.20400829276661048, 0.18895518267898104, 0.19573083509152855, 0.21645516996489267, 0.17927836966357458, 0.190353977651893, 0.030557421340474344, 0.03557334720405492, 0.03685228131721219, 0.04925873221712518, 0.041393871279633454, 0.042699362075576563, 0.05398861576586966, 0.04550174818799846, 0.04634031685883799, 0.1474761376903534, 0.14344321741086674, 0.1239019374262238, 0.13987649206371067, 0.14608414916929835, 0.17608949330029988, 0.14794163065907395, 0.14524413643690315, 0.14880136157080948, 0.16463399306139348, 0.15837196390918817, 0.16749546374609037, 0.16709789153165489, 0.16755630443437564, 0.16903390087645787, 0.17110067334208978, 0.17513506487796426, 0.14761043024682952, 0.11234925131085383, 0.10744825726053675, 0.10915263447823342, 0.11017550601992154, 0.12646627792056775, 0.1183054130680734, 0.10446860198493346, 0.12309545465853133, 0.11751607014205256, 0.14245319912254184, 0.16278507983880208, 0.15706102516865028, 0.1553312564408239, 0.14458028329890604, 0.1640547136708418, 0.1456041200478283, 0.1599074495049415, 0.17650862796538536, 0.14175798078186397, 0.15039137032936944, 0.13960648804430964, 0.13559256167927836, 0.14907318784461676, 0.148514093266903, 0.14817072430286082, 0.14073418274826777, 0.1604757114380957, 0.14698899646874175, 0.17079963801628217, 0.17019775817905136, 0.15528847270055435, 0.14680297128209296, 0.15948461446633933, 0.16704748990258345, 0.27223064884409864, 0.15637371218724805, 0.1559597431978833, 0.1885562330429047, 0.15953949657471456, 0.1473830520208086, 0.15453007668958252, 0.16503077848606384, 0.16201928772259544, 0.17725244655500516, 0.17689478817038795, 0.17338405658070988, 0.19348823179145314, 0.1972830684743021, 0.19188313468154572, 0.21042071560641684, 0.1916381208000978, 0.17589945668057938, 0.17946690628500162, 0.20287382810020538, 0.05328837564631761, 0.05149291120582078, 0.06454251732264182, 0.05012892284496917, 0.05861042192198329, 0.049116056408129216, 0.07206985935586885, 0.05631315675533022, 0.04854111368740632]}, "mutation_prompt": null}
{"id": "7fc23a63-ec80-4911-af78-e7e9e4149dc3", "solution": "import numpy as np\nfrom pymoo.algorithms.so_genetic_algorithm import GA\n\nclass EnhancedQuantumInspiredOptimizationPlus:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)  # Enhanced adaptive phase selection\n            if np.random.rand() < 0.05:  # Introduce exploration\n                phase = np.random.uniform(0, 2 * np.pi)\n                self.sigma *= 0.9  # Reduce mutation step size for exploration\n            if np.random.rand() < 0.1:  # Integrate multi-objective evolutionary algorithm\n                algorithm = GA(pop_size=50, eliminate_duplicates=True)\n                self.dim = 2\n                self.budget = 100\n                self.lambda_ = 50\n                return algorithm\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationPlus", "description": "Enhancing Quantum-inspired Metaheuristic with Improved Adaptive Phase Control, Population Update Strategy, and Multi-Objective Evolutionary Algorithm Integration", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'pymoo'\").", "error": "ModuleNotFoundError(\"No module named 'pymoo'\")", "parent_id": "96b36757-39ca-4905-96e9-f99825102ed6", "metadata": {}, "mutation_prompt": null}
{"id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 62, "fitness": 0.12597976664599086, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "96b36757-39ca-4905-96e9-f99825102ed6", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "ce65b63e-7104-4cf5-a213-e91817f55498", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "205f03e7-b5b5-47bf-8343-c337f490e88e", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "b53be4ab-09d4-4bab-9b15-018dc4a1ad7e", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "cd76c271-9648-4d84-9cd2-f0cd034c67a1", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning with refined parameters\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.85  # Fine-tune mutation step size\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Introducing Opposition-based Learning and fine-tuning parameters in Enhanced Quantum-inspired Optimization for improved performance on BBOB functions.", "configspace": "", "generation": 66, "fitness": 0.12019319198896537, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOppositionRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.5018432843561942, 0.5411312246113335, 0.5644069040409678, 0.13778964340751754, 0.21905176564597806, 0.12163034447415011, 0.4158600301869988, 0.4770520838576199, 0.37324754281062544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027376080194748686, 0.014696688568582195, 0.07529593251516764, 0.01998772751808464, 0.054072163232039894, 0.012852298162865372, 0.04290485505715258, 0.04170473202019076, 0.011901250591067947, 0.009322034233221754, 0.015744329374629107, 0.03253687917421233, 9.999999999998899e-05, 9.999999999998899e-05, 0.027380706735223193, 9.999999999998899e-05, 0.05084206909277511, 0.013420641733927763, 0.07281022805651594, 0.058385802173064216, 0.0750715858600215, 0.061365275322681545, 0.07188671052634332, 0.055519187641639434, 0.05318912951404198, 0.07386703247212412, 0.04765856010014957, 0.23442164844370583, 0.17246508846512532, 0.16331068434742246, 0.09158484119923227, 0.13609488784612533, 0.0573060075330708, 0.17972241408988798, 0.05728823821675999, 0.062324688475792756, 0.0934572039345285, 0.18306481665893448, 0.22302485396791838, 0.01418795402712425, 0.03962846142932763, 9.999999999998899e-05, 0.039975789136966866, 0.10010508111874372, 0.03423524085365737, 0.12273279030038031, 0.10267860839615128, 9.999999999998899e-05, 9.999999999998899e-05, 0.010154990821811927, 9.999999999998899e-05, 0.1317025835704908, 0.12864294216718009, 0.15185744188007355, 0.13473248649209313, 0.29130364484662497, 0.19560047284179927, 0.17902512475107324, 0.27565438723843194, 0.17457771272887257, 0.29970102029724044, 0.3160556057109899, 0.12486448175697207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044143417975228694, 0.056030595840831254, 0.09236199124297728, 0.04062151969056982, 0.06211802312573167, 0.009272972568441396, 0.021000479589979637, 0.051452406307599396, 0.03726295090740861, 0.08544819789829361, 0.02015266568677654, 0.013552309953178021, 0.07382392843001251, 0.02659098617814548, 0.021898707516940896, 0.03496653219820378, 9.999999999998899e-05, 0.03556862887973089, 9.999999999998899e-05, 0.08459501388720603, 0.03380320880296672, 0.007540283427147965, 0.06783457728473408, 0.0800511550460411, 9.999999999998899e-05, 0.008722869349949924, 0.10872414957182863, 0.0068326994033168775, 0.3878968893014798, 0.4117697303894374, 0.4803371219880428, 0.1927382583116931, 0.363604505261759, 0.36301405458280667, 0.44482565255359363, 0.43281971036933775, 0.39871905912377037, 9.999999999998899e-05, 0.005345896367773828, 0.05262609501665905, 0.029725792365417836, 0.035889800760969814, 0.03312507954683985, 0.0030208653031218446, 0.002361239359525147, 0.0730924718097623, 0.12209063491673167, 0.254824151393097, 0.17391977532165215, 0.15561483162568934, 0.16322502649400517, 0.12787708233298722, 0.12271752037829664, 0.13902114548030786, 0.18227224692249033, 0.11461031187602222, 0.14069779797968984, 0.1361036182895632, 0.15195595899087078, 0.12907368092832383, 0.17394960102784607, 0.14394259719010805, 0.14617487977457366, 0.16325272142024527, 0.06037885652696806, 0.1800523474108151, 0.09321361826016472, 0.1197896488979483, 0.07052932305805282, 0.13617265714757254, 0.06953928024334677, 0.11131275938061114, 0.12452873722983171, 0.20668273548069638, 0.1298873421260125, 0.13507008814182553, 0.19809759905508573, 0.1635497129375605, 0.1375665053450188, 0.14918725759474805, 0.13669047643454268, 0.13876984623118027, 0.17953850276008831, 0.1773363332149387, 0.19152573121003336, 0.1836616465019233, 0.17344500724140088, 0.18263748290519577, 0.1530424023244521, 0.1686213584131323, 0.18154341813550012, 0.18480964918066756, 0.07602785311281712, 0.15692339355936802, 0.17098917634543864, 0.20001550657059364, 0.11987951976058553, 0.154315315481086, 0.11363739244760851, 0.16887371630630166, 0.11972746350264807, 0.5438568322532735, 0.3225860863878778, 0.3803126108661552, 0.16633486119482932, 0.16714983911844306, 0.15640266285781412, 0.16193475130553614, 0.1075749134930919, 0.18600382228639978, 0.18901772048127619, 0.18122219489948843, 0.192539717920151, 0.18790830997065, 0.20388997687349775, 0.17687685547275234, 0.20370092503201265, 0.18322294937008032, 0.04545538310238095, 0.032133161553490774, 0.06299950580173486, 0.04208071090567411, 0.05703555246884884, 0.05390592200587785, 0.055895302847017936, 0.04485040694605302, 0.0349162973730065]}, "mutation_prompt": null}
{"id": "c326406e-33a5-4288-8c35-5acd3d8b7f7c", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "5d13359d-b9b4-4482-a25d-293dd0d66226", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce refined opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Quantum-inspired metaheuristic with opposition-based learning and adaptive mutation for improved exploration and exploitation in black box optimization.", "configspace": "", "generation": 68, "fitness": 0.12597976664599086, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOppositionRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "d5e06216-e6fa-4ec7-85c9-928e7a1f3c03", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "46206db4-fc5f-43e3-86d9-63ef0ea3c82f", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "61ba6dd5-30f9-45d4-bbc1-61e16b1c8a9a", "solution": "import numpy as np\n\nclass AdaptiveOppositionEnhancedQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce adaptive opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "AdaptiveOppositionEnhancedQuantumInspiredOptimization", "description": "Introducing an Adaptive Opposition-based Learning mechanism within the Enhanced Quantum-inspired Metaheuristic to enhance solution quality and convergence speed.", "configspace": "", "generation": 71, "fitness": 0.12597976664599086, "feedback": "The algorithm AdaptiveOppositionEnhancedQuantumInspiredOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "5d27e25a-a609-448c-b816-d418ca8140b8", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "a5321988-2375-4acf-a57c-c9b04fe5c2ab", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "5e8de63f-017d-450f-b39a-55b16bd92d96", "solution": "import numpy as np\n\nclass DynamicOppositionQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce dynamic opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "DynamicOppositionQuantumInspiredOptimization", "description": "Introducing Dynamic Opposition-based Learning in Quantum-inspired Optimization for enhanced performance in solving black box optimization problems.", "configspace": "", "generation": 74, "fitness": 0.12597976664599086, "feedback": "The algorithm DynamicOppositionQuantumInspiredOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "3e4d6764-cc19-47fe-a827-dd2ed4e8b55d", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionOppositeMutation:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning with adaptive mutation\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionOppositeMutation", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation for robust optimization performance.", "configspace": "", "generation": 75, "fitness": 0.12597976664599086, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOppositionOppositeMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "ca3d1719-fde5-4c18-a9cc-6696e81c4134", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "e24044c7-e246-4e5c-a97f-7803aacfaf2a", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionPlus:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  \n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionPlus", "description": "Enhancing Quantum-inspired Metaheuristic with additional Opposition-based Learning and adaptive mutation step for improved exploration-exploitation balance in optimization.", "configspace": "", "generation": 77, "fitness": 0.12597976664599086, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOppositionPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "c12887b8-216e-4e25-aa74-13cd8b668c95", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionAdaptive:\n    def __init__(self, budget, dim, mu=5, lambda_=20, initial_sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.initial_sigma = initial_sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase, sigma):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase), sigma\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        sigma = self.initial_sigma\n        for _ in range(self.budget):\n            offspring, sigma = mutate_population(population, phase, sigma)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                opposite_offspring, _ = mutate_population(-population, phase, sigma)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionAdaptive", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 78, "fitness": 0.12597976664599086, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOppositionAdaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "cba273c9-d0c1-4e64-8e8b-4bef5a568e93", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                sigma_factor = np.exp(-0.1 * (self.budget / self.sigma))\n                offspring_population[i] = parent + self.sigma * sigma_factor * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "AdaptiveQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation for dynamic optimization.", "configspace": "", "generation": 79, "fitness": 0.04609142316315662, "feedback": "The algorithm AdaptiveQuantumInspiredOptimizationOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.08871255675293255, 0.129145794729162, 0.1101141601492811, 0.036957868727433785, 0.05308744340873495, 0.030882591123621905, 0.05788826900696131, 0.060999510033756255, 0.06773575078023275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01712846624698794, 9.999999999998899e-05, 0.017036313009746507, 9.999999999998899e-05, 0.021000917213752968, 0.011890603986763781, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013736905668002009, 9.999999999998899e-05, 9.999999999998899e-05, 0.007791173993945466, 9.999999999998899e-05, 0.023956196778172845, 0.0010376233849545002, 0.04506162751902376, 0.03364141014349076, 0.04277325935413823, 0.0389884700545956, 0.04683639519753835, 0.030508833253279244, 0.033186383407734166, 0.04894538073143051, 0.025788671842369104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030455066363658245, 0.02577907126641099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0933283294137327, 0.09548040009262371, 0.004015105073241321, 0.0045519528865108905, 0.016937409207497645, 9.999999999998899e-05, 0.026219079164750858, 0.059811292070910405, 0.03393824857791805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024098127982229434, 0.040041112634312204, 0.0365710818896976, 0.047397201284077206, 0.04620933856200338, 0.035147014617078254, 0.08137420065058865, 0.04183018135867189, 0.03775937321956713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05417972423391948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018978956132728486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07531560008783944, 0.11205909418425075, 0.15943488442989406, 0.0669966020700069, 0.11401395922838642, 0.11761034360861466, 0.17327615115657224, 0.13221281570983523, 0.14830994489511762, 9.999999999998899e-05, 9.999999999998899e-05, 0.014072028207393172, 0.01589921353758106, 0.00302373902048525, 0.005968137871565915, 9.999999999998899e-05, 9.999999999998899e-05, 0.02668338146342919, 0.06208632397064595, 0.08450984250124804, 0.05628026431867217, 0.10164916201010987, 0.07034372071884554, 0.08321737781755778, 0.08898035870054022, 0.05202095801377149, 0.0871775272390487, 0.09325456278091038, 0.11710728419267347, 0.10550306849554125, 0.1241048274239025, 0.11884013121487447, 0.14034397723041658, 0.11534943681078347, 0.1322417795464429, 0.1396727509688882, 0.043212684636026455, 0.07409338147800848, 0.06940942858552845, 0.08568427956191538, 0.06000593137655963, 0.10922418511381216, 0.05914604822096259, 0.0834622530975817, 0.08584410237311824, 0.12952003453275662, 0.16029186245482308, 0.12829185689683165, 0.1431888721857706, 0.13405137579067372, 0.14072948817363218, 0.16598921577422443, 0.1058081653903229, 0.1322894375560738, 0.05209934258457394, 9.999999999998899e-05, 0.15669767805321388, 0.15829748032087732, 9.999999999998899e-05, 0.05852357747365, 9.999999999998899e-05, 9.999999999998899e-05, 0.08710560607299489, 0.0793191144483879, 0.05611643243530229, 0.052132087405048155, 0.13349033897905482, 0.1207234049902467, 0.02351973269472818, 0.035616785482759816, 0.05657282487420012, 0.07783809908472739, 0.039082476270053346, 0.07150951125571159, 0.023424987216773996, 0.018932488874381703, 0.05028124646792853, 0.07580331775563431, 0.06367007886842291, 0.0817337222168324, 0.02305441464238578, 0.16104189656787182, 0.1449049210112514, 0.17679652651023625, 0.17780935457933378, 0.13623545759272515, 0.13372068953049743, 0.13932507140531702, 0.15236327188643095, 0.11959700671826923, 0.031744430219898145, 0.01767435851236332, 0.044246426138401684, 0.018433280270506835, 0.05053679306955183, 0.028018355698291586, 0.013893562924919056, 0.017771854042421875, 0.01896226201830864]}, "mutation_prompt": null}
{"id": "aa95908e-7abf-47ad-b6bc-5d37abdbb13b", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "78015b1e-9da8-4350-88b1-9e9172d7c363", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "0b0ed713-5f81-4a5a-9fda-bd4c7d70c6ee", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "2f9d5211-85d4-4fff-af5a-63009cfbaae6", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOpposition:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.9\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOpposition", "description": "Enhancing Quantum-inspired Metaheuristic by incorporating an Opposition-based Learning approach for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.48662323295319243, 0.518334731627222, 0.5179149312603986, 0.23362693746994478, 0.441799858428396, 0.2018211583474142, 0.462674133935705, 0.454989389343902, 0.4723902686032858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026955696666218776, 0.01447485600346643, 0.07457210859473562, 0.020567269994899662, 0.05302516713596872, 0.012778774880302435, 0.042832710410804054, 0.041528599774688146, 0.011852465754237484, 0.009312963371196914, 0.01483644722441746, 0.03234217010165974, 9.999999999998899e-05, 9.999999999998899e-05, 0.027312596757437135, 9.999999999998899e-05, 0.050863971192720014, 0.013319167303577184, 0.07967125902716432, 0.06207341273368694, 0.07884204452462362, 0.06297704025800865, 0.07598119027642314, 0.06012796319624236, 0.05574898816670226, 0.07737060929758988, 0.05046108351034817, 0.290339408677435, 0.25411279236800277, 0.2304570568974439, 0.12033114950442703, 0.21963776675020663, 0.08903276427334872, 0.2766626694764577, 0.09077246344083456, 0.09663320156621469, 0.0934572039345285, 0.18316565845710642, 0.19612539190416378, 0.04386677401013639, 0.04922378567583696, 9.999999999998899e-05, 0.039975789136966866, 0.10010191713408678, 0.03423524085365737, 0.13922314989738005, 0.10477262087290617, 0.012663681474641475, 0.010879689201950926, 0.061095133948608105, 9.999999999998899e-05, 0.12318136047364714, 0.1503678145538233, 0.15945047367020038, 0.13350184957312938, 0.17194815333543467, 0.1929611219938957, 0.18124122267865128, 0.24097027723025644, 0.17280926970548605, 0.1730043250996337, 0.15645014072703411, 0.12767842134402074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025376031237450136, 0.058267035518395294, 0.09786808883417852, 0.040043933960759226, 0.06418439095520989, 0.011088238033519104, 0.017740669374200158, 0.05773510030328377, 0.0432594061084246, 0.087972647809612, 0.003496905218830948, 0.004786057488021966, 0.026243545610588614, 0.0034028267754893093, 0.007578188903345828, 0.00934039059703684, 0.01337285030718538, 0.007693700613757182, 0.013221415005521653, 0.08438099394687693, 0.08849597112712004, 0.045367581618125374, 0.06867220662106521, 0.08525654449588349, 0.08389025064165978, 0.06847020458080244, 0.10807483281680885, 0.0671164783748236, 0.4239407640208175, 0.4053712305088407, 0.4454026174186657, 0.2932016525927833, 0.3738079277240669, 0.40067188087414984, 0.4407892031747621, 0.39773623732337215, 0.45025425490318816, 9.999999999998899e-05, 0.005280699041958381, 0.052389850266714166, 0.02897425117526531, 0.0484429312181317, 0.03307668335199032, 0.002961022114745915, 0.002267643416844267, 0.07296315629846317, 0.12090942047059194, 0.2673645697610122, 0.16559961949199242, 0.1473651506887188, 0.1675479410038503, 0.13651849297138874, 0.12215454176171114, 0.1404135497477209, 0.18005882406651796, 0.11462688733291293, 0.1405061840693017, 0.13581866869005332, 0.15947078510783086, 0.12909860589124122, 0.174610093267893, 0.14621416488188643, 0.15721547901936705, 0.15848564387685493, 0.060192934373272555, 0.15241551001415243, 0.09915485799570745, 0.11797284629358351, 0.07052423776201777, 0.13678487112441984, 0.06886283617968181, 0.11169868927099391, 0.12367467256696651, 0.20174745037933217, 0.18895068411980265, 0.13463320345878038, 0.1770889947348614, 0.1459916708029495, 0.13378279300713003, 0.14017875474243957, 0.13900932869205285, 0.15044410444154455, 0.17922322415619696, 0.16058902273850673, 0.19140283781902145, 0.1828211430853558, 0.17334726644755916, 0.18064093395925573, 0.17188083717405167, 0.17081274825141335, 0.1810758085459957, 0.1849141136474205, 0.07603753407897951, 0.15691482930974288, 0.1710318044587158, 0.20011789648515832, 0.12157376513070228, 0.1552022385073476, 0.11365671371973818, 0.1709366112265852, 0.13217593918438109, 0.5543986708399782, 0.4593604184684713, 0.4071741043167635, 0.16639457790330037, 0.16729032662460686, 0.16013902075304176, 0.16336577096945604, 0.10867346452679871, 0.1872392350688904, 0.17357094523947003, 0.19059193224673388, 0.1903519698981485, 0.1959080027835044, 0.17829804631776347, 0.1890184615016719, 0.1862227897786759, 0.19447938836443546, 0.04547887102517434, 0.03377654876568248, 0.06065318209962278, 0.04386298793746135, 0.05969906384524015, 0.053361862821511785, 0.054092966942018705, 0.050168273848461786, 0.03831507938920298]}, "mutation_prompt": null}
{"id": "6d745d72-db07-48b3-90fd-cd38461901d1", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 84, "fitness": 0.12994429801586377, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOppositionRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f272b2a5-6ecf-4177-90be-2897e4e89996", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "da452464-0ae5-4e47-8ec8-be0bf94af4a8", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "f9f9b35a-420d-4873-b34e-1f2a3deb2b1d", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "abe3be20-49eb-4947-97c6-b95cfdcec138", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "1fbd251e-6d92-4a2d-a737-6bf54d509a42", "solution": "import numpy as np\n\nclass HybridQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "HybridQuantumInspiredOptimizationOppositionRefined", "description": "Utilizing a Hybrid Quantum-Inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Enhanced Black Box Optimization", "configspace": "", "generation": 88, "fitness": 0.12994429801586377, "feedback": "The algorithm HybridQuantumInspiredOptimizationOppositionRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "91e5d026-4a74-4ed7-ad2e-bb1544aebb1a", "solution": "import numpy as np\n\nclass NovelQuantumInspiredOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "NovelQuantumInspiredOptimization", "description": "A novel Quantum-inspired Optimization algorithm with Adaptive Opposition-based Learning and Mutation Control for Black Box Optimization.", "configspace": "", "generation": 89, "fitness": 0.12994429801586377, "feedback": "The algorithm NovelQuantumInspiredOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "e8525e33-d1f6-4c27-a71c-1ced34b42ca9", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefinedEnhanced:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce adaptive opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefinedEnhanced", "description": "Introducing Adaptive Opposition-based Learning and Mutation Control in an Enhanced Quantum-inspired Optimization Algorithm for Black Box Optimization", "configspace": "", "generation": 90, "fitness": 0.12994429801586377, "feedback": "The algorithm EnhancedQuantumInspiredOptimizationOppositionRefinedEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "7f78b026-db06-434f-9b3e-12bf4ba8f529", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "NovelMetaheuristicAlgorithm", "description": "A novel Quantum-inspired Metaheuristic enhanced with Opposition-based Learning, Adaptive Mutation Control, and Random Phase Updates for Black Box Optimization Problems", "configspace": "", "generation": 91, "fitness": 0.12994429801586377, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "93ace808-cc5f-48f9-a469-a7e77bd9cb92", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "a5db4db8-3ca4-45c0-8f2e-5a1040e007d6", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "4a38533d-3911-48ed-9dfd-a84cf073659e", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "aeba15e8-8fab-4bbb-a3bc-4287db2da144", "solution": "import numpy as np\n\nclass EvolutionaryOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EvolutionaryOptimizationOppositionRefined", "description": "Evolutionary Optimization with Opposition-based Learning and Adaptive Mutation Control for Black Box Optimization", "configspace": "", "generation": 95, "fitness": 0.12994429801586377, "feedback": "The algorithm EvolutionaryOptimizationOppositionRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "a42e0ea3-a050-46e4-b6d1-caa7f4d79721", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "74fd39e7-aede-488c-93b4-988f09ee7810", "solution": "import numpy as np\n\nclass DynamicOppositionQuantumOptimization:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce dynamic opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "DynamicOppositionQuantumOptimization", "description": "Introducing Dynamic Opposition-Based Learning and Adaptive Mutation Control in Quantum-Inspired Optimization for Black Box Optimization", "configspace": "", "generation": 97, "fitness": 0.12994429801586377, "feedback": "The algorithm DynamicOppositionQuantumOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "894963fd-f3cc-439f-9604-31af1980920d", "solution": "import numpy as np\n\nclass HybridQuantumInspiredOptimizationOppositionMutation:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "HybridQuantumInspiredOptimizationOppositionMutation", "description": "Hybridizing Quantum-inspired Optimization with Opposition-based Learning and Adaptive Mutation for Black Box Optimization", "configspace": "", "generation": 98, "fitness": 0.12994429801586377, "feedback": "The algorithm HybridQuantumInspiredOptimizationOppositionMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
{"id": "4bd2a9c0-b295-410a-82ce-2367de3c1eaa", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredOptimizationOppositionRefined:\n    def __init__(self, budget, dim, mu=5, lambda_=20, sigma=0.1, phase_factor=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.mu = mu\n        self.lambda_ = lambda_\n        self.sigma = sigma\n        self.phase_factor = phase_factor\n\n    def __call__(self, func):\n        def initialize_population():\n            population = np.random.uniform(-5.0, 5.0, (self.mu, self.dim))\n            return np.vstack([population, -population])  # Add opposite solutions\n\n        def apply_quantum_phase(population, phase):\n            return np.multiply(population, np.exp(1j * phase))\n\n        def mutate_population(population, phase):\n            offspring_population = np.zeros((self.lambda_, self.dim))\n            for i in range(self.lambda_):\n                parent = population[np.random.randint(self.mu)]\n                offspring_population[i] = parent + self.sigma * np.random.randn(self.dim)\n                offspring_population[i] = np.clip(offspring_population[i], -5.0, 5.0)\n            return apply_quantum_phase(offspring_population, phase)\n\n        population = initialize_population()\n        phase = np.random.uniform(0, 2 * np.pi)\n        for _ in range(self.budget):\n            offspring = mutate_population(population, phase)\n            fitness = np.array([func(individual) for individual in offspring])\n            best_index = np.argmin(fitness)\n            if fitness[best_index] < func(population[0]):\n                population[0] = offspring[best_index]\n            phase = np.random.uniform(0, self.phase_factor)\n\n            if np.random.rand() < 0.05:\n                # Introduce opposition-based learning\n                opposite_offspring = mutate_population(-population, phase)\n                opposite_fitness = np.array([func(individual) for individual in opposite_offspring])\n                best_opposite_index = np.argmin(opposite_fitness)\n                if opposite_fitness[best_opposite_index] < func(population[0]):\n                    population[0] = opposite_offspring[best_opposite_index]\n\n                self.sigma *= 0.95  # Adaptive mutation control\n        return population[0]", "name": "EnhancedQuantumInspiredOptimizationOppositionRefined", "description": "Enhancing Quantum-inspired Metaheuristic with Opposition-based Learning and Adaptive Mutation Control for Dynamic Optimization", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d745d72-db07-48b3-90fd-cd38461901d1", "metadata": {"aucs": [0.455402439033347, 0.4666507200359191, 0.47077237031351893, 0.3533269381490508, 0.37907407758667644, 0.3776261883965062, 0.4067370644987398, 0.41351503322208527, 0.432391000675176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022646703809625635, 0.01459304192739086, 0.052202896311359326, 0.020286603691432537, 0.05263015302953733, 0.012549870015439946, 0.042381711460076965, 0.04232029604208931, 0.011784724021935311, 0.009185168963850798, 0.02451499889428177, 0.035381534463709285, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703087166752849, 9.999999999998899e-05, 0.05088453622924494, 0.012965782014281113, 0.09527945572888874, 0.0661872561847966, 0.08905610841242761, 0.07307260464293319, 0.07913494661800347, 0.06590320003920169, 0.061981409586419844, 0.08081967888032504, 0.056225464194740615, 0.27632399158068377, 0.2680251616072865, 0.3061481577256788, 0.20188761267803834, 0.25930653603867615, 0.17616107052825192, 0.26853535210635826, 0.1463677675251347, 0.21733676756437326, 0.0934572039345285, 0.2380590094804228, 0.20555661331008046, 0.037378698208319294, 0.07154483768084574, 9.999999999998899e-05, 0.039975789136966866, 0.10010215366916597, 0.03815913373535551, 0.1655344269538358, 0.10993374975266723, 0.10556516155787032, 0.11776489414689728, 0.130353603099998, 9.999999999998899e-05, 0.13962954222445456, 0.16024185281993575, 0.15567015177064114, 0.13374238139915196, 0.23332803229138144, 0.18298360213986287, 0.1744302372976383, 0.21431992161234603, 0.16431620714952, 0.1556112473843423, 0.22313059549986403, 0.12495465662951266, 0.0007966272626656057, 0.0026626986871538527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00966158912172399, 0.06289626441623064, 0.09124775364419024, 0.036649499946912134, 0.06539861627133958, 0.016314455851410226, 0.02282973326769444, 0.06195641722211198, 0.03587637165264512, 0.09271608129780928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005648699788093237, 9.999999999998899e-05, 0.09227033645624216, 0.08467560969222865, 0.04409017825979278, 0.09113875822810968, 0.09232874394248958, 0.09457048075281838, 0.05815668640902116, 0.10049051039029111, 0.07287406519647666, 0.39654383321710795, 0.3928823092746576, 0.4506146883576241, 0.33236261773139253, 0.3982545707576146, 0.41493514403291987, 0.41978273210803463, 0.4022158126690376, 0.4186684705837507, 9.999999999998899e-05, 0.0032112631841493267, 0.05207079419832339, 0.027750603184198197, 0.04749930261653024, 0.028227059109207087, 0.0025437884464251104, 0.0021293501658079528, 0.07123071602507602, 0.1414606239860654, 0.2290785016315876, 0.12286556058111076, 0.14250095993887812, 0.18469456471676304, 0.11756468394337516, 0.11685801251293237, 0.14438171829113233, 0.17084617841306515, 0.11446622509584015, 0.14877935324717728, 0.13502704383078545, 0.14084443414646852, 0.12911231276274515, 0.17842698309830962, 0.1421392000191819, 0.15266815399768496, 0.15818131562391624, 0.06032918057171033, 0.1863777965597203, 0.09113888716100826, 0.11872368898390573, 0.07036513765740526, 0.132411833683741, 0.07029946427857725, 0.11434884457920413, 0.12182500266250718, 0.19903785925909123, 0.1838390891989986, 0.13843536266449086, 0.19119772570629645, 0.1566016170909994, 0.13668162438056375, 0.14652382283577936, 0.13674638584373533, 0.14437720553946531, 0.1776785641545432, 0.1732225768529948, 0.19007452118269386, 0.1825955337419526, 0.1731123137979257, 0.1809024103503265, 0.1716234689619741, 0.16664422326705952, 0.1968717660910927, 0.18493280728227035, 0.07602329688664755, 0.15694865001909963, 0.17103521718607773, 0.19994377591937795, 0.12224502947557103, 0.15539658025496628, 0.11369339047118376, 0.17208987874286907, 0.1390833892713481, 0.5151766567076157, 0.48137077350491286, 0.5191216459538941, 0.1664627526875373, 0.16736926675096508, 0.1605312260349263, 0.1632014841524857, 0.10927326033651008, 0.1933001739343031, 0.1823862968903871, 0.18251865774580367, 0.17329329234012714, 0.1714730886085466, 0.18841102287851186, 0.18421130323867851, 0.18084733608140646, 0.18116340859770763, 0.04331682003095794, 0.03631728316857208, 0.05688789521883264, 0.035174849479306936, 0.05853431377010698, 0.049456911196122166, 0.05262382423013079, 0.03798029219062049, 0.03524861832214099]}, "mutation_prompt": null}
