{"id": "fbc5bf96-d011-4b77-b077-e792120ef8ea", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "408a467c-4c01-4a15-9d47-106321fc9466", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbc5bf96-d011-4b77-b077-e792120ef8ea", "metadata": {}, "mutation_prompt": null}
{"id": "b4f4718d-2943-4166-904f-bfcbbc5afa8a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbc5bf96-d011-4b77-b077-e792120ef8ea", "metadata": {}, "mutation_prompt": null}
{"id": "52f62baa-e6dc-4441-841f-7e0003b88f28", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbc5bf96-d011-4b77-b077-e792120ef8ea", "metadata": {}, "mutation_prompt": null}
{"id": "5ae533ed-7169-4e86-8f24-8d5692a930d3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbc5bf96-d011-4b77-b077-e792120ef8ea", "metadata": {}, "mutation_prompt": null}
{"id": "57b4b9cd-f9a2-46cc-88d3-e7f4e26f0331", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbc5bf96-d011-4b77-b077-e792120ef8ea", "metadata": {}, "mutation_prompt": null}
{"id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 6, "fitness": 0.23119843666521742, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "fbc5bf96-d011-4b77-b077-e792120ef8ea", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "af927ba9-05b7-40f6-ba2c-bb46c5068898", "solution": "import numpy as np\n\nclass PSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.p_best_rate = 0.3\n        self.mutation_factor = 0.5\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _update_velocity(self, swarm, p_best, g_best):\n        r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n        return self.w * swarm + self.c1 * r1 * (p_best - swarm) + self.c2 * r2 * (g_best - swarm)\n\n    def _optimize_func(self, func, swarm):\n        p_best = swarm[np.argsort([func(p) for p in swarm])[:int(self.p_best_rate * self.swarm_size)]]\n        g_best = p_best[0]\n        for _ in range(self.budget):\n            velocities = self._update_velocity(swarm, p_best, g_best)\n            swarm = swarm + velocities\n            for idx, particle in enumerate(swarm):\n                mutant = self._mutation(swarm, idx)\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant, particle)\n                if func(trial) < func(particle):\n                    swarm[idx] = trial\n            p_best = swarm[np.argsort([func(p) for p in swarm])[:int(self.p_best_rate * self.swarm_size)]]\n            g_best = p_best[0]\n        return g_best\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5, 5, (self.swarm_size, self.dim))\n        return self._optimize_func(func, swarm)", "name": "PSO_ADE", "description": "An optimization algorithm that combines Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for efficient global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (6,5) (20,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (6,5) (20,5) ')", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {}, "mutation_prompt": null}
{"id": "cd8a509e-27bc-4b1e-bf2a-85d0413758d1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "0e7d7e7d-02d7-42af-abb7-20855367b3f1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "247983df-7f37-4977-ade3-02df00ffb50d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "b2fdb12b-9b1b-4c0b-b33b-6ea821bc2f55", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c, d = np.random.choice(candidates, 4, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c]) + self.mutation_factor * (population[d] - population[a])\n        return mutant", "name": "RefinedHybridDESA", "description": "A novel metaheuristic algorithm named HybridDESA combining Differential Evolution and Simulated Annealing for global optimization of black box functions with a refined strategy.", "configspace": "", "generation": 11, "fitness": 0.13702677258050697, "feedback": "The algorithm RefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.23055673656089082, 0.22070382698880708, 0.23284150123603242, 0.2581897968707102, 0.1329549395373495, 0.10999307272657188, 0.21923590173835117, 0.2154067816491685, 0.1544638241594819, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037472944693348276, 9.999999999998899e-05, 0.03826551184156746, 0.08072074576281552, 0.1324461491789325, 0.14673576925865983, 0.3313417917748043, 0.1426800736188798, 0.07574901942598933, 0.16047306659022598, 0.09469664195847927, 0.07391442844734697, 0.037018684503836496, 0.08413261784851434, 0.10488127135956493, 0.08351862551026856, 0.04876546742472909, 0.09074118885960847, 0.03222609412969579, 0.010585404233453666, 0.1053875299165149, 0.180713582799215, 0.10185943727328761, 0.06955956556325782, 0.1015378010466349, 0.14315283584881688, 0.060271446938771844, 0.0822896091187264, 0.10964866529375394, 0.05922291791041734, 0.11339161678424858, 0.014367197775166818, 0.04047525053675749, 0.0847308984859485, 0.05544580765159912, 0.14063728704091427, 0.08034280683980977, 9.999999999998899e-05, 0.22953958565360877, 0.08168471442178693, 0.14050083014764891, 0.19636444212851867, 0.0727732288102152, 0.08664782369211244, 0.14389812048736006, 0.17953512157623008, 0.2382603509068879, 0.06461057567772754, 0.12817016435264594, 0.1180792431915112, 0.02920326733189682, 0.15846343878290536, 9.999999999998899e-05, 0.13337106325125492, 0.12557536575726413, 0.09550188117898539, 0.06481322612104501, 0.07843330471553489, 0.09944445211596886, 0.12774934672703808, 0.1496633867498265, 0.12966330213700983, 0.13406910985277298, 0.22974393107118463, 0.12312651619910142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010130821036413051, 0.02785076683066512, 9.999999999998899e-05, 0.006386824353801779, 9.999999999998899e-05, 0.10682153708615227, 0.03199214382401716, 0.2203071103258636, 0.03399093940404041, 0.028080425061847603, 0.09054846130287064, 0.1411593848538416, 0.2025659653755253, 0.17451767672651874, 9.999999999998899e-05, 0.2784426689014221, 9.999999999998899e-05, 0.1669836272212173, 0.05203077522518229, 9.999999999998899e-05, 9.999999999998899e-05, 0.15249483946164988, 9.999999999998899e-05, 9.999999999998899e-05, 0.06137701724365874, 0.08096624423488497, 9.999999999998899e-05, 0.09477240253978048, 0.10351437745354819, 9.999999999998899e-05, 0.06775514724731035, 0.015435893139718604, 0.24094515728351118, 0.3515095578255373, 0.26306319818727775, 0.1660278229516664, 0.26948182237643625, 0.18004782440270906, 0.18947889561959497, 0.31274788702203393, 0.18640569617415725, 0.07695261958975985, 0.16628272778941156, 0.07191937393830516, 0.05526156525648673, 0.07389831275532632, 0.0875398688798057, 0.05648302480842571, 0.14011809817411214, 0.13704769557238883, 0.24021466896690014, 0.12288648232833643, 0.17019554083366362, 0.19561093024905207, 0.16880944718567503, 0.1494091503225332, 0.1529827123610732, 0.14150349011039853, 0.18273117397070582, 0.1804656701617925, 0.27851753406767743, 0.2381039931909642, 0.44002831132474896, 0.284184252177362, 0.31230986669668814, 0.24876455381221163, 0.19875593294243876, 0.2161934239345874, 0.1430006062211412, 0.24930991574902694, 0.3002103203017663, 0.2493456192900041, 0.17926542570407344, 0.2635982471925442, 0.2595267591075673, 0.2028203290476669, 0.19924846641882188, 0.2059230285963497, 0.2044161215430379, 0.22424475182098613, 0.20803918784053022, 0.2075134151525203, 0.24896676794563333, 0.2050617514622699, 0.19906186715815954, 0.2373798019941229, 0.18967702324939928, 0.18105663996413945, 0.17636442121144413, 0.1723303043268134, 0.180502074895451, 0.18190760508468018, 0.18680692213519323, 0.20454308899307538, 0.17336925707918782, 0.15002760712791208, 0.18426061598667198, 0.16469972803277344, 0.3984794004963591, 0.17545107201504107, 0.4258818092132475, 0.16415195114601833, 0.4241513314494926, 0.1488917778024168, 0.20576559813191175, 0.10884358444403408, 0.13734642314773482, 0.2090441052697447, 0.1676254872476246, 0.20671343822846056, 0.16601044857338598, 0.25906501231854506, 0.14752971702190376, 0.17561134694159486, 0.19665083108243586, 0.19833308918165726, 0.19645207167217538, 0.16881229123656993, 0.17990328041991321, 0.18681685971835393, 0.18456179973215703, 0.20054628470749114, 0.09344132721558562, 0.08838125796491658, 0.11303458433248725, 0.0894513495746363, 0.09242802290946905, 0.09642565692211413, 0.07816603986040338, 0.10034243850229507, 0.10096025843270895]}, "mutation_prompt": null}
{"id": "0d9f5ac0-5b4b-4aaa-b3db-6b470b429ce1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "098e85fd-97e6-4142-9f53-772842f96603", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "de07387c-6f1e-4cec-bb7e-3ff5fbae1e40", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "be93e343-5065-4faa-9867-70ca44b4aacf", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.inertia_weight = 0.5\n        self cognitive_weight = 1.5\n        self social_weight = 1.5\n        self.local_search_prob = 0.1\n\n    def _local_search(self, current_solution, func):\n        best_solution = current_solution\n        for _ in range(5):\n            candidate_solution = current_solution + np.random.uniform(-0.1, 0.1, self.dim)\n            if func(candidate_solution) < func(best_solution):\n                best_solution = candidate_solution\n        return best_solution\n\n    def _update_velocity_position(self, population, velocities, local_best_positions, global_best_position):\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + \\\n                             self.cognitive_weight * np.random.rand() * (local_best_positions[i] - population[i]) + \\\n                             self.social_weight * np.random.rand() * (global_best_position - population[i])\n            population[i] = population[i] + velocities[i]\n            if np.random.rand() < self.local_search_prob:\n                population[i] = self._local_search(population[i])\n\n    def _optimize_func(self, func, population):\n        velocities = np.random.uniform(-0.1, 0.1, (self.population_size, self.dim))\n        local_best_positions = population.copy()\n        global_best_position = population[0]\n        for _ in range(self.budget):\n            self._update_velocity_position(population, velocities, local_best_positions, global_best_position)\n            for i in range(self.population_size):\n                if func(population[i]) < func(local_best_positions[i]):\n                    local_best_positions[i] = population[i]\n                if func(population[i]) < func(global_best_position):\n                    global_best_position = population[i]\n        return global_best_position\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "PSOLocalSearch", "description": "An algorithm that combines Particle Swarm Optimization (PSO) with Local Search for global optimization.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 9, 14, '        self cognitive_weight = 1.5\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 9, 14, '        self cognitive_weight = 1.5\\n'))", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {}, "mutation_prompt": null}
{"id": "69aa6bca-d9c0-40aa-9e82-f6264b0b68f8", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "90101450-f0f6-494d-82ce-a9e5f3987484", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "3e35527c-fde3-45bb-b806-d847e3219819", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "24c1b1f8-4065-4926-b74b-0a862f24e6bc", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "9e785399-b64a-4577-b109-2a02762ae667", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "e7162a03-99ea-4992-b84e-bb9c8ec4666c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "27cf1c6f-2478-492e-9f68-c9c3c7390a9c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "4e7b49ed-62e6-4f89-a3a3-f94235619c25", "solution": "import numpy as np\n\nclass EnhancedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.temperature_schedule = np.geomspace(self.initial_temperature, self.final_temperature, self.budget)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for t in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.temperature_schedule[t]):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n        return best_solution", "name": "EnhancedHybridDESA", "description": "An enhanced hybrid metaheuristic algorithm combining Differential Evolution with Simulated Annealing for global optimization with refined strategy.", "configspace": "", "generation": 23, "fitness": 0.20606749066637822, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.16.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.2968595372543664, 0.33366757989871576, 0.3007336097459592, 0.3199724642129155, 0.3108414857573939, 0.11619501088397333, 0.24367840793419449, 0.26025562853413864, 0.33467620532556075, 0.31149743398273977, 0.30262656328628823, 0.2652390437438106, 0.28426506594517453, 0.20674717384392738, 0.32692223732162473, 0.24101617089202698, 9.999999999998899e-05, 0.3142589139906059, 0.17597500439433278, 0.2794142085393798, 0.13025460515625398, 0.15778212633861965, 0.13676487907908574, 0.15357999495928032, 0.2591711837071319, 0.2974969054025042, 0.1784653876554283, 0.1524303680507152, 0.11220904802983334, 0.12589079483994758, 0.11535382990998844, 0.12516515752159407, 0.10942965933236992, 0.1372634255195384, 0.13411960575954562, 0.092230641259472, 0.8654223915877632, 0.8156002360315568, 0.9182984969285398, 0.9311326236932653, 0.9345899604390965, 0.5531490422636167, 0.8923130291324731, 0.7830797107759278, 0.9369156919023142, 0.14540502943939193, 0.1204257099165763, 0.07830276443925777, 0.23727924048534976, 0.19409198449948328, 0.0908291359054989, 0.16874396450597795, 0.10488845547327041, 0.17829723591361635, 0.22914857431787228, 0.21398420823950048, 0.1349763023544387, 0.26727544805189996, 0.1480851257212824, 0.25899399723480554, 0.17487834640069144, 0.30837639376961357, 0.2271110359242533, 0.10039611220595912, 0.06808319003664487, 0.2657249390753177, 0.2266840584518618, 0.158599007430402, 0.17314499370685843, 0.2982449712587971, 0.14949852113477335, 0.1257219000210189, 0.1599189170807087, 0.12655380215414114, 0.15587493138163733, 0.14089601541971664, 0.14909294894607283, 0.12883111539690928, 0.17331324803391346, 0.13124657266953177, 0.12932488640232298, 0.03214862373469973, 0.02836639952104092, 9.999999999998899e-05, 0.006509863026212592, 9.999999999998899e-05, 0.07542631344620254, 9.999999999998899e-05, 9.999999999998899e-05, 0.056527243723085485, 0.15241693207009088, 0.11283508079764903, 0.06331957397016375, 0.13331339401451192, 0.039542957478822194, 0.025216723937526497, 0.13380681034997288, 0.0731838403663796, 0.17349358881704213, 0.11486851368716544, 0.19469344024726898, 0.14276544891792253, 0.07449176218684694, 0.0776558739156008, 0.12119565204487281, 9.999999999998899e-05, 0.1858566478078838, 0.1738852489142808, 0.07321830432080312, 0.11832772150843318, 0.21353255897060086, 0.07110439675905122, 0.1525132363759205, 0.18263232226960557, 0.030320693722121206, 0.09391790517301146, 0.10886204622907047, 0.35616893227020363, 0.2567649307558343, 0.32466662591960127, 0.23272413319582652, 0.28947786586585567, 0.29495626860685065, 0.3530605095689341, 0.31020976083728913, 0.33899843657118867, 0.12495234474059458, 0.10160859063727878, 0.12536792895431603, 0.10061273761465872, 0.10158783736564836, 0.13094164209529047, 0.15544661028141293, 0.07707505721927443, 0.09371833878761715, 0.12487375876034168, 0.14117042548186476, 0.1982386972964404, 0.1510754699073208, 0.11921142233890192, 0.21718075949213234, 0.1340193944864967, 0.1522357683743525, 0.22394271850446557, 0.2636911445218091, 0.24303402508923933, 0.27826954196508835, 0.28715690935660987, 0.2667539502585381, 0.27288613629267733, 0.19444905949777158, 0.2042760378814381, 0.24228642465480277, 0.24028217402385776, 0.2403429704170933, 0.25477037016550586, 0.22371159443490962, 0.21834453049073277, 0.238127110593789, 0.20487452261248096, 0.20828243620092157, 0.18391451635227463, 0.16826477156558306, 0.19136424970685384, 0.18690803444565962, 0.20472428902267226, 0.22056977787168386, 0.2029622193939714, 0.21343061991046797, 0.18963831873649073, 0.19186592803793967, 0.17009943479462586, 0.19545541016719503, 0.1889599491666999, 0.20037193438876388, 0.17877047367222587, 0.18050496250503567, 0.1840462035071665, 0.1681186176319419, 0.17346908128556637, 0.17304223297373877, 0.17012398864380773, 0.18216322680011676, 0.5252395594760368, 0.4545586624560035, 0.19094218097339033, 0.37831006397690325, 0.11368712212938992, 0.1620214401919191, 0.40769209830700515, 0.1618359982326063, 0.2879814587993976, 0.21317857789180383, 0.1794995812264628, 0.20447221377559022, 0.2645765352629137, 0.15117178602480108, 0.25442101349503965, 0.19017653725152073, 0.18242481054284687, 0.21464167985757454, 0.17214715623387578, 0.19459163593371798, 0.18323580959364205, 0.16973730031025802, 0.18305002534594528, 0.19605072612874508, 0.08469391946869875, 0.07945326217088733, 0.07567965689594514, 0.08787344666861552, 0.08019999022435054, 0.08525577290067687, 0.08985468034071786, 0.075483586929456, 0.13410280748699954]}, "mutation_prompt": null}
{"id": "59c53a51-f101-4d3f-9ca0-32d530cc34b6", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "053824d7-86bd-4b7a-bd99-fe8aa9d52640", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "3479e120-fca8-4f87-aa8f-71703d9aab85", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "471904db-df33-44d4-97b2-147b4026b487", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "a154932a-91c9-4564-bde5-a7f2286fb9f7", "solution": "import numpy as np\n\nclass AdaptiveHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)\n        ", "name": "AdaptiveHybridDESA", "description": "A novel algorithm leveraging a combination of Differential Evolution and Simulated Annealing with adaptive mutation and crossover strategies for global optimization.", "configspace": "", "generation": 28, "fitness": 0.23119843666521742, "feedback": "The algorithm AdaptiveHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "3b263a70-bf9c-4965-8947-0b6e48327ba8", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "823ec111-7f84-4aa3-89b0-3d19b1f03cbc", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "63e7dcab-6f9e-46f0-b6f3-a66ce7fbf669", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "28096c38-bee2-402d-9cc1-749f2f5fe983", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "c5da5571-e6cd-402d-8d9b-5fd906c56f43", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "NovelMetaheuristicAlgorithm", "description": "The algorithm utilizes a combination of Differential Evolution and Simulated Annealing with adaptive temperature control and population search for global optimization.", "configspace": "", "generation": 33, "fitness": 0.23119843666521742, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "88faa46d-d799-4348-8ae8-14f47fdc533c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "ef5041b3-0cc2-4d34-b5ed-daaf777566f5", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "037b555a-1192-46e0-848d-fc61c81b9bf1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "4fb3ab02-cb8a-487e-9630-57fe530f3869", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "da21525b-b609-4933-a93d-113aefcd7ab9", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "ce597daf-9ed7-4e40-958f-e871b0f67ae8", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "4cbf7142-64ee-440f-a773-a8a02d94993d", "solution": "import numpy as np\n\nclass RefinedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "RefinedHybridDESA", "description": "A novel optimization algorithm leveraging Hybrid Differential Evolution and Simulated Annealing with refined strategies for global optimization in black box functions.", "configspace": "", "generation": 40, "fitness": 0.23119843666521742, "feedback": "The algorithm RefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "a7f61a6b-c375-460f-8ac8-6a8689081f58", "solution": "import numpy as np\n\nclass DynamicMutHybridDESA(HybridDESA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.min_mutation_factor = 0.1\n        self.max_mutation_factor = 0.9\n\n    def _mutation(self, population, target_index, eval_count):\n        mutation_factor = self.min_mutation_factor + (self.max_mutation_factor - self.min_mutation_factor) * eval_count / self.budget\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        eval_count = 0\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx, eval_count)\n                trial = self._crossover(target, mutant)\n                eval_count += 1\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution", "name": "DynamicMutHybridDESA", "description": "Enhancing HybridDESA algorithm by introducing a dynamic mutation factor based on function evaluations to adapt to the optimization landscape effectively.", "configspace": "", "generation": 41, "fitness": 0.08195275020975734, "feedback": "The algorithm DynamicMutHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.17409203599875456, 0.19046879186776067, 0.14008603540411513, 0.11612227125295504, 0.16735403060304255, 0.08147154522359856, 0.1290715592151439, 0.19824065541889102, 0.08908996975163774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09936168129892298, 0.09823061827375046, 0.0321275793941842, 0.029432118866364543, 0.04528243818518751, 0.03957022114452757, 0.08779129669024655, 0.09687703365568301, 0.06792509055297835, 0.08175077112715079, 0.03488575717072384, 0.05072105311140296, 0.09543823426749154, 0.013524877416436931, 0.008034575616290063, 0.08342183781591428, 0.015552097852318703, 9.999999999998899e-05, 0.07764664777100694, 0.08163474172961782, 0.050101862651439455, 0.0773447987102398, 0.062020118480746844, 0.06506607669946574, 0.05186254924846778, 0.06205011258652726, 0.05859314478738653, 0.008245938059026403, 0.049357816969970325, 9.999999999998899e-05, 0.0006717926157916443, 0.036869702639801494, 0.029047099955435418, 0.05120837040188031, 0.023657023910600428, 9.999999999998899e-05, 0.17692257608911188, 0.07773758926009122, 0.15674635265280779, 0.11537614156811449, 0.07834028701163587, 0.05915693167460523, 0.10778035054905755, 0.04078074439678181, 0.13235434611136732, 0.06954171301927059, 9.999999999998899e-05, 0.011186074045821948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03159115209047647, 0.02050785093711005, 0.009592508788897058, 0.057982411021328506, 9.999999999998899e-05, 0.041343390885877906, 9.999999999998899e-05, 9.999999999998899e-05, 0.007899877504739972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056642254424704386, 0.04193386545181543, 0.10567754676973218, 0.024644240391029082, 0.030321633284886018, 0.046963531097116484, 0.05615404511359079, 0.08135209863306259, 0.0575009509878146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1736639079835599, 0.21520426511790225, 0.17564088621600782, 0.1215887269468745, 0.17361319474417636, 0.14057264067450415, 0.13152949728748442, 0.14610114350460413, 0.1629103876379413, 0.04311906089398432, 0.03881011589564898, 9.999999999998899e-05, 0.07199481310087175, 0.056540921846450876, 0.07751416898678742, 0.060805745320745674, 0.08381428520138867, 0.058907077144505826, 0.14884634814848574, 0.18440656297343716, 0.18215984625105663, 0.1394465894415553, 0.13197122306777287, 0.18966407121590179, 0.14827540766035252, 0.27664077563876, 0.17176644041580225, 0.18207102094654315, 0.17304865771790923, 0.1297701425020863, 0.18513858094174596, 0.19284462700661031, 0.15058378244060044, 0.1428983833575137, 0.1882340245045696, 0.14678303860193553, 0.1802323965455116, 0.10744837054343448, 0.12070299617892566, 0.12497314071473542, 0.10234137799583864, 0.08724838309156335, 0.10815442355431204, 0.09991941122672632, 0.06956317209768659, 0.20095490797059334, 0.1955878767395055, 0.22081343426804045, 0.1992353439157386, 0.18507658264601146, 0.22080012130191284, 0.1987040300857077, 0.19032080291958497, 0.19500073549705899, 0.15871409755051025, 9.999999999998899e-05, 0.16729789580198517, 9.999999999998899e-05, 9.999999999998899e-05, 0.11951264244431481, 0.16916273712806829, 0.009740642908517061, 9.999999999998899e-05, 0.08762143793657251, 0.11106264447074976, 0.180692437940413, 0.16560327453567847, 0.1683406456924489, 0.18201072791541628, 0.11963860589013442, 0.12303531144055191, 0.10113076368024254, 0.16886830776559358, 0.17806565198350366, 0.05832847008594111, 0.10567474220988593, 0.16821399658801384, 0.05411968227234343, 0.09425862903429738, 0.09559551534077837, 0.08501484358622802, 0.20383776767687445, 0.17522549197412174, 0.1910475234094544, 0.18881026009891044, 0.17365715194767417, 0.17303510368493447, 0.18531726103183077, 0.17523433347727368, 0.1742224448458941, 0.0631034675041574, 0.05151018283355935, 0.07414655489969169, 0.07926375487547244, 0.06556716987703604, 0.11224967927271223, 0.06241728162875204, 0.06658350198258467, 0.058171103301773996]}, "mutation_prompt": null}
{"id": "7b7be802-55a1-4bef-9e49-e3999fc25041", "solution": "import numpy as np\n\nclass EnhancedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.strategy_parameter = 0.5\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        strategy_factor = 0.5 + 0.1 * np.random.randn(self.dim)\n        mutant = population[a] + self.strategy_parameter * strategy_factor * (population[b] - population[c])\n        return mutant\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "EnhancedHybridDESA", "description": "Enhancing the HybridDESA algorithm by incorporating a dynamic mutation strategy based on adaptive control theory.", "configspace": "", "generation": 42, "fitness": 0.11438993590539817, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.2947107289952534, 0.10341698896650997, 0.19963067588318895, 0.07583176200261588, 0.15970884413224085, 0.0927904535501668, 0.2000449612156191, 0.1569503087503139, 0.14554079005160891, 0.10534194091739368, 9.999999999998899e-05, 9.999999999998899e-05, 0.07867929575724697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05145596118369611, 0.17420156053250246, 0.13894950406171847, 0.09947852037009419, 0.09212262809285165, 0.05746682834936545, 0.05367105974064512, 0.1432292040215678, 0.06940422827229453, 0.09015536792009848, 0.14110604484083455, 0.05176422961346894, 0.10442519857172772, 0.12479890249718117, 0.03128800214147964, 0.027630010617404888, 0.04332292044236552, 0.048386736106089456, 0.017501547785170102, 0.08727707476204505, 0.05493898487013449, 0.10115087418797097, 0.07159591722629755, 0.09395300303309362, 0.10652577571217936, 0.05147303120098057, 0.12042661537206822, 0.07135305847345663, 0.09214953168930318, 0.03668586736478496, 0.06833025507815504, 0.020238823275094187, 0.02494528183296374, 0.057096509547742036, 0.1300336615014347, 0.03386425840258267, 0.041637373010258494, 0.17542622919772077, 0.0775086734050563, 0.1247648282108863, 0.29710525484720307, 0.11844781764342349, 0.14758337129651977, 0.04055031361748884, 0.12006226111386664, 0.18244522084809434, 0.13028677851683856, 0.13620419070594492, 9.999999999998899e-05, 9.999999999998899e-05, 0.01765735550468528, 0.05179415343567939, 0.042227944636289094, 0.30525362318060456, 0.13373865903961524, 0.14650080295903245, 0.12604434458762392, 0.08717823853632412, 0.02213590138686794, 0.11381814129618939, 9.999999999998899e-05, 0.10140445731233372, 0.12462463713096117, 0.0382433264760319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07278800007750574, 0.049940494234307686, 0.0028366204448532217, 0.07683131039832203, 0.09263785396369928, 0.027233532636428803, 0.055866793292271955, 0.07843936057860923, 0.020825857482534627, 0.1017715509989775, 9.999999999998899e-05, 9.999999999998899e-05, 0.16589394358888343, 0.08577728955907737, 9.999999999998899e-05, 9.999999999998899e-05, 0.04990373854674113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021049065860565097, 9.999999999998899e-05, 0.027653835394166215, 0.05122027257792139, 0.12003820567150902, 9.999999999998899e-05, 9.999999999998899e-05, 0.2491954295662968, 0.22487654050247485, 0.2364248561673432, 0.10970190072650277, 0.18841065089862297, 0.20081350957374966, 0.17008124814112835, 0.14118020793320007, 0.2555238573444073, 0.0541674265625266, 0.11453338476218178, 9.999999999998899e-05, 0.09692996048302516, 0.13298847207100883, 0.09426812121020978, 0.06888057885901777, 0.11308071383228435, 0.08794425467893707, 0.1692005249502343, 0.1885890937796585, 0.15498942834344276, 0.16532074174063638, 0.1928299361277689, 0.1689545112837273, 0.18485132342312094, 0.17581762443632143, 0.16070877047958254, 0.14230248327525374, 0.2686175812456064, 0.13475234574741302, 0.14556308183331035, 0.17337700492683128, 0.18526035635610538, 0.153199446635922, 0.22683149920111068, 0.26265072245113763, 0.1417498334742906, 0.16555448000074724, 0.22052269945719782, 0.1228947306096363, 0.23842742843519427, 0.2212757676099898, 0.1321196580130165, 0.1518982902943109, 0.06568024037206799, 0.21987411071379515, 0.19895813624209302, 0.20499254611107642, 0.19567899607702022, 0.1907627354564, 0.19954912073447573, 0.21604185326536618, 0.18494250256541933, 0.21213104593565713, 0.19181123772206843, 9.999999999998899e-05, 0.139804290930573, 0.17644068217945974, 0.20731033164945645, 0.20666666578225656, 0.23734714691046144, 0.17543464934270503, 0.1606554855593475, 0.15651736797204996, 0.2592091691031767, 0.15371719549261165, 0.1697559261614322, 0.19028781853698318, 0.16528061377722225, 0.39024352567417997, 0.18632093936538352, 0.15483495143289727, 0.5162447741795149, 0.24976413912086948, 0.09141486499036933, 0.11975443798258711, 0.08130427338371116, 0.10308804773102109, 0.10263820473266427, 0.16819863652766276, 0.09170212096451635, 0.18731972331179503, 0.16814091965240063, 0.19366290271346243, 0.1744895816372546, 0.1727110602516354, 0.16973487238135931, 0.17762551443897734, 0.175321939238815, 0.17447123515902985, 0.09242410093670839, 0.11098662342959686, 0.07292983690822241, 0.10988290629199271, 0.07624558583638574, 0.05370817998273847, 0.11393023101000399, 0.08641343366614818, 0.07521289448153001]}, "mutation_prompt": null}
{"id": "cd68cf7a-cfed-493f-8d38-61e161064367", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "31a95cd7-bd97-49dc-947b-2a7049fc798e", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "5d14a21d-4a64-47bc-aaf6-8b438e98c465", "solution": "import numpy as np\n\nclass HybridDESAImproved(HybridDESA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.refinement_probability = 0.35\n\n    def _refine_strategy(self):\n        if np.random.rand() < self.refinement_probability:\n            # Implement refinement strategy here\n            pass\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self._refine_strategy()\n        return self._optimize_func(func, population)", "name": "HybridDESAImproved", "description": "An algorithm that combines Differential Evolution with Simulated Annealing for global optimization, updating the population with mutation and crossover while integrating a temperature-based acceptance criterion to escape local optima.", "configspace": "", "generation": 45, "fitness": 0.2304004574862894, "feedback": "The algorithm HybridDESAImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.3940000373482405, 0.408042815536104, 0.6157322340775887, 0.3617960314131361, 0.22826878004410334, 0.43456283982859034, 0.44515091465185375, 0.29652411938568135, 0.7489062581986909, 0.10172560273674303, 0.123311254598378, 0.5853514152183987, 9.999999999998899e-05, 0.4485327034284453, 0.003581298179009873, 0.025944991129679296, 0.23412808355390913, 0.33895996644562165, 0.16895118959121613, 0.1501347449765028, 0.15701471391343436, 0.1666382824646374, 0.1529428312135842, 0.7147645394707594, 0.14170053525811532, 0.15065606567197354, 0.13930136491789158, 0.1547675414171692, 0.15216675572662408, 0.14357807169993497, 0.11104254219277887, 0.12477963412401072, 0.14868853280221794, 0.15394425881870943, 0.04508582475883627, 0.9658362196957394, 0.9732259315392673, 0.9492914394862694, 0.1742142113581745, 0.9450280033829731, 0.15196266300350614, 0.10001189903506258, 0.17193344555214463, 0.14594104841726874, 0.30287523689701024, 0.07680775159398234, 0.06281088314647965, 0.24696953694920754, 0.15228270142896694, 0.05887780127477604, 0.23947833812520947, 0.2346023276317979, 0.15627922447693432, 0.2329460275333174, 0.3599235853028593, 0.2260887777110332, 0.8382122659313831, 0.9215607238493229, 0.8497590954770975, 0.17745876364526414, 0.226246243119668, 0.3630559509184148, 0.10395219910325837, 0.02947656681916211, 0.030089146133994826, 0.22252293241312104, 0.141009758687349, 0.19533929434660757, 0.18621287223465965, 0.13055014551697675, 0.12785452520451568, 0.15845699945771052, 0.1989242636841757, 0.11628615865130032, 0.1601115289275198, 0.12983533014865767, 0.12496287704337061, 0.1574393825272249, 0.06946929927623247, 0.1431060027205895, 0.03268072881907269, 9.999999999998899e-05, 9.999999999998899e-05, 0.006934727599840929, 0.0068303655391882545, 0.07976430661911271, 9.999999999998899e-05, 0.0019716878960425177, 0.05585684528202506, 0.1534460788401435, 0.1441431826712476, 0.1403918029601453, 0.15191182756318944, 0.24533585503259925, 0.04604593323636852, 0.14049501606527848, 0.01809328375348307, 0.04556462070847378, 0.11502735146097531, 0.14980895751376289, 0.14370428013196856, 0.0740674210620702, 0.03498293976345701, 0.08630851164362974, 9.999999999998899e-05, 0.18470048651104343, 0.027872694100739448, 0.1822823545989254, 0.006165853400720178, 0.1470858663610739, 0.08780605689759469, 0.20329382309248845, 0.016460818822660594, 0.01768883867323623, 0.2587698218654204, 0.08448592601848137, 0.5136281766739861, 0.3916202429994914, 0.5528336042938587, 0.4326061911705936, 0.3670758450973959, 0.38720094149692497, 0.41231637045161174, 0.4914547819487919, 0.3101111333932456, 0.1432572950344776, 0.1404169428203551, 0.1090787339032464, 0.11317592229077478, 0.1098448107449711, 0.12110065180520901, 0.1248154932563259, 0.1348360102189612, 0.13775496009012422, 0.16183442830905992, 0.15813828008628739, 0.2815604370093838, 0.141475432171435, 0.1401111963678715, 0.194756325642213, 0.15306977223019458, 0.12073638574588663, 0.1137448542442866, 0.32705823793698097, 0.4818353671439878, 0.4648194205789482, 0.27374999204796624, 0.48982897024916794, 0.3912945915936974, 0.2501726945499778, 0.3821914586298494, 0.19760878428048312, 0.201459980421536, 0.30208433442941596, 0.33078159139699137, 0.24554904339804418, 0.27580674377766046, 0.2874976699668651, 0.2666733882456075, 0.47002948373711295, 0.12363461183977686, 0.19899889636031243, 0.21348994789688414, 0.21609417419799293, 0.21766918725864715, 0.19853387653638388, 0.21280562707322137, 0.21332706833863524, 0.19895003497613373, 0.23682808245217024, 0.18676849871499068, 0.1919477030196175, 0.2354512629937573, 0.32072994835975965, 0.21401016944004447, 0.19609102968504, 0.19905530794573922, 0.3395059213658135, 0.16746898104556662, 0.1807995595578915, 0.5307836342989413, 0.4331061169753968, 0.6386621639941269, 0.19671428753343512, 0.16418889687506, 0.7097760296224904, 0.3712709718972321, 0.15219980385504672, 0.8358834480012818, 0.19958920455577545, 0.36821888983925477, 0.2508067370806547, 0.2075785906349843, 0.15786398930304057, 0.24688609901079328, 0.12221772862192681, 0.34663561412290533, 0.19213528862763019, 0.17308040571465166, 0.18187533692213087, 0.1883754825451096, 0.1939112004579958, 0.18797509247432986, 0.18777159865802429, 0.1862430570687511, 0.19431135566433755, 0.07925120863787383, 0.10111157138326998, 0.09676030958847437, 0.08133692680859983, 0.07722542410895039, 0.10179670418977604, 0.0721565327885424, 0.0757223898175926, 0.07246184416416823]}, "mutation_prompt": null}
{"id": "87861204-cde3-4da7-8807-6a2d921ad1ca", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "e299574f-9d3b-42af-bca5-43a759e89475", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "3dc58f50-5cd1-44c9-a3c3-a73f8ebbab35", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "ec774d22-f8a9-4e2f-900b-3f09b86c5c8c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "9570ff2e-475b-420a-8b00-0aaa411e9858", "solution": "import numpy as np\n\nclass HybridDESAEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _hill_climber(self, func, individual):\n        current_solution = individual\n        for _ in range(self.budget // 10):  # Hill climber budget set to 10% of total budget\n            candidate = current_solution + np.random.normal(0, 0.1, self.dim)\n            if func(candidate) < func(current_solution):\n                current_solution = candidate\n        return current_solution\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                trial = self._hill_climber(func, trial)  # Integrate hill climber\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESAEnhanced", "description": "Enhancing HybridDESA by incorporating a local search phase using a hill climber algorithm for improved exploration-exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.17215777866775606, "feedback": "The algorithm HybridDESAEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.48324901806852816, 0.44096985919396847, 0.47267423379021156, 0.48788833195487136, 0.4510128930435594, 0.4733033553078628, 0.46853214673343846, 0.43370626168311777, 0.4738262001408059, 9.999999999998899e-05, 9.999999999998899e-05, 0.006507016229416296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033157687992767526, 0.018220591717345247, 0.0007735966529404115, 0.019029443742359597, 0.07280613628202648, 0.0035309937929889346, 0.01078840768628686, 0.049748765795328054, 0.006929924532447118, 0.008585576041016063, 0.015413289858131285, 0.008364430638744813, 0.006955164857262219, 0.02275368544857559, 0.006101638134449638, 0.0027109886696115026, 0.010209556805086173, 0.008518471431926633, 0.01404949425743629, 0.9327731122764735, 0.8856047432830099, 0.8818403083163475, 0.9271640552541729, 0.9456656473065469, 0.930524348942997, 0.9408855478905477, 0.9025272312428626, 0.9593134435515898, 0.33816368484414383, 0.3115701380270921, 0.30012105724542104, 0.3470012341595714, 0.2996525299905406, 0.3153271057797602, 0.33676570467099687, 0.2867925011492274, 0.3222593072558779, 0.08374970508964052, 9.999999999998899e-05, 0.06609825285923421, 0.0027751885313956892, 0.07006095137917201, 0.004028745302318892, 0.015800250493380963, 0.01622491481073507, 0.07028999509107303, 0.18133932725122626, 0.15863588632773207, 0.17267296093718632, 0.18019382437079112, 0.15370654143313656, 0.17783338719254005, 0.17318106478158102, 0.16591352563602213, 0.16301994661365027, 0.20127382341685185, 0.1376693532664831, 0.15328449348178508, 0.1643118839281642, 0.12353242530435182, 0.16281537335032148, 0.18297314920587227, 0.1502328931648288, 0.1505456502152278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027840858640854838, 0.0017924621937519536, 0.007458447054843442, 0.03475195456635516, 9.999999999998899e-05, 0.04466075964025151, 0.09177645257222489, 0.04790554445643014, 0.1291048081568268, 0.0851870223030653, 0.011874215193720228, 0.09652879492306987, 0.07179171371827253, 0.04218762477563209, 0.06350086731538196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03930414064559995, 9.999999999998899e-05, 9.999999999998899e-05, 0.14295757359700834, 0.10712481195650692, 0.09431840235430378, 0.10802797202191128, 0.10235057560049698, 0.06424731633867453, 0.10057056392373165, 0.05409009406203835, 0.09369672418090758, 0.42536019716584383, 0.5023256351748002, 0.4206605499901026, 0.41906347018942414, 0.40617906833746786, 0.4244573089598149, 0.4222358138946136, 0.41543783105253984, 0.4218316790400971, 0.03252318874501303, 9.999999999998899e-05, 0.021473833027226497, 9.999999999998899e-05, 0.021190505658525982, 0.0451150222030503, 0.00011967973705773183, 0.039599207355776156, 0.018677182574816653, 0.11278954874819225, 0.15896373832040045, 0.19792840625481878, 0.18580032463170526, 0.1663813402419264, 0.0936625681187061, 0.19056027005374365, 0.10846275992849608, 0.1521685794561759, 0.11464148623514991, 0.08296310236173687, 0.10415809023081857, 0.11925711072982792, 0.07983659684998035, 0.11965563118664524, 0.11264285655408057, 0.09590667673971143, 0.10977608276128215, 0.0665178275605427, 0.026930910492702242, 0.03912837785941681, 0.05833914074176205, 0.022664011699425335, 0.05070786775712588, 0.05249357052632664, 0.03695365748602075, 0.05028805845155515, 0.16080373735332176, 0.0949027197532627, 0.15692940416359358, 0.1586954314092891, 0.10583420426628787, 0.15308788410499052, 0.14030242408126192, 0.09029051426932688, 0.13744022802996747, 0.17765449900629304, 0.1741483910567616, 0.18906728085642577, 0.18412070856588458, 0.1803827874956394, 0.18413948456030627, 0.1882695441815092, 0.1675794438102739, 0.18735147267104735, 0.17789031594649118, 0.1521788925544999, 0.12147796818604839, 0.7999830301092509, 0.35072638311100135, 0.11357178719573346, 0.09657199282758178, 0.14846700436469895, 0.3321518214229351, 0.15509867179865777, 0.24649803882848387, 0.4232123857940081, 0.6147964803539518, 0.3218769121019279, 0.5591729972337464, 0.1902863794964601, 0.23180605932455478, 0.1107869758246367, 0.17733648194279672, 0.18385188553192988, 0.20374707046921547, 0.18632114016524892, 0.160428843032137, 0.184053844677891, 0.17980921505126535, 0.1694405547652723, 0.17162343876740727, 0.029320114835347577, 0.002492217882112291, 0.020741290633112697, 0.015233919261323225, 0.0012473715467851143, 0.02126221630403813, 0.05195088249574853, 0.0372037528072835, 0.04495085557557743]}, "mutation_prompt": null}
{"id": "f5c61612-4189-4789-9597-be18f28058cd", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "11f03139-1eef-4367-b471-e38cc330fcf3", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "bdefd787-a0fe-427c-8f98-a397bd0d2951", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "50ad97d7-01b4-41e2-9600-ef08cbef8549", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "25dbf43e-85cd-44b1-aa80-dc820fc823c3", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "7a523633-e356-498a-a955-062beb4be45e", "solution": "import numpy as np\n\nclass RefinedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)\n\n# Refine the algorithm with a probability-based strategy\nrefined_hybrid_desa = RefinedHybridDESA(1000, 10)\nrefined_solution = refined_hybrid_desa(lambda x: x[0]**2 + x[1]**2)  # Example black box function optimization", "name": "RefinedHybridDESA", "description": "A novel metaheuristic algorithm that combines Differential Evolution with Simulated Annealing for global optimization with a probability-based refinement strategy.", "configspace": "", "generation": 56, "fitness": 0.23119843666521742, "feedback": "The algorithm RefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "b4df561c-b3e3-4fff-b73c-b816d61584dc", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "bb071c88-7108-4e4d-bfbb-b94eb9c8f88e", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "84945d18-def2-4d5b-b935-346ca2d946c7", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "f23dfa8c-8117-4851-acde-2fb1e830294a", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15  # Increase population size for better exploration\n        self.crossover_rate = 0.8  # Increase crossover rate for more diverse offspring\n        self.mutation_factor = 0.6  # Increase mutation factor for broader search\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.95  # Increase the cooling rate for faster convergence\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "EnhancedHybridDESA", "description": "An enhanced version of HybridDESA algorithm with a refined strategy to improve optimization performance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedHybridDESA' object has no attribute '_mutation'\").", "error": "AttributeError(\"'EnhancedHybridDESA' object has no attribute '_mutation'\")", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {}, "mutation_prompt": null}
{"id": "9b00ce91-8981-4b22-97bb-121479e0e5d3", "solution": "import numpy as np\n\nclass AdaptiveHybridDESA(HybridDESA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.alpha = 0.95\n        self.temperature_schedule = np.geomspace(self.initial_temperature, self.final_temperature, self.budget)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for t in range(self.budget):\n            self.initial_temperature = self.temperature_schedule[t]\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n        return best_solution", "name": "AdaptiveHybridDESA", "description": "An enhanced version of HybridDESA algorithm with adaptive temperature control and crossover strategy for improved global optimization.", "configspace": "", "generation": 61, "fitness": 0.20606749066637822, "feedback": "The algorithm AdaptiveHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.16.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.2968595372543664, 0.33366757989871576, 0.3007336097459592, 0.3199724642129155, 0.3108414857573939, 0.11619501088397333, 0.24367840793419449, 0.26025562853413864, 0.33467620532556075, 0.31149743398273977, 0.30262656328628823, 0.2652390437438106, 0.28426506594517453, 0.20674717384392738, 0.32692223732162473, 0.24101617089202698, 9.999999999998899e-05, 0.3142589139906059, 0.17597500439433278, 0.2794142085393798, 0.13025460515625398, 0.15778212633861965, 0.13676487907908574, 0.15357999495928032, 0.2591711837071319, 0.2974969054025042, 0.1784653876554283, 0.1524303680507152, 0.11220904802983334, 0.12589079483994758, 0.11535382990998844, 0.12516515752159407, 0.10942965933236992, 0.1372634255195384, 0.13411960575954562, 0.092230641259472, 0.8654223915877632, 0.8156002360315568, 0.9182984969285398, 0.9311326236932653, 0.9345899604390965, 0.5531490422636167, 0.8923130291324731, 0.7830797107759278, 0.9369156919023142, 0.14540502943939193, 0.1204257099165763, 0.07830276443925777, 0.23727924048534976, 0.19409198449948328, 0.0908291359054989, 0.16874396450597795, 0.10488845547327041, 0.17829723591361635, 0.22914857431787228, 0.21398420823950048, 0.1349763023544387, 0.26727544805189996, 0.1480851257212824, 0.25899399723480554, 0.17487834640069144, 0.30837639376961357, 0.2271110359242533, 0.10039611220595912, 0.06808319003664487, 0.2657249390753177, 0.2266840584518618, 0.158599007430402, 0.17314499370685843, 0.2982449712587971, 0.14949852113477335, 0.1257219000210189, 0.1599189170807087, 0.12655380215414114, 0.15587493138163733, 0.14089601541971664, 0.14909294894607283, 0.12883111539690928, 0.17331324803391346, 0.13124657266953177, 0.12932488640232298, 0.03214862373469973, 0.02836639952104092, 9.999999999998899e-05, 0.006509863026212592, 9.999999999998899e-05, 0.07542631344620254, 9.999999999998899e-05, 9.999999999998899e-05, 0.056527243723085485, 0.15241693207009088, 0.11283508079764903, 0.06331957397016375, 0.13331339401451192, 0.039542957478822194, 0.025216723937526497, 0.13380681034997288, 0.0731838403663796, 0.17349358881704213, 0.11486851368716544, 0.19469344024726898, 0.14276544891792253, 0.07449176218684694, 0.0776558739156008, 0.12119565204487281, 9.999999999998899e-05, 0.1858566478078838, 0.1738852489142808, 0.07321830432080312, 0.11832772150843318, 0.21353255897060086, 0.07110439675905122, 0.1525132363759205, 0.18263232226960557, 0.030320693722121206, 0.09391790517301146, 0.10886204622907047, 0.35616893227020363, 0.2567649307558343, 0.32466662591960127, 0.23272413319582652, 0.28947786586585567, 0.29495626860685065, 0.3530605095689341, 0.31020976083728913, 0.33899843657118867, 0.12495234474059458, 0.10160859063727878, 0.12536792895431603, 0.10061273761465872, 0.10158783736564836, 0.13094164209529047, 0.15544661028141293, 0.07707505721927443, 0.09371833878761715, 0.12487375876034168, 0.14117042548186476, 0.1982386972964404, 0.1510754699073208, 0.11921142233890192, 0.21718075949213234, 0.1340193944864967, 0.1522357683743525, 0.22394271850446557, 0.2636911445218091, 0.24303402508923933, 0.27826954196508835, 0.28715690935660987, 0.2667539502585381, 0.27288613629267733, 0.19444905949777158, 0.2042760378814381, 0.24228642465480277, 0.24028217402385776, 0.2403429704170933, 0.25477037016550586, 0.22371159443490962, 0.21834453049073277, 0.238127110593789, 0.20487452261248096, 0.20828243620092157, 0.18391451635227463, 0.16826477156558306, 0.19136424970685384, 0.18690803444565962, 0.20472428902267226, 0.22056977787168386, 0.2029622193939714, 0.21343061991046797, 0.18963831873649073, 0.19186592803793967, 0.17009943479462586, 0.19545541016719503, 0.1889599491666999, 0.20037193438876388, 0.17877047367222587, 0.18050496250503567, 0.1840462035071665, 0.1681186176319419, 0.17346908128556637, 0.17304223297373877, 0.17012398864380773, 0.18216322680011676, 0.5252395594760368, 0.4545586624560035, 0.19094218097339033, 0.37831006397690325, 0.11368712212938992, 0.1620214401919191, 0.40769209830700515, 0.1618359982326063, 0.2879814587993976, 0.21317857789180383, 0.1794995812264628, 0.20447221377559022, 0.2645765352629137, 0.15117178602480108, 0.25442101349503965, 0.19017653725152073, 0.18242481054284687, 0.21464167985757454, 0.17214715623387578, 0.19459163593371798, 0.18323580959364205, 0.16973730031025802, 0.18305002534594528, 0.19605072612874508, 0.08469391946869875, 0.07945326217088733, 0.07567965689594514, 0.08787344666861552, 0.08019999022435054, 0.08525577290067687, 0.08985468034071786, 0.075483586929456, 0.13410280748699954]}, "mutation_prompt": null}
{"id": "f1647043-1cd7-445a-a029-2318e5a9a9f1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "09f3e6c4-9d2f-45eb-bf8b-4e6280bf87f7", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "5f225cd4-b942-4d04-b2ca-a27285689dac", "solution": "import numpy as np\n\nclass ILS_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_strength = 0.1\n        self.adaptive_factor = 0.9\n\n    def _mutation(self, current_solution):\n        return current_solution + self.mutation_strength * np.random.uniform(-1, 1, self.dim)\n\n    def _optimize_func(self, func, current_solution):\n        best_solution = current_solution\n        for _ in range(self.budget):\n            candidate_solution = self._mutation(current_solution)\n            if func(candidate_solution) < func(current_solution):\n                current_solution = candidate_solution\n                if func(candidate_solution) < func(best_solution):\n                    best_solution = candidate_solution\n            self.mutation_strength *= self.adaptive_factor\n        return best_solution\n\n    def __call__(self, func):\n        initial_solution = np.random.uniform(-5, 5, self.dim)\n        return self._optimize_func(func, initial_solution)", "name": "ILS_AMS", "description": "Iterative Local Search with Adaptive Mutation Strength (ILS-AMS) optimizes by iteratively perturbing the current solution and adapting the mutation strength based on the success of the perturbation.", "configspace": "", "generation": 64, "fitness": 0.024396433762949005, "feedback": "The algorithm ILS_AMS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.04.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.07532059365611188, 0.034874572331829, 0.06347448048988769, 0.0104515019168826, 0.0060729067480855825, 0.027269510817274578, 0.03492692621737459, 0.0502675897218422, 0.03129556520491428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0074028772041845325, 0.0031846719648327415, 9.999999999998899e-05, 0.00043020228644730096, 0.015896485070402977, 0.0031780093828740474, 9.999999999998899e-05, 0.016883365097237424, 0.0037418153049749714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00370493734558619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032419814231248845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06480024951681174, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016683958366155105, 9.999999999998899e-05, 0.12671463785951786, 0.07160740982117297, 9.999999999998899e-05, 9.999999999998899e-05, 0.09905054485827691, 0.05037113113046976, 0.02274212996344327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016915310866522648, 0.06807275229972143, 0.096566033157647, 0.03309476153336377, 0.04518079621625748, 0.07463939400922814, 0.01701311212531853, 0.02927086200428619, 9.999999999998899e-05, 0.10456845442955998, 0.09282231509244898, 0.08846099069039248, 0.13688721551431804, 0.05902385992278092, 0.09436237754225618, 0.13773246751122625, 0.07503293490500385, 0.06969190835837058, 0.050038637579203904, 0.004909846495636749, 0.0022928888983493323, 0.07746982853333428, 9.999999999998899e-05, 0.045704414667034676, 0.07030867410109876, 0.009832670331496263, 0.0072896295085320695, 0.17620901260929567, 0.022773026163317223, 0.10172026390545619, 0.19564743123999906, 0.023793894625308898, 0.05708240193143388, 0.1614854369071982, 0.03519274145765772, 0.08636963249994623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030128435734013692, 0.016222436762248993, 0.01598034031394524, 0.05512538076755302, 0.014245771112152528, 0.01751265646311817, 0.03977173185898697, 0.06631702497550618, 0.03754251219510807, 0.01875787140295848, 0.06210321099753546, 0.008449579916637195, 0.011952965080645805, 0.010452562200689908, 0.01385686129483421, 0.013466106694091873, 0.01225073675386068, 0.016640120615885268, 0.13499684842751902, 0.15353779845723403, 0.13566225075535587, 0.1457981489614314, 0.187099539472395, 0.1825333358229776, 0.12412296243496423, 0.1650308689299269, 0.16538853924965247, 0.027994529441416116, 9.999999999998899e-05, 0.030605928044306507, 0.03291174754168713, 9.999999999998899e-05, 0.007208353506137022, 0.026151191972534016, 0.002525446595690428, 0.03476403390314553]}, "mutation_prompt": null}
{"id": "017dc2da-4dc7-47f7-8e67-3a78a575dd94", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.initial_temperature = 1.0\n        self.final_temperature = 0.0001\n        self.alpha = 0.9\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return mutant\n\n    def _crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def _acceptance_probability(self, energy_diff, temperature):\n        return np.exp(-energy_diff / temperature)\n\n    def _optimize_func(self, func, population):\n        best_solution = population[0]\n        for _ in range(self.budget):\n            for idx, target in enumerate(population):\n                mutant = self._mutation(population, idx)\n                trial = self._crossover(target, mutant)\n                energy_diff = func(trial) - func(target)\n                if energy_diff < 0 or np.random.rand() < self._acceptance_probability(energy_diff, self.initial_temperature):\n                    population[idx] = trial\n                    if func(trial) < func(best_solution):\n                        best_solution = trial\n            self.initial_temperature *= self.alpha\n        return best_solution\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        return self._optimize_func(func, population)", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.44102360157973586, 0.7403631631100269, 0.24888559641568864, 0.6157322340775887, 0.7620997637311566, 0.1024999075458598, 0.43456283982859034, 0.14603045764774603, 0.6112885103838901, 0.7489062581986909, 0.19413310495756197, 0.3154408709634906, 0.5853514152183987, 0.14606409238798346, 0.26683863980859146, 0.003581298179009873, 9.999999999998899e-05, 0.1941142259309474, 0.33895996644562165, 0.15535439156571806, 0.07032811428214625, 0.15701471391343436, 0.17130449749599996, 0.14469926709055125, 0.7147645394707594, 0.13753282485856055, 0.17788593180098544, 0.13930136491789158, 0.11070233671870933, 0.12753559058701358, 0.14357807169993497, 0.1125892334511438, 0.08750010202590353, 0.14868853280221794, 0.17515928170557926, 0.09232982002807877, 0.9658362196957394, 0.20566750411147283, 0.9497845061700013, 0.1742142113581745, 0.9122266194172871, 0.16867194668393515, 0.10001189903506258, 0.9497290744860991, 0.18580784166797704, 0.30287523689701024, 0.10924187733770507, 0.06115209486146944, 0.24696953694920754, 0.21232436667610477, 0.05443690034169868, 0.23947833812520947, 0.13980822137092241, 0.18983540891121342, 0.2329460275333174, 0.31933899019870926, 0.09885567201951817, 0.8382122659313831, 0.15308056961595629, 0.8650236067740968, 0.17745876364526414, 0.7659092827609113, 0.3631405362626403, 0.10395219910325837, 0.04946783734817983, 0.29171394293539366, 0.22252293241312104, 0.1944524818924056, 0.19044855475182276, 0.18621287223465965, 0.1457711617930596, 0.12594173430749778, 0.15845699945771052, 0.11543319664627161, 0.1390662686724249, 0.1601115289275198, 0.14064573480736087, 0.13350381029581182, 0.1574393825272249, 0.12634693870061142, 0.13332350223509126, 0.03268072881907269, 0.10602347352253894, 9.999999999998899e-05, 0.006934727599840929, 0.01207745377618108, 0.07453858448991213, 9.999999999998899e-05, 9.999999999998899e-05, 0.05701525279777031, 0.1534460788401435, 0.11400716273134726, 0.06366725069394652, 0.15191182756318944, 0.13544369825192426, 0.024964524566093327, 0.14049501606527848, 0.0858116823060745, 0.18571730477372295, 0.11502735146097531, 0.19509539599139392, 0.1467476000224993, 0.0740674210620702, 0.07523365035816565, 0.12291002259777617, 9.999999999998899e-05, 0.18927078861660795, 0.15148762215566425, 0.1822823545989254, 0.11190217177964279, 0.2040566210539727, 0.08780605689759469, 0.10070107079229818, 0.1187493609133744, 0.01768883867323623, 0.10355127521573582, 0.10451783489762778, 0.5136281766739861, 0.5513007450431083, 0.5154857692319434, 0.4326061911705936, 0.3773294991679431, 0.46441457666541264, 0.41231637045161174, 0.44834206403090027, 0.39396255810135283, 0.1432572950344776, 0.11351123488279502, 0.1030145740543198, 0.11317592229077478, 0.118848175241548, 0.11745090703766614, 0.1248154932563259, 0.05973999833384891, 0.11215743474272821, 0.16183442830905992, 0.12889034882804995, 0.19258946316623815, 0.141475432171435, 0.10938509661859608, 0.1748085323803421, 0.15306977223019458, 0.12383069023623505, 0.18469422653202205, 0.32705823793698097, 0.45642978915088495, 0.36790582924588666, 0.27374999204796624, 0.4859325438515677, 0.5174720745864215, 0.2501726945499778, 0.3756428703522211, 0.22242534566517613, 0.201459980421536, 0.28627689310424953, 0.2502764166738023, 0.24554904339804418, 0.15835829281010683, 0.35685483830596, 0.2666733882456075, 0.21893380846628796, 0.2171499427034439, 0.19899889636031243, 0.26791823409799753, 0.19354693168062997, 0.21766918725864715, 0.1882805479165669, 0.20708587266223422, 0.21332706833863524, 0.1802787312780023, 0.18277322349509506, 0.18676849871499068, 0.36764356202931214, 0.24684705081322866, 0.32072994835975965, 0.22165246110800874, 0.2361412610199215, 0.19905530794573922, 0.21594213646704552, 0.16750342860015932, 0.1807995595578915, 0.17804605508692095, 0.4330100018992258, 0.6386621639941269, 0.44620631360703333, 0.18972522613069942, 0.7097760296224904, 0.11784388219789, 0.16433135169417368, 0.8358834480012818, 0.1601556756683723, 0.3748734976621412, 0.2508067370806547, 0.08056202192303097, 0.20427874753544406, 0.24688609901079328, 0.13579309876112333, 0.2089478498881987, 0.19213528862763019, 0.1979449609874122, 0.20766667297371255, 0.1883754825451096, 0.19444087000329202, 0.17749126177492858, 0.18777159865802429, 0.16871386710355196, 0.16950467969614091, 0.07925120863787383, 0.08380346861464605, 0.07396460392774384, 0.08133692680859983, 0.08464985276548054, 0.07261954763696266, 0.0721565327885424, 0.08408521264755742, 0.1246198560250188]}, "mutation_prompt": null}
{"id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 66, "fitness": 0.2686826648676891, "feedback": "The algorithm RefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4d33f6cb-7826-4025-9dbe-9fd111897ea1", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "91145f31-8ec3-4a56-b6a1-d7666adfabad", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "b7e1d653-7af7-4fa1-8d9b-2736311a35fa", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "9c38e008-e5e5-46d7-9e63-664dfe3e2120", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "e1ba555e-21da-4108-983b-73e77fb7738f", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "cb8e91c0-6384-4dbf-a386-e2cf92609251", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "24b1e475-314f-4438-b457-8e54f0b07f9b", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "30b8a13a-2ee5-4893-b184-d95ce882d1eb", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "97e6e5f3-cb5f-4f90-8b81-4543529c72c5", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "dc9665eb-e729-4952-86de-0eec148e9542", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "630edd8f-4082-4334-822e-ae29d012cd9e", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "d02c290d-4047-4975-830b-3d0b3d3292ea", "solution": "import numpy as np\n\nclass PSO_ADE_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iter = budget // self.swarm_size\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.cr = 0.5\n\n    def _initialize_swarm(self):\n        self.swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n\n    def _update_particle(self, target_index, func):\n        best_neighbor = self.swarm[np.argmin(np.linalg.norm(self.swarm - self.swarm[target_index], axis=1))]\n        r1, r2 = np.random.uniform(0, 1, 2)\n        self.velocities[target_index] = self.w * self.velocities[target_index] + self.c1 * r1 * (best_neighbor - self.swarm[target_index]) + self.c2 * r2 * (self.global_best - self.swarm[target_index])\n        candidate_position = self.swarm[target_index] + self.velocities[target_index]\n        trial_vector = np.copy(self.swarm[target_index])\n        for j in range(self.dim):\n            if np.random.rand() < self.cr:\n                trial_vector[j] = candidate_position[j]\n        if func(trial_vector) < func(self.swarm[target_index]):\n            self.swarm[target_index] = trial_vector\n            if func(trial_vector) < func(self.global_best):\n                self.global_best = np.copy(trial_vector)\n\n    def __call__(self, func):\n        self.global_best = np.random.uniform(-5.0, 5.0, self.dim)\n        self._initialize_swarm()\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                self._update_particle(i, func)\n        return self.global_best\n\npso_ade = PSO_ADE_Metaheuristic(budget=1000, dim=10)", "name": "PSO_ADE_Metaheuristic", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for black box optimization, utilizing dynamic parameter adaptation strategies for enhanced exploration and exploitation.", "configspace": "", "generation": 77, "fitness": 0.2005849259651509, "feedback": "The algorithm PSO_ADE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.5532270682040531, 0.48891751672359074, 0.5167814595385704, 0.5350462942837442, 0.5558579679706779, 0.557247359793557, 0.55258718077391, 0.4982106786141186, 0.5082917443304833, 0.23175872514461382, 0.22811887808072406, 0.24492806594621275, 0.22984143330132023, 0.17764938629523008, 0.24180233719037492, 0.18843222245885705, 0.20482363725742814, 0.1756476209957838, 0.10431806090948881, 0.10893447682421209, 0.10086495263621942, 0.1126166919475714, 0.0792947993481179, 0.10780994270821198, 0.1076284150288992, 0.10426121609583971, 0.0933334858928987, 0.08341721220470211, 0.06880415329224887, 0.08484397135545718, 0.10803173524710197, 0.10541662834892995, 0.09772416153698593, 0.0944491709901617, 0.07947192166558492, 0.07993859933306613, 0.9829096279818542, 0.9710191632267534, 0.9736536775490167, 0.9729487757286103, 0.9656442006189897, 0.9678895772642567, 0.9583489274843392, 0.9706691862853816, 0.9513711394210055, 0.17349456693736487, 0.09158409342438167, 0.13414780618266853, 0.16777038444401626, 0.08514910026880129, 0.21837010499853937, 0.14216537403563578, 0.09956889010865111, 0.14354928489723173, 0.21693232577932642, 0.2690517919305433, 0.21333363939972794, 0.20723196656385667, 0.1928695455276752, 0.17890806271904858, 0.14017465013734054, 0.3045717608066102, 0.19695901039715602, 0.12226754402427342, 0.111979482888096, 0.12301814233149655, 0.10120242260454015, 0.15322636112137278, 0.1224455202357132, 0.17232601506148426, 0.1380021434078479, 0.17637596071363715, 0.16911068135596274, 0.0974084085643373, 0.18081635642145621, 0.09179880417838726, 0.12813961810007823, 0.23868766486872128, 0.1523043347103339, 0.1285833833181972, 0.11394399320351312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01028076743828965, 9.999999999998899e-05, 9.999999999998899e-05, 0.052052187324792776, 0.02926779346126729, 0.07332861664616097, 0.07149663784327953, 0.07344862573760469, 0.0047822779566421, 0.06614146686092137, 0.03996130449248614, 0.06936200688576666, 0.015623041330085519, 0.04009199448004075, 0.010277951478142144, 0.05880803916220323, 9.999999999998899e-05, 0.03843460760376749, 0.006420699877377811, 0.05259121280336532, 0.03609746281673598, 0.08658186853893479, 0.0946011783413011, 0.04594660365224135, 0.1320228408240901, 0.08352589665750587, 0.09688921682529106, 0.06851904942770848, 0.09676305603717172, 9.999999999998899e-05, 0.3844855738552304, 0.37997789418505623, 0.38221836830217426, 0.3806496333889471, 0.42380443171100735, 0.40710075853935834, 0.39123057235668346, 0.36855656124275016, 0.4031743471266994, 0.07763962795985768, 0.057188872221912934, 0.06340116799525986, 0.09655902345776812, 0.07058533662502775, 0.08010047454790581, 0.06220550189975438, 0.09716071745737065, 0.06195736637040661, 0.14126307538331662, 0.1028590188781493, 0.1429160230533365, 0.10924273635743209, 0.18703574762384423, 0.15161479444944892, 0.1371654379761108, 0.15256842344263533, 0.13265805391605767, 0.22933786921470278, 0.2946253507955394, 0.16830070090407367, 0.2238155108408798, 0.22071456734801675, 0.17585909743625083, 0.1605757237429476, 0.21118377225208373, 0.2947975231712835, 0.13514327099881773, 0.17737957773618307, 0.12419608095619916, 0.16904401464931307, 0.1376257522765223, 0.16096500064706942, 0.13970177300925224, 0.15942474962809627, 0.1458256062914024, 0.18397009982531887, 0.18046333625413258, 0.17655466047109436, 0.17372713035615195, 0.1821496084375741, 0.16772993116577106, 0.2637815368199353, 0.20089645732888817, 0.18806649897532113, 0.19223231064869617, 0.1759346979091292, 0.18088269076462637, 0.2501241410594376, 0.18731005852998794, 0.19112825947945744, 0.173379072655364, 0.20652182946617115, 0.22728163716603655, 0.11712710809631022, 0.11316598961692126, 0.15841005388716345, 0.5939801754275003, 0.18601577987154028, 0.5372925462071049, 0.46697928549761814, 0.15364544852528939, 0.15545867863784546, 0.3390689202871967, 0.25936844273797866, 0.3129262726545585, 0.19857848154763247, 0.1453863163445922, 0.19601378589327867, 0.15410317648636285, 0.3628474438872852, 0.10329725234014442, 0.18475695398644776, 0.1791463301824664, 0.17956461372263854, 0.16325911224062695, 0.1591523587235817, 0.1821442827540405, 0.1542500245896563, 0.1978304308280775, 0.19089403582598075, 0.08087892363190663, 0.04758759378894284, 0.09028360557728576, 0.06979723585435893, 0.056667884845218786, 0.07189147429915044, 0.07655113982589723, 0.06191081208110061, 0.07357355023331147]}, "mutation_prompt": null}
{"id": "49893794-b70e-49f7-8a9d-608e8131e263", "solution": "import numpy as np\n\nclass EnhancedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        \n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        \n        return mutant\n\nenhanced_hybrid_desa = EnhancedHybridDESA(budget=1000, dim=10)", "name": "EnhancedHybridDESA", "description": "An enhanced Hybrid Differential Evolution with Simulated Annealing algorithm for global optimization, incorporating a probability-based mutation refinement strategy.", "configspace": "", "generation": 78, "fitness": 0.2686826648676891, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "807cfccc-3b05-43d2-bffc-0cc37a42539f", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "5316156a-53d3-4f3c-b4b1-762a00084663", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "56b42a9a-ff8b-42fa-afb8-f38cfb88b28a", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "f0dd9aed-5eab-4cd5-a922-79a26c30d35d", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "31ac7ed8-1798-4f1d-97cd-f1ab73057425", "solution": "import numpy as np\n\nclass HybridHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n\n    def __call__(self, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        for _ in range(self.budget):\n            new_harmony = self._improvise(harmony_memory)\n            harmony_memory = self._update_memory(harmony_memory, new_harmony, func)\n        \n        best_solution = harmony_memory[np.argmin([func(sol) for sol in harmony_memory])]\n        return best_solution\n\n    def _improvise(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory)\n        for i in range(self.dim):\n            if np.random.rand() < self.pitch_adjustment_rate:\n                new_harmony[:, i] = np.random.uniform(-5.0, 5.0, self.harmony_memory_size)\n        return new_harmony\n\n    def _update_memory(self, harmony_memory, new_harmony, func):\n        combined_memory = np.vstack([harmony_memory, new_harmony])\n        sorted_indices = np.argsort([func(sol) for sol in combined_memory])\n        return combined_memory[sorted_indices[:self.harmony_memory_size]]\n\nhybrid_harmony_search = HybridHarmonySearch(budget=1000, dim=10)\n\n# Testing the algorithm on the BBOB test suite of 24 noiseless functions to evaluate its performance.", "name": "HybridHarmonySearch", "description": "Introducing Hybrid Harmony Search with Opposition-Based Learning for global optimization, enhancing solution diversity and convergence speed.", "configspace": "", "generation": 83, "fitness": 0.14822424616866664, "feedback": "The algorithm HybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.09.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.3923897148688912, 0.3402775190533992, 0.3527109919403917, 0.3378307575064873, 0.3685393094381689, 0.3173213930302753, 0.3413195485704197, 0.4033680058796111, 0.34388565108078695, 0.004693675442427825, 0.003150664408393955, 0.015608295727859156, 0.0660455204966458, 0.06717857223755852, 9.999999999998899e-05, 0.016675795466188026, 0.027690279691645836, 0.023256017727505296, 0.12451770809774731, 0.1399818889680109, 0.15998101299048573, 0.13647822654209307, 0.16030387446225702, 0.14771046695357293, 0.14180732271939778, 0.13024930393264222, 0.12596061756327692, 0.12817353705992696, 0.1382250551043278, 0.13863673516588715, 0.11117874284868012, 0.12605988230323928, 0.1519675024766005, 0.13124987905361396, 0.13598523381783378, 0.11872844665905091, 0.16326348355648823, 0.15777305576729106, 0.15394655087688902, 0.17692351398113826, 0.1583141071030848, 0.1581531900881975, 0.1675763185472977, 0.15619931003728016, 0.17064169568658438, 0.16889314669127886, 0.14469188874193295, 0.15945602947844106, 0.18084536686003916, 0.1625093224961216, 0.2447100702919245, 0.17756342376832013, 0.17262997751339737, 0.13955051151451625, 0.18201108383843245, 0.1318881121092591, 0.15945216798821493, 0.1768796367330464, 0.19214964542964252, 0.16193267583673843, 0.17321866885025372, 0.13686784587586465, 0.1536584388896114, 0.07953016553220349, 0.10379803835049028, 0.10253542047231767, 0.11952035009952922, 0.11435556923325663, 0.16042343668599057, 0.17837058281848517, 0.12377327072155553, 0.12017596142068854, 0.10294997028001396, 0.10311286607678671, 0.1245768159797459, 0.11067259808316288, 0.10571091050824166, 0.08115092551361791, 0.11648435702040749, 0.10481393589998789, 0.2109492232830139, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03490326539672628, 0.03295223776722089, 0.015994635482761588, 0.020329762142123453, 0.046198886074295675, 0.04294645993592183, 0.07911281314248753, 0.08632134678378212, 0.08139722022620122, 9.999999999998899e-05, 9.999999999998899e-05, 0.007350222862989919, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045904325091023934, 0.06673325305094768, 0.04392223844940779, 0.0540983300918515, 0.06776060061661537, 0.07252178222027506, 0.049231825934128226, 0.03473287985097051, 0.032958403848087126, 0.3635805963275166, 0.3396211142904547, 0.33266773670527094, 0.34073619702903357, 0.3013649005276642, 0.3093515191815275, 0.3356724851728201, 0.3043679994385601, 0.3568594823778989, 0.06277647592727098, 0.07603773407641512, 0.09620923478398635, 0.0783477350804671, 0.08931659595501373, 0.08470730082744127, 0.09406845574936085, 0.06526789427839796, 0.07746849693872859, 0.15131213593958437, 0.14160285024532693, 0.18068530928623894, 0.1516328260752936, 0.16243398079303062, 0.23523628841749333, 0.12076403823780424, 0.20374398675631278, 0.14270055392464798, 0.2016548762884186, 0.23774956628444122, 0.2412260582031549, 0.22815242871048436, 0.1788093814725369, 0.23635672642917094, 0.25605979970314774, 0.23899330738800217, 0.21036841334928968, 0.15075968154236874, 0.18008738602658847, 0.1310121217186766, 0.12885338728400053, 0.10511796609277757, 0.19931167538253292, 0.1701305037452273, 0.1444209578545559, 0.14173692137336125, 0.14985534695451463, 0.19014943824851305, 0.19754553954437948, 0.16778460459813394, 0.20072676549174662, 0.18149799341108763, 0.1818185204622751, 0.19003484099262136, 0.16828482140912926, 0.19542833392726167, 0.1988221744908948, 0.18398804903569588, 0.17236875365748783, 0.27621923131833315, 0.21433855784112366, 0.22660368046343304, 0.26096277515680333, 0.19386335981722758, 0.1651427315083852, 0.19527664536578893, 0.16897333231228273, 0.3267397487292929, 0.3750221186865008, 0.19637581593460207, 0.3711663567688501, 0.16330251883314362, 0.1680262768005134, 0.18176553603539947, 0.19291793108853883, 0.19477033847312197, 0.3264332771727023, 0.19357535935462467, 0.1876869602946979, 0.15787724001050518, 0.2552466931243792, 0.29771649936705313, 0.18764394932130968, 0.19953627622910697, 0.1809208201678909, 0.17582079098193337, 0.18492267209181057, 0.18051047977436152, 0.2099890721862152, 0.18944364914887557, 0.17735386941915054, 0.07069800735359799, 0.07883102294495947, 0.07182866564291712, 0.0702976695016545, 0.09299021054479051, 0.07245590180315797, 0.059215954462969456, 0.06772376752939413, 0.06769986867065292]}, "mutation_prompt": null}
{"id": "e5c4b606-ddb4-4d19-bb36-a0f01f81e5f4", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "db0f5601-fde4-4221-ad42-5f1367d0706e", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement with probability\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 85, "fitness": 0.2686826648676891, "feedback": "The algorithm RefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "12cc3d04-d961-4756-b3c5-8a96accf46bd", "solution": "import numpy as np\n\nclass EMO_AMP:\n    def __init__(self, budget, dim, initial_mutation_prob=0.35):\n        self.budget = budget\n        self.dim = dim\n        self.initial_mutation_prob = initial_mutation_prob\n\n    def __call__(self, func):\n        # Implementation of the EMO-AMP optimization algorithm\n        pass\nemo_amp = EMO_AMP(budget=1000, dim=10)", "name": "EMO_AMP", "description": "Introducing a novel algorithm, Evolutionary Multi-Objective Optimization with Adaptive Mutation Probability (EMO-AMP), which dynamically adjusts the mutation probability based on the algorithm's performance.", "configspace": "", "generation": 86, "fitness": 0.0, "feedback": "The algorithm EMO_AMP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "181d3373-458d-42b9-be5e-faaaa8d3f980", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "18eeb6ee-348f-4882-a67d-ae53d8f3764c", "solution": "import numpy as np\n\nclass MyNovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement with probability\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\n    def __call__(self, func):\n        # Your optimization logic here\n        pass\n\nmy_novel_algorithm = MyNovelMetaheuristicAlgorithm(budget=1000, dim=10)", "name": "MyNovelMetaheuristicAlgorithm", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy for mutation.", "configspace": "", "generation": 88, "fitness": 0.0, "feedback": "The algorithm MyNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "3ccccc14-3bad-4bb1-b62e-570f5a04e47d", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 89, "fitness": 0.2686826648676891, "feedback": "The algorithm RefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "fd20703b-e39c-4720-b4a2-1f91300b4a3a", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "5641631d-4038-4396-aded-1454ffb9f3a0", "solution": "import numpy as np\n\nclass QuantumDEQA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n\n        for _ in range(self.budget):\n            target_index = np.random.randint(self.budget)\n            mutant = population[np.random.choice([idx for idx in range(self.budget) if idx != target_index])]\n            crossover_prob = np.random.uniform(0.7, 0.9)\n            trial = population[target_index] + crossover_prob * (mutant - population[target_index])\n\n            # Quantum Annealing\n            energy_diff = func(trial) - func(population[target_index])\n            if energy_diff < 0 or np.random.rand() < np.exp(-energy_diff):\n                population[target_index] = trial\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QuantumDEQA", "description": "A novel metaheuristic algorithm, Quantum-inspired Differential Evolution with Quantum Annealing, for global optimization by incorporating quantum-inspired operators and quantum annealing concepts.", "configspace": "", "generation": 91, "fitness": 0.09144843562834938, "feedback": "The algorithm QuantumDEQA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "200146c8-f0b4-4054-be38-9e469b7b119f", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "1a93915f-fef6-46cd-896c-c24fe842cfc8", "solution": "import numpy as np\n\nclass NovelFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n\n    def _attractiveness(self, x, y):\n        return np.exp(-np.linalg.norm(x - y))\n\n    def _update_position(self, x, y, beta):\n        return x + beta * (y - x) + self.alpha * np.random.uniform(-1, 1, self.dim)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        for _ in range(self.budget):\n            for i, firefly in enumerate(population):\n                for j, nearby_firefly in enumerate(population):\n                    if func(nearby_firefly) < func(firefly):\n                        attractiveness = self._attractiveness(firefly, nearby_firefly)\n                        beta = self.beta0 * np.exp(-0.2 * _ / self.budget)\n                        new_position = self._update_position(firefly, nearby_firefly, beta)\n                        if func(new_position) < func(firefly):\n                            population[i] = new_position\n            best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution\n\nnovel_firefly_algorithm = NovelFireflyAlgorithm(budget=1000, dim=10)", "name": "NovelFireflyAlgorithm", "description": "Introducing NovelFireflyAlgorithm with Dynamic Luminosity Adjustment for Black Box Optimization.", "configspace": "", "generation": 93, "fitness": 0.09144843562834938, "feedback": "The algorithm NovelFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4d40c27c-2367-452a-8704-ab4a77b873d0", "solution": "import numpy as np\n\nclass PSOTabuSearch:\n    def __init__(self, budget, dim, tabu_tenure=5):\n        self.budget = budget\n        self.dim = dim\n        self.tabu_tenure = tabu_tenure\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        tabu_list = []\n\n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, -5.0, 5.0)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness and new_solution.tolist() not in tabu_list:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                tabu_list.append(new_solution.tolist())\n                if len(tabu_list) > self.tabu_tenure:\n                    tabu_list.pop(0)\n\n        return best_solution", "name": "PSOTabuSearch", "description": "An innovative Metaheuristic Algorithm combining Particle Swarm Optimization (PSO) with Tabu Search for global optimization with adaptive memory strategy.", "configspace": "", "generation": 94, "fitness": 0.17927960252287842, "feedback": "The algorithm PSOTabuSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.3161205423982396, 0.34333131390647353, 0.3436508663772553, 0.3471049736194324, 0.3293216825181158, 0.331044362326788, 0.3090950843840752, 0.32635490090282615, 0.33461084924823736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08313799879231898, 0.0963429754533055, 0.08039205109378711, 0.10219251198464097, 0.11062253296451796, 0.09058858059497632, 0.11098613853813166, 0.09666776862544668, 0.09615330047225923, 0.07455146945460656, 0.10650705263381299, 0.08662046737151341, 0.09717428417515062, 0.08689859114874054, 0.07854438560906352, 0.07994517718757399, 0.05710437611411201, 0.08577726198226121, 0.9883293833361009, 0.9829742000165511, 0.9769335154177953, 0.9816375864083164, 0.9596129863113466, 0.9696200758603484, 0.9841101100845576, 0.9831135370496553, 0.9846557806019087, 0.21433793598328632, 0.2166817725182193, 0.20007994401317297, 0.19350768866748058, 0.2298143760999164, 0.20066050473834673, 0.23570451482370536, 0.206468050054327, 0.24826363195424128, 0.26032125128520556, 0.24460260543220114, 0.2690852804830395, 0.2631426660557945, 0.26603726604361977, 0.24897933887280665, 0.24171246786709621, 0.22382948273232461, 0.28592920806623967, 0.11021893576442521, 0.12477871063858825, 0.12658228900256874, 0.11765031342272358, 0.1532088839255884, 0.08837110403403892, 0.11197968061342056, 0.13587547624327767, 0.1398846076444784, 0.15084687442574596, 0.12175700723793648, 0.10450837022936865, 0.11316192653726687, 0.12460841945994816, 0.12072587101379195, 0.12327226256838253, 0.1500452389919874, 0.11573558693782782, 0.0003771481711335456, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032688788694600346, 9.999999999998899e-05, 9.999999999998899e-05, 0.013622271224642102, 9.999999999998899e-05, 0.00032009634198471026, 0.09215325085641601, 0.16157868760903582, 0.15685177039175946, 0.08456221434905287, 0.04965292092221585, 0.04741819058097352, 0.10997517429976977, 0.05307647016295103, 0.0844606885772442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04722758592023002, 0.06507565230748646, 0.03877120201043127, 0.043000348622454165, 0.05041254103803783, 0.04478569528322185, 0.06315783648785323, 0.05665965857827704, 0.05853623505245309, 0.3073875618171612, 0.3034863399935033, 0.3088903819164084, 0.34396306452750525, 0.3096196167818994, 0.3310372214241676, 0.3157593231623518, 0.31382865181920583, 0.30631009439529844, 0.09750184440362064, 0.07106924498667799, 0.10626374236090363, 0.08614895766324082, 0.103364609315298, 0.10023141872290708, 0.0847208962335888, 0.0945065870632994, 0.08540304280000177, 0.16550156382218906, 0.14408038784641397, 0.15211163017848905, 0.21951929351182609, 0.17093524989403452, 0.13528677697099434, 0.12792859941912815, 0.15480714021817643, 0.1635181896438831, 0.2278416510620055, 0.23389096714262336, 0.2190794693738003, 0.23410723432084624, 0.2438610606074597, 0.22494147066986847, 0.23330029159999044, 0.19397204770293186, 0.1989180140678527, 0.17763455731136912, 0.17033681006505286, 0.13080571144848385, 0.17720411551059279, 0.19457989089209282, 0.12727882459385653, 0.17559351582560134, 0.14346729837237449, 0.16442256115063725, 0.20234383422148872, 0.21469905988967808, 0.2016915934148772, 0.1891297168635827, 0.2370441742041115, 0.22317019429622664, 0.22639605591935097, 0.1997874478926207, 0.22712866755729566, 0.18361276230225831, 0.19563520799605405, 0.1693036714451277, 0.18623823197325784, 0.1805535326113542, 0.17790816962930966, 0.19213701271160422, 0.18131456876829477, 0.19408723509107195, 0.18059155235141355, 0.13355892939609582, 0.1043653520993495, 0.17211524755509722, 0.11147241361772375, 0.0613319880911386, 0.10844255226867294, 0.12281393473475222, 0.16818048298328936, 0.3782188354511419, 0.11232975914033538, 0.08293242218663088, 0.08193859527755032, 0.21086191360392237, 0.2076362911341425, 0.11212298673852006, 0.1693041253794001, 0.3532373626542735, 0.1936459825175707, 0.1765852346903659, 0.17958662755294752, 0.1778660686039648, 0.17861871639677884, 0.17852771061297912, 0.17435060554291126, 0.19693714549351593, 0.18593773979320638, 0.08648019897284498, 0.09409857686353629, 0.08035209333608673, 0.09705043737021912, 0.08502186146757373, 0.10520454643104882, 0.10681958833778427, 0.08434293958361327, 0.09347253031044034]}, "mutation_prompt": null}
{"id": "35913fab-8f03-4d15-bb3d-702b31b72516", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "61f4f025-d307-41ec-9ccd-04884c57e560", "solution": "import numpy as np\n\nclass ProbabilisticRefinedHybridDESA(RefinedHybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim, mutation_prob)\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Probabilistic refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nprobabilistic_refined_hybrid_desa = ProbabilisticRefinedHybridDESA(budget=1000, dim=10)", "name": "ProbabilisticRefinedHybridDESA", "description": "A novel algorithm named ProbabilisticRefinedHybridDESA enhancing the RefinedHybridDESA by introducing a probabilistic refinement strategy to guide mutation operations.", "configspace": "", "generation": 96, "fitness": 0.2686826648676891, "feedback": "The algorithm ProbabilisticRefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "659d1e69-7f66-4a60-8ed8-746de1a9886c", "solution": "import numpy as np\n\nclass CustomMetaheuristic:\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-1, 1, self.dim)\n            if np.random.rand() < self.mutation_prob:\n                candidate_solution += np.random.uniform(-0.1, 0.1, self.dim)\n            \n            candidate_fitness = func(candidate_solution)\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution\n\ncustom_metaheuristic = CustomMetaheuristic(budget=1000, dim=10)", "name": "CustomMetaheuristic", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy based on a mutation probability of 0.35.", "configspace": "", "generation": 97, "fitness": 0.17823090539988776, "feedback": "The algorithm CustomMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.33280688729939945, 0.3022935810647077, 0.29886515621645937, 0.3211175542362684, 0.31696182381487914, 0.3174826924579123, 0.3028887021881297, 0.30109888017923836, 0.31299690250667966, 0.0027083152255925613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10038308079092317, 0.09446235588756502, 0.08874263300125584, 0.09617354586678917, 0.11719185076347094, 0.08025088693202198, 0.10182161918161492, 0.09086056764711481, 0.10526034544602803, 0.08472548959778847, 0.08472782559328529, 0.09033338794736245, 0.06936203328663504, 0.09349944545220312, 0.06785966897001927, 0.08859109530210985, 0.09727945880839228, 0.09100357276697069, 0.9929516760965914, 0.9922395132812138, 0.9901204095917234, 0.9905188076521453, 0.989712381551862, 0.9937160722927372, 0.9932903066545009, 0.9931271885904134, 0.9936030936084982, 0.2103877055539577, 0.19546094153211857, 0.2036909190679136, 0.18889254038356396, 0.2155188809157197, 0.19876284215418205, 0.2001649772651226, 0.22680885777266735, 0.21328384757661445, 0.2094717679909438, 0.2528170542319782, 0.2796838061138386, 0.27724905388420196, 0.24024442750303254, 0.2555830646915882, 0.2662527524485385, 0.2603590773854194, 0.23488210417885158, 0.09860330889437341, 0.12256072194669654, 0.1187559424777539, 0.1239412051423111, 0.12380147434925692, 0.11252472497550481, 0.1151837926728555, 0.10634192202288772, 0.11929166259066992, 0.1094816642853248, 0.10936318790894528, 0.10435723076007541, 0.12711707573126418, 0.11306969670426681, 0.12535876969754678, 0.1152425081685493, 0.1223242649629136, 0.12361425461843523, 0.0028863480615757275, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024003958016757254, 9.999999999998899e-05, 9.999999999998899e-05, 0.012834528136799195, 9.999999999998899e-05, 9.999999999998899e-05, 0.15700099457982652, 0.10532039438141527, 0.12793874357378754, 0.1914205536200918, 0.06371441358311425, 0.05143713506955627, 0.11817261097609533, 0.08147720269647107, 0.12093740669418562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05179611170619958, 0.05816247642360506, 0.04935558192505318, 0.05591334093832667, 0.04542443134388796, 0.0484954229456247, 0.025186945887062384, 0.044579325629219735, 0.05601226316668073, 0.31190398802214536, 0.32362734224119594, 0.31250952746259797, 0.32520509486343496, 0.34344208727082015, 0.3127896279811202, 0.3230601112374202, 0.3218509538914076, 0.31814978271903893, 0.1036320228509825, 0.10273482160665193, 0.099766982473254, 0.08742151327936354, 0.07958466647652007, 0.11794018690182728, 0.1061263083287799, 0.07958547874834643, 0.09958352499483225, 0.1573544185655391, 0.16856763881317272, 0.15596366002846118, 0.1426354695663622, 0.15978709443123806, 0.1523366596200676, 0.16253374519118502, 0.15452342880662417, 0.16255273974292117, 0.23145870426096926, 0.21746522374176624, 0.23303398805947195, 0.24739898914883263, 0.19613963134041446, 0.2424019838418614, 0.1944348572480109, 0.23851934080062465, 0.21545718543190429, 0.17219723198929493, 0.20455513511439627, 0.10435832300876358, 0.19019613200898544, 0.15806268326452522, 0.12161554635369487, 0.16411580445332508, 0.12983243646677423, 0.08607663798581433, 0.18627850886310537, 0.1822815480198503, 0.21984150620526, 0.19562670106032998, 0.20286978186338767, 0.20972585967499313, 0.21132134541118452, 0.19416750505397162, 0.22319412327258437, 0.17770556853688868, 0.18784454786244031, 0.17613341340686073, 0.17595465571910807, 0.1866132845589692, 0.17714243964149723, 0.17375701240989672, 0.18562901958960587, 0.18859595790902395, 0.1809325976937325, 0.1319149041766865, 0.16292844812658458, 0.17132884089586153, 0.06517627633065637, 0.11188797620680657, 0.10760470890046303, 0.12423046825285855, 0.16858957640023509, 0.4292349200049772, 0.1124861916697868, 0.08251550687339282, 0.15276484633555099, 0.20439275369359944, 0.20439542351613083, 0.11236124744048226, 0.16634833118235748, 0.34636251660159756, 0.18143702419619145, 0.17872723796211465, 0.1869623231815919, 0.18755376773952592, 0.17036169696206294, 0.18147989622281802, 0.1795962498235122, 0.18205647708325812, 0.1833620506960677, 0.10292986986928898, 0.09220164688262866, 0.08322197166736789, 0.07176686694350298, 0.07886144823610353, 0.09946576793909512, 0.08754282793064772, 0.07824817621995239, 0.07522977937392805]}, "mutation_prompt": null}
{"id": "2815aaa9-ca39-4bdd-ac0f-7fe38b6d8492", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
{"id": "539e5d4e-3e65-44f3-95a6-7be0b2fbc3c9", "solution": "import numpy as np\n\nclass RefinedHybridDESA(HybridDESA):\n    def __init__(self, budget, dim, mutation_prob=0.35):\n        super().__init__(budget, dim)\n        self.mutation_prob = mutation_prob\n\n    def _mutation(self, population, target_index):\n        candidates = [idx for idx in range(len(population)) if idx != target_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        # Refinement\n        if np.random.rand() < self.mutation_prob:\n            mutation_offset = np.random.uniform(-0.1, 0.1, self.dim)\n            mutant += mutation_offset\n        return mutant\n\nrefined_hybrid_desa = RefinedHybridDESA(budget=1000, dim=10)", "name": "RefinedHybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution with Simulated Annealing for global optimization, with a probability-based refinement strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0b09202-f020-4303-bbe4-ab0b5a57b190", "metadata": {"aucs": [0.7120747328784056, 0.7352011267953638, 0.7896077030830071, 0.726280657756829, 0.6946568552779854, 0.5604344156503682, 0.6444297108650804, 0.7942429985219766, 0.5871458357407257, 0.11232514549127881, 0.778833941673148, 0.7044733401848056, 0.6344957322242465, 0.7439105876741361, 0.5526737339755521, 0.2961351492113683, 0.12533230031231157, 0.015316420453527324, 0.09009146730026119, 0.14092623034012253, 0.12176251397894355, 0.5025033711012084, 0.07528450731923753, 0.3294573823998166, 0.1546244691668297, 0.0756711183897465, 0.12867009078960912, 0.14175578921436172, 0.08502769613684014, 0.15481609704690869, 0.14572545440655338, 0.10058260235630101, 0.09727384060692679, 0.14839418754772415, 0.10205908507362693, 0.12238601176536545, 0.979940325296505, 0.9681567040257628, 0.8991922260412382, 0.8561886512234735, 0.9617510980597903, 0.9193547639466614, 0.9510087738430894, 0.6543472184710735, 0.9218249557720302, 0.1983472610126773, 0.3359857218040707, 0.324383098645201, 0.19306697915208237, 0.38014723905980774, 0.4589344559207179, 0.3302627406629789, 0.31846902244941, 0.41118483382635695, 0.3744834346821906, 0.10768404547111643, 0.2067599543768096, 0.2747959064070399, 0.2040813889720826, 0.06498746442978898, 0.18322716224389357, 0.23259835371993498, 0.2266636077125025, 0.341695107827065, 0.18322736059530365, 0.16146243795266801, 0.3785982633063939, 0.14997942515638074, 0.3295103320333873, 0.39356880010160755, 0.40586032612247014, 0.12633756389954565, 0.19016302278447172, 0.14199956632870503, 0.16451488358231459, 0.1725697504375172, 0.1866432989340534, 0.1315758029887918, 0.16817387416840157, 0.2320074490844013, 0.1602416354148467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038935189505096, 0.09255605857294269, 9.999999999998899e-05, 0.11550966143725183, 0.010935679226575457, 0.01715054491582091, 0.29137237074526723, 0.0820750768692513, 0.1104104484602112, 0.11821744987168581, 0.032322815704848074, 0.2345819055160694, 0.18741287415208585, 0.17548412819480708, 0.05531764743682144, 0.1331049777158867, 0.010815243189190693, 0.10509584488872548, 0.06440409054471896, 0.061133721767606564, 0.04758322762780676, 0.06863205282911367, 0.09113204763934413, 0.04612482342503632, 0.2859601281224017, 0.13594421473413043, 0.12828910924019654, 0.046949929448386274, 0.22735810183162364, 0.04691874194467671, 0.20324446578336364, 0.052515646120217196, 0.13066928045846382, 0.527005471358718, 0.60990999771419, 0.5602683597445732, 0.46615258004962523, 0.5142248987663403, 0.5140981617573972, 0.49583781732999, 0.4943032570318132, 0.5181991784489847, 0.09716844006711889, 0.09357850699926495, 0.1297784046278121, 0.09679089617281245, 0.13024235228649939, 0.11991058985918679, 0.12474695451981244, 0.10100748351615241, 0.09844632796312502, 0.13057249534694637, 0.13551801416828657, 0.1242428143773352, 0.12760500743750613, 0.11378535112211541, 0.12077610835246666, 0.30923997992419516, 0.23642473783794238, 0.23013133239409167, 0.35869019956232606, 0.4709419586503344, 0.4385401125799272, 0.44870289186134227, 0.36183512490732817, 0.29146311667636926, 0.5853622952035602, 0.21865549949515584, 0.5269597161166817, 0.12691267006964224, 0.3434748242116632, 0.31391390845142175, 0.284056294049031, 0.25334638753619154, 0.2932451825514346, 0.1712958923598411, 0.2508063095616093, 0.19991733094905018, 0.2056642617265534, 0.19522303874844493, 0.21126494200852153, 0.18442849324029031, 0.19079751141011458, 0.21356105666348868, 0.20030975734914813, 0.19831600693287244, 0.20241764351960467, 0.29338282742234134, 0.21980761713916408, 0.20745434879355917, 0.6675580801599064, 0.18860642646257852, 0.22266492427199902, 0.21868189776879343, 0.20805614761666924, 0.21983757332257348, 0.17544476285448507, 0.18792272560305678, 0.16805345981845388, 0.19530415256910372, 0.1658265478160349, 0.1617477190233012, 0.6026536187574941, 0.15295639278706896, 0.15907664342968086, 0.16265297834828885, 0.20823966858700937, 0.6614717588979728, 0.7642695252159822, 0.2083518417295256, 0.08224738236324225, 0.4249319976196221, 0.16374065728368636, 0.3166012565367805, 0.16685951862821458, 0.1956832761578805, 0.18361432021695423, 0.1894448451437737, 0.1729086344124886, 0.16886498104778225, 0.17317383064953318, 0.1787459440460969, 0.17277541035533373, 0.07650732124104997, 0.07611425760079915, 0.07999604017534057, 0.08003301076544267, 0.10502186267673641, 0.08316857381437714, 0.09695605517559924, 0.10207211274154693, 0.07535448784058518]}, "mutation_prompt": null}
