{"id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 0, "fitness": 0.09204862428282794, "feedback": "The algorithm EnhancedFireworkOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "23bf3063-4b1f-4b95-ae99-93a04c8e6d42", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "84fc3257-e599-4e3a-829d-0cefaae3bbe6", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "6950372a-7bb5-45ce-ad86-1d1f6fdd5d9c", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "234fbaea-fb5f-4676-aba5-ea59c54f3aef", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "1c75623a-27c6-41e7-982a-99eddad7098e", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "c4dfa592-4a61-4608-9c03-ab1eedbc680e", "solution": "import numpy as np\n\nclass EnhancedDynamicFireworkDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedDynamicFireworkDE", "description": "Enhancing Enhanced Firework Optimization by incorporating dynamic population-based adaptation with differential evolution strategy for improved optimization performance.", "configspace": "", "generation": 6, "fitness": 0.09204862428282794, "feedback": "The algorithm EnhancedDynamicFireworkDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "1f24c697-2a1a-4ba2-965a-6d8771d1cf6d", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "3e585bd6-3773-40ec-9cda-6bffc68ed6a0", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "c66e22e2-932b-479f-80b7-9df15d1a3cc0", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "fe7141c8-c5c9-459d-8689-bbc0118ed512", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "218eba21-883e-405c-a486-9614f68a5b1d", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "287c6518-dff2-4bd1-9395-9bb2db8045a7", "solution": "import numpy as np\n\nclass ImprovedEnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n                    elif np.random.random() < 0.35:  # Introduce probability for line changes\n                        new_solution = spark + levy_flight(step_size)\n                        new_fit = func(new_solution)\n                        if new_fit < best_fitness:\n                            best_solution = new_solution\n                            best_fitness = new_fit\n                        \n        return best_solution", "name": "ImprovedEnhancedFireworkOptimization", "description": "Improved Enhanced Firework Optimization (IEFO) algorithm enhancing the exploration-exploitation trade-off by adapting the step size and introducing a new selection mechanism.", "configspace": "", "generation": 12, "fitness": 0.09060303444402079, "feedback": "The algorithm ImprovedEnhancedFireworkOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1628058792311995, 0.19183210075583812, 0.24430917066684077, 0.15710325504314537, 0.13948804781309632, 0.16375946888567616, 0.1558041483254654, 0.17347577812846882, 0.1949957769245949, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213059366707563, 0.048155215528017825, 0.051564924390967826, 0.03761696728465136, 0.03731317817957058, 0.03889805436208338, 0.052772807036643665, 0.04441692812509357, 0.04149424539967583, 0.03394227540035444, 0.02882227183639785, 0.03144715404577059, 0.036143147195478065, 0.05160907783940205, 0.03712716420173967, 0.053082272671131636, 0.028279813302279244, 0.05193334279627326, 0.08669272907186243, 0.10500582241909129, 0.11527897323335368, 0.10286429330934388, 0.08998749640480586, 0.11103386086386235, 0.10588259112902199, 0.12369954882694933, 0.12624820375938894, 0.06714866201155223, 0.07735264765319516, 0.07844811212178537, 0.08313628585108579, 0.0892239845169015, 0.07212596560670193, 0.07394320271544241, 0.0851802217411659, 0.10333187113351627, 0.15431794508586627, 0.16237298119208388, 0.13344112172299627, 0.11263210408553226, 0.13180966983429154, 0.1137388500287203, 0.12253449150318085, 0.12533271557212466, 0.10390304474662715, 0.0011576409212229466, 0.00813427047205495, 0.002708483615013413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012702603951112224, 0.008458303790126243, 0.0003323137270450083, 9.999999999998899e-05, 0.0033313791329890874, 0.005547016713531638, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026828135092470395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05899596420064279, 0.07935365649909232, 0.02098655974284136, 0.04815491252560855, 0.03125686785740922, 0.02839084285390947, 0.03845688844098116, 0.055447174143588907, 0.0515252730053235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1778205721467646, 0.20076192476580623, 0.19185717777930644, 0.22753800044137973, 0.1794088043998947, 0.18549032332354343, 0.1889198703297137, 0.18849051054043853, 0.18848638750217916, 0.062098734912855114, 0.03506718199340264, 0.03988071916022795, 0.04713773540842303, 0.043618475114666544, 0.06041554461818521, 0.041131599913826755, 0.04942289700501101, 0.048410139184403844, 0.15245636066548118, 0.13226762984698925, 0.13561693970288802, 0.19131029123796583, 0.14360563744779886, 0.12834770482094282, 0.15520617353663546, 0.12346685462311668, 0.14654510660623787, 0.16603185717411428, 0.17115119199298712, 0.15527884308730133, 0.17738414795356472, 0.16624780254139804, 0.18072506135996014, 0.15773709735813168, 0.16216670781958942, 0.15931573427408163, 0.11639762922279062, 0.10312720753976079, 0.10225506750204927, 0.10702910297371904, 0.10668238525990814, 0.11576787572836478, 0.09508718914973668, 0.11922396300952498, 0.10029950348940453, 0.15751405380716277, 0.14799420832757681, 0.1529053875239228, 0.14835320766623628, 0.14735472178332498, 0.14646081857899895, 0.1518784315612537, 0.18226145137290872, 0.15534130919747202, 0.1502194661191838, 0.13898339109722424, 0.13247600593752906, 0.1462338569292968, 0.14563780238487656, 0.17893836597361878, 0.13728590726236578, 0.14694834070983365, 0.14602949618153094, 0.16042163005555632, 0.1738162673379946, 0.13984429537593135, 0.1516110244222778, 0.1471653010853825, 0.2291955741679892, 0.16013592780774766, 0.14596630862243787, 0.17943349926986996, 0.1612337111371036, 0.16483366272286637, 0.19406024033153857, 0.1495168823056252, 0.22051081612471313, 0.2159351179296649, 0.1830912081873154, 0.155283733487119, 0.16941817267821102, 0.1815045572064462, 0.1856115212932602, 0.18320151340101287, 0.18414327608536674, 0.1836212175860159, 0.19377759005811446, 0.19380931506297017, 0.177898978401824, 0.19758041555756334, 0.0443794258044411, 0.046884858389684037, 0.05947795361682162, 0.05009279582813175, 0.059270496201798584, 0.0686220555903434, 0.04315942333677136, 0.0513095920478962, 0.055819774232772956]}, "mutation_prompt": null}
{"id": "6b021773-e8da-4183-90f9-b3665f68c72f", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "77550e28-fd9c-4802-b9a7-200ed6dcaf67", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "f983a22b-051b-4150-adf2-e3fa88952ec5", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "f59d23dc-b98b-47bd-a3e5-bdedb43beaa2", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "dfc491f4-fbae-450f-ad41-41c312c9224b", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "5d99dabf-aceb-43d7-97b6-eebba5b9898a", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedFireworkOptimization", "description": "A novel metaheuristic algorithm called Enhanced Firework Optimization (EFO) that integrates the explosive and attractive behaviors of fireworks with adaptive step size control for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.1621821960152382, 0.1811124840121101, 0.16590147770610897, 0.1559051549977849, 0.1500910956438829, 0.15673549197747194, 0.17393746794361287, 0.19302220573886497, 0.15239379562353095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832627698703995, 0.054872337393618964, 0.04404904309309765, 0.043437172242880684, 0.046972277779759875, 0.04404666517267364, 0.04813843354396519, 0.045334477690651465, 0.0470000215399643, 0.03259930458256077, 0.0389249831530204, 0.02659586669871783, 0.035330010681939195, 0.027282637140195187, 0.041238124242510055, 0.046390640958213436, 0.026999398647576944, 0.034259646913481046, 0.09452177454642663, 0.10390331023212929, 0.08193202563156776, 0.09506623975574036, 0.10218999320289535, 0.10670675615432024, 0.10196181244855562, 0.11408195252648834, 0.12785155250839508, 0.06791400630855082, 0.1031705501482062, 0.0742825633238603, 0.09402416204411579, 0.07452337506599072, 0.09069425625489225, 0.07986502798271089, 0.06610516748777318, 0.07246041562768968, 0.12726521583633443, 0.12165328038055356, 0.11693256022043064, 0.15532170631078623, 0.11915349299512601, 0.14982099521680736, 0.10396986561368504, 0.11916899421894345, 0.14612403185801448, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745536036457222, 9.999999999998899e-05, 9.999999999998899e-05, 0.001846095804807768, 9.999999999998899e-05, 0.026319993321636814, 0.003986746322782397, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880299505041675, 0.03820321844780483, 0.010338842188457043, 0.009553801493344727, 0.007120621416312312, 9.999999999998899e-05, 0.019653348425838657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059563440971558856, 0.06871309418994809, 0.09218395782587596, 0.01909265448727815, 0.031284578412110964, 0.03050149187744078, 0.08985654555081424, 0.06289093081456743, 0.03289555057142801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014199883109644595, 9.999999999998899e-05, 0.031101265934170952, 9.999999999998899e-05, 0.020195627651100057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20374799704907887, 0.1840411239126828, 0.1903074800297, 0.19896732846529486, 0.20091883853082804, 0.22134128326302016, 0.20797514770062053, 0.21084893638599378, 0.18815218264546107, 0.04065566603873505, 0.03830112318107004, 0.05809248542523959, 0.04609173872214911, 0.03819587486837428, 0.04806923358815807, 0.0418885280185366, 0.041921060205127314, 0.04789307354999239, 0.1234094360081166, 0.13766406901236228, 0.1267274774753281, 0.14639576475414628, 0.13771443229460256, 0.14111102596537872, 0.1407941089687219, 0.15937264221180636, 0.12597919082803222, 0.16503194206501792, 0.1579296475435642, 0.16323179268397692, 0.1907116548502733, 0.1591853815105404, 0.18212184162146783, 0.18045538861011268, 0.152424410267737, 0.1580543612467361, 0.11670249450274384, 0.09577285117724954, 0.09317647828471054, 0.10613300896186506, 0.10514816597643717, 0.11817208845845506, 0.1146093097626657, 0.10021421145879283, 0.1089874244137955, 0.16411393520930906, 0.1775705275409446, 0.1596104314514647, 0.1659913363328318, 0.1464465212369308, 0.1681538322366536, 0.20524935904072072, 0.16583021490167393, 0.1669678055108934, 0.14243464606985612, 0.1466075943477917, 0.14348674608053347, 0.14757350591528373, 0.1585793322157999, 0.13253582618617854, 0.13742425491161503, 0.13490723592935916, 0.14522286904048942, 0.15061786995742166, 0.16229084873669108, 0.17743394888173247, 0.1681701071995234, 0.21103320327500297, 0.207275835158246, 0.2692259553263078, 0.13605974484490035, 0.16271093485689414, 0.1638924285677683, 0.19401619059405617, 0.19896688517810723, 0.19676311495627552, 0.1605517641621167, 0.18224622563723403, 0.14141921497216847, 0.2732077107481563, 0.1378631063236624, 0.17169213839647823, 0.17437056424671404, 0.1720932599887427, 0.19109074515221502, 0.1750596290010722, 0.18683853687661411, 0.1728829348360994, 0.1836167291265578, 0.17579825526562365, 0.05682380141071952, 0.06350602969049957, 0.048130272318765654, 0.04788166359239954, 0.0548144308774694, 0.047951969759944535, 0.0800104424086292, 0.0789286084363664, 0.054008655575292996]}, "mutation_prompt": null}
{"id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 19, "fitness": 0.17921991393463033, "feedback": "The algorithm EnhancedFireworkOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "8873eb8a-ec19-4e2a-bd37-fe0ac764a6ff", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "4f9cd3d7-2682-4d9d-b124-3235222c95ff", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "9d39922d-0446-43d6-84e2-4bb998051dc8", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "5508356e-1545-48f1-b6d4-2e27a973f3d7", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "04d121fe-b47c-47ea-bfb0-4437d27dc209", "solution": "import numpy as np\n\nclass EvolvingFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EvolvingFireworkOptimization", "description": "Evolving Firework Optimization by incorporating adaptive mutation strategies and dynamic levy flights for enhanced exploration-exploitation balance on BBOB test suite.", "configspace": "", "generation": 23, "fitness": 0.17921991393463033, "feedback": "The algorithm EvolvingFireworkOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "f5bc1440-d7d3-43aa-9b44-c8c74cbf5066", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "4fdee942-f21f-4a72-a7bc-3618c7bafdec", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "8c93cdc5-4445-4fd6-b0c4-70fbdf61d49f", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "4ae9efae-90c5-42db-b474-db2d252500c1", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "72480c9f-a0b0-43e2-92bd-588035a1d450", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "1690bb9b-040e-4ab3-bf81-d6224520adb1", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "5bde2a7a-3f74-4b4b-996e-2ec0c544a8da", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "0cea388d-3316-47cc-a0ee-5197e42407bb", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "f0e85c79-da3a-451a-a484-ee29836915b2", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "f0619172-ceca-4544-a7dc-386064ad621f", "solution": "import numpy as np\n\nclass AugmentedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_population()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                population = [init_population() for _ in range(10)]\n                for individual in population:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_individual = individual + levy_flight(step_size)\n                    new_fitness = func(new_individual)\n                    if new_fitness < best_fitness:\n                        best_solution = new_individual\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_individual = best_solution + 0.5 * (population[0] - population[1]) + 0.5 * (population[2] - population[3])\n                mutant_fitness = func(mutant_individual)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_individual\n                    best_fitness = mutant_fitness\n                    population[4] = mutant_individual\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_individual = best_solution + levy_flight(step_size)\n                new_fitness = func(new_individual)\n                if new_fitness < best_fitness:\n                    best_solution = new_individual\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "AugmentedDifferentialEvolution", "description": "Augmented Differential Evolution with Dynamic Adaptive Parameters for Enhanced Black Box Optimization", "configspace": "", "generation": 33, "fitness": 0.17921991393463033, "feedback": "The algorithm AugmentedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "b72536be-bd03-4661-b6bd-f97ec88feda6", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "228abdfc-d3b3-4319-9325-2bd40891ddcc", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "a363b343-8a08-44f3-aa47-df619246d0cc", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "49743b0c-e896-49b4-99c3-93cd1b2e7256", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationMultiObjective:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Multi-Objective Optimization\n                decomposition_weights = np.random.uniform(0, 1, size=(self.dim))\n                new_solution = best_solution + np.sum([decomposition_weights[i] * (sparks[i] - best_solution) for i in range(len(sparks))], axis=0)\n                new_fitness = func(new_solution)\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationMultiObjective", "description": "Enhancing Enhanced Firework Optimization by incorporating a multi-objective optimization strategy based on decomposition for enhanced performance on BBOB test suite.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 5 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 5 is out of bounds for axis 0 with size 5')", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {}, "mutation_prompt": null}
{"id": "e006c2f7-c0df-4c0f-9bb2-6fc10032f159", "solution": "import numpy as np\n\nclass DynamicFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Dynamic Mutation Strategy\n                if np.random.rand() < 0.35:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = best_solution + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n        return best_solution", "name": "DynamicFireworkOptimization", "description": "Introducing Dynamic Firework Optimization: Adapting firework explosions to dynamically adjust mutation strategies based on individual performance for enhanced optimization on BBOB test suite.", "configspace": "", "generation": 38, "fitness": 0.16342759634893636, "feedback": "The algorithm DynamicFireworkOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3384468362892642, 0.2640876718159977, 0.30346837900474755, 0.3052196853239212, 0.34279040954197304, 0.28896498795397685, 0.3243812788528001, 0.3002131061042619, 0.2947158248726236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08179353588581739, 0.06307190093333614, 0.05982908218914851, 0.06437847544909747, 0.04509158357699328, 0.06970720233669803, 0.0586408951297801, 0.07331272800292155, 0.05237414665004636, 0.04955287308798417, 0.06441156864752651, 0.03902010278206558, 0.05409606977898407, 0.09010142940760069, 0.06470611620755584, 0.04984925567506693, 0.05326994437825738, 0.04308068568118395, 0.9874825769937046, 0.9807461593627043, 0.9969013757633699, 0.9846281125580866, 0.9809507511549658, 0.9794880447931087, 0.9775671791174676, 0.9824219446012944, 0.9776036883139038, 0.15616116268193114, 0.1640784791731017, 0.15487168885191005, 0.15169266266319736, 0.14527881681477972, 0.10822020831715529, 0.16860085659502333, 0.12496179645231242, 0.12017469239032164, 0.17783711464168206, 0.18255292140938484, 0.18180028587164254, 0.2412077340975587, 0.15584736042027236, 0.19082175395259238, 0.14624549656873587, 0.14151026244711307, 0.18785811101426675, 0.11078371660557129, 0.05066699045824552, 0.12897667448885208, 0.0867671280950002, 0.024780992528380952, 0.1469572745652309, 0.08546736536190569, 0.0654038951635999, 0.056225287773359334, 0.09909411578865879, 0.09878888485951354, 0.0501859328501576, 0.10006073207355515, 0.05619057204274791, 0.11689793175885843, 0.09858069398974889, 9.999999999998899e-05, 0.11338565674352885, 0.004249587092048257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08724537426686252, 0.06757320085397911, 0.05221518297950822, 0.011727664979138686, 0.018805343304915567, 0.04061777700820435, 0.04840123614677361, 0.056490359670970824, 0.07162377277181609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024785917874656338, 0.010913032117746635, 0.025985493679198224, 0.04633708257816793, 0.041210318033954696, 0.02764777166996646, 0.03722080258419247, 0.04524187851092343, 0.05512166956357889, 0.3175545109465776, 0.28987014147675116, 0.2847708501616625, 0.2764115318613025, 0.2988024682286565, 0.2968965041987581, 0.32094486185051063, 0.2736689906058045, 0.280502545095748, 0.04308728167930986, 0.055223590738321615, 0.06702744024442275, 0.0612861586614295, 0.04738658452736, 0.0590138363059346, 0.11395260738806934, 0.0548002856344707, 0.05936423440028882, 0.18441093134232267, 0.1671954874007865, 0.13720353201745894, 0.16087338646829885, 0.1953019398352076, 0.1524294024716344, 0.1285118883279549, 0.1605860999897537, 0.13708723655736776, 0.1657419269084437, 0.1967773880815915, 0.1831857989857082, 0.2376433788378045, 0.18195659642845796, 0.21856906526998177, 0.2338032771899342, 0.19715276028820417, 0.17904956812601924, 0.1325801955692295, 0.15014653004581013, 0.11800440664371104, 0.14386388168392117, 0.13112538317444433, 0.14747494577975506, 0.1560795144386541, 0.15687759709699733, 0.1442673466226555, 0.15725775324372027, 0.15355934220773748, 0.16523142669859736, 0.17694329082841687, 0.16058364215227772, 0.17017245087277255, 0.16029872725896088, 0.15823866562050515, 0.15924391944241378, 0.17406219647158228, 0.1616304316086613, 0.17734335086613096, 0.1645175705249733, 0.1614887732929472, 0.15705644319758938, 0.1634015998008972, 0.16933232822797184, 0.1694830566970955, 0.3190493697672231, 0.3043682278268659, 0.17438092563282004, 0.39448462302178144, 0.16488816533269512, 0.222204380733539, 0.30374200956067077, 0.31045099060223125, 0.29316244598799734, 0.35832757566765405, 0.1847363549570854, 0.31115086572975215, 0.17990583710701735, 0.2507212803708939, 0.23947697107753407, 0.18955434437855845, 0.19944550361197866, 0.191102994148881, 0.19530671778001674, 0.18673885178662375, 0.18469900846818732, 0.2019698963247113, 0.17681016833983298, 0.18314806884996437, 0.18882607409593488, 0.17918805434348584, 0.17755388063743427, 0.062037015980540455, 0.053059271856065626, 0.06254212663575232, 0.05854435769712696, 0.05523235086308376, 0.06128734413848047, 0.048823147012510004, 0.06429144812397314, 0.0594269809058775]}, "mutation_prompt": null}
{"id": "5ac5f2da-6d27-4fd6-8019-c59d409808a1", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "f5ade6df-25ea-41a7-9df3-a5c2ca71fadc", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "0d2b07c8-f255-47b8-b7ce-9a75e80cfc4b", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm combining Firework Optimization, Differential Evolution, and Adaptive Mutation to efficiently optimize black box functions within a specified budget.", "configspace": "", "generation": 41, "fitness": 0.17921991393463033, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "f410d176-8f93-4c4f-ab32-8f4d09b22cba", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "e410457b-0c76-4c4a-bf65-84b482cf7b37", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "b550bc72-eb94-4c3e-8352-955503e63d71", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "0cc4b424-9e96-4cfa-a557-7a556d7aea22", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "4c464679-f4f7-4bdc-b56f-9bc9033d65ae", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "c571c7f8-a3c4-4059-aa66-bc5ae817f14c", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "be7fdb99-49d4-46b9-905b-cb6c3325e295", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "530e1675-a927-4553-8750-4281ccc08beb", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "d583a712-45a1-4cf5-8710-8634d79a20fe", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationImproved", "description": "Enhancing Enhanced Firework Optimization through differential evolution and adaptive mutation strategies for improved performance on BBOB test suite.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3555461557174926, 0.3202146053524081, 0.4036571104245731, 0.3592733878956609, 0.32173883616516297, 0.3334662364924419, 0.3623908573189154, 0.3265335536303263, 0.33030466004411196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008528692335058041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051765181113534675, 0.06812838608857497, 0.0672779812646288, 0.06214938956856442, 0.07130352506972382, 0.07963065571515815, 0.06498606425248965, 0.06449966045824562, 0.0758993380666465, 0.0762800844375141, 0.08665678170050561, 0.09380664980597686, 0.0656480985712955, 0.046511129056914235, 0.053221254696743214, 0.0984386443896268, 0.07516632236354603, 0.07054455742524568, 0.9933654615581234, 0.9922417788619574, 0.9820797134441552, 0.9721169984165692, 0.9890313948115641, 0.977587106481173, 0.9878567521184218, 0.9796374003605786, 0.964289031294698, 0.20326186572515859, 0.21001161980897076, 0.18761496773145958, 0.20752971972390954, 0.17448160125784873, 0.1791153986869649, 0.1961797808563953, 0.20030910671688285, 0.19873959959806542, 0.17758836201676453, 0.19479006886787054, 0.20070100767150656, 0.30550319006720206, 0.18168085215591123, 0.23355351711169248, 0.23372658616237318, 0.2086154274368891, 0.2227985608638119, 0.12571258223049064, 0.09663808934101203, 0.10507550162837687, 0.12442867188191753, 0.05085388321844131, 0.08603524596539769, 0.1298939537640772, 0.1088046389682078, 0.12336236586907667, 0.12098814508167166, 0.10782547910377072, 0.10285436411912574, 0.1253540688570569, 0.13088874211112722, 0.11963450904872863, 0.1574995254334941, 0.09502254824174194, 0.11323792099418684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058543629952699794, 0.04669296264488365, 0.04094148325159863, 0.02130946327386718, 0.0645163059945989, 0.11342786178494169, 0.05866632480115386, 0.0348635225983176, 0.04875959461341606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036928042844157405, 0.04186592100917863, 0.06670141305477806, 0.03738371557777587, 0.011397475620694042, 0.06945570682211022, 0.0527539051533773, 0.039417455827778, 0.07646300877604173, 0.36621579641476565, 0.3247627505874192, 0.3251554598949562, 0.3224553629253105, 0.31435657882235024, 0.3159488386276984, 0.3096152500884659, 0.31815858186553647, 0.3495261755777306, 0.08245408949515787, 0.07456642317016593, 0.0753144599235549, 0.07642068694571003, 0.07347263467690313, 0.06770528634098572, 0.053062256652375295, 0.06940938779539318, 0.051093297849805985, 0.1452847890514919, 0.1335574930773069, 0.12827661720742056, 0.13746448389767973, 0.1802615534114702, 0.16739181896621935, 0.15837790312484556, 0.1224731474378068, 0.19142585945593893, 0.1693675166937424, 0.24689187510547028, 0.19655851475554786, 0.21368364837239384, 0.22394828749357854, 0.24542688327996753, 0.2515344365471981, 0.24834974829120615, 0.21498505853491223, 0.11834581257731847, 0.1520687781752591, 0.1615475759778947, 0.16028166860103044, 0.14067279280267087, 0.1404912482446523, 0.1640864657081622, 0.1641197732130718, 0.15537899229809649, 0.15409748642839072, 0.16831167517837453, 0.17318280070924919, 0.15677015875450284, 0.17437360343199437, 0.18972975272837245, 0.18185667805145733, 0.16122397946444522, 0.18576545889677243, 0.17065503549283512, 0.1650841489958953, 0.15779672294432345, 0.17159501474894134, 0.18368422403315976, 0.18230581575036353, 0.17246611406794599, 0.16376039950245325, 0.17726795249426086, 0.42364524230435185, 0.18116099952479514, 0.40625843950664353, 0.17313420628317455, 0.18598329299816274, 0.3239765683253707, 0.44121275802209814, 0.16441114970821324, 0.37683858488923694, 0.3269079049016169, 0.3120843515797047, 0.36826379008045973, 0.25587098912206985, 0.19380009955770827, 0.1600735355350873, 0.34447033118394443, 0.21309547706181464, 0.29926917802546094, 0.17964863628083827, 0.2023575640239108, 0.19279850959850642, 0.18375523616223877, 0.19838712962259286, 0.181945636352696, 0.17939903792370138, 0.18624535187980928, 0.17459169144039266, 0.059762025611305725, 0.06724309501111425, 0.05419530018753371, 0.06619630975317758, 0.08567637383884052, 0.06225905202892301, 0.07881573559757782, 0.059937063047050265, 0.06886080569393382]}, "mutation_prompt": null}
{"id": "1c509217-0585-4487-98ef-adb475a7b4f5", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 51, "fitness": 0.1881927000464289, "feedback": "The algorithm EnhancedFireworkOptimizationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "9b2e3bda-9287-4926-8f0e-44038ec102f8", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "336e0ab4-13b8-4edc-96d1-6acf1653517b", "solution": "import numpy as np\n\nclass HybridizedEnhancedFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "HybridizedEnhancedFireworkOptimization", "description": "Leveraging a Hybridized Enhanced Firework Optimization approach with differential evolution, adaptive mutation strategies, and line refinement to tackle black box optimization problems efficiently within a given budget.", "configspace": "", "generation": 52, "fitness": 0.1881927000464289, "feedback": "The algorithm HybridizedEnhancedFireworkOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "6801b6e0-3b8e-4ff2-b697-fccf235473af", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "341fb4e9-cf36-4371-b80b-329614714c4e", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Utilizing a Hybrid Differential Evolution and Levy Flight algorithm with Adaptive Mutation and Line Refinement for Black Box Optimization in the BBOB test suite", "configspace": "", "generation": 54, "fitness": 0.1881927000464289, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "3479be96-c8a1-4ee3-b452-3fc0c89bb0bc", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "da576b61-d645-47c4-bc0a-ed6ada87bde3", "solution": "import numpy as np\n\nclass ParticleCuckooLineOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n\n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n\n        best_solution = initialize_particles()\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(5):\n                particles = [initialize_particles() for _ in range(10)]\n                for particle in particles:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_particle = particle + levy_flight(step_size)\n                    new_fitness = func(new_particle)\n                    if new_fitness < best_fitness:\n                        best_solution = new_particle\n                        best_fitness = new_fitness\n\n                # Cuckoo Search\n                cuckoo = particles[np.argmax([func(p) for p in particles])]\n                new_solution = best_solution + 0.1 * (cuckoo - best_solution)\n                new_fitness = func(new_solution)\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                    # Line Refinement\n                    if np.random.uniform() < 0.35:\n                        line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                        line_direction /= np.linalg.norm(line_direction)\n                        line_length = np.random.uniform(0.1, 1.0)\n                        line_point = best_solution + line_length * line_direction\n                        line_fitness = func(line_point)\n                        if line_fitness < best_fitness:\n                            best_solution = line_point\n                            best_fitness = line_fitness\n\n        return best_solution", "name": "ParticleCuckooLineOptimization", "description": "Implementing a Novel Metaheuristic Algorithm combining Particle Swarm Optimization and Cuckoo Search with Line Refinement for Black Box Optimization.", "configspace": "", "generation": 56, "fitness": 0.10534755944311575, "feedback": "The algorithm ParticleCuckooLineOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.17901213753525358, 0.18443751671005992, 0.18260269297408172, 0.18956231703157134, 0.1488401943011579, 0.17000276156665128, 0.1812300926784356, 0.1862138505144726, 0.19232505002693456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06936630821434231, 0.0606091847859368, 0.06373484699556264, 0.055691430474685166, 0.05312586727470059, 0.04298045719299426, 0.05821393617373927, 0.04618188578949978, 0.04613873170644256, 0.06925840644805759, 0.040407210628615076, 0.047349216722477605, 0.07238280945424791, 0.03136326142769508, 0.07191720754414033, 0.03214440877289193, 0.04256623689624828, 0.04202045274535138, 0.08361911607544992, 0.09210149644865429, 0.08027495494703996, 0.09139763421467684, 0.09033986875354416, 0.09400958440006235, 0.0983142756950729, 0.10227086545550534, 0.11185404012582745, 0.12766684072915346, 0.09481384042558061, 0.09372235311597721, 0.06744931986553926, 0.07887004952618482, 0.07725388399348743, 0.08970026322043545, 0.08867792728515866, 0.10434196115858174, 0.14056572191493355, 0.18705994259925052, 0.15056283095131018, 0.14401087205996865, 0.1161015248104652, 0.14141685979878726, 0.1310955225197853, 0.16332572982152072, 0.13843486735883015, 0.0009537369593354272, 0.02162906235189399, 0.004003962340158984, 0.004729033674495398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04414785673544208, 0.02103693991096023, 0.08001546844737661, 0.03345094904882839, 0.09450413263347379, 0.07610415787890212, 0.0882391339367532, 0.1109755769586398, 0.1113157389417162, 0.026763094681380606, 0.009672409812175986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05355384804145691, 0.05657816310722663, 0.055456927556512325, 0.03948636916764248, 0.021976744194035946, 0.047960203793518286, 0.07072349601835581, 0.05383593955903143, 0.01985655590926161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006926973617084053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19623568188960394, 0.18378853546935803, 0.1949756643910796, 0.17356499573509354, 0.19880778566303348, 0.24435319932325883, 0.24776900763923304, 0.20146880630871178, 0.19888515162406462, 0.037418572020464724, 0.04736844943612761, 0.054942777014584276, 0.0573029237795718, 0.05368013109979297, 0.06932915138617313, 0.06211559695234414, 0.04973740115504954, 0.053443925869518516, 0.14371798449062811, 0.14756811735264475, 0.15587904118836615, 0.14937737961816833, 0.1735632711467915, 0.13070710541233943, 0.12481829448620829, 0.13195986786034752, 0.1620992952410536, 0.16209978751093312, 0.15304415356573575, 0.19076809250972138, 0.18425090836292823, 0.2196923754964042, 0.17458284663627177, 0.17462346945975282, 0.18262052999192369, 0.18063227819147742, 0.1078283990730069, 0.13092368513438413, 0.10374685048193077, 0.11867273307912274, 0.1332949920135088, 0.11156793285896094, 0.1132597083654655, 0.12647706417565863, 0.12079757284671466, 0.15893981596621176, 0.16782184304171388, 0.16004970484967485, 0.19546878473210294, 0.1552565579836006, 0.19907623702261013, 0.1722203659867475, 0.17294089738119733, 0.1753873800608864, 0.15044512441715818, 0.15011502437516577, 0.14865590459868927, 0.14022643953200298, 0.15462591107246082, 0.15559073669684198, 0.1449212277182672, 0.15306884663466003, 0.1549110031098644, 0.17179531709003637, 0.16915425300860443, 0.23379273516990773, 0.37437778487196993, 0.16507744112845535, 0.36876824271125075, 0.1592399973715949, 0.4459802367219946, 0.3195866799665771, 0.22621134558304234, 0.2834283821239181, 0.18100703807083895, 0.291465685842872, 0.24584097228518853, 0.27487135150611663, 0.20832895024459075, 0.19024911489994234, 0.2649166197645836, 0.19017498064016192, 0.18645031775032161, 0.171520669361947, 0.18027830494338337, 0.18783715265376866, 0.1839161385132717, 0.17973240087373998, 0.18103874558575284, 0.18975354712377113, 0.07082414846750362, 0.06275130154438269, 0.06071106041921359, 0.063970994547491, 0.07565875938672029, 0.06004401532012549, 0.060335280887154674, 0.08373904095482099, 0.05836771501330518]}, "mutation_prompt": null}
{"id": "9c3118cd-a146-4fb8-aaf8-b415cb72fd5e", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_population()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                population = [init_population() for _ in range(10)]\n                for individual in population:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_individual = individual + levy_flight(step_size)\n                    new_fitness = func(new_individual)\n                    if new_fitness < best_fitness:\n                        best_solution = new_individual\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_individual = best_solution + 0.5 * (population[0] - population[1]) + 0.5 * (population[2] - population[3])\n                mutant_fitness = func(mutant_individual)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_individual\n                    best_fitness = mutant_fitness\n                    population[4] = mutant_individual\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_individual = best_solution + levy_flight(step_size)\n                new_fitness = func(new_individual)\n                if new_fitness < best_fitness:\n                    best_solution = new_individual\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedGreyWolfOptimizer", "description": "Implementing a Novel Enhanced Grey Wolf Optimizer with Dynamic Strategy Adaptation for Efficient Black Box Optimization on BBOB test suite.", "configspace": "", "generation": 57, "fitness": 0.1881927000464289, "feedback": "The algorithm EnhancedGreyWolfOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "7e0d22a0-d3bb-40aa-8815-46cc2403bb14", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "ae9d0cd2-2ed8-4b26-9514-0a60ab071c9c", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_candidate():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_candidate()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                candidates = [init_candidate() for _ in range(10)]\n                for candidate in candidates:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_candidate = candidate + levy_flight(step_size)\n                    new_fitness = func(new_candidate)\n                    if new_fitness < best_fitness:\n                        best_solution = new_candidate\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_candidate = best_solution + 0.5 * (candidates[0] - candidates[1]) + 0.5 * (candidates[2] - candidates[3])\n                mutant_fitness = func(mutant_candidate)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_candidate\n                    best_fitness = mutant_fitness\n                    candidates[4] = mutant_candidate\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_candidate = best_solution + levy_flight(step_size)\n                new_fitness = func(new_candidate)\n                if new_fitness < best_fitness:\n                    best_solution = new_candidate\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution\n", "name": "EnhancedOptimizationAlgorithm", "description": "Improving Differential Evolution with Exploration, Mutation, Adaptive Strategies, and Line Refinement for Enhanced Optimization Performance on BBOB test suite.", "configspace": "", "generation": 59, "fitness": 0.1881927000464289, "feedback": "The algorithm EnhancedOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "1d01f0a7-6572-44e1-846b-95ec0bdfe4f3", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "89ba0d28-5d8c-411b-a5bd-63286bd28110", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "2b7f4a20-6ffb-4ff1-90f2-61eeb7aa4f39", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "b813ff05-8384-4aa1-aff0-0425d3d8c21d", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "43d818c7-1647-40ac-b9f4-a4dc74c70699", "solution": "import numpy as np\n\nclass NovelFireworkOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "NovelFireworkOptimization", "description": "Implementing a Novel Firework Optimization Algorithm with Dynamic Search Strategy Refinement using Differential Evolution, Levy Flight, and Line Refinement for Enhanced Black Box Optimization.", "configspace": "", "generation": 64, "fitness": 0.1881927000464289, "feedback": "The algorithm NovelFireworkOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "0b8df8dd-df49-4292-9ec5-40a40a858510", "solution": "import numpy as np\n\nclass HarmonySearchDynamicLineRefinement:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def initialize_harmonies():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n\n        best_solution = initialize_harmonies()\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(5):\n                harmonies = [initialize_harmonies() for _ in range(10)]\n                for harmony in harmonies:\n                    new_harmony = harmony + np.random.uniform(-1, 1, size=(self.dim,))\n                    new_fitness = func(new_harmony)\n                    if new_fitness < best_fitness:\n                        best_solution = new_harmony\n                        best_fitness = new_fitness\n                \n                # Dynamic Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "HarmonySearchDynamicLineRefinement", "description": "Introducing Harmony Search with Dynamic Line Refinement for Enhanced Black Box Optimization on BBOB test suite.", "configspace": "", "generation": 65, "fitness": 0.17132699270705026, "feedback": "The algorithm HarmonySearchDynamicLineRefinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.16.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3577500872357877, 0.3378429153801037, 0.3082715821449262, 0.36822310849114726, 0.34264616781061685, 0.3342702287043203, 0.3561697528832899, 0.35135051101653036, 0.3339551330035966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08281012020552458, 0.07997279686131276, 0.10475970160833203, 0.054867549633248025, 0.07261160359752195, 0.08739104246590446, 0.05946620200904562, 0.07343282550824193, 0.05410835780288492, 0.04565875862432334, 0.05862032852258614, 0.03926936259285607, 0.05173780806656891, 0.05894206841218186, 0.03924218909130872, 0.05602854641364374, 0.038229681644385005, 0.07269771464788866, 0.6744302385572543, 0.8665436627933658, 0.6440727342862888, 0.838117674448123, 0.6185010322511161, 0.8094701732615783, 0.7541957192673323, 0.9573549387363074, 0.7072452945030706, 0.21532166378542283, 0.20712212618395798, 0.17170459033042285, 0.21802624647324687, 0.21899287924967126, 0.1818087468240489, 0.21305173905704256, 0.22339318055957624, 0.22017363829749415, 0.21574653452444414, 0.20815937228144332, 0.183400854073821, 0.14786476312965147, 0.18760784683550358, 0.26752268682307556, 0.16412053930771964, 0.22833322943722656, 0.22054928818227082, 0.11520083817770832, 0.102579661793048, 0.06896937483921606, 0.10133373535565882, 0.11308221170023658, 0.08833163689278101, 0.11975536634011574, 0.11536028377477958, 0.1106170962092956, 0.10756711221638071, 0.1414976907380524, 0.06684912389621078, 0.13325013660495988, 0.12637972681127863, 0.10171316698856592, 0.1318433519633152, 0.09147761375587071, 0.08908421550896961, 0.0002478623919655032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948067814378699, 0.08159325805729822, 0.08546047080695984, 0.06266014895197058, 0.08788697848300397, 0.06926308751463928, 0.12122567552697783, 0.0668089987516356, 0.07423977926088643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466441095750963, 0.016359683037202366, 0.004384674281487588, 0.0826015743663393, 0.05456476947350497, 0.06478729731182142, 0.07322517619846969, 0.05047570352505204, 0.059784100903597426, 0.35003657317258396, 0.37106426461728337, 0.34929794311925433, 0.3447047533580472, 0.32824435370441074, 0.31939221737868795, 0.3319614128448144, 0.323085695251326, 0.3110007860864169, 0.06400855965697116, 0.0803438106567359, 0.0786487292048409, 0.05629697654671095, 0.04986318019988978, 0.08794485533674068, 0.07698155231287362, 0.082460992597011, 0.07304018955818103, 0.1496953675771049, 0.17298505837725187, 0.14400176684647759, 0.16958956178286277, 0.18365694711757596, 0.15323333869079092, 0.16461603234866629, 0.1560093771322254, 0.15140858444974092, 0.19437702107601085, 0.22560969068999104, 0.18997734661138255, 0.2363926299728143, 0.20373260028900497, 0.2088523119316963, 0.18385672691172483, 0.1719943073252227, 0.19958343456346783, 0.1376015067257007, 0.13971969775247384, 0.15895516713637559, 0.16678037712068727, 0.17473636654657043, 0.1498021649121658, 0.16039209747718308, 0.16424014520868857, 0.13251181479909535, 0.18647418269414207, 0.1831602981712055, 0.15613762332142056, 0.1762308338703793, 0.15140461788584614, 0.1657762383731941, 0.20642812069136485, 0.1664755734867147, 0.15836321286892652, 0.17043448411202244, 0.16752400080677166, 0.17501043660416105, 0.16470385859169578, 0.15643583449150922, 0.1687714665588752, 0.20216948871024965, 0.16953905437835204, 0.1547853368670974, 0.3776178037012138, 0.5117555242016363, 0.3054654232557069, 0.49944545543819563, 0.19632763575556633, 0.3108057552179182, 0.41022211858766655, 0.2888603408980496, 0.36148083770911166, 0.18877915285907831, 0.353354553936004, 0.27190290098961856, 0.1734539958923519, 0.20876269110879808, 0.19700813064746314, 0.20389611531363894, 0.40198514555750475, 0.22079927819208822, 0.18529947386368106, 0.1887973975250189, 0.17857773123235798, 0.20316172593620818, 0.18191563975748248, 0.18313266216337765, 0.18767974395139642, 0.18352456225263336, 0.19511770166429976, 0.05598539962647098, 0.05075883174369333, 0.054714040625694516, 0.05874000100331289, 0.07337597598129741, 0.0578367633553436, 0.051347086570893374, 0.06997984097733356, 0.07188582842197866]}, "mutation_prompt": null}
{"id": "2fce906e-ed77-425f-9d7f-8602e57478da", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "90dc71a3-b35f-431f-8e81-464322f58c47", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "34d6d127-4895-4394-99c8-4cd35d6a9a06", "solution": "import numpy as np\n\nclass HybridBatAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        # Implementation of the algorithm here\n        return best_solution", "name": "HybridBatAlgorithm", "description": "Implementing a Hybrid Bat Algorithm with Differential Evolution and Line Refinement for Enhanced Black Box Optimization on BBOB test suite.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'best_solution' is not defined\").", "error": "NameError(\"name 'best_solution' is not defined\")", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {}, "mutation_prompt": null}
{"id": "8ffc6898-a89e-4b5e-bba4-534d98ede5af", "solution": "import numpy as np\n\nclass EnhancedFireworkOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def init_sparks():\n            return np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        \n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=(self.dim,))\n            v = np.random.normal(0, 1, size=(self.dim,))\n            step = u / (np.abs(v) ** (1 / beta))\n            return step_size * step\n        \n        best_solution = init_sparks()\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):\n                sparks = [init_sparks() for _ in range(10)]\n                for spark in sparks:\n                    step_size = np.random.uniform(0.1, 1.0)\n                    new_spark = spark + levy_flight(step_size)\n                    new_fitness = func(new_spark)\n                    if new_fitness < best_fitness:\n                        best_solution = new_spark\n                        best_fitness = new_fitness\n\n                # Differential Evolution\n                mutant_spark = best_solution + 0.5 * (sparks[0] - sparks[1]) + 0.5 * (sparks[2] - sparks[3])\n                mutant_fitness = func(mutant_spark)\n                if mutant_fitness < best_fitness:\n                    best_solution = mutant_spark\n                    best_fitness = mutant_fitness\n                    sparks[4] = mutant_spark\n\n                # Adaptive Mutation\n                step_size = np.random.uniform(0.1, 1.0)\n                new_spark = best_solution + levy_flight(step_size)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n                # Line Refinement with probability 0.35\n                if np.random.uniform() < 0.35:\n                    line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                    line_direction /= np.linalg.norm(line_direction)\n                    line_length = np.random.uniform(0.1, 1.0)\n                    line_point = best_solution + line_length * line_direction\n                    line_fitness = func(line_point)\n                    if line_fitness < best_fitness:\n                        best_solution = line_point\n                        best_fitness = line_fitness\n\n        return best_solution", "name": "EnhancedFireworkOptimizationRefined", "description": "Enhancing Enhanced Firework Optimization through differential evolution, adaptive mutation strategies, and line refinement for improved performance on BBOB test suite.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.3945157007083522, 0.35979869236830186, 0.36969908545049834, 0.39380409557794116, 0.39062791758227666, 0.3893082799310881, 0.35709438114707914, 0.35850351288202864, 0.43400494421541513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683058956749978, 0.07301034317608246, 0.08886103853726257, 0.07812355832413487, 0.09102888959693678, 0.07206238410945898, 0.06635213641410642, 0.08156594984654053, 0.09125793993424214, 0.09181270724520252, 0.07091006994770033, 0.08309708978281072, 0.08894130162117886, 0.053538186873675064, 0.08362196660565258, 0.0638883499553824, 0.07243575167304173, 0.070285682061342, 0.9815064168299689, 0.9837495574826849, 0.9967257262405533, 0.9934392544530247, 0.9777529607712482, 0.9782927061590463, 0.9855055822934268, 0.9875417701543031, 0.9815172375761695, 0.2298135754103462, 0.24971900044579942, 0.23272054167621048, 0.26441236674899404, 0.23532135359381, 0.21813458890539128, 0.22373098388863744, 0.18681519155668558, 0.23030588366062388, 0.16903382488482444, 0.2512753313374204, 0.1588074892949075, 0.1998666804483773, 0.30287408086657286, 0.2744303720711285, 0.18000315380566267, 0.25160654040269026, 0.23603292967946476, 0.17432223114258338, 0.07482425695090855, 0.11627829016182045, 0.12580761750843705, 0.07506082769365807, 0.11522743978922478, 0.12314727330606601, 0.14351882529321813, 0.17922298830530092, 0.11484381699422896, 0.11202166284838111, 0.1311393367712813, 0.13055114271563906, 0.12584314926709372, 0.1309871615214957, 0.15360930983213927, 0.13869563538310936, 0.13146010460605062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421719619201285, 0.05666931382564777, 0.0505183723675251, 0.06903350669032338, 0.06087557799383159, 0.05647350120127781, 0.06011040985612326, 0.06427061937313883, 0.07477098403122306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043686877602249874, 0.03441248225984239, 0.006355059154715459, 0.0839578718316154, 0.06143306356172251, 0.06252196147026612, 0.07834296949798913, 0.06560414742125265, 0.03715996114865994, 0.3714101192121456, 0.35602196756531757, 0.3648071458118055, 0.3588066977372266, 0.3378600988413043, 0.33728540427985687, 0.348992970129236, 0.3444690971775439, 0.34741386385031714, 0.08084578603218584, 0.10503423254714694, 0.10113226456558244, 0.06656799355914989, 0.07875661267159628, 0.06646455780510407, 0.06959691390108624, 0.0675159321623896, 0.07313861464531424, 0.23581096053753436, 0.24095715158042785, 0.14021934021625726, 0.1905083327153393, 0.18386133142023942, 0.16163729498377433, 0.1477933127927734, 0.17690366696730375, 0.21287043451898835, 0.17680304109516143, 0.22537422680376618, 0.2464945341744864, 0.23562982514730635, 0.23393954939190187, 0.20534589331219, 0.1932570035492598, 0.22096851650467564, 0.21834919131358144, 0.19549095273325168, 0.17001987606148194, 0.14879435998914725, 0.17528441858826338, 0.19701056694311125, 0.1952725451598658, 0.1495916985213115, 0.18012031403887707, 0.17179269420966725, 0.17327584068137714, 0.19777026943174436, 0.18891814914121352, 0.16272757298471918, 0.16510942968824216, 0.202138044604392, 0.17457302135574337, 0.16287502125901088, 0.18238074133071613, 0.16182964197503247, 0.18871426300884875, 0.1627268667237457, 0.1608789373673617, 0.16976248426871443, 0.16960520544250246, 0.17819576599319753, 0.1775782601580448, 0.18993039600122796, 0.16957043291295903, 0.17551803791902765, 0.1568709068871127, 0.20196718838547634, 0.24000116701077456, 0.4916838571011517, 0.42903247450235926, 0.44310009819743634, 0.15437847305615238, 0.3285757377310541, 0.27912168096453527, 0.20268717095088795, 0.28383635450264744, 0.3876638146524113, 0.3656795606135135, 0.1691006961588568, 0.15962038406712997, 0.24788040635622177, 0.18301306316410637, 0.1804274558497434, 0.17331015846516207, 0.19314347040419277, 0.2026331683631033, 0.1917262779872373, 0.19083316547866414, 0.18603889734102486, 0.19441772077810104, 0.07074826280292201, 0.06563826650339921, 0.07627416546143628, 0.052500273224905136, 0.07246990021868116, 0.07575996598292245, 0.07365538712827291, 0.0667008564805559, 0.06324250390115926]}, "mutation_prompt": null}
{"id": "6709b688-7d39-4513-887d-ffac67414af9", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 70, "fitness": 0.19195195334478654, "feedback": "The algorithm QuantumInspiredEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "1c509217-0585-4487-98ef-adb475a7b4f5", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "8748c200-fd26-4f76-b350-001f7c0200d6", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "1b703075-8010-415a-8d81-e75e3d3d7607", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "acb8ac25-b16b-4728-ae66-95870dbe9233", "solution": "import numpy as np\n\nclass LineRefinedQuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "LineRefinedQuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Line-Refined Quantum-Inspired Evolutionary Algorithm for Black Box Optimization on BBOB test suite with enhanced local search capabilities.", "configspace": "", "generation": 73, "fitness": 0.19195195334478654, "feedback": "The algorithm LineRefinedQuantumInspiredEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "2dca4d6b-8b25-4aad-bac5-cc07ef015bde", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "926588c5-8b62-4483-a73a-4d234ceb72e4", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "34b57828-50d2-428e-8b1b-9a1542ccb688", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "f6d2374c-698b-463f-9b85-383eaf98cae1", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "8d455625-9e59-4139-87b6-c91c907beefa", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "ad0cee62-8a39-44c2-a13a-e71823af2877", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "b48b459c-2e5d-431c-938b-1fdb8877a359", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "4dca1e17-02d3-4a01-8d7e-1b5250f1e2ba", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "4095ad08-969a-4d8b-b466-8a73b2e47f5c", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "1fb8ac77-2fb8-4cbc-ba7a-742d584f99a2", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "d13eae64-4f87-4d67-a219-2773748cec10", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "66eef760-0705-4bcd-9a19-8cd4c040f551", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "9b4a639c-8d48-4c43-ac36-6394eb533f2f", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "dc0c8958-b245-45fe-a321-d772c8762a7e", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "0ea38bc2-2e8e-4d41-affe-37f0bc5d15e1", "solution": "import numpy as np\n\nclass LineRefinedQuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "LineRefinedQuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Line-Refined Quantum-Inspired Evolutionary Algorithm with Adaptive Quantum Phase for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 88, "fitness": 0.19195195334478654, "feedback": "The algorithm LineRefinedQuantumInspiredEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "2b28265b-97a1-4e1d-88d3-b6395460d9ce", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "f8662031-ae99-4095-b6cf-361d88b1f77f", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "550e2d15-b108-4898-85f5-393025a3578b", "solution": "import numpy as np\n\nclass LineRefinedQuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "LineRefinedQuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Line-Refined Quantum-Inspired Evolutionary Algorithm with Adaptive Strategies for Enhanced Optimization on BBOB test suite", "configspace": "", "generation": 91, "fitness": 0.19195195334478654, "feedback": "The algorithm LineRefinedQuantumInspiredEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "fe571bbb-7895-4dfa-9fdb-6d3e4e343119", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "08f5b925-87de-42cb-9f0d-1648b3e66f3c", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(10, self.dim))\n        intensity = np.zeros(10)\n        best_solution = population[0]\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for i in range(10):\n                for j in range(10):\n                    if func(population[j]) < func(population[i]):\n                        intensity[i] += np.exp(-0.1 * np.linalg.norm(population[i] - population[j]))\n\n                population[i] += intensity[i] * self.levy_flight()\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(best_solution)\n\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "FireflyAlgorithm", "description": "Introducing Firefly Algorithm with Levy Flight for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 93, "fitness": 0.046099788225308864, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.11521108181906348, 0.08681608058717105, 0.09233297589273648, 0.04989250632704967, 0.060352951216939954, 0.047383010212989074, 0.0632121419866164, 0.06678747411470232, 0.08066536679355196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009960676978887917, 0.017516967782385318, 9.999999999998899e-05, 0.02117700710485315, 0.003703786929937669, 0.005406211583798393, 0.027710448548007305, 0.003801522360852294, 0.004407102980747202, 0.007824850582639375, 9.999999999998899e-05, 9.999999999998899e-05, 0.02529390054488978, 9.999999999998899e-05, 9.999999999998899e-05, 0.014291451064242011, 0.0004939082589254795, 9.999999999998899e-05, 0.06193159082074595, 0.052754518423607455, 0.10290809957327651, 0.06283995181589164, 0.0596476484136077, 0.043266064984920916, 0.06586581000088354, 0.07081192408490855, 0.04072141833081022, 0.030160790450954877, 9.999999999998899e-05, 9.999999999998899e-05, 0.018172779399439953, 0.014833888827544661, 0.006411846484378092, 9.999999999998899e-05, 0.030926229012747886, 9.999999999998899e-05, 0.15450226235358622, 0.04938159015089172, 0.01688296798559752, 0.04543957662862408, 0.009203932829865313, 0.004838425307540861, 0.0401989927303692, 0.019280243416125997, 0.14146158386755525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009842463711946747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016981426812196165, 0.00683805950702443, 0.03086383822099792, 0.012263674968861382, 9.999999999998899e-05, 9.999999999998899e-05, 0.08236286516696778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1091072249404389, 0.12734002979764458, 0.16152581203099747, 0.11246445324841403, 0.10467686931873266, 0.10115868971346131, 0.1553933085035787, 0.11940772540285127, 0.12323747841086374, 0.012145588799111318, 9.999999999998899e-05, 9.999999999998899e-05, 0.04607371287255613, 0.011901089957325195, 0.040247991496780156, 0.015078322444380121, 0.012780788731405313, 0.04739571758764982, 0.08823293892237183, 0.10446113703838367, 0.09161736608193116, 0.1387594917405075, 0.08548268171883788, 0.07549379473403262, 0.08416005375897528, 0.07754051806981732, 0.1055213374920877, 0.11853464035637573, 0.13360935549314568, 0.10453212187168515, 0.13528180897333364, 0.10364085458955374, 0.11706568772079262, 0.12828902450976132, 0.11746729495341102, 0.09003194065474729, 0.07241513612533002, 0.05104024311549471, 0.042125712705654905, 0.0777682432817588, 0.04877749047701929, 0.049960214254466284, 0.07381417327459439, 0.04520562152897023, 0.03880793313346098, 0.14165225836780004, 0.07407104197823067, 0.1189762966266793, 0.14081514788735128, 0.09575935006994185, 0.1220297413653989, 0.1327945950562187, 0.10684878123961195, 0.1261676266693832, 0.011398641060102244, 9.999999999998899e-05, 0.06824491768068253, 0.0034752768093707642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10355721807950868, 0.06241919565062637, 0.07143399499750991, 0.09341130384976692, 0.16398342294138601, 0.07007584896088359, 0.12872961805975014, 0.07716300568238221, 0.08200407708591628, 0.08793261963356491, 0.07378775517275771, 0.036378981489490814, 0.06722263907820636, 0.05087567417771621, 0.059667648319136624, 0.05911263716941939, 0.057495552457790144, 0.052284259191964666, 0.13989858506572894, 0.16766344453211002, 0.16648361631610986, 0.15690110211624997, 0.15290116217082994, 0.15114078229699446, 0.13722276036219916, 0.154078658059147, 0.14685088246024502, 0.0313485298788877, 0.030125158417241282, 0.03137849114591007, 0.021772985175946835, 0.0237779759144654, 0.012278187446282951, 0.022721636615336105, 0.027270892930753465, 0.03106277116818279]}, "mutation_prompt": null}
{"id": "50b24f41-ccba-4503-8344-a879c732e9af", "solution": "import numpy as np\n\nclass QuantumInspiredCooperativeCoevolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredCooperativeCoevolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Cooperative Co-evolutionary Algorithm with Adaptive Line Refinement Strategy for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 94, "fitness": 0.19195195334478654, "feedback": "The algorithm QuantumInspiredCooperativeCoevolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "b4dfa733-22ef-4589-abb3-16b4ca9f7995", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "0db4c655-f411-4f6b-bd76-528c7b5f2003", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "6405cac1-343b-4910-bd9d-85095e04499e", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "c56a0304-9d50-4928-aa4a-2cb35b105ab7", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
{"id": "afca1e9b-b4eb-4d1b-9e34-69af16238e8f", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def entangle_solutions(spark_a, spark_b):\n            return 0.5 * (spark_a + spark_b) + np.random.uniform(-0.5, 0.5, size=(self.dim,))\n\n        best_solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            sparks = [np.random.uniform(-5.0, 5.0, size=(self.dim,)) for _ in range(5)]\n            for spark in sparks:\n                new_spark = entangle_solutions(best_solution, spark)\n                new_fitness = func(new_spark)\n                if new_fitness < best_fitness:\n                    best_solution = new_spark\n                    best_fitness = new_fitness\n\n            # Quantum Mutation\n            mutation_spark = entangle_solutions(best_solution, sparks[0])\n            mutation_fitness = func(mutation_spark)\n            if mutation_fitness < best_fitness:\n                best_solution = mutation_spark\n                best_fitness = mutation_fitness\n\n            # Adaptive Quantum Phase\n            phase_shift = np.random.uniform(-np.pi, np.pi, size=(self.dim,))\n            phase_spark = best_solution * np.exp(1j * phase_shift)\n            phase_fitness = func(np.real(phase_spark))\n            if phase_fitness < best_fitness:\n                best_solution = np.real(phase_spark)\n                best_fitness = phase_fitness\n\n            # Line Refinement with probability 0.35\n            if np.random.uniform() < 0.35:\n                line_direction = np.random.uniform(-1, 1, size=(self.dim,))\n                line_direction /= np.linalg.norm(line_direction)\n                line_length = np.random.uniform(0.1, 1.0)\n                line_point = best_solution + line_length * line_direction\n                line_fitness = func(line_point)\n                if line_fitness < best_fitness:\n                    best_solution = line_point\n                    best_fitness = line_fitness\n\n        return best_solution", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing Quantum-Inspired Evolutionary Algorithm with Entangled Solutions for Enhanced Optimization on BBOB test suite.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6709b688-7d39-4513-887d-ffac67414af9", "metadata": {"aucs": [0.38884382465787637, 0.401488797275945, 0.3863027216386803, 0.3753191231750399, 0.3703637400789179, 0.36213313561483396, 0.3798522065985579, 0.36507315893489645, 0.3892635182928328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002464732214615961, 9.999999999998899e-05, 0.024418647552374773, 9.999999999998899e-05, 0.08313524170379538, 0.08493830420475312, 0.099682462969647, 0.07729155479562799, 0.08391919649793012, 0.07660492074094605, 0.07785050422345652, 0.07019213717477246, 0.08382978061402269, 0.07462661641962498, 0.10262564826878073, 0.06672171520922343, 0.07268377915054114, 0.07182408033404952, 0.11382713170483205, 0.0771022900149495, 0.08757258967667536, 0.07188151525001962, 0.773636469913124, 0.7899383585343334, 0.8389759275539215, 0.8667599467307208, 0.8408741405455769, 0.855922598230698, 0.8685807923402256, 0.8618685038263048, 0.7862520790764114, 0.24002121113208963, 0.2520572747948244, 0.185433755779853, 0.20452142385101757, 0.21294125352020898, 0.21220367828616615, 0.2703822041655015, 0.22746653990395627, 0.23518115218551805, 0.23172811852983544, 0.2665163309900448, 0.20452888803988045, 0.30956849036078105, 0.19755826429593593, 0.31521567257040506, 0.19284127255762706, 0.2280238030877485, 0.22376043532355772, 0.13165168570039043, 0.09865227836210155, 0.09857790333202043, 0.15497230049218047, 0.09670471295733696, 0.12498756706844738, 0.1503879411446405, 0.11244894781411363, 0.11478732014512094, 0.16543542265377587, 0.15975654505525183, 0.17984436807745718, 0.15228303210637006, 0.17231336506457196, 0.15373019903961282, 0.1625501203068208, 0.1696904521015693, 0.13903027393960943, 9.999999999998899e-05, 0.01020044444519319, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010623179013393713, 9.999999999998899e-05, 9.999999999998899e-05, 0.005230262177746803, 9.999999999998899e-05, 0.1187620456978139, 0.09169840910519256, 0.12657485978135086, 0.15550398457935166, 0.05908372472229351, 0.08432911619104966, 0.10776286375341915, 0.12521603141213067, 0.13240821400868374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07554175825539389, 0.06325502276516837, 0.08127059712171814, 0.07638002579461867, 0.053874198052960676, 0.082809033896166, 0.05162828935038544, 0.05752512012846822, 0.06774195948223038, 0.3315002736585474, 0.3523970278539228, 0.3314589232652596, 0.3539354028155369, 0.33270414906880363, 0.33663772018873805, 0.3479741678167577, 0.3778365463548071, 0.37275197582127584, 0.07863480783203414, 0.08116994683400847, 0.08350557951096138, 0.1215343280439185, 0.10629864350285367, 0.0952314459762863, 0.06840737896586246, 0.09026901359786621, 0.07741990099839036, 0.23071285778549944, 0.17438003554002657, 0.18799103178162824, 0.1876932248066514, 0.15197667352512523, 0.19987227760907522, 0.1428967294748189, 0.16517767638424707, 0.18809478212685127, 0.2405785981142472, 0.24331629198237759, 0.2741186428409085, 0.25721021994146653, 0.23552012762515073, 0.28971524389186876, 0.20104776019696136, 0.2540032023051133, 0.22002345082318087, 0.17870510493870884, 0.13843386391208534, 0.20966032580346572, 0.16490994832482941, 0.22910057467074085, 0.18586301290807727, 0.15375806579968865, 0.1744740638853769, 0.1331411169679273, 0.19914593244150314, 0.24853772676060615, 0.2451749192239543, 0.19405255847816905, 0.1999612157380789, 0.21264063715800574, 0.2101744751375424, 0.2093781941514249, 0.20263995725210882, 0.16921204987185412, 0.17561532824054316, 0.19545387770299072, 0.17636184956289924, 0.19217497579374254, 0.18128561027403234, 0.18166330403689568, 0.1747765124206182, 0.17530187732661362, 0.1863200823502814, 0.18468212955731722, 0.18555993931164394, 0.4637807707184788, 0.4961488695005657, 0.14599052123475864, 0.44603661528192506, 0.5421272755040034, 0.1613032669866601, 0.3933432991604946, 0.4934170628613238, 0.2915149147199507, 0.19556580883539632, 0.20884871746054412, 0.38288151012086435, 0.30667312959254434, 0.1675585728860035, 0.16663349519896442, 0.17367758822285773, 0.18992129877910224, 0.19394039865631907, 0.18590102098826655, 0.19657328518940953, 0.17912692762253368, 0.1865797551096856, 0.1819555191938933, 0.1885051593704975, 0.07217062118922024, 0.0748061580769539, 0.06837105829333467, 0.08206960529064322, 0.06764859113747845, 0.10271076084570618, 0.07372314103017197, 0.07518549758496773, 0.07232204186907532]}, "mutation_prompt": null}
